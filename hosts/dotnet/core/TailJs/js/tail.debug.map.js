(()=>{"use strict";var e,t,r,n,a,i,o,s,l,u,c,f,d,v,p,h,g,m,y,b,w,k,S,T,E,I,A,x,N,O,C,$,j,M="@info",_="@consent",U="_tail:",F=U+"state",q=U+"push",P=(e,t=e=>Error(e))=>{throw ef(e=ts(e))?t(e):e},R=(e,t,r=-1)=>{if(e===t||(e??t)==null)return!0;if(eg(e)&&eg(t)&&e.length===t.length){var n=0;for(var a in e){if(e[a]!==t[a]&&!R(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},z=(e,t,...r)=>e===t||r.length>0&&r.some(t=>z(e,t)),D=(e,t)=>null!=e?e:P(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),W=(e,t=!0,r)=>{try{return e()}catch(e){return eS(t)?ep(e=t(e))?P(e):e:ea(t)?console.error(t?P(e):e):t}finally{r?.()}},B=e=>{var t,r=()=>r.initialized||t?t:(t=ts(e)).then?t=t.then(e=>(r.initialized=!0,r.resolved=t=e)):(r.initialized=!0,r.resolved=t);return r},V=e=>{var t={initialized:!0,then:J(()=>(t.initialized=!0,ts(e)))};return t},J=e=>{var t=B(e);return(e,r)=>L(t,[e,r])},L=async(e,t=!0,r)=>{try{var n=await ts(e);return ev(t)?t[0]?.(n):n}catch(e){if(ea(t)){if(t)throw e;console.error(e)}else{if(ev(t)){if(!t[1])throw e;return t[1](e)}var a=await t?.(e);if(a instanceof Error)throw a;return a}}finally{await r?.()}},K=e=>e,G=void 0,H=Number.MAX_SAFE_INTEGER,X=!1,Y=!0,Z=()=>{},Q=e=>e,ee=e=>null!=e,et=Symbol.iterator,er=(e,t)=>(r,n=!0)=>e(r)?r:t&&n&&null!=r&&null!=(r=t(r))?r:G,en=(e,t)=>eS(t)?e!==G?t(e):G:e?.[t]!==G?e:G,ea=e=>"boolean"==typeof e,ei=er(ea,e=>0!=e&&(1==e||"false"!==e&&("true"===e||G))),eo=e=>!!e,es=e=>e===Y,el=e=>e!==X,eu=Number.isSafeInteger,ec=e=>"number"==typeof e,ef=e=>"string"==typeof e,ed=er(ef,e=>e?.toString()),ev=Array.isArray,ep=e=>e instanceof Error,eh=(e,t=!1)=>null==e?G:!t&&ev(e)?e:eT(e)?[...e]:[e],eg=e=>null!==e&&"object"==typeof e,em=Object.prototype,ey=Object.getPrototypeOf,eb=e=>null!=e&&ey(e)===em,ew=(e,t)=>"function"==typeof e?.[t],ek=e=>"symbol"==typeof e,eS=e=>"function"==typeof e,eT=(e,t=!1)=>!!(e?.[et]&&("object"==typeof e||t)),eE=e=>e instanceof Map,eI=e=>e instanceof Set,eA=(e,t)=>null==e?G:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,ex=!1,eN=e=>(ex=!0,e),eO=e=>null==e?G:eS(e)?e:t=>t[e],eC=(e,t,r)=>(t??r)!==G?(e=eO(e),t??=0,r??=H,(n,a)=>t--?G:r--?e?e(n,a):n:r):e,e$=e=>e?.filter(ee),ej=(e,t,r,n)=>null==e?[]:!t&&ev(e)?e$(e):e[et]?function*(e,t){if(null!=e){if(t){t=eO(t);var r=0;for(var n of e)if(null!=(n=t(n,r++))&&(yield n),ex){ex=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,r===G?t:eC(t,r,n)):eg(e)?function*(e,t){t=eO(t);var r=0;for(var n in e){var a=[n,e[n]];if(t&&(a=t(a,r++)),null!=a&&(yield a),ex){ex=!1;break}}}(e,eC(t,r,n)):ej(eS(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eM=(e,t)=>t&&!ev(e)?[...e]:e,e_=(e,t,r,n)=>ej(e,t,r,n),eU=(e,t,r=1,n=!1,a,i)=>(function* e(t,r,n,a){if(null!=t){if(t[et]||n&&eg(t))for(var i of a?ej(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}})(ej(e,t,a,i),r+1,n,!1),eF=(e,t,r,n)=>{if(t=eO(t),ev(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!ex;r++){var o=e[r];(t?o=t(o,a++):o)!=null&&i.push(o)}return ex=!1,i}return null!=e?eh(e_(e,t,r,n)):G},eq=(e,t,r,n)=>null!=e?new Set([...e_(e,t,r,n)]):G,eP=(e,t,r=1,n=!1,a,i)=>eh(eU(e,t,r,n,a,i)),eR=(...e)=>{var t;return eJ(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...eh(e))),t},ez=(e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,ex)){ex=!1;break}return a},eD=(e,t)=>{var r,n=0;for(var a of e)if(null!=a&&(r=t(a,n++)??r,ex)){ex=!1;break}return r},eW=(e,t)=>{var r,n=0;for(var a in e)if(r=t([a,e[a]],n++)??r,ex){ex=!1;break}return r},eB=(e,t,...r)=>null==e?G:eT(e)?eF(e,e=>t(e,...r)):t(e,...r),eV=(e,t,r,n)=>{var a;if(null!=e){if(ev(e))return ez(e,t,r,n);if(r===G){if(e[et])return eD(e,t);if("object"==typeof e)return eW(e,t)}for(var i of ej(e,t,r,n))null!=i&&(a=i);return a}},eJ=eV,eL=async(e,t,r,n)=>{var a;if(null==e)return G;for(var i of e_(e,t,r,n))if(null!=(i=await i)&&(a=i),ex){ex=!1;break}return a},eK=Object.fromEntries,eG=(e,t,r)=>{if(null==e)return G;if(ea(t)||r){var n={};return eJ(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eJ(e,t?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eK(eF(e,t?(e,r)=>en(t(e,r),1):e=>en(e,1)))},eH=(e,t,r,n,a)=>{var i=()=>eS(r)?r():r;return eV(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()},eX=(e,t=e=>null!=e,r=ev(e),n,a)=>eM(ej(e,(e,r)=>t(e,r)?e:G,n,a),r),eY=(e,t,r,n)=>{var a;if(null==e)return G;if(t)e=eX(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[et])return Object.keys(e).length}return a=0,eV(e,()=>++a)??0},eZ=(e,...t)=>null==e?G:ec(e)?Math.max(e,...t):eH(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||ec(a)&&a>e?a:e,G,t[2],t[3]),eQ=(e,t,r)=>eF(e,eb(e)?e=>e[1]:e=>e,t,r),e0=e=>!ev(e)&&eT(e)?eF(e,eE(e)?e=>e:eI(e)?e=>[e,!0]:(e,t)=>[t,e]):eg(e)?Object.entries(e):G,e1=(e,t,r,n)=>null==e?G:(t=eO(t),eV(e,(e,r)=>!t||(e=t(e,r))?eN(e):G,r,n)),e2=(e,t,r,n)=>null==e?G:ev(e)||ef(e)?e[e.length-1]:eV(e,(e,r)=>!t||t(e,r)?e:G,r,n),e4=(e,t,r,n)=>null==e?G:eb(e)&&!t?Object.keys(e).length>0:e.some?.(t??eo)??eV(e,t?(e,r)=>!!t(e,r)&&eN(!0):()=>eN(!0),r,n)??!1,e6=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),e5=(e,t,r)=>(e.constructor===Object||ev(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),e3=(e,t,r)=>{if(e){if(e.constructor===Object&&null==r)return e[t];var n=e.get?e.get(t):e.has?e.has(t):e[t];return void 0===n&&null!=r&&null!=(n=eS(r)?r():r)&&e5(e,t,n),n}},e8=(e,...t)=>(eJ(t,t=>eJ(t,([t,r])=>{null!=r&&(eb(e[t])&&eb(r)?e8(e[t],r):e[t]=r)})),e),e9=e=>(t,r,n,a)=>{if(t)return void 0!=n?e(t,r,n,a):(eJ(r,r=>ev(r)?e(t,r[0],r[1]):eJ(r,([r,n])=>e(t,r,n))),t)},e7=e9(e5),te=e9((e,t,r)=>e5(e,t,eS(r)?r(e3(e,t)):r)),tt=(e,t)=>e instanceof Set||e instanceof WeakSet?!e.has(t)&&(e.add(t),!0):e3(e,t)!==e7(e,t,!0),tr=(e,t)=>{if((e??t)!=null){var r=e3(e,t);return ew(e,"delete")?e.delete(t):delete e[t],r}},tn=(e,...t)=>{var r=[],n=!1,a=(e,i,o,s)=>{if(e){var l=t[i];i===t.length-1?ev(l)?(n=!0,l.forEach(t=>r.push(tr(e,t)))):r.push(tr(e,l)):(ev(l)?(n=!0,l.forEach(t=>a(e3(e,t),i+1,e,t))):a(e3(e,l),i+1,e,l),!eY(e)&&o&&ta(o,s))}};return a(e,0),n?r:r[0]},ta=(e,t)=>{if(e)return ev(t)?(ev(e)&&e.length>1?t.sort((e,t)=>t-e):t).map(t=>ta(e,t)):ev(e)?t<e.length?e.splice(t,1)[0]:void 0:tr(e,t)},ti=(e,...t)=>{var r=(t,n)=>{var a;if(t){if(ev(t)){if(eb(t[0])){t.splice(1).forEach(e=>r(e,t[0]));return}a=t}else a=eF(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...eb(r)&&("get"in r||"value"in r)?r:eS(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e},to=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>eg(r)?ev(r)?r.map(t=>ev(t)?1===t.length?[t[0],e[t[0]]]:to(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:to(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},ts=e=>eS(e)?e():e,tl=(e,t=-1)=>ev(e)?t?e.map(e=>tl(e,t-1)):[...e]:eb(e)?t?eG(e,([e,r])=>[e,tl(r,t-1)]):{...e}:eI(e)?new Set(t?eF(e,e=>tl(e,t-1)):e):eE(e)?new Map(t?eF(e,e=>[e[0],tl(e[1],t-1)]):e):e,tu=(e,...t)=>e?.push(...t),tc=(e,...t)=>e?.unshift(...t),tf=(e,t)=>{if(e){if(!eb(t))return[e,e];var r,n,a,i={};if(eb(e))return eJ(e,([e,o])=>{if(o!==t[e]){if(eb(r=o)){if(!(o=tf(o,t[e])))return;[o,r]=o}else ec(o)&&ec(n)&&(o=(r=o)-n);i[e]=o,(a??=tl(t))[e]=r}}),a?[i,a]:void 0}},td="undefined"!=typeof performance?(e=Y)=>e?Math.trunc(td(X)):performance.timeOrigin+performance.now():Date.now,tv=(e=!0,t=()=>td())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},tp=(e=0)=>{var t,r,n=(a,i=e)=>{if(void 0===a)return!!r;clearTimeout(t),ea(a)?a&&(i<0?el:es)(r?.())?n(r):r=void 0:(r=a,t=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},th=(e,t=0)=>{var r=eS(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{},raf:l}=r;t=r.frequency??0;var u=0,c=tw(!0).resolve(),f=tv(!a),d=f(),v=async e=>{if(!u||!n&&c.pending&&!0!==e)return!1;if(m.busy=!0,!0!==e)for(;c.pending;)await c;return e||c.reset(),(await L(()=>s(f(),-d+(d=f())),!1,()=>!e&&c.resolve())===!1||t<=0||o)&&g(!1),m.busy=!1,!0},p=()=>u=setTimeout(()=>l?requestAnimationFrame(h):h(),t<0?-t:t),h=()=>{m.active&&v(),m.active&&p()},g=(e,t=!e)=>(f(e,t),clearTimeout(u),m.active=!!(u=e?p():0),m),m={active:!1,busy:!1,restart:(e,r)=>(t=e??t,s=r??s,g(!0,!0)),toggle:(e,t)=>e!==m.active?e?t?(g(!0),m.trigger(),m):g(!0):g(!1):m,trigger:async e=>await v(e)&&(g(m.active),!0)};return m.toggle(!a,i)};class tg{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tm,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class tm{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[t?"error":"value"]=r===G||r,e(r),this})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var ty=(e,t=0)=>t>0?setTimeout(e,t):window.queueMicrotask(e),tb=(e,t)=>null==e||isFinite(e)?!e||e<=0?ts(t):new Promise(r=>setTimeout(async()=>r(await ts(t)),e)):P(`Invalid delay ${e}.`),tw=e=>e?new tg:new tm,tk=(...e)=>Promise.race(e.map(e=>eS(e)?e():e)),tS=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},tT=()=>{var e,t=new Set;return[(r,n)=>{var a=tS(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tE=(e,t=["and",", "])=>e?1===(e=eF(e)).length?e[0]:ev(t)?[e.slice(0,-1).join(t[1]??", ")," ",t[0]," ",e[e.length-1]].join(""):e.join(t??", "):G,tI=(e,t,r)=>null==e?G:ev(t)?null==(t=t[0])?G:t+" "+tI(e,t,r):null==t?G:1===t?e:r??e+"s",tA=!0,tx=(e,t,r)=>r?(tA&&tu(r,"\x1b[",t,"m"),ev(e)?tu(r,...e):tu(r,e),tA&&tu(r,"\x1b[m"),r):tx(e,t,[]).join(""),tN=(e,t="'")=>null==e?G:t+e+t,tO=(e,t)=>e&&(e.length>t?e.slice(0,-1)+"…":e),tC=(e,t,r)=>null==e?G:eS(t)?tE(eF(ef(e)?[e]:e,t),r??""):ef(e)?e:tE(eF(e,e=>!1===e?G:e),t??""),t$=(e,t=[0,.25,.5,.75,1])=>{for(var r,n,a=/[\p{L}\p{N}][\p{L}\p{N}'’]*|([.!?]+)/gu,i=0,o=0,s=0,l=0,u=!1;r=a.exec(e);)r[1]?(u&&++l,u=!1):(u=!0,i+=r[0].length,r[0].length>6&&++s,++o);u&&++l,a=/[\p{L}\p{N}]|([^\p{L}\p{N}]+)/gu;var c=t.map(e=>e*i|0),f=[],d=0,v=0,p=!1;do if(r=a.exec(e),r?.[1])p&&++v;else{d=r?.index;for(var h=!1,g=0;g<c.length;g++)c[g]--||(f[g]={offset:n??d,wordsBefore:v,readTime:eA(v/238*6e4)},h=!0);(p=!h)||(v=0),n=d+1}while(r);return{text:e,length:e.length,characters:i,words:o,sentences:l,lix:eA(o/l+100*s/o),readTime:eA(o/238*6e4),boundaries:f}},tj=e=>(e=Math.log2(e))===(0|e),tM=(e,t,r,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,t])=>ef(e)&&ec(t)).map(([e,t])=>[e.toLowerCase(),t])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,t)=>e|t,0),f=t?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,t])=>[t,e])),v=(e,r)=>eu(e)?!t&&r?null!=d[e]?e:G:Number.isSafeInteger(e)?e:G:ef(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),r):G,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,G):(e??0)|r,(p=!1,G)):v(e),(e,t)=>null==(e=h(e,!1))?G:t&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,t])=>t&&e&t&&tj(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:G],m=(e,t)=>null==e?G:null==(e=h(o=e,t))?P(TypeError(`${JSON.stringify(o)} is not a valid ${r} value.`)):e,y=l.filter(([,e])=>!n||(n&e)===e&&tj(e));return ti(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} ${tE(eF(eh(e),e=>tN(e)),[t])}`},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}])},t_=(...e)=>{var t=e0(eG(e,!0)),r=e=>(eg(e)&&(ev(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=G;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tU=Symbol(),tF=(e,t=["|",";",","],r=!0)=>{if(!e)return G;var n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&t?.length&&e1(t,(e,t,r=n[1].split(e))=>r.length>1?r:G)||(n[1]?[n[1]]:[]),n},tq=(e,t=!0,r)=>null==e?G:tW(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:r,urn:r?!n:!n&&G,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):G,path:c,query:!1===t?f:tP(f,t),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":G),v}),tP=(e,t,r=!0)=>tR(e,"&",t,r),tR=(e,t,r,n=!0)=>{var a=[],i=null==e?G:eG(e?.match(/(?:^.*?\?|^)([^#]*)/)?.[1]?.split(t),(e,t,[i,o,s]=tF(e,!1===r?[]:!0===r?G:r,n)??[],l)=>(l=null!=(i=i?.replace(/\[\]$/,""))?!1!==r?[i,s.length>1?s:o]:[i,o]:G,a.push(l),l),(e,t)=>e?!1!==r?eR(e,t):(e?e+",":"")+t:t);return i&&(i[tU]=a),i},tz=(e,t)=>t&&null!=e?t.test(e):G,tD=(e,t,r)=>tW(e,t,r,!0),tW=(r,n,a,i=!1)=>(r??n)==null?G:a?(e=G,i?(t=[],tW(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),tB=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tV=/\z./g,tJ=(e,t)=>(t=tC(eq(eX(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tV,tL={},tK=e=>e instanceof RegExp,tG=(e,t=[","," "])=>tK(e)?e:ev(e)?tJ(eF(e,e=>tG(e,t)?.source)):ea(e)?e?/./g:tV:ef(e)?tL[e]??=tW(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tJ(eF(tH(n,RegExp(`(?<!(?<!\\\\)\\\\)[${tC(t,tB)}]`)),e=>e&&`^${tC(tH(e,/(?<!(?<!\\)\\)\*/),e=>tB(tX(e,/\\(.)/g,"$1")),".*")}$`))):G,tH=(e,t)=>e?.split(t)??e,tX=(e,t,r)=>e?.replace(t,r)??e,tY=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return e7(r,{push(n,a){for(var i,o=[n,a],s=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,l=0;l<r.length;l++){var u=r[l];if(0>e(o[1],u[0]))return s(r.splice(l,0,o));if(0>=e(o[0],u[1])){if(0>e(o[0],u[0])&&(i=u[0]=o[0]),e(o[1],u[1])>0&&(i=u[1]=o[1]),!(r[l+1]?.[0]<u[1]))return s(null!=i);i=o=r.splice(l--,1)[0]}}return s(o&&(r[r.length]=o))},width:0})},tZ=5e3,tQ=()=>()=>P("Not initialized."),t0=window,t1=document,t2=t1.body,t4=(e,t)=>!!e?.matches(t);((e=!0)=>tA=e)(!!t0.chrome);var t6=H,t5=(e,t,r=(e,t)=>t>=t6)=>{for(var n,a=0,i=X;e?.nodeType===1&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==Y&&null!=n),Y),a-1)!==X&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==t1&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},t3=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||ei(e);case"n":return parseFloat(e);case"j":return W(()=>JSON.parse(e),Z);case"h":return W(()=>nh(e),Z);case"e":return W(()=>nm?.(e),Z);default:return ev(t)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:t3(e,t[0])):void 0}},t8=(e,t,r)=>t3(e?.getAttribute(t),r),t9=(e,t,r)=>t5(e,(e,n)=>n(t8(e,t,r))),t7=(e,t)=>t8(e,t)?.trim()?.toLowerCase(),re=e=>e?.getAttributeNames(),rt=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,rr=e=>null!=e?e.tagName:null,rn=()=>({x:(r=ra(X)).x/(t2.offsetWidth-window.innerWidth)||0,y:r.y/(t2.offsetHeight-window.innerHeight)||0}),ra=e=>({x:eA(scrollX,e),y:eA(scrollY,e)}),ri=(e,t)=>tX(e,/#.*$/,"")===tX(t,/#.*$/,""),ro=(e,t,r=Y)=>(n=rs(e,t))&&K({xpx:n.x,ypx:n.y,x:eA(n.x/t2.offsetWidth,4),y:eA(n.y/t2.offsetHeight,4),pageFolds:r?n.y/window.innerHeight:void 0}),rs=(e,t)=>t?.pointerType&&t?.pageY!=null?{x:t.pageX,y:t.pageY}:e?({x:a,y:i}=rl(e),{x:a,y:i}):void 0,rl=e=>e?(o=e.getBoundingClientRect(),r=ra(X),{x:eA(o.left+r.x),y:eA(o.top+r.y),width:eA(o.width),height:eA(o.height)}):void 0,ru=(e,t,r,n={capture:!0,passive:!0})=>(t=eh(t),tS(r,r=>eJ(t,t=>e.addEventListener(t,r,n)),r=>eJ(t,t=>e.removeEventListener(t,r,n)))),rc=e=>{var{host:t,scheme:r,port:n}=tq(e,!1);return{host:t+(n?":"+n:""),scheme:r}},rf=()=>({...r=ra(Y),width:window.innerWidth,height:window.innerHeight,totalWidth:t2.offsetWidth,totalHeight:t2.offsetHeight});(I=s||(s={}))[I.Anonymous=0]="Anonymous",I[I.Indirect=1]="Indirect",I[I.Direct=2]="Direct",I[I.Sensitive=3]="Sensitive";var rd=tM(s,!1,"data classification"),rv=(e,t)=>rd.parse(e?.classification??e?.level)===rd.parse(t?.classification??t?.level)&&rh.parse(e?.purposes??e?.purposes)===rh.parse(t?.purposes??t?.purposes),rp=(e,t)=>null==e?void 0:ec(e.classification)&&ec(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:rd.parse(e.classification??e.level??t?.classification??0),purposes:rh.parse(e.purposes??e.purpose??t?.purposes??l.Necessary)};(A=l||(l={}))[A.None=0]="None",A[A.Necessary=1]="Necessary",A[A.Functionality=2]="Functionality",A[A.Performance=4]="Performance",A[A.Targeting=8]="Targeting",A[A.Security=16]="Security",A[A.Infrastructure=32]="Infrastructure",A[A.Any_Anonymous=49]="Any_Anonymous",A[A.Any=63]="Any",A[A.Server=2048]="Server",A[A.Server_Write=4096]="Server_Write";var rh=tM(l,!0,"data purpose",2111),rg=tM(l,!1,"data purpose",0),rm=(e,t)=>((u=e?.metadata)&&(t?(delete u.posted,delete u.queued,Object.entries(u).length||delete e.metadata):delete e.metadata),e),ry=e=>!!e?.patchTargetId;(x=c||(c={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rb=tM(c,!1,"variable scope");s.Anonymous,l.Necessary;var rw=e=>`'${e.key}' in ${rb.format(e.scope)} scope`,rk={scope:rb,purpose:rg,purposes:rh,classification:rd};t_(rk);var rS=e=>e?.filter(ee).sort((e,t)=>e.scope===t.scope?e.key.localeCompare(t.key,"en"):e.scope-t.scope);(N=f||(f={}))[N.Add=0]="Add",N[N.Min=1]="Min",N[N.Max=2]="Max",N[N.IfMatch=3]="IfMatch",N[N.IfNoneMatch=4]="IfNoneMatch",tM(f,!1,"variable patch type"),(O=d||(d={}))[O.Success=200]="Success",O[O.Created=201]="Created",O[O.Unchanged=304]="Unchanged",O[O.Denied=403]="Denied",O[O.NotFound=404]="NotFound",O[O.ReadOnly=405]="ReadOnly",O[O.Conflict=409]="Conflict",O[O.Unsupported=501]="Unsupported",O[O.Invalid=400]="Invalid",O[O.Error=500]="Error",tM(d,!1,"variable set status");var rT=(e,t,r)=>{var n,a=e(),i=e=>e,o=(e,r=rx)=>V(async()=>(n=i(r(await a,t)))&&e(n)),s={then:o(e=>e).then,all:o(e=>e,e=>e),changed:o(e=>eX(e,e=>e.status<300)),variables:o(e=>eF(e,rI)),values:o(e=>eF(e,e=>rI(e)?.value)),push:()=>(i=e=>(r?.(eF(rE(e))),e),s),value:o(e=>rI(e[0])?.value),variable:o(e=>rI(e[0])),result:o(e=>e[0])};return s},rE=e=>e?.map(e=>e?.status<400?e:G),rI=e=>rA(e)?e.current??e:G,rA=(e,t=!1)=>t?e?.status<300:e?.status<400||e?.status===404,rx=(e,t,r)=>{var n,a,i=[],o=eF(eh(e),(e,o)=>e&&(e.status<400||!r&&404===e.status?e:(a=`${rw(e.source??e)} could not be ${404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because ${409===e.status?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:403===e.status?e.error??"the operation was denied.":400===e.status?e.error??"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=t?.[o])||!1!==n(e,a))&&i.push(a),G)));return i.length?P(i.join("\n")):ev(e)?o:o?.[0]},rN=e=>rx(e,G,!0),rO=e=>e&&"string"==typeof e.type,rC=((...e)=>t=>t?.type&&e.some(e=>e===t?.type))("view"),r$=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rj=(e,t)=>t&&(!(p=e.get(v=t.tag+(t.value??"")))||(p.score??1)<(t.score??1))&&e.set(v,t),rM=(e,t="",r=new Map)=>{if(e)return eT(e)?eJ(e,e=>rM(e,t,r)):ef(e)?tW(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,a,i,o,s,l)=>{var u={tag:(n?r$(n)+"::":"")+t+r$(a),value:r$(i??o??s)};l&&10!==parseFloat(l)&&(u.score=parseFloat(l)/10),rj(r,u)}):rj(r,e),r},r_=new WeakMap,rU=e=>r_.get(e),rF=(e,t=X)=>(t?"--track-":"track-")+e,rq=(e,t,r,n,a,i)=>t?.[1]&&eJ(re(e),o=>t[0][o]??=(i=X,ef(n=eJ(t[1],([t,r,n],a)=>tz(o,t)&&(i=void 0,!r||t4(e,r))&&eN(n??o)))&&(!(a=e.getAttribute(o))||ei(a))&&rM(a,tX(n,/\-/g,":"),r),i)),rP=()=>{},rR=(e,t)=>{if(h===(h=rL.tags))return rP(e,t);var r=e=>e?tK(e)?[[e]]:eT(e)?eP(e,r):[eb(e)?[tG(e.match),e.selector,e.prefix]:[tG(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eQ(h))]];(rP=(e,t)=>rq(e,n,t))(e,t)},rz=(e,t)=>tC(eR(rt(e,rF(t,Y)),rt(e,rF("base-"+t,Y)))," "),rD={},rW=(e,t,r=rz(e,"attributes"))=>{r&&rq(e,rD[r]??=[{},tD(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tG(r||n),,t])],t),rM(rz(e,"tags"),void 0,t)},rB=(e,t,r=X,n)=>(r?t5(e,(e,r)=>r(rB(e,t,X)),eS(r)?r:void 0):tC(eR(t8(e,rF(t)),rt(e,rF(t,Y)))," "))??(n&&(g=rU(e))&&n(g))??null,rV=(e,t,r=X,n)=>""===(m=rB(e,t,r,n))||(null==m?m:ei(m)),rJ=(e,t,r,n)=>e?(rW(e,n??=new Map),t5(e,e=>{rR(e,n),rM(r?.(e),void 0,n)},t),n.size?{tags:[...n.values()]}:{}):{},rL={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rK={exports:{}};(e=>{(()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var t=e/4294967296,a=e%4294967296;c([211,t>>>24,t>>>16,t>>>8,t,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(r=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(r))})(e);break;case"string":(d=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(e.charCodeAt(n)>127){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var t=e.getTime()/1e3;if(0===e.getMilliseconds()&&t>=0&&t<4294967296)c([214,255,t>>>24,t>>>16,t>>>8,t]);else if(t>=0&&t<17179869184){var r=1e6*e.getMilliseconds();c([215,255,r>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t])}else{var r=1e6*e.getMilliseconds();c([199,12,255,r>>>24,r>>>16,r>>>8,r]),f(t)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var t=0;for(var r in e)void 0!==e[r]&&t++;for(var r in t<=15?u(128+t):t<=65535?c([222,t>>>8,t]):c([223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(s(r),s(n))}})(e);break;default:if(!a&&t&&t.invalidTypeReplacement)"function"==typeof t.invalidTypeReplacement?s(t.invalidTypeReplacement(e),!0):s(t.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var t=e.length;t<=15?u(144+t):t<=65535?c([220,t>>>8,t]):c([221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;t>r;r++)s(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function f(e){var t,r;e>=0?(t=e/4294967296,r=e%4294967296):(t=~(t=Math.abs(++e)/4294967296),r=~(r=Math.abs(e)%4294967296)),c([t>>>24,t>>>16,t>>>8,t,r>>>24,r>>>16,r>>>8,r])}}function r(e,t){var r,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(t>=0&&t<=127)return t;if(t>=128&&t<=143)return u(t-128);if(t>=144&&t<=159)return c(t-144);if(t>=160&&t<=191)return f(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return l(-1,1);if(197===t)return l(-1,2);if(198===t)return l(-1,4);if(199===t)return d(-1,1);if(200===t)return d(-1,2);if(201===t)return d(-1,4);if(202===t)return s(4);if(203===t)return s(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return d(1);if(213===t)return d(2);if(214===t)return d(4);if(215===t)return d(8);if(216===t)return d(16);if(217===t)return f(-1,1);if(218===t)return f(-1,2);if(219===t)return f(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(t>=224&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var r=0,a=!0;t-- >0;)if(a){var i=e[n++];r+=127&i,128&i&&(r-=128),a=!1}else r*=256,r+=e[n++];return r}function o(t){for(var r=0;t-- >0;)r*=256,r+=e[n++];return r}function s(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return(n+=t,4===t)?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function l(t,r){t<0&&(t=o(r));var a=e.subarray(n,n+t);return n+=t,a}function u(e,t){e<0&&(e=o(t));for(var r={};e-- >0;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];e-- >0;)r.push(a());return r}function f(t,r){t<0&&(t=o(r));var a=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;r>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=r)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=r)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=r)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,t)}function d(e,t){e<0&&(e=o(t));var r=o(1),a=l(e);return 255===r?(e=>{if(4===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*t)}if(8===e.length){var r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*t+r/1e6)}if(12===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var t=i(8);return new Date(1e3*t+r/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:r,data:a}}}var n={serialize:t,deserialize:r,encode:t,decode:r};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(rK);var rG=(C=rK.exports)&&C.__esModule&&Object.prototype.hasOwnProperty.call(C,"default")?C.default:C,rH=[],rX=[],rY=(e,t=0)=>e.charCodeAt(t),rZ=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>rH[rX[t]=e.charCodeAt(0)]=t);var rQ=e=>{for(var t,r=0,n=e.length,a=[];n>r;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(rX[(16515072&t)>>18],rX[(258048&t)>>12],rX[(4032&t)>>6],rX[63&t]);return a.length+=n-r,rZ(a)},r0=e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>r;)i[n++]=rH[rY(e,r++)]<<2|(t=rH[rY(e,r++)])>>4,a>r&&(i[n++]=(15&t)<<4|(t=rH[rY(e,r++)])>>2,a>r&&(i[n++]=(3&t)<<6|rH[rY(e,r++)]));return i},r1={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},r2=(e=256)=>e*Math.random()|0,r4=e=>{var t,r,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(r2()));for(r=0,i[n++]=g(f^16*r2(16)+a);t>r;i[n++]=g(f^e[r++]));for(;a--;)i[n++]=r2();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((f^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);t>n;i[n++]=f^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(s=ea(t)?64:t,h(),[o,l]=r1[s],r=0;r<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[r++])))*l));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},{deserialize:r6,serialize:r5}=rG,r3="$ref",r8=(e,t,r)=>ek(e)?G:r?t!==G:null===t||t,r9=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var a,i,o,s=(e,t,n=e[t],a=r8(t,n,r)?u(n):G)=>(n!==a&&(a!==G||ev(e)?e[t]=a:delete e[t],l(()=>e[t]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||eS(e)||ek(e))return G;if(!eg(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[r3]||(e[r3]=o,l(()=>delete e[r3])),{[r3]:o};if(eb(e))for(var t in(i??=new Map).set(e,i.size+1),e)s(e,t);else!eT(e)||e instanceof Uint8Array||(!ev(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?s(e,r):(e[r]=null,l(()=>delete e[r])));return e};return W(()=>t?r5(u(e)??null):W(()=>JSON.stringify(e,G,n?2:0),()=>JSON.stringify(u(e),G,n?2:0)),!0,()=>a?.forEach(e=>e()))},r7=e=>{var t,r,n=e=>eg(e)?e[r3]&&(r=(t??=[])[e[r3]])?r:(e[r3]&&(t[e[r3]]=e,delete e[r3]),Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(ef(e)?JSON.parse(e):null!=e?W(()=>r6(e),()=>(console.error("Invalid message received.",e),G)):e)},ne=(e,t={})=>{var r=(e,{json:t=!1,...r})=>{var n=(e,n)=>ec(e)&&!0===n?e:o(e=ef(e)?new Uint8Array(eF(e.length,t=>255&e.charCodeAt(t))):t?W(()=>JSON.stringify(e),()=>JSON.stringify(r9(e,!1,r))):r9(e,!0,r),n);if(t)return[e=>r9(e,!1,r),e=>null==e?G:W(()=>r7(e),G),(e,t)=>n(e,t)];var[a,i,o]=r4(e);return[(e,t)=>(t?Q:rQ)(a(r9(e,!0,r))),e=>null!=e?r7(i(e instanceof Uint8Array?e:r0(e))):null,(e,t)=>n(e,t)]};if(!e){var n=+(t.json??0);if(n&&!1!==t.prettify)return(y??=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[+n]}return r(e,t)};ne();var[nt,nr]=ne(null,{json:!0,prettify:!0}),nn=tH(""+t1.currentScript.src,"#"),na=tH(""+(nn[1]||""),";"),ni=nn[0],no=na[1]||tq(ni,!1)?.host,ns=e=>!!(no&&tq(e,!1)?.host?.endsWith(no)===Y),nl=(...e)=>tX(tC(e),/(^(?=\?))|(^\.(?=\/))/,ni.split("?")[0]),nu=nl("?","var"),nc=nl("?","mnt");nl("?","usr");var nf=Symbol(),nd=Symbol(),nv=(e,t,r=Y,n=X)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tx("tail.js: ","90;3"))+t);var a=e?.[nd];a&&(e=e[nf]),null!=e&&console.log(eg(e)?tx(nt(e),"94"):eS(e)?""+e:e),a&&a.forEach(([e,t,r])=>nv(e,t,r,!0)),t&&console.groupEnd()},[np,nh]=ne(),[ng,nm]=[tQ,tQ],[ny,nb]=tT(),nw=e=>{nm===tQ&&([ng,nm]=ne(e),nb(ng,nm))},nk=e=>t=>nS(e,t),nS=(...e)=>{var t=e.shift();console.error(ef(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[nT,nE]=tT(),[nI,nA]=tT(),nx=e=>nO!==(nO=e)&&nE(nO=!1,nj(!0,!0)),nN=e=>nC!==(nC=!!e&&"visible"===document.visibilityState)&&nA(nC,!e,n$(!0,!0));nT(nN);var nO=!0,nC=!1,n$=tv(!1),nj=tv(!1);ru(window,["pagehide","freeze"],()=>nx(!1)),ru(window,["pageshow","resume"],()=>nx(!0)),ru(document,"visibilitychange",()=>(nN(!0),nC&&nx(!0))),nE(nO,nj(!0,!0));var nM=!1,n_=tv(!1),[nU,nF]=tT(),nq=th({callback:()=>nM&&nF(nM=!1,n_(!1)),frequency:2e4,once:!0,paused:!0}),nP=()=>!nM&&(nF(nM=!0,n_(!0)),nq.restart());ru(window,["focus","scroll"],nP),ru(window,"blur",()=>nq.trigger()),ru(document.body,["keydown","pointerdown","pointermove","scroll"],nP),nP();var nR=()=>n_();($=b||(b={}))[$.View=-3]="View",$[$.Tab=-2]="Tab",$[$.Shared=-1]="Shared";var nz=tM(b,!1,"local variable scope"),nD=e=>nz.tryParse(e)??rb(e),nW=e=>nz.format(e)??rb.format(e),nB=e=>!!nz.tryParse(e?.scope),nV=t_({scope:nz},rk),nJ=e=>null==e?void 0:ef(e)?e:e.source?nJ(e.source):`${nD(e.scope)}\0${e.key}\0${e.targetId??""}`,nL=e=>{var t=e.split("\0");return{scope:+t[0],key:t[1],targetId:t[2]}},nK=0,nG=void 0,nH=()=>(nG??tQ())+"_"+nX(),nX=()=>(td(!0)-(parseInt(nG.slice(0,-2),36)||0)).toString(36)+"_"+(++nK).toString(36),nY=e=>crypto.getRandomValues(e),nZ=()=>tX("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nY(new Uint8Array(1))[0]&15>>e/4).toString(16)),nQ={},n0={id:nG,heartbeat:td()},n1={knownTabs:{[nG]:n0},variables:{}},[n2,n4]=tT(),[n6,n5]=tT(),n3=tQ,n8=e=>nQ[nJ(e)],n9=(...e)=>ae(e.map(e=>(e.cache=[td(),3e3],nV(e)))),n7=e=>eF(e,e=>e&&[e,nQ[nJ(e)]]),ae=e=>{var t=eF(e,e=>e&&[nJ(e),e]);if(t?.length){var r=n7(e);e7(nQ,t);var n=eX(t,e=>e[1].scope>b.Tab);n.length&&(e7(n1.variables,n),n3({type:"patch",payload:eG(n)})),n5(r,nQ,!0)}};ny((e,t)=>{nT(r=>{if(r){var n=t(sessionStorage.getItem(F));sessionStorage.removeItem(F),nG=n?.[0]??td(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nQ=eG(eR(eX(nQ,([,e])=>e.scope===b.View),eF(n?.[1],e=>[nJ(e),e])))}else sessionStorage.setItem(F,e([nG,eF(nQ,([,e])=>e.scope!==b.View?e:void 0)]))},!0),n3=(t,r)=>{e&&(localStorage.setItem(F,e([nG,t,r])),localStorage.removeItem(F))},ru(window,"storage",e=>{if(e.key===F){var n=t?.(e.newValue);if(n&&(!n[2]||n[2]===nG)){var[a,{type:i,payload:o}]=n;if("query"===i)r.active||n3({type:"set",payload:n1},a);else if("set"===i&&r.active)e7(n1,o),e7(nQ,o.variables),r.trigger();else if("patch"===i){var s=n7(eF(o,1));e7(n1.variables,o),e7(nQ,o),n5(s,nQ,!1)}else"tab"===i&&(e7(n1.knownTabs,a,o),o&&n4("tab",o,!1))}}});var r=th(()=>n4("ready",n1,!0),-25),n=th({callback(){var e=td()-1e4;eJ(n1?.knownTabs,([t,r])=>r[0]<e&&tn(n1.knownTabs,t)),n0.heartbeat=td(),n3({type:"tab",payload:n0})},frequency:5e3,paused:!0}),a=e=>{n3({type:"tab",payload:e?n0:void 0}),e?(r.restart(),n3({type:"query"})):r.toggle(!1),n.toggle(e)};nT(e=>a(e),!0)},!0);var[at,ar]=tT(),[an,aa]=tT(),ai=((e,{timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?nm:nh)(localStorage.getItem(e)),i=0,o=()=>localStorage.setItem(e,(r?ng:np)([nG,td()+t]));return async(r,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<td())&&(o(),a()?.[0]===nG))return t>0&&(i=setInterval(()=>o(),t/2)),await L(r,!0,()=>{clearInterval(i),localStorage.removeItem(e)});var c=tw(),[f]=ru(window,"storage",t=>{t.key!==e||t.newValue||c.resolve()});await tk(tb(s??t),c),f()}null==s&&P(e+" could not be acquired.")}})(U+"rq"),ao=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=r=>{var s=eS(t)?t?.(a,r):t;return!1!==s&&(null!=s&&!0!==s&&(a=s),ar(e,a,r,e=>(o=a===G,a=e)),!o&&(i=n?ng(a,!0):JSON.stringify(a)))};if(!r)return await ai(()=>eL(1,async t=>{if(!s(t))return eN();var r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(r.status>=400)return 0===t?eN(P(`Invalid response: ${await r.text()}`)):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tb((1+t)*200));var o=n?new Uint8Array(await r.arrayBuffer()):await r.text(),l=o?.length?(n?nm:JSON.parse)?.(o):G;return null!=l&&aa(l),eN(l)}));s(0)&&(navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||P("Beacon send failed."))},as=["scope","key","targetId","version"],al=[...as,"created","modified","classification","purposes","tags","readonly","value"],au=[...as,"init","purpose","refresh"],ac=[...al,"value","force","patch"],af=new Map,ad=(e,t)=>{var r=th(async()=>{var e=eF(af,([e,t])=>({...nL(e),result:[...t]}));e.length&&await u.get(...e)},3e3),n=(e,t)=>t&&eB(t,t=>e3(af,e,()=>new Set).add(t)),a=(e,t)=>{if(e){var r,a=nJ(e),i=ta(af,a);if(i?.size){if(e?.purposes===t?.purposes&&e?.classification==t?.classification&&R(e?.value,t?.value))return;eJ(i,i=>{r=!1,i?.(e,t,(e=!0)=>r=e),r&&n(a,i)})}}};nT((e,t)=>r.toggle(e,e&&t>=3e3),!0),n6(e=>eJ(e,([e,t])=>a(e,t)));var i=new Map,o=(e,t)=>e7(i,e,ea(t)?t?void 0:0:t),u={get:(...r)=>rT(async()=>{(!r[0]||ef(r[0]))&&(a=r[0],r=r.slice(1)),t?.validateKey(a);var a,i=[],s=eF(r,(e,t)=>[e,t]),l=[],u=(await ao(e,()=>!!(s=eF(s,([e,t])=>{if(e){var r=nJ(e);n(r,e.result);var a=n8(r);e.init&&o(r,e.cache);var s=e.purposes;if((s??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.[1]<td())tu(i,[{...a,status:d.Success},t]);else if(!nB(e))return[to(e,au),t];else if(eb(e.init)){var u={...nV(e),status:d.Created,...e.init};null!=u.value&&(tu(l,c(u)),tu(i,[u,t]))}}else tu(i,[{...e,status:d.Denied,error:"No consent for "+rh.logFormat(s)},t])}})).length&&{variables:{get:eF(s,0)},deviceSessionId:t?.deviceSessionId}))?.variables?.get??[];return tu(i,...eF(u,(e,t)=>e&&[e,s[t][1]])),l.length&&ae(l),i.map(([e])=>e)},eF(r,e=>e?.error)),set:(...r)=>rT(async()=>{(!r[0]||ef(r[0]))&&(n=r[0],r=r.slice(1)),t?.validateKey(n);var n,a=[],i=[],u=eF(r,(e,t)=>{if(e){var r=nJ(e),n=n8(r);if(o(r,e.cache),nB(e)){if(null!=e.patch)return P("Local patching is not supported.");var u={value:e.value,classification:s.Anonymous,purposes:l.Necessary,scope:nz(e.scope),key:e.key};return i[t]={status:n?d.Success:d.Created,source:e,current:u},void tu(a,c(u))}return null==e.patch&&e?.version===void 0&&(e.version=n?.version,e.force??=!!e.version),[to(e,ac),t]}}),f=u.length?D((await ao(e,{variables:{set:u.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result."):[];return a.length&&ae(a),eJ(f,(e,t)=>{var[r,n]=u[t];e.source=r,r.result?.(e),i[n]=e}),i},eF(r,e=>e?.error))},c=(e,t=td())=>({...to(e,al),cache:[t,t+(ta(i,nJ(e))??3e3)]});return an(({variables:e})=>{if(e){var t=td(),r=eR(eF(e.get,e=>rI(e)),eF(e.set,e=>rI(e)));r?.length&&ae(eB(r,c,t))}}),u},av=(e,t,r=tZ)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?e8(t,{type:e.type+"_patch",patchTargetId:e.clientId}):P("Source event not queued."),s=async(r,n=!0,a)=>{var i;return(!r[0]||ef(r[0]))&&(i=r[0],r=r.slice(1)),nv({[nd]:eF(r=r.map(e=>(t?.validateKey(i??e.key),e8(e,{metadata:{posted:!0}}),e8(rm(tl(e),!0),{timestamp:e.timestamp-td()}))),e=>[e,e.type,X])},"Posting "+tE([tI("new event",[eY(r,e=>!ry(e))||void 0]),tI("event patch",[eY(r,e=>ry(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),ao(e,{events:r,variables:a,deviceSessionId:t?.deviceSessionId},{beacon:n})},l=async(e,{flush:r=!1,async:a=!0,variables:i}={})=>{if((e=eF(eh(e),e=>e8(t.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eJ(e,e=>nv(e,e.type)),!a)return s(e,!1,i);if(!r){e.length&&tu(n,...e);return}n.length&&tc(e,...n.splice(0)),e.length&&await s(e,!0,i)};return r>0&&th(()=>l([],{flush:!0}),r),nI((e,t,r)=>{if(!e&&(n.length||t||r>1500)){var o=eF(i,([e,t])=>{var[r,n]=t();return n&&(i.delete(e),a.delete(e)),r});(n.length||o.length)&&l(eR(n.splice(0),o),{flush:!0})}}),{post:l,postPatch:(e,t,r)=>l(o(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var s=!1,u=()=>{s=!0};return a.set(e,tl(e)),i.set(e,()=>{if(n?.isConnected===!1)u();else{var r=a.get(e),[i,l]=tf(t(r,u),r)??[];if(i&&!R(l,r))return a.set(e,tl(l)),[o(e,i),s]}return[void 0,s]}),r&&l(e),u}}},ap=Symbol(),ah=[.75,.33],ag=[.25,.33],am=e=>{var t=new IntersectionObserver(e=>eJ(e,e=>e.target[ap]?.(e))),r=new Set;th({callback:()=>eJ(r,e=>e()),frequency:250,raf:!0});var n=(e,t,r=0)=>e<r?r:e>t?t:e,a=t1.createRange();return(i,o)=>{if(o&&(s=eX(o?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==Y))&&eY(s)){var s,l,u,c,f,d,v=X,p=X,h=0,g=0,m=(e,t,r,n)=>{var a=(l??=[])[e]??=[{duration:0,impressions:0},tv(!1,nR),!1,!1,0,0,0,tY()];a[4]=t,a[5]=r,a[6]=n},y=[tY(),tY()],b=aU(!1),w=tv(!1,nR),k=-1,S=()=>{var t=i.getBoundingClientRect(),r=window.innerWidth,o=window.innerHeight,S=[n(t.top,o),n(t.right,r),n(t.bottom,o),n(t.left,r)],T=S[2]-S[0],E=S[1]-S[3],I=T/t.height||0,A=E/t.width||0,x=v?ag:ah,N=(T>x[0]*o||I>x[0])&&(E>x[0]*r||A>x[0]);if(p!==N&&w(p=N,!0),v!==(v=p&&w()>=rL.impressionThreshold-250)&&(++h,b(v),u||tu(e,u=eX(eF(s,e=>(e.track?.impressions||rV(i,"impressions",Y,e=>e.track?.impressions))&&K({type:"impression",pos:ro(i),viewport:rf(),timeOffset:aq(),impressions:h,...aH(i,Y)})||null))),u?.length)){var O=b();c=eF(u,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:O,impressions:h,regions:l&&{top:l[0][0],middle:l[1][0],bottom:l[2][0]},seen:g,text:d,read:O.activeTime&&d&&n(O.activeTime/d.readTime,g)})))}if(t.height!==k){k=t.height;var C=i.textContent;if({boundaries:f,...d}=t$(C??"",[0,.25,.75,1]),l||t.height>=1.25*o){var $,j=t1.createTreeWalker(i,NodeFilter.SHOW_TEXT),M=0,_=0;for(l??=[];_<f.length&&($=j.nextNode());){var U=$.textContent?.length??0;for(M+=U;M>=f[_]?.offset;)if(a[_%2?"setEnd":"setStart"]($,f[_].offset-M+U),_++%2){var{top:F,bottom:q}=a.getBoundingClientRect(),P=t.top;_<3?m(0,F-P,q-P,f[1].readTime):(m(1,l[0][4],F-P,f[2].readTime),m(2,F-P,q-P,f[3].readTime))}}}}var R=t.left<0?-t.left:0,z=t.top<0?-t.top:0,D=t.width*t.height;v&&(g=y[0].push(z,z+T)*y[1].push(R,R+E)/D),l&&eJ(l,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),a=n(t.bottom>o?o:t.bottom,e[5],e[4]),i=v&&a-r>0,s=e[0];s.duration=e[1](i),i&&(e[3]!==(e[3]=i)&&++e[0].impressions,s.seen=e[7].push(r,a)/(e[5]-e[4]),s.read=n(s.duration/e[6],s.seen))})};i[ap]=({isIntersecting:e})=>{e7(r,S,e),e||(eJ(c,e=>e()),S())},t.observe(i)}}},ay=()=>{n6((e,t,r)=>{var n=eR(rS(eF(e,1))?.map(e=>[e,`${e.key} (${nW(e.scope)}, ${e.scope<0?"client-side memory only":rh.format(e.purposes)})`,X]),[[{[nd]:rS(eF(t,1))?.map(e=>[e,`${e.key} (${nW(e.scope)}, ${e.scope<0?"client-side memory only":rh.format(e.purposes)})`,X])},"All variables",Y]]);nv({[nd]:n},tx(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eY(t)} in total).`,"2;3"))})},ab=()=>{var e=t0?.screen;if(!e)return{};var{width:t,height:r,orientation:n}=e,a=t<r,i=n?.angle??t0.orientation??0;return(-90===i||90===i)&&([t,r]=[r,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:t0.devicePixelRatio,width:t,height:r,landscape:a}}},aw=e=>tu(e,K({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:k?.clientId,languages:eF(navigator.languages,(e,t,r=e.split("-"))=>K({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...ab()})),ak=(e,t="A"===rr(e)&&t8(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),aS=(e,t=rr(e),r=rV(e,"button"))=>r!==X&&(z(t,"A","BUTTON")||"INPUT"===t&&z(t7(e,"type"),"button","submit")||r===Y),aT=(e,t=!1)=>({tagName:e.tagName,text:tO(t8(e,"title")?.trim()||t8(e,"alt")?.trim()||e.innerText?.trim(),100),href:e.href?.toString(),rect:t?rl(e):void 0}),aE=(e,t,r=!1)=>{var n;return t5(e??t,e=>"IMG"===rr(e)||e===t?(n={element:aT(e,r)},X):Y),n},aI=e=>{if(w)return w;ef(e)&&([t,e]=nh(e),e=ne(t)[1](e)),e7(rL,e),nw(ta(rL,"encryptionKey"));var t,r=ta(rL,"key"),n=t0[rL.name]??[];if(!ev(n)){P(`The global variable for the tracker "${rL.name}" is used for something else than an array of queued commands.`);return}var a=[],i=[],o=(e,...t)=>{var r=Y;i=eX(i,n=>W(()=>(n[e]?.(...t,{tracker:w,unsubscribe:()=>r=X}),r),nk(n)))},s=[],l={applyEventExtensions(e){e.clientId??=nH(),e.timestamp??=td(),v=Y;var t=X;return eF(a,([,r])=>{(t||r.decorate?.(e)===X)&&(t=Y)}),t?void 0:e},validateKey:(e,t=!0)=>!r&&!e||e===r||!!t&&P(`'${e}' is not a valid key.`)},u=ad(nu,l),c=av(nu,l),f=null,d=0,v=X,p=X;return Object.defineProperty(t0,rL.name,{value:w=Object.freeze({id:"tracker_"+nH(),events:c,variables:u,push(...e){if(e.length){if(e.length>1&&(!e[0]||ef(e[0]))&&(t=e[0],e=e.slice(1)),ef(e[0])){var t,r=e[0];e=r.match(/^[{[]/)?JSON.parse(r):nh(r)}var n=X;if((e=eX(eP(e,e=>ef(e)?nh(e):e),e=>{if(!e)return X;if(a1(e))rL.tags=e7({},rL.tags,e.tagAttributes);else if(a2(e))return rL.disabled=e.disable,X;else if(a5(e))return n=Y,X;else if(it(e))return e(w),X;return p||a8(e)||a6(e)?Y:(s.push(e),X)})).length||n){var h=e6(e,e=>a6(e)?-100:a8(e)?-50:ie(e)?-10:rO(e)?90:0);if(!(f&&f.splice(v?d+1:f.length,0,...h))){for(d=0,f=h;d<f.length;d++){var g=f[d];g&&(l.validateKey(t??g.key),W(()=>{var e,t=f[d];if(o("command",t),v=X,rO(t))c.post(t);else if(a3(t))u.get(...eh(t.get));else if(ie(t))u.set(...eh(t.set));else if(a8(t))tu(i,t.listener);else if(a6(t))(e=W(()=>t.extension.setup(w),e=>nS(t.extension.id,e)))&&(tu(a,[t.priority??100,e,t.extension]),e6(a,([e])=>e));else if(it(t))t(w);else{var r=X;for(var[,e]of a)if(r=e.processCommand?.(t)??X)break;r||nS("invalid-command",t,"Loaded extensions:",a.map(e=>e[2].id))}},e=>nS(w,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}},__isTracker:Y}),configurable:!1,writable:!1}),ay(),n2(async(e,t,r,a)=>{if("ready"===e){var i=rN((await u.get({scope:"session",key:M,refresh:!0},{scope:"session",key:_,refresh:!0,cache:H}))[0]).value;l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(aw(w),i.hasUserAgent=!0),p=!0,s.length&&tu(w,s),a(),tu(w,...eF(aY,e=>({extension:e})),...n,{set:{scope:"view",key:"loaded",value:!0}})}},!0),w},aA=()=>k?.clientId,ax={scope:"shared",key:"referrer"},aN=(e,t)=>{w.variables.set({...ax,value:[aA(),e]}),t&&w.variables.get({scope:ax.scope,key:ax.key,result:(r,n,a)=>r?.value?a():n?.value?.[1]===e&&t()})},aO=tv(),aC=tv(),a$=1,aj=()=>aC(),[aM,a_]=tT(),aU=e=>{var t=tv(e,aO),r=tv(e,aC),n=tv(e,nR),a=tv(e,()=>a$);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),activeTime:n(e,i),activations:a(e,i)})},aF=aU(),aq=()=>aF(),[aP,aR]=tT(),az=(e,t)=>(t&&eJ(aW,t=>e(t,()=>!1)),aP(e)),aD=new WeakSet,aW=document.getElementsByTagName("iframe"),aB=e=>(null==e||(e===Y||""===e)&&(e="add"),ef(e)&&z(e,"add","remove","update","clear")?{action:e}:eg(e)?e:void 0);function aV(e){if(e){if(null!=e.units&&z(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aJ=e=>rJ(e,void 0,e=>eF(eh(e3(r_,e)?.tags))),aL=e=>e?.component||e?.content,aK=e=>rJ(e,t=>t!==e&&!!aL(e3(r_,t)),e=>(T=e3(r_,e),(T=e3(r_,e))&&eP(eR(T.component,T.content,T),"tags"))),aG=(e,t)=>t?e:{...e,rect:void 0,content:(E=e.content)&&eF(E,e=>({...e,rect:void 0}))},aH=(e,t=X,r)=>{var n,a,i,o=[],s=[],l=0;return t5(e,e=>{var a=e3(r_,e);if(a){if(aL(a)){var i=eX(eh(a.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==Y||e.track?.promote));n=(r??e4(i,e=>e.track?.region))&&rl(e)||void 0;var u=aK(e);a.content&&tc(o,...eF(a.content,e=>({...e,rect:n,...u}))),i?.length&&(tc(s,...eF(i,e=>(l=eZ(l,e.track?.secondary?1:2),aG({...e,content:o,rect:n,...u},!!n)))),o=[])}var c=a.area||rB(e,"area");c&&tc(s,...eF(eh(c)))}}),o.length&&tu(s,aG({id:"",rect:n,content:o})),eJ(s,e=>{ef(e)?tu(a??=[],e):(e.area??=tC(a,"/"),tc(i??=[],e))}),i||a?{components:i,area:tC(a,"/")}:void 0},aX=Symbol();j={necessary:1,preferences:2,statistics:4,marketing:8},window.tail.push({consent:{externalSource:{key:"Cookiebot",poll(){var e=t1.cookie.match(/CookieConsent=([^;]*)/)?.[1];if(e){var t=1;return e?.replace(/([a-z]+):(true|false)/g,(e,r,n)=>("true"===n&&(t|=j[r]??0),"")),{level:t>1?1:0,purposes:t}}}}}});var aY=[{id:"context",setup(e){th(()=>eJ(aW,e=>tt(aD,e)&&aR(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result:(r,n,a)=>(null==k||!r?.value||k?.definition?t=r?.value:(k.definition=r.value,k.metadata?.posted&&e.events.postPatch(k,{definition:t})),a())});var t,r=n8({scope:"tab",key:"viewIndex"})?.value??0,n=n8({scope:"tab",key:"tabIndex"})?.value;null==n&&n9({scope:"tab",key:"tabIndex",value:n=n8({scope:"shared",key:"tabIndex"})?.value??n8({scope:"session",key:M})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:n+1});var a=null,i=(i=X)=>{if(!ri(""+a,a=location.href)||i){var{source:o,scheme:s,host:l}=tq(location.href+"",!0);k={type:"view",timestamp:td(),clientId:nH(),tab:nG,href:o,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:n+1,tabViewNumber:r+1,viewport:rf(),duration:aF(void 0,!0)},0===n&&(k.firstTab=Y),0===n&&0===r&&(k.landingPage=Y),n9({scope:"tab",key:"viewIndex",value:++r});var u=tP(location.href);if(eF(["source","medium","campaign","term","content"],(e,t)=>(k.utm??={})[e]=eh(u[`utm_${e}`])?.[0]),!(k.navigationType=S)&&performance&&eF(performance.getEntriesByType("navigation"),e=>{k.redirects=e.redirectCount,k.navigationType=tX(e.type,/\_/g,"-")}),S=void 0,"navigate"===(k.navigationType??="navigate")){var c=n8(ax)?.value;c&&ns(document.referrer)&&(k.view=c?.[0],k.relatedEventId=c?.[1],e.variables.set({...ax,value:void 0}))}var c=document.referrer||null;c&&!ns(c)&&(k.externalReferrer={href:c,domain:rc(c)}),k.definition=t,t=void 0,e.events.post(k),e.events.registerEventPatchSource(k,()=>({duration:aq()})),a_(k)}};return nI(e=>{e?(aC(Y),++a$):aC(X)}),ru(window,"popstate",()=>(S="back-forward",i())),eF(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),S="navigate",i()}}),i(),{processCommand:t=>a0(t)&&(tu(e,t.username?{type:"login",username:t.username}:{type:"logout"}),Y),decorate(e){!k||rC(e)||ry(e)||(e.view=k.clientId)}}}},{id:"components",setup(e){var t=am(e),r=e=>null==e?void 0:{...e,component:eh(e.component),content:eh(e.content),tags:eh(e.tags)},n=({boundary:e,...n})=>{te(r_,e,e=>r("add"in n?{...e,component:eR(e?.component,n.component),content:eR(e?.content,n.content),area:n?.area??e?.area,tags:eR(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,e3(r_,e))};return{decorate(e){eJ(e.components,e=>ta(e,"track"))},processCommand:e=>a4(e)?(n(e),Y):a7(e)?(eF(((e,t)=>{if(!t)return[];var r=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e3(n,a))for(var i=[];null!=t8(a,e);){tt(n,a);var o=tH(t8(a,e),"|");t8(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ed(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&t[u]&&(l=t[u]),tu(i,l)}}tu(r,...eF(i,e=>({add:Y,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),r})(e.scan.attribute,e.scan.components),n),Y):X}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{ru(r,["click","contextmenu","auxclick"],n=>{var a,i,o,s,l,u=X;if(t5(n.target,e=>{aS(e)&&(o??=e),u=u||"NAV"===rr(e);var t=rU(e),r=t?.component;!n.button&&r?.length&&!l&&(eJ(e.querySelectorAll("a,button"),t=>aS(t)&&((l??=[]).length>3?eN():l.push({...aT(t,!0),component:t5(t,(e,t,r,n=rU(e)?.component)=>n&&t(n[0]),t=>t===e)}))),l&&(s??=e)),a??=rV(e,"clicks",Y,e=>e.track?.clicks)??(r&&e4(r,e=>e.track?.clicks!==X)),i??=rV(e,"region",Y,e=>e.track?.region)??(r&&e4(r,e=>e.track?.region))}),s??=o){var c,f=l&&!o&&a,d=aH(s,!1,f),v=aJ(s);a??=!u;var p={...(i??=Y)?{pos:ro(o,n),viewport:rf()}:null,...aE(n.target,s),...d,timeOffset:aq(),...v};if(!o){f&&te(t,s,r=>{var a=rs(s,n);if(r)tu(r,a);else{var i=K({type:"component_click_intent",...p,clicks:r=[a],clickables:l});e.events.registerEventPatchSource(i,()=>({clicks:e3(t,s)}),!0,s)}return r});return}if(ak(o)){var h=o.hostname!==location.hostname,{host:g,scheme:m,source:y}=tq(o.href,!1);if(o.host===location.host&&o.pathname===location.pathname&&o.search===location.search){if("#"===o.hash)return;o.hash!==location.hash&&0===n.button&&tu(e,K({type:"anchor_navigation",anchor:o.hash,...p}));return}var b=K({clientId:nH(),type:"navigation",href:h?o.href:y,external:h,domain:{host:g,scheme:m},self:Y,anchor:o.hash,...p});if("contextmenu"===n.type){var w=o.href,k=ns(w);if(k){aN(b.clientId,()=>tu(e,b));return}var S=(""+Math.random()).replace(".","").substring(1,8);if(!k){if(!rL.captureContextMenu)return;o.href=nc+"="+S+encodeURIComponent(w),ru(window,"storage",(t,r)=>t.key===q&&(t.newValue&&JSON.parse(t.newValue)?.requestId===S&&tu(e,b),r())),ru(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),o.href=w})}return}n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||t8(o,"target")!==window.name?(aN(b.clientId),b.self=X,tu(e,b)):ri(location.href,o.href)||(b.exit=b.external,aN(b.clientId)));return}var T=(t5(n.target,(e,t)=>!!(c??=aB(rU(e)?.cart??rB(e,"cart")))&&!c.item&&(c.item=e2(rU(e)?.content))&&t(c)),aV(c));(T||a)&&tu(e,T?K({type:"cart_updated",...p,...T}):K({type:"component_click",...p}))}})};r(document),az(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=ra(Y);aM(()=>ty(()=>(t={},r=ra(Y)),250)),ru(window,"scroll",()=>{var n=ra(),a=rn();if(n.y>=r.y){var i=[];!t.fold&&n.y>=r.y+200&&(t.fold=Y,tu(i,"fold")),!t["page-middle"]&&a.y>=.5&&(t["page-middle"]=Y,tu(i,"page-middle")),!t["page-end"]&&a.y>=.99&&(t["page-end"]=Y,tu(i,"page-end"));var o=eF(i,e=>K({type:"scroll",scrollType:e,offset:a}));o.length&&tu(e,o)}})}},{id:"cart",setup:e=>({processCommand(t){if(aQ(t)){var r=t.cart;return"clear"===r?tu(e,{type:"cart_updated",action:"clear"}):(r=aV(r))&&tu(e,{...r,type:"cart_updated"}),Y}return a9(t)?(tu(e,{type:"order",...t.order}),Y):X}})},{id:"forms",setup(e){var t=new Map,r=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=t9(i,rF("ref"))||"track_ref",l=()=>i.isConnected&&rl(i).width,u=e3(t,i,()=>{var t,r=new Map,n={type:"form",name:t9(i,rF("form-name"))||t8(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:aq()}));var s=()=>{o(),t[3]>=2&&(n.completed=3===t[3]||!l()),e.events.postPatch(n,{...a,totalTime:td(Y)-t[4]}),t[3]=1},u=tp();return ru(i,"submit",()=>{a=aH(i),t[3]=3,u(()=>{i.isConnected&&rl(i).width>0?(t[3]=2,u()):s()},750)}),t=[n,r,i,0,td(Y),1]});return e3(u[1],n)||eF(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||rV(e,"ref"))&&(e.value||(e.value=nZ()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:tX(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:e.type??"unknown",[aX]:r(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{if(i){var[e,t,n,a]=i,o=-(s-(s=aj())),u=-(l-(l=td(Y))),c=t[aX];(t[aX]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=Y,a[3]=2,eJ(e.fields,([e,r])=>r.lastField=e===t.name)),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,e.totalTime+=u,i=null}},s=0,l=0,u=e=>e&&ru(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(i=r,"focusin"===e.type?(l=td(Y),s=aj()):o()));u(document),az(e=>e.contentDocument&&u(e.contentDocument),!0)}},{id:"consent",setup(e){var t=async t=>await e.variables.get({scope:"session",key:_,result:t}).value,r=async r=>{if(r){var n=await t();if(!n||rv(n,r=rp(r)))return[!1,n];var a={level:rd.lookup(r.classification),purposes:rh.lookup(r.purposes)};return await e.events.post(K({type:"consent",consent:a}),{async:!1,variables:{get:[{scope:"session",key:_}]}}),[!0,a]}},n={};return{processCommand(e){if(ir(e)){var a=e.consent.get;a&&t(a);var i=rp(e.consent.set);i&&(async()=>i.callback?.(...await r(i)))();var o=e.consent.externalSource;if(o){var s,l=o.key,u=n[l]??=th({frequency:o.pollFrequency??1e3}),c=async()=>{if(t1.hasFocus()){var e=o.poll();if(e){var t=rp({...s,...e});if(t&&!rv(s,t)){var[n,a]=await r(t);n&&nv(a,"Consent was updated from "+l),s=t}}}};u.restart(o.pollFrequency,c).trigger()}return Y}return X}}}}],aZ=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&t?.[e]!==void 0),aQ=aZ("cart"),a0=aZ("username"),a1=aZ("tagAttributes"),a2=aZ("disable"),a4=aZ("boundary"),a6=aZ("extension"),a5=aZ(Y,"flush"),a3=aZ("get"),a8=aZ("listener"),a9=aZ("order"),a7=aZ("scan"),ie=aZ("set"),it=e=>"function"==typeof e,ir=aZ("consent");Object.defineProperty(t0,".tail.js.init",{writable:!1,configurable:!1,value(e){e(aI)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
