(()=>{"use strict";var n,i,o=".tail.rs",e=(...e)=>t=>t?.type&&e.some(e=>e===t?.type),V=e=>e&&"string"==typeof e.type,W=e("VIEW"),l=e("VIEW_ENDED"),B=e("CONSENT"),u=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],f=(e,t,i)=>{if(!e)return[];if(Array.isArray(e)&&(e=e.join(",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,t,r,n)=>[t,r&&`="${r.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var o,s=[],l=u(t);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,t,r,n,a)=>{r=r||n||a,n=u(t);return l.length&&(1===n.length&&(r=r||n.pop()),n=l.concat(n)),n.length&&(s.push(o={ranks:n,value:r||void 0}),i?.add(null==(a=o)?a:""+a.ranks.join(":")+(a.value?"="+a.value.replace(/,/g,"\\,"):""))),""}),s},w=void 0,A=null,T=!0,E=!1,d=Object.fromEntries,L=Object.assign,H=setTimeout,G=parseInt,K=Number.MAX_SAFE_INTEGER,X="undefined"==typeof window,x=window,m=document,Z=navigator,J=m.body,k=location,Y=performance,b=(e,t,r)=>console.error(...R([e??r?.message??r??"error",t,r])),a=(e,t=0)=>(se(t)?--t:t)<0?e:(t=Math.pow(10,t),Math.round(e*t)/t),Q=e=>e==A?A:decodeURIComponent(e),ee=e=>e==A?A:encodeURIComponent(e),te={},re=(t,...e)=>e.some(t==A?e=>e==A:e=>t===e),ne=e=>e?.toLowerCase()??e,ae=(e,t,r=null)=>e&&t?e+" "+t:(e||t)??r,ie=["s","b","n","f","o"],oe=(e,t)=>5===e?Array.isArray(t):t!=A&&ie[e]===(typeof t)[0]||6===e&&t.exec,e=(n,a)=>(e,t,...r)=>void 0===t?oe(n,e):oe(n,e)?e:t?a?.(e,t,...r):void 0,se=e(1,e=>"0"!==e&&"false"!==e&&"no"!==e&&!!e),I=e(0,e=>e?.toString()),S=e(3,e=>{}),le=e(4),N=e(5,e=>ce(e)?[...e]:void 0),ce=e=>e&&!I(e)&&!!e[Symbol.iterator],ue=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),fe=(e,t,r,...n)=>e&&(r!=A?e.splice(t,r,...n):e.splice(t)),de=(e,...t)=>(e?.unshift(...t),e),he=e=>e?.shift(),C=(e,...t)=>(e?.push(...t),e),me=(...e)=>U(e=R(e))<2?M(e[0]):[].concat(...M(e,M)),U=e=>e==A?0:e.length??e.size??(le(e)?ge(e).length:0),O=(e,r)=>e?N(e)?M(e,(e,t)=>r?r(t,e):[t,e]):M(e.entries?.()??Object.entries(e),r):[],ge=(e,t)=>e?M(e.keys?.()??Object.keys(e),t):[],pe=(e,t)=>e?M(e.values?.()??Object.values(e),t):[],h=(e,t,r)=>{if(ye!=A&&U(ce(e)?e:e=[e])){var n,a=(...e)=>(i=0,U(e)?e[0]:r),i=0;for(n of e)if(r=t(n,i++,a,r),!i)break}return r},M=(e,r)=>e==A?[]:S(r)?M(e,E).map((e,t)=>r(e,t)):N(e)&&!r?e:ce(e)?[...e]:[e],ve=(e,r=e=>e)=>e==A?[]:R(M(e,E)).flatMap((e,t)=>r(e,t)),ye=(e,t=0)=>e==A?void 0:((e=null==e.length?M(e):e).item,e[t<0?e.length+t:t]),R=(e,r,t=se(r)||E)=>(e=M(e).filter((e,t)=>(S(r,!0)??(e=>e!=A))(e,t)),t&&!U(e)?A:e),we=(e,n=e=>e!=A&&e!==E)=>e!=A&&(ce(e)||(e=[e]))&&(n?h(e,(e,t,r)=>n(e,t)&&r(T),E):!!U(e)),F=e=>new Set(e),be=(t,...e)=>(t!=A&&(t.clear?t.clear(...e):N(t)?t.length=0:ge(t,e=>$(t,e))),t),g=(e,t)=>e.get?.(t)??e?.has(t)??e?.[t],$=(t,e)=>t?N(e)?(h(e,e=>t.delete?.(e)??delete t[e]),t):null!=(n=t.has?.(e))?n?(n=t.get?.(e),t.delete(e),n??T):void 0:(n=t[e],delete t[e],n):void 0,Ae=(e,t,r=void 0)=>e.add?(n=e.has(t))===(r??=T)?E:(r?e.add(t):$(e,t),T):(n=e.get?.(t)??e[t],(r=S(r)?r(n):r)===n?E:(void 0===r?$(e,t):e.set?.(t,r)??(e[t]=r),T)),Te=(e,t,r)=>e.has?.(t)?e.get?.(t):(n=r(t),e.set?.(t,n)?n:e[t]??=r(t)),Ee=(e,t,r)=>r?L(Ee(e,t),r):t?d(R(O(e,t))):e,xe=(...e)=>e.length?new Promise(e[0]):Promise.resolve(),ke=Symbol(),Ie=Symbol(),Se=e=>{var n=A,t=A,a=w,r=()=>{a=w;var r=A;t=xe(t=>{n=r=e=>r&&(r=A,t(a=e))}),e&&lt(e).then(()=>r?.(Ie))},i=(r(),L((...e)=>U(e)?(e[0]===ke?e[1]===T&&a===w||r():n(e[0]),i):a,{then:(...e)=>t.then(...e)}));return i},Ne=(e,t,r,n)=>e&&t&&(r?(N(n)?Ne(e,t,(...e)=>(i=r(...e))!=A&&C(n,i)):e.replace(t,(...e)=>(n=r(...e),"")),n):e.match(t)),Ce=e=>e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),Ue=/\z./g,Oe=(e,t)=>{return(t=Fe((e=[R(e,U)],M(F(R(me(...e))))),"|"))?new RegExp(t,"gu"):Ue},Me={},Re=e(6,(e,n=[","," "])=>Re(e)?e:N(e)?Oe(M(e,e=>Re(e,!1,n)?.source)):se(e)?e?/./g:Ue:I(e)?Me[e]??=Ne(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,r)=>t?new RegExp(t,"gu"):Oe(M(p(r,new RegExp(`?<!(?<!\\)\\)[${Fe(M(n,Ce))}]/`)),e=>e&&`^${Fe(M(p(e,/(?<!(?<!\\)\\)\*/),e=>Ce(v(e,/\\(.)/g,"$1"))),".*")}$`))):w),p=(e,t)=>e?.split(t)??e,v=(e,t,r)=>e?.replace(t,r)??e,Fe=(e,t="")=>e?.join(t)??e,$e=e=>void 0===e,De=Array.isArray,_e=e=>e&&"object"==typeof e,qe=e=>"symbol"==typeof e,je=e=>e?.[Symbol.iterator]&&!("string"==typeof e),ze=[],Pe=[],Ve=(e,t=0)=>e.charCodeAt(t);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>ze[Pe[t]=e.charCodeAt(0)]=t);var We={32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},Be=(e=256)=>e*Math.random()|0,e={exports:{}};function Le(e,i){if(i&&i.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var o,s,l=4294967296,n=new Uint8Array(128),a=0;if(i&&i.multiple)for(var t=0;t<e.length;t++)c(e[t]);else c(e);return n.subarray(0,a);function c(e,t){switch(typeof e){case"undefined":u();break;case"boolean":d(e?195:194);break;case"number":n=e,isFinite(n)&&Math.floor(n)===n?!(n<0||127<n)||n<0&&-32<=n?d(n):0<n&&n<=255?h([204,n]):n<-128||127<n?0<n&&n<=65535?h([205,n>>>8,n]):n<-32768||32767<n?0<n&&n<=4294967295?h([206,n>>>24,n>>>16,n>>>8,n]):n<-2147483648||2147483647<n?0<n&&n<=0x10000000000000000?h([211,(a=n/l)>>>24,a>>>16,a>>>8,a,(a=n%l)>>>24,a>>>16,a>>>8,a]):n<-0x8000000000000000||0x8000000000000000<n?h(n<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(d(211),m(n)):h([210,n>>>24,n>>>16,n>>>8,n]):h([209,n>>>8,n]):h([208,n]):(s||(o=new ArrayBuffer(8),s=new DataView(o)),s.setFloat64(0,n),d(203),h(new Uint8Array(o)));break;case"string":31<(n=(a=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var s=e.charCodeAt(o);if(s<128)i[a++]=s;else{if(s<2048)i[a++]=s>>6|192;else{if(55295<s&&s<56320){if(++o>=r)throw new Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||57343<l)throw new Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");i[a++]=(s=65536+((1023&s)<<10)+(1023&l))>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}}return t?i:i.subarray(0,a)})(e)).length)?h(255<n?65535<n?[219,n>>>24,n>>>16,n>>>8,n]:[218,n>>>8,n]:[217,n]):d(160+n),h(a);break;case"object":null===e?u():e instanceof Date?(a=(n=e).getTime()/1e3,0===n.getMilliseconds()&&0<=a&&a<4294967296?h([214,255,a>>>24,a>>>16,a>>>8,a]):0<=a&&a<17179869184?h([215,255,(r=1e6*n.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|a/l,a>>>24,a>>>16,a>>>8,a]):(h([199,12,255,(r=1e6*n.getMilliseconds())>>>24,r>>>16,r>>>8,r]),m(a))):Array.isArray(e)?f(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?(h(15<(r=(n=e).length)?65535<r?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),h(n)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?f:e=>{var t,r=0;for(t in e)void 0!==e[t]&&r++;for(t in 15<r?h(65535<r?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):d(128+r),e){var n=e[t];void 0!==n&&(c(t),c(n))}})(e);break;default:if(t||!i||!i.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof i.invalidTypeReplacement?c(i.invalidTypeReplacement(e),!0):c(i.invalidTypeReplacement,!0)}var r,n,a}function u(){d(192)}function f(e){var t=e.length;15<t?h(65535<t?[221,t>>>24,t>>>16,t>>>8,t]:[220,t>>>8,t]):d(144+t);for(var r=0;r<t;r++)c(e[r])}function d(e){if(n.length<a+1){for(var t=2*n.length;t<a+1;)t*=2;var r=new Uint8Array(t);r.set(n),n=r}n[a]=e,a++}function h(e){if(n.length<a+e.length){for(var t=2*n.length;t<a+e.length;)t*=2;var r=new Uint8Array(t);r.set(n),n=r}n.set(e,a),a+=e.length}function m(e){var t,e=e<0?(e++,t=~(Math.abs(e)/l),~(Math.abs(e)%l)):(t=e/l,e%l);h([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function He(s,e){var t,a=4294967296,l=0;if("object"!=typeof(s=s instanceof ArrayBuffer?new Uint8Array(s):s)||void 0===s.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!s.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(s instanceof Uint8Array||(s=new Uint8Array(s)),e&&e.multiple)for(t=[];l<s.length;)t.push(n());else t=n();return t;function n(){var e=s[l++];if(0<=e&&e<=127)return e;if(128<=e&&e<=143)return u(e-128);if(144<=e&&e<=159)return f(e-144);if(160<=e&&e<=191)return d(e-160);if(192===e)return null;if(193===e)throw new Error("Invalid byte code 0xc1 found.");if(194===e)return!1;if(195===e)return!0;if(196===e)return o(-1,1);if(197===e)return o(-1,2);if(198===e)return o(-1,4);if(199===e)return h(-1,1);if(200===e)return h(-1,2);if(201===e)return h(-1,4);if(202===e)return r(4);if(203===e)return r(8);if(204===e)return c(1);if(205===e)return c(2);if(206===e)return c(4);if(207===e)return c(8);if(208===e)return i(1);if(209===e)return i(2);if(210===e)return i(4);if(211===e)return i(8);if(212===e)return h(1);if(213===e)return h(2);if(214===e)return h(4);if(215===e)return h(8);if(216===e)return h(16);if(217===e)return d(-1,1);if(218===e)return d(-1,2);if(219===e)return d(-1,4);if(220===e)return f(-1,2);if(221===e)return f(-1,4);if(222===e)return u(-1,2);if(223===e)return u(-1,4);if(224<=e&&e<=255)return e-256;throw console.debug("msgpack array:",s),new Error("Invalid byte value '"+e+"' at index "+(l-1)+" in the MessagePack binary data (length "+s.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(e){for(var t,r=0,n=!0;0<e--;)n?(r+=127&(t=s[l++]),128&t&&(r-=128),n=!1):r=(r*=256)+s[l++];return r}function c(e){for(var t=0;0<e--;)t=256*t+s[l++];return t}function r(e){var t=new DataView(s.buffer,l+s.byteOffset,e);return l+=e,4===e?t.getFloat32(0,!1):8===e?t.getFloat64(0,!1):void 0}function o(e,t){e<0&&(e=c(t));t=s.subarray(l,l+e);return l+=e,t}function u(e,t){e<0&&(e=c(t));for(var r={};0<e--;)r[n()]=n();return r}function f(e,t){e<0&&(e=c(t));for(var r=[];0<e--;)r.push(n());return r}function d(e,t){e<0&&(e=c(t));var t=l,r=(l+=e,s),n=e,a=t,i="";for(n+=t;a<n;){var o=r[a++];if(127<o)if(191<o&&o<224){if(n<=a)throw new Error("UTF-8 decode: incomplete 2-byte sequence");o=(31&o)<<6|63&r[a++]}else if(223<o&&o<240){if(n<=a+1)throw new Error("UTF-8 decode: incomplete 3-byte sequence");o=(15&o)<<12|(63&r[a++])<<6|63&r[a++]}else{if(o<=239||248<=o)throw new Error("UTF-8 decode: unknown multibyte start 0x"+o.toString(16)+" at index "+(a-1));if(n<=a+2)throw new Error("UTF-8 decode: incomplete 4-byte sequence");o=(7&o)<<18|(63&r[a++])<<12|(63&r[a++])<<6|63&r[a++]}if(65535<o){if(1114111<o)throw new Error("UTF-8 decode: code point 0x"+o.toString(16)+" exceeds UTF-16 reach");o-=65536,i=(i+=String.fromCharCode(o>>10|55296))+String.fromCharCode(1023&o|56320)}else i+=String.fromCharCode(o)}return i}function h(e,t){e<0&&(e=c(t));var r,n,t=c(1),e=o(e);if(255!==t)return{type:t,data:e};t=e;if(4===t.length)return n=(t[0]<<24>>>0)+(t[1]<<16>>>0)+(t[2]<<8>>>0)+t[3],new Date(1e3*n);if(8===t.length)return r=(t[0]<<22>>>0)+(t[1]<<14>>>0)+(t[2]<<6>>>0)+(t[3]>>>2),n=(3&t[3])*a+(t[4]<<24>>>0)+(t[5]<<16>>>0)+(t[6]<<8>>>0)+t[7],new Date(1e3*n+r/1e6);if(12===t.length)return r=(t[0]<<24>>>0)+(t[1]<<16>>>0)+(t[2]<<8>>>0)+t[3],l-=8,n=i(8),new Date(1e3*n+r/1e6);throw new Error("Invalid data length for a date value.")}}e.exports={serialize:Le,deserialize:He,encode:Le,decode:He};var Ge,Ke,Xe,Ze,Je,Ye,Qe=e.exports,et=new ArrayBuffer(8),tt=new DataView(et),rt=e=>{var[d,r,n]=(e=>{for(var t,n,r,a,i,o=0n,s=0n,l=[],c=0,u=0,f=0,d=0,h=[],f=0;f<e.length;d+=h[f]=Ve(e,f++));var m=e?()=>{l=[...h],u=255&(c=d),f=-1}:()=>{},g=e=>(u=255&(c+=-l[f=(f+1)%l.length]+(l[f]=e)),e);return[e?e=>{for(m(),t=e.length,a=16-(t+4)%16,i=new Uint8Array(4+t+a),r=0;r<3;i[r++]=g(Be()));for(i[r++]=g(u^16*Be(16)+a),n=0;n<t;i[r++]=g(u^e[n++]));for(;a--;)i[r++]=Be();return i}:e=>e,e?e=>{for(m(),n=0;n<3;g(e[n++]));if((t=e.length-4-((u^g(e[n++]))%16||16))<=0)return new Uint8Array(0);for(i=new Uint8Array(t),r=0;r<t;i[r++]=u^g(e[n++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;var r="boolean"==typeof t?64:t;for(m(),[o,s]=We[r],n=0;n<e.length;o=BigInt.asUintN(r,(o^BigInt(u^g(e[n++])))*s));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]})(e??"");return[e=>{for(var t,r,n,a,i,o,s,l=(d((i=(e,t,r=e[t],n=s(r))=>(r===n&&!qe(t)||(e[t]=n,o(()=>e[t]=r)),r),o=e=>(r??=[]).push(e),s=r=>null===r||$e(r)||"function"==typeof r||qe(r)?null:Number.isFinite(r)&&!Number.isSafeInteger(r)?(tt.setFloat64(0,r,!0),{"":[...new Uint32Array(et)]}):_e(r)?r.toJSON&&r!==(r=r.toJSON())?s(r):(a=(n??=new Map).get(r),$e(a)?(_e(r)&&!je(r)?(n.set(r,n.size+1),Object.keys(r).forEach(e=>($e(i(r,e))||qe(e))&&delete r[e])):je(r)&&(!De(r)||Object.keys(r).length<r.length?[...r]:r).forEach((e,t)=>t in r?i(r,t):(r[t]=null,o(()=>delete r[t]))),r):(r.$ref||(r.$ref=a,o(()=>delete r.$ref)),{$ref:a})):r,e=Qe.serialize(s(e)),r?.forEach(e=>e()),e))),c=0,u=l.length,f=[];c<u;)t=l[c++]<<16|l[c++]<<8|l[c++],f.push(Pe[(16515072&t)>>18],Pe[(258048&t)>>12],Pe[(4032&t)>>6],Pe[63&t]);return f.length+=u-c,String.fromCharCode(...f)},e=>{if(null==e)return null;if(e=r((e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);r<a;)i[n++]=ze[Ve(e,r++)]<<2|(t=ze[Ve(e,r++)])>>4,r<a&&(i[n++]=(15&t)<<4|(t=ze[Ve(e,r++)])>>2,r<a)&&(i[n++]=(3&t)<<6|ze[Ve(e,r++)]);return i})(e)),a=r=>_e(r)?De(r[""])&&2===(r=r[""]).length?new DataView(new Uint32Array(r).buffer).getFloat64(0,!0):r.$ref&&(n=(t??=[])[r.$ref])?n:(r.$ref&&delete(t[r.$ref]=r).$ref,Object.entries(r).forEach(([e,t])=>t!==(t=a(t))&&(r[e]=t)),r):r,null==e)return e;try{return a(Qe.deserialize(e))}catch(e){}var t,n,a},(e,t)=>n(Qe.serialize(e),t)]},[nt,,,]=rt(),[at,it]=rt(),[ot,st]=[null,null],D=(e=T,t)=>(t=X?Date.now():Y.timeOrigin+Y.now(),e?Math.trunc(t):t),lt=t=>xe(e=>H(e,t)),ct=e=>250<e?(e/1e3).toFixed(2)+"s":Math.round(e)+"ms",_=(e,t)=>{var n=0,r=e,a=null,i=()=>(r=w,n<0?clearInterval(-n):clearTimeout(n),n=0),o=(e,t)=>{i(),e&&(r=e,n=t<0?-setInterval(e,-t):H(()=>(r=w,e()),t))};return o.clear=(e,t,r=n)=>n&&(e?H(()=>n===r&&(i(),t?.()),e):(i(),t?.())),o.wait=t=>xe(e=>o(e,t)),o.pulse=()=>(r?.(),o),o.isActive=()=>r!=A,o.finish=()=>(a=r)&&(i(),a()),e&&o(e,t),o},ut=(t=()=>D(),e=T)=>{var r=0,n=e?t():0,e=e=>(n?r+=-n+(n=t()):e===T&&(n=t()),e===E&&(n=0),r);return e.reset=()=>(n=n&&t(),r=0),e},ft=(e,t=0)=>t?H(e,t):window.queueMicrotask(e),dt=e=>crypto.getRandomValues(e),ht=e=>(dt(e=new Uint32Array(2)),1048576*e[0]+(e[1]>>>12)),mt=new Uint32Array(2),gt=()=>ht(mt).toString(36),pt=(e,t)=>e.localeCompare(t,"en")<0?e:t,c=D().toString(36)+"-"+ht().toString(36),q={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,heartbeatFrequency:0,clientKey:null,apiKey:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},vt=K,yt=(e,t,r=(e,t)=>vt<=t)=>{for(var n,a=0,i=E;1===e?.nodeType&&!r(e,a++)&&t(e,(e,t)=>(e!=A&&(n=e,i=t!==T&&n!=A),T),a-1)!==E&&!i;){var o=e;(e=e.parentElement)===A&&o?.ownerDocument!==m&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},wt=(e,r)=>yt(e,(e,t)=>t(j(e,r))),j=(e,t,r)=>e?.getAttribute?r===w?e.getAttribute(t):(r===A?e.removeAttribute(t):e.setAttribute(t,r),r):A,bt=(e,t)=>getComputedStyle(e).getPropertyValue(t)||A,At=(e,t)=>(Ge={},M(R(O(t),([,e])=>e!=A),([e,[t,r=E]=[]])=>Ge[e]={writable:r,configurable:r,value:t}),Object.defineProperties(e,Ge)),Tt=e=>e!=A?e.tagName:A,Et=e=>({x:a(scrollX,e),y:a(scrollY,e)}),xt=(e,t)=>v(e,/#.*$/,"")===v(t,/#.*$/,""),kt=(e,t,r=T)=>(Xe=It(e,t))&&{xpx:Xe.x,ypx:Xe.y,x:a(Xe.x/J.offsetWidth,4),y:a(Xe.y/J.offsetHeight,4),pageFolds:r?Xe.y/x.innerHeight:w},It=(e,t)=>t?.pointerType&&t?.pageY!=A?{x:t.pageX,y:t.pageY}:e?({x:Ze,y:Je}=St(e),{x:Ze,y:Je}):w,St=e=>e?(Ye=e.getBoundingClientRect(),Ke=Et(E),{x:a(Ye.left+Ke.x),y:a(Ye.top+Ke.y),width:a(Ye.width),height:a(Ye.height)}):w,z=(n,e,a,i=T,o=T)=>{var s=[];return M(e,(e,t)=>{var r=e=>{a(e,s[t])};return C(s,()=>n.removeEventListener(e,r,i)),n.addEventListener(e,r,{capture:i,passive:o})}),()=>0<s.length&&M(s,e=>e())?(s=[],T):E},Nt=n=>n==A?w:Ne(n,/^(?:([a-zA-Z0-9]+):)?(?:\/\/)?([^\s\/]*)/,(e,t,r)=>r?{href:n.substring(e.length),domain:{protocol:t,domainName:r}}:{href:n}),Ct=()=>({...Ke=Et(T),width:x.innerWidth,height:x.innerHeight,totalWidth:J.offsetWidth,totalHeight:J.offsetHeight}),Ut=(e,t=e=>b(A,A,e),r)=>{var n=z(x,"error",e=>e.stopImmediatePropagation());try{return e()}catch(e){return t===E?w:S(t)?t(e):(C(t,e)??b(A,A,e),w)}finally{n(),r?.()}},e=p(""+m.currentScript.src,"#"),t=p(""+(e[1]||""),";"),Ot=e[0],Mt=t[1]||Nt(Ot)?.domain?.domainName,Rt=e=>!(!Mt||Nt(e)?.domain?.domainName.endsWith(Mt)!==T),Ft=(...e)=>v(Fe(e),/(^(?=\?))|(^\.(?=\/))/,Ot.split("?")[0]),$t=Ft("?","var"),Dt=Ft("?","mnt"),e=(Ft("?","usr"),(t=!1)=>{var r=F(),n=e=>()=>$(r,e),a=null;return[e=>(t&&a?e(...a,()=>{}):Ae(r,e),n(e)),(...t)=>h(r,e=>{e(...a=t,n(e))})]}),_t=Se(),[t,qt]=e(!0);t(()=>_t(!0));var jt,zt,Pt,Vt,Wt,Bt,Lt,Ht,Gt=new WeakMap(void 0),Kt=e=>g(Gt,e),Xt=(e,t=E)=>(t?"--track-":"track-")+e,Zt=(o,e,t,r,n,s)=>e?.[1]&&h(o?.getAttributeNames(),i=>e[0][i]??=(s=E,!I(r=h(e[1],([e,t,r],n,a)=>!(!i||!e)&&e.test(i)&&(s=void 0,!t||!!o?.matches(t))&&a(r??i)))||(n=o.getAttribute(i))&&!se(n,!1)||f(n,v(r,/\-/g,":"),t),s)),Jt=()=>{},Yt=(e,t)=>ae(bt(e,Xt(t,T)),bt(e,Xt("base-"+t,T)),""),Qt={},er=(e,r,t=E,n)=>(t?yt(e,(e,t)=>t(er(e,r,E)),S(t,E)):ae(j(e,Xt(r)),bt(e,Xt(r,T))))??(n&&(zt=Kt(e))&&n(zt))??A,tr=(e,t,r=E,n)=>""===(Pt=er(e,t,r,n))||(Pt==A?Pt:se(Pt,T)),rr=(e,t,i,o)=>e&&(((e,t,r=Yt(e,"attributes"))=>{Zt(e,Qt[r]??=[{},R(Ne(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[Re(r||n,!1),,t],[]),T)],t),f(Yt(e,"tags"),void 0,t)})(e,o??=F()),yt(e,e=>{var t,r,n=e,a=o;(jt===(jt=q.tags)?Jt:(r=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...(t=e=>e?Re(e)?[[e]]:ce(e)?ve(e,t):[le(e)?[Re(e.match,!1),e.selector,e.prefix]:[Re(e,!1)]]:[])(pe(jt))]],Jt=(e,t)=>Zt(e,r,t)))(n,a),f(M(i?.(e)),void 0,o)},t),U(o))?{tags:[...o]}:{},nr=(e,t,r=!1)=>e?(Vt=(r?st:it)(e)).$?0<(Wt=+((Vt=Vt.$)[1]??0))&&Wt<D(E)?(t?.(),A):[Vt[0],Wt,Vt[2]]:[Vt]:A,r=(u,f,d)=>{var h=f?c:w,m=e=>()=>e&&u.removeItem(e),g=new Set,p=Object.assign((e,t,r)=>{var n,a,i,o,s,l,c;return S(e)?f?([n,l=E]=[e,t],a=(...e)=>n(...e)===E&&o?.(),o=()=>(o=A,f(i,T),g.delete(a)),f(i=({key:e,newValue:t,oldValue:r})=>(Bt=nr(t,m(e),d),Lt=nr(r,w,d),e&&a(e,Bt?.[0]??A,Lt?.[0]??A,Bt?.[2]??A))),l&&g.add(a),o):void 0:([s,l,e=0]=[e,t,r],l===w?nr(u.getItem(s),m(s),d)?.[0]??A:S(l)?p(s,l(p(s)),e):((c=l==A||e<0||([t,r,c=!1]=[l,e&&!u.supportsExpiry?D(T)+e:w,d],t==A)?A:(c?ot:at)(h||r?{$:[t,r,h]}:t))==A?u?.removeItem(s):u?.setItem(s,c,0<e?e:w),g.size&&(Bt=nr(c,w,d),Lt=nr(u.getItem(s),w,d),g.forEach(e=>e(s,Bt?.[0]??A,Lt?.[0]??A,Bt?.[2]??A))),l))});return p},ar={getItem:t=>(t=ee(t),Q(document.cookie.split(";").map(e=>e.split("=")).find(e=>e[0].trim()===t)?.[1]||A)),setItem:(e,t,r)=>document.cookie=`${ee(e)}=${ee(t??"")}; Path=/; SameSite=Lax`+(t&&r==A?"":"; Max-Age="+Math.round((r??0)/1e3)),removeItem:e=>ar.setItem(e,"",0),supportsExpiry:!0};r((Ht={},{getItem:e=>Ht[e],setItem:(e,t)=>Ht[e]=t,removeItem:e=>delete Ht[e]}));var ir,or=r(ar),sr=r(ar,w,!0),lr=r(sessionStorage),cr=r(localStorage,(e,t)=>t?window.removeEventListener("storage",e):window.addEventListener("storage",e),!0),r=(r,n,i)=>{var o=r="(t~c_"+r,s=e=>r+"!"+e,l=s(c),e=(a,...e)=>{var t=T;if(S(a))return cr((e,t,r,n)=>{if(t!=A&&n&&(e===o||e===l))return a(t,n,e===l)!==E},(e[0]??i)===T);e=R(e),M(U(e)?M(e,s):[r],e=>{t=E,cr(e,a),ft(()=>t!==(t=T)&&cr(e,A))})};return n&&e((e,t,r)=>n[he(e)]?.([t,r,t===c],...e)),e},ur=Symbol(),fr=F(),dr=new Map(void 0),hr=e=>!we(e[ur],e=>!g(fr,e)),mr=r("ss"),gr={},[pr,vr]=e(!0),yr=E,wr=_(),br=(t,e,r)=>(gr[t]?b("key",t):gr[t]=[e,r],e=>mr({[t]:e})),Ar=(t(()=>{wr(()=>(yr=T,vr()),75);var t=E;mr((r,e)=>1===r?mr(2,e):2===r?(t!==(t=T)&&mr(3,e),T):3===r?mr(d(O(gr,([e,[t]])=>[e,t()])),e):(O(gr,([e,[,t]])=>t(r[e])),wr.finish())),mr(1),z(window,"pageshow",()=>!t&&mr(1)),z(window,"pagehide",()=>t=E)}),{}),Tr={},Er={},xr=()=>{var e=Er;return Er={},e},kr={},Ir=e=>kr[e]??=[[],Se(2*q.requestTimeout)([T,0])],Sr=r=>O(Ar,([e,t])=>t&&Date.now()-t>r&&$(Ar,e)),Nr=()=>{return[t,...e]=[c,...ge(Ar)],0===e.length?t:1===e.length?pt(t,e[0]):(r=(e,t)=>pt(t,e),t=t,M(e).reduce((e,t)=>r(e,t),t));var e,r,t},s=r("cs",{1([e,t]){Ar[e]??=A,t||e===c||Ur||s([1],e)},2([e],t,r){Ar[e]=Date.now(),O(r,([e,t])=>Cr(e,t)),t||ge(Tr,e=>!we(pe(Ar),e=>!e)&&Nr()===c&&s([5,e,c,T]))},3(e,t){O(t,([e,t])=>Cr(e,t))},4(e,t){Fr(t)},5(e,r,t,n){var[a,i]=Ir(r),o=fe(a,0);c===t&&(async()=>{var e=U(o),t=!e||(await(async e=>{try{return await(S(e)?e():e)}catch(e){return console.error(e),await(S(void 0)?(void 0)(e):e)}finally{await 0}})(Tr[r]?.[0](o,n))??T);t||s([3,{[r]:o}]),i([t,e])})()},6:([e])=>(Sr(0),_r(e)),7:()=>_r(A)},T),Cr=(e,t)=>C(Ir(e)[0],...t),Ur=T,Or=A,Mr=async()=>{if(await Or,Ur!==(Ur=E)){Or=Se();try{be(Ar),s([1]),await lt(50)}finally{Or(T)}}},Rr=async e=>{Ur!==(Ur=T)&&(pe(Tr,e=>e[1]?.(T)),s([2,e,xr()]),zr(E))},Fr=async e=>{var t,r;return await Or,Ur?0:(t=Nr())!==c?(s([4,e],t),0):(t=Ir(e)[1],r=D(E),await t,t(ke),s([5,e,c,E]),(e=await t)!==Ie&&e[0]&&e[1]&&(e[0],e[1],ct(D(E)-r)),e[1])},$r=K,Dr=A,_r=e=>$r=(Dr=e??=Nr())===c?Math.min($r,D()+25):K,qr=()=>Or?.()===T&&(Sr(500),D()>$r),jr=E,zr=e=>jr!==(jr=e)&&e?s([6]):!e&&c===Dr&&s([7]),Pr=(t(()=>{z(x,"pageshow",()=>Mr()),z(document,"resume",()=>Mr()),Mr(),z(x,["beforeunload","pagehide"],()=>Rr(E)),z(document,"freeze",()=>Rr(T)),_(()=>qr()&&ge(Tr,e=>Fr(e)),-q.postFrequency),z(document,"visibilitychange",()=>zr("visible"===document.visibilityState)),z(x,"focus",()=>zr(T)),z(x,"blur",()=>zr(E)),zr("visible"===document.visibilityState)}),sr),[Vr,Wr]=e(),Br=r("req"),Lr=()=>Ut(()=>{return t=(e,t,r,n)=>(Pr(o,A),t?.[0],t?.[1]&&ct(D()-t[1]),Wr(e,n),Br(r?{error:r}:T),T),(e=Pr(o))&&t(...e);var e,t})||E,Hr=_(),Gr=()=>(qr()&&Lr(),Hr(Gr,Pr(".tail.rq")?25:500));t(()=>Gr());var Kr,[Xr,Zr]=e(),[Jr,Yr]=e(),[Qr,en]=(Tr.events=[async(e,t)=>{return U(e)?(await _t,t&&!Kr&&(t=E),Zr(e),t=t,r=`(${c??"(unknown)"})`,Lr(),a=!!Pr(".tail.rq"),await(!t&&a?E:(t=D(),Pr(".tail.rq",[r,t],q.requestTimeout),Pr(o,A),r=a,n=D(),t=nt([M(e,(e,t,r={...e,timestamp:Math.min(0,(e.timestamp??=n)-n)})=>{return(a=n=>h(O(n),([e,t],r)=>t==A||le(t)&&!a(t)?($(n,e),r):T))(r),r.type,r;var a}),[Kr,r]]),void(Z.sendBeacon($t,new Blob([t],{type:"text/plain"}))||b("post-failed",e))===E?(Pr(".tail.rq",A),T):await xe(t=>Br(e=>(t(e===T),E),T))))):E;var n,r,a},e=>{e&&Yr()}],[(...e)=>U(e)&&(C(Er.events??=[],...e),!Ur)&&ft(()=>U(Er)&&s([3,xr()])),()=>Fr("events")]),tn=br("affinity",()=>Kr,e=>Kr=e),rn=(Vr(e=>tn(Kr=e)),F()),nn=E,an=()=>{},on=t=>{var r=(e=T)=>$(rn,r)&&e&&t(nn);return rn.add(r),r};Jr(()=>{nn=T,M(rn,e=>e(T))});var y,sn,ln,cn,un,sr={id:"navigation",setup(y){var w=_(),b=an,t=v=>{z(v,["click","contextmenu","auxclick"],e=>{b?.(E);var r,n,a=A,i=E;if(yt(e.target,e=>{var t;a??=((e,t=Tt(e),r=tr(e,"button"))=>r!==E&&(re(t,"A","BUTTON")||"INPUT"===t&&re(ne(j(e,"type")),"button","submit")||r===T))(e)?e:A,i=i||"NAV"===Tt(e),r??=tr(e,"clicks",T,e=>e.track?.clicks)??((t=Kt(e)?.component)&&we(t,e=>e.track?.clicks!==E)),n??=tr(e,"region",T,e=>e.track?.region)??((t=Kt(e)?.component)&&we(t,e=>e.track?.region))}),a){var t=Un(a),o=In(a);r??=!i;var s,l,c={...(n??=T)?{pos:kt(a,e),viewport:Ct()}:A,...(c=e.target,s=a,yt(c??s,e=>re(Tt(e),"IMG")||e===s?(l={element:{tagName:e.tagName,text:j(e,"title")||j(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},E):T),l),...t,...o,timing:{}};if(((e,t="A"===Tt(e)&&j(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"))(a)){var t=a.hostname!==k.hostname,{domain:o,href:u}=Nt(a.href);if(a.host===k.host&&a.pathname===k.pathname&&a.search===k.search)return"#"===a.hash?void 0:void(a.hash!==k.hash&&C(y,{type:"ANCHOR_NAVIGATION",anchor:a.hash,...c}));var f={id:gt(),type:"NAVIGATION",href:t?a.href:u,external:t,domain:o,self:T,anchor:a.hash,...c};if("contextmenu"===e.type){var d=mn(f.id),h=a.href;if(!Rt(h)){if(!q.captureContextMenu)return;a.href=Ft(Dt,"=",ee(h)),Ut(()=>Z.userActivation?.isActive&&Z.clipboard.writeText(h))}var m=Date.now(),g=(or(".tail.cm",m,11e3),w(()=>{a.href=h,d()&&+or(".tail.cm")!==m+1||(or(".tail.cm",A),f.self=E,C(y,f),be(w))},-100),z(v,["keydown","keyup","visibilitychange","pointermove"],()=>g()&&be(w,1e4,()=>or(".tail.cm",""))))}else e.button<=1&&(1===e.button||e.ctrlKey||e.shiftKey||e.altKey||j(a,"target")!==x.name?(mn(f.id),f.self=E,C(y,f)):(xt(k.href,a.href)||(f.exit=f.external,mn(f.id)),b=on(()=>C(y,f))))}else{u=e.target,yt(u,(e,t)=>!!(p??=Tn(Kt(e)?.cart??er(e,"cart")))&&!p.item&&(p.item=ye(Kt(e)?.content,-1))&&t(p));var p,t=En(p);(t||r)&&C(y,t?{type:"CART_UPDATED",...c,...t}:{type:"COMPONENT_CLICK",...c})}}})};return t(m),yn(e=>e.contentDocument&&t(e.contentDocument)),{decorate(e){l(e)&&b(T)}}}},[fn,dn]=e(),hn=([ln,cn,r=T]=[cr,"ref",T],r&&(cn="(t~"+cn),un=(...e)=>ln(cn,...e),(r,e=E)=>{var t,n,a,i;return r===w?(t=A,un(e=>(e=R(e,e=>e[1]>D()),t=he(e)?.[0]??A,e)),t):(n=T,(a=t=>un(e=>t?M(e,e=>e[0]===r?(n=T,[r,D()+1e4]):e):C(e??[],[r,D()+1e4])))(e),(i=_())(()=>(a(T),n||i(),n),-5e3),()=>n)}),mn=e=>hn([y.id,e]),gn=ut(),pn=ut(),vn=ut(),[yn,wn]=e(),bn=new WeakSet,An=m.getElementsByTagName("iframe"),t={id:"context",setup(a){_(()=>h(An,e=>{return((t=bn).has(r=e)?E:(t.add(r),T))&&wn(e);var t,r}),-1e3).pulse();var i=T,r=1,o=E,s=lr("t",e=>(i=!e)?[gt(),D(),D(),0]:(e[2]=D(),e)),l=T,c=(br("first",()=>E,e=>{e||(l=E,y&&$(y,["firstTab","landingPage"]))}),an),u=an,f=A,n=(e=E)=>{var r,n,t;xt(""+f,f=k.href)&&!e||(c(),u(),gn.reset(),pn.reset(),vn.reset(),lr("t",()=>(s[2]=D(),++s[3],s)),{href:e,domain:t}=Nt(k.href)??{},y={type:"VIEW",timestamp:D(),id:gt(),tab:s[0],href:e,path:k.pathname,hash:k.hash||w,domain:t,tabIndex:s[3],viewport:{width:x.innerWidth,height:x.innerHeight}},dn(y.id),(y.firstTab=l)&&1===s[3]&&(y.landingPage=T),r=(e,t,r=p(e,t))=>1<r.length?r:A,(t=(e=v(k.href,/^[^?]*\??/,""))==A?e:(te={},Ne(e,/([^&=]+)(?:=([^&]+))?/g,(e,t,r)=>C(te[ne(Q(t))]??=[],Q(I(r,E)))),te))&&(n=y.queryString=Ee(t,([e,t])=>[e.toLowerCase(),!(1<t.length)&&(r(t[0],"|")||r(t[0],";")||r(t[0],","))||t]),M(["source","medium","campaign","term","content"],(e,t)=>(y.utm??={})[e]=n["utm_"+e]?.[0])),!(y.navigationType=sn)&&performance&&M(performance.getEntriesByType("navigation"),e=>{y.redirects=e.redirectCount,y.navigationType=v(e.type,/\_/g,"-")}),sn=w,"navigate"===(y.navigationType??="navigate")&&i&&Rt(m.referrer)&&(e=hn(),y.view=e?.[0],y.related=e?.[1]),(t=m.referrer||A)&&!Rt(t)&&(y.externalReferrer={href:t,domain:Nt(t)?.domain}),o=E,c=on(()=>(o=T,C(a,y),y?.firstTab&&C(a,{flush:T}))),u=on(()=>{C(a,{type:"VIEW_ENDED",timing:{}},{set:{view:w}}),i=E}),C(a,{get:{view:e=>y.definition=e,rendered(){_(c,100)}}}),a.push({get:{qd(e){var t,r,n;e&&qr()&&C(a,{type:"USER_AGENT",hasTouch:0<Z.maxTouchPoints,userAgent:Z.userAgent,view:y?.id,languages:M(Z.languages,(e,t,r=p(e,"-"))=>({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...(e=x?.screen,e?({width:e,height:t,orientation:n}=e,r=e<t,-90!==(n=n?.angle??x.orientation??0)&&90!==n||([e,t]=[t,e]),{deviceType:e<480?"mobile":1024<e?"desktop":"tablet",screen:{dpr:x.devicePixelRatio,width:e,height:t,landscape:r}}):{})})}}}))},e=_(),t=(z(m,["pointermove","scroll","pointerdown","keydown"],()=>{vn(T),e(()=>vn(E),1e4)}),z(m,"visibilitychange",()=>{"hidden"===m.visibilityState?(pn(E),vn(E)):(pn(T),++r)}),z(x,"popstate",()=>(sn="back-forward",n())),M(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),sn="navigate",n()}}),n(),_()),d=()=>o&&0<q.heartbeatFrequency&&t(()=>qr()&&a.push({type:"HEARTBEAT",timing:{}}),-q.heartbeatFrequency);return d(),{processCommand(e){return Dn(e)?(a.push(e.username?{type:"LOGIN",username:e.username}:{type:"LOGOUT"}),T):E},decorate(e){var t;d(),y&&!W(e)&&(t={view:y?.id,timing:e?.timing&&{activations:r,totalTime:gn(),visibleTime:pn(),interactiveTime:vn()}},L(e,t),e!==(t=y))&&(e[ur]??=[]).push(t)}}}},Tn=e=>I(e=e==A||e!==T&&""!==e?e:"add")&&re(e,"add","remove","update","clear")?{action:e}:le(e)?e:w;function En(e){if(!e)return w;if(e.units!=A&&re(e.action,A,"add","remove")){if(0===e.units)return w;e.action=0<e.units?"add":"remove"}return e}var xn,kn,P,r={id:"cart",setup(r){return{processCommand(e){var t;return $n(e)?("clear"===(t=e.cart)?C(r,{type:"CART_UPDATED",action:"clear"}):(t=En(t))&&C(r,{...t,type:"CART_UPDATED"}),T):Bn(e)?(C(r,{type:"ORDER",...e.order}),T):E}}}},In=e=>rr(e,w,e=>M(g(Gt,e)?.tags)),Sn=e=>e?.component||e?.content,Nn=(e,t)=>t?e:{...e,rect:w,content:(kn=e.content)&&M(kn,e=>({...e,rect:w}))},Cn=_(),Un=(e,i=E)=>{be(Cn);var o,t,r,s=[],l=[],c=0;return yt(e,e=>{var r,t,n,a=g(Gt,e);a&&(Sn(a)&&(t=R(a.component,e=>0===c||!i&&(1===c&&e.track?.secondary!==T||e.track?.promote)),o=we(t,e=>e.track?.region)&&St(e)||w,r=rr(n=e,e=>e!==n&&!!Sn(g(Gt,e)),e=>(xn=g(Gt,e))&&me(ve([xn.component,xn.content],e=>ve(e,e=>M(e.tags,E))),xn.tags)),a.content&&de(s,...M(a.content,e=>({...e,rect:o,...r}))),t.length)&&(de(l,...M(t,e=>{return t=[c,e.track?.secondary?1:2],c=Math.max(...t),Nn({...e,content:s,rect:o,...r},!!o);var t})),s=[]),t=a.area||er(e,"area"))&&de(l,...M(t))}),s.length&&C(l,Nn({id:"",rect:o,content:s})),h(l,e=>{I(e)?C(t??=[],e):(e.area??=Fe(t,"/"),de(r??=[],e))}),r||t?{components:r,area:Fe(t,"/")}:w},On=Symbol(),e={id:"components",setup(f){var r=new IntersectionObserver(e=>h(e,({target:e,isIntersecting:t,boundingClientRect:r,intersectionRatio:n})=>e[On]?.(t,r,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});function t({boundary:n,...t}){var a,i,o,s,l,c,u,e="add"in t?e=>({...e,component:me(e?.component,t.component),content:me(e?.content,t.content),area:t?.area??e?.area,tags:me(e?.tags,t.tags),cart:t.cart??e?.cart,track:t.track??e?.track}):t.update;Ae(Gt,n,e??t),(a=R(g(Gt,n)?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==T))&&U(a)&&(o=E,s=0,l=A,c=_(),u=ut(()=>pn(),E),n[On]=(e,t,r)=>{e=.75<=r||t.top<(i=window.innerHeight/2)&&t.bottom>i,u(e),o!==(o=e)&&(o?c(()=>{var e;++s,l||(e=R(M(a,e=>e.track?.impressions||tr(n,"impressions",T,e=>e.track?.impressions)?{type:"IMPRESSION",pos:kt(n),viewport:Ct(),...Un(n,T)}:A)),l=on(()=>C(f,...M(e,e=>(e.duration=u(),e.impressions=s,e)))))},-q.impressionThreshold):be(c)),n.isConnected||(l?.(),l=A)},r.observe(n))}return{decorate(e){h(e.components,e=>$(e,"track"))},processCommand(e){return jn(e)?(t(e),T):Ln(e)?(M((l=e.scan.attribute,(c=e.scan.components)?(u=[],f=F(),m.querySelectorAll(`[${l}]`).forEach(t=>{if(!g(f,t))for(var e=[];j(t,l)!=A;){Ae(f,t);var r=p(j(t,l),"|");j(t,l,A);for(var n=0;n<r.length;n++){var a=r[n];if(""!==a){var i="-"===a?-1:G(I(a,E)??"",36);if(i<0)e.length+=i;else{if(0===n&&(e.length=0),isNaN(i)&&/^["\[{]/.test(a))for(var o="";n<r.length;n++)try{a=JSON.parse(o+=r[n]);break}catch(e){}0<=i&&c[i]&&(a=c[i]),e.push(a)}}}C(u,...M(e,e=>({add:T,...e,boundary:t})));var s=t.nextElementSibling;"WBR"===t.tagName&&t.parentNode?.removeChild(t),t=s}}),u):[]),t),T):E;var l,c,u,f}}}},Mn={id:"scroll",setup(n){var a={},i=Et(T);fn(()=>ft(()=>(a={},i=Et(T)),250)),z(x,"scroll",()=>{var e,t=Et(),r={x:(Ke=Et(E)).x/(J.offsetWidth-x.innerWidth)||0,y:Ke.y/(J.offsetHeight-x.innerHeight)||0};t.y>=i.y&&(e=[],!a.fold&&t.y>=i.y+200&&(a.fold=T,e.push("fold")),!a["page-middle"]&&.5<=r.y&&(a["page-middle"]=T,e.push("page-middle")),!a["page-end"]&&.99<=r.y&&(a["page-end"]=T,e.push("page-end")),(t=M(e,e=>({type:"SCROLL",scrollType:e,offset:r}))).length)&&C(n,t)})}},Rn=Symbol(),Fn=[t,e,sr,Mn,r,{id:"forms",setup(s){var l=new Map,c=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,u=A,f=()=>{var e,r,t,n,a,i,o;u&&([e,r,t,n]=u,a=-(d-(d=pn())),i=-(h-(h=D(T))),o=r[Rn],(r[Rn]=c(t))!==o&&(r.fillOrder??=n[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=T,n[3]=2,O(e.fields,([e,t])=>t.lastField=e===r.name||w)),r.activeTime+=a,r.totalTime+=i,e.activeTime+=a,u=A)},d=0,h=0,t=e=>{e&&z(e,["focusin","focusout","change"],(e,t,r=((e,[t,r]=(e=>{var i,n,a,o=e.form;if(o)return n=wt(o,Xt("ref"))||"track_ref",a=Te(l,o,()=>{var e,t=new Map,r={type:"FORM",name:wt(o,Xt("form-name"))||j(o,"name")||o.id||w,activeTime:0,totalTime:0,fields:{}},n=()=>{f(),2<=e[3]&&(r.completed=3===e[3]||!(o.isConnected&&St(o).width)),C(s,{...i,...r,totalTime:D(T)-e[4]}),e[3]=1},a=(fn(n),Jr(n),_());return z(o,"submit",()=>{i=Un(o),e[3]=3,a(()=>{(o.isConnected&&0<St(o).width?(e[3]=2,a):n)()},750)}),e=[r,t,o,0,D(T),1]}),g(a[1],e)||M(o.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{var r;e.name&&"hidden"!==e.type?(r=e.name,r=a[0].fields[r]??={id:e.id||r,name:r,label:v(ye(e.labels,0)?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[Rn]:c(e)},a[0].fields[r.name]=r,a[1].set(e,r)):"hidden"!==e.type||e.name!==n&&!tr(e,"ref")||(e.value||(e.value=v([1e7]+-1e3+-4e3+-8e3+-1e11,/[018]/g,e=>((e*=1)^dt(new Uint8Array(1))[0]&15>>e/4).toString(16))),a[0].ref=e.value)}),[e,a]})(e)??[],n=r?.[1].get(t))=>n&&[r[0],n,t,r])(e.target))=>{r&&(u=r,"focusin"===e.type?(h=D(T),d=pn()):f())})};t(m),yn(e=>e.contentDocument&&t)}}],t=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==t?.[e]),$n=t("cart"),Dn=t("username"),_n=t("tagAttributes"),qn=t("disable"),jn=t("boundary"),zn=t("extension"),Pn=t(T,"flush"),Vn=t("get"),Wn=t("listener"),Bn=t("order"),Ln=t("scan"),Hn=t("set"),Gn=e=>"function"==typeof e,Kn=t=>{var r,e,l,c,u,n,a,i,f,d,o,h,m,g,s,p,v,y;return P||(I(t)&&(t=it(t)),M(["vars","hub"],e=>!S(t[e])&&(t[e]=Ft(t[e]))),L(q,t),e=$(q,"clientKey"),[ot,st]=rt(e),r=$(q,"apiKey"),e=x[q.name]??[],N(e)?(l=[],c=[],u=(t,...r)=>{var n=T;c=R(c,e=>Ut(()=>(e[t]?.(...r,{tracker:P,unsubscribe:()=>n=E}),n)))},Xr(e=>u("post",e)),n=[],pr(()=>n.length&&C(P,...n)),i=Object.fromEntries(M(["view","tags","rendered","loaded","scripts","qd"],e=>[e,T])),[f,d]=(s=P,p={},v={},y=(e,t)=>[v[e]??=[],t?v[e]=[]:v[e]],[(e,i)=>{if(!e)return p;M(O(e),([e,t])=>{if(!t)return b("invalid-argument",e);var n=t,[r]=y(e,E),a=E;t=(e,t,r)=>(a=T,Ut(()=>n(e,t,r,s))),p[e]===w&&0!==i?(C(r,t),i&&0<i&&setTimeout(()=>!a&&t(w,e,T,s)!==T&&(n=()=>{}),i)):t(p[e],e,T,s)===T&&C(r,t)})},(...e)=>{var t=ye(e,-1)===T,e=N(e[0])?e[0]:le(e[0])?O(e[0]):[[e[0],e[1]]];M(e,([t,r])=>{p[t=""+t]=r;var[e,n]=y(t,T);M(e,e=>e(r,t,E,s)===T&&C(n,e))}),t||U(a=R(e,([e])=>!i[e]))&&o(a)}]),Vr((e,t)=>d(t)),o=br("vars",()=>M(R(O(f()),([e])=>!i[e]),([e,t])=>[e,t]),e=>e&&d(e,T)),h=A,m=0,g=E,At(x,{[q.name]:[P=At({},{id:[gt()],push:[(...e)=>{if(!h&&r){if(e[0]!==r)throw new Error("Invalid API key.");e.splice(0,1)}if(e.length){e=e.flatMap(e=>(e&&"string"==typeof e&&(e=it(e)),N(e)?e:[e]));var t=E;if((e=R(e,e=>{if(!e)return E;if(_n(e))q.tags=L({},q.tags,e.tagAttributes);else{if(qn(e))return q.disabled=e.disable,E;if(Pn(e))return t=T,E;if(Gn(e))return e(P),E}return yr||Wn(e)||zn(e)?T:(n.push(e),E)})).length||t){e=ue(e,e=>zn(e)?-100:Wn(e)?-50:Hn(e)?-10:V(e)?90:0);if(!h||!fe(h,g?m+1:h.length,0,...e)){for(h=e,m=0;m<h.length;m++)h[m]&&Ut(()=>{var r=h[m];if(u("command",r),g=E,V(r)){r.timestamp??=D(),B(r)&&fe(h,m+1,0,{set:{consent:r.nonEssentialTracking}}),g=T;var n=E;if(M(l,([,e],t)=>{!n&&e.decorate?.(r)!==E||(n=T)}),!n){for(var e,t=[r],a=[];t.length;){var i=he(t);(t=>!hr(t)&&(M(t[ur],e=>Ae(Te(dr,e,()=>F()),t)),T))(i)||(Ae(fr,e=i),(e=(ir=dr.get(e))&&(ir.size||$(dr,e),R(ir,e=>hr(e)&&($(ir,e),T))))&&fe(t,1,0,...e),C(a,i))}Qr(...a)}}else if(Vn(r))f(r.get,r.timeout);else if(Hn(r))d(r.set),M(O(r.set),([e,t])=>u("set",e,t));else if(Wn(r))C(c,r.listener);else if(zn(r))(o=Ut(()=>r.extension.setup(P),e=>b(A,r.extension,e)))&&(C(l,[r.priority??100,o]),ue(l,([e])=>e));else if(Gn(r))r(P);else{var o,s=E;for([,o]of l)if(s=o.processCommand?.(r)??E)break;s||b("invalid-command",r)}},e=>b("internal-error",A,e));h=A,t&&en()}}}}],__isTracker:[T]})]}),qt(),C(P,{set:{loaded:T}},...M(Fn,e=>({extension:e})),...e),P):void b(`The global variable for the tracker "${q.name}" is used for something else than an array of queued commands.`))},Xn=E;At(x,{".tail.js.init":[e=>{Xn!==(Xn=T)&&e(Kn)}]})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFpbC5kZWJ1Zy5tYXAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25wbS9jb25zdGFudHMvY29uc3RhbnRzLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvb2JqZWN0cy50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL3JlZ2V4LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvdHlwZXMvc3JjL3V0aWwvdHlwZS10ZXN0LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvdHlwZXMvc3JjL2V2ZW50cy9UcmFja2VkRXZlbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy90eXBlcy9zcmMvZXZlbnRzL1ZpZXdFdmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL3R5cGVzL3NyYy9ldmVudHMvVmlld0VuZGVkRXZlbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy90eXBlcy9zcmMvZXZlbnRzL0NvbnNlbnRFdmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL3R5cGVzL3NyYy91dGlsL3BhcnNlVGFnU3RyaW5nLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvYWxpYXMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi9kb20tYWxpYXMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi91dGlsLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvdHlwZS10ZXN0LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvaXRlcmF0aW9uLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvcHJvbWlzZS50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL3V0aWwvc3JjL3R5cGVzLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvdXRpbC9zcmMvYmFzZTY0LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvdXRpbC9zcmMvbGZzci50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9ub2RlX21vZHVsZXMvLnBucG0vQHlnb2UrbXNncGFja0AxLjAuMy9ub2RlX21vZHVsZXMvQHlnb2UvbXNncGFjay9tc2dwYWNrLmpzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvZG9tLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvdXRpbC9zcmMvdHJhbnNwb3J0LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvY2lwaGVyLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvdGltZS50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL2lkcy50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL2NvbmZpZy50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL2Vudi50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL2V2ZW50U2V0LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvZG9tLWRhdGEudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi9zdG9yYWdlLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvZGVwZW5kZW5jeU1hbmFnZXIudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi9jaGFubmVsLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvc2hhcmVkLXN0YXRlLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvY29vcmRpbmF0ZS1jb21taXRzLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvcmVxdWVzdE11dGV4LnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9saWIvZXZlbnRRdWV1ZS50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvbGliL3JlZ2lzdGVyVmlld0VuZEFjdGlvbi50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvZXh0ZW5zaW9ucy9kZXZpY2VEZXRlY3Rpb24udHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2V4dGVuc2lvbnMvY29udGV4dC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvZXh0ZW5zaW9ucy91c2VySW50ZXJhY3Rpb24udHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2V4dGVuc2lvbnMvY29tbWVyY2UudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2V4dGVuc2lvbnMvY29tcG9uZW50cy50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvaW5pdGlhbGl6ZVRyYWNrZXIudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi9zY2FuQ29tcG9uZW50cy50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvZXh0ZW5zaW9ucy9zY3JvbGwudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2V4dGVuc2lvbnMvZm9ybXMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2V4dGVuc2lvbnMvZGVmYXVsdEV4dGVuc2lvbnMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2NvbW1hbmRzL3NoYXJlZC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvY29tbWFuZHMvQ2FydENvbW1hbmQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2NvbW1hbmRzL0NoYW5nZVVzZXJDb21tYW5kLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9jb21tYW5kcy9Db25maWdDb21tYW5kLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9jb21tYW5kcy9Ub2dnbGVDb21tYW5kLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9jb21tYW5kcy9Cb3VuZGFyeUNvbW1hbmQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2NvbW1hbmRzL0V4dGVuc2lvbkNvbW1hbmQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2NvbW1hbmRzL0ZsdXNoQ29tbWFuZC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvY29tbWFuZHMvR2V0Q29tbWFuZC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvY29tbWFuZHMvTGlzdGVuZXJDb21tYW5kLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9jb21tYW5kcy9PcmRlckNvbW1hbmQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2NvbW1hbmRzL1NjYW5Db21wb25lbnRzQ29tbWFuZC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvY29tbWFuZHMvU2V0Q29tbWFuZC50cyIsIi4uLy4uLy4uLy4uLy4uL25wbS9wYWNrYWdlcy9AdGFpbGpzL2NsaWVudC9zcmMvY29tbWFuZHMvVHJhY2tlckF2YWlsYWJsZUNvbW1hbmQudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2xpYi92YXJpYWJsZXMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2luZGV4LmJyb3dzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTVVTVCBNQVRDSCBwYWNrYWdlc1xcQHRhaWxqc1xcZW5naW5lXFxzcmNcXFJlcXVlc3RIYW5kbGVyLnRzXG5leHBvcnQgY29uc3QgTVVURVhfUkVRVUVTVF9DT09LSUUgPSBcIi50YWlsLnJxXCI7XG5leHBvcnQgY29uc3QgTVVURVhfUkVTUE9OU0VfQ09PS0lFID0gXCIudGFpbC5yc1wiO1xuZXhwb3J0IGNvbnN0IENPTlRFWFRfTUVOVV9DT09LSUUgPSBcIi50YWlsLmNtXCI7XG5cbmV4cG9ydCBjb25zdCBRVUVSWV9ERVZJQ0UgPSBcInFkXCI7XG5leHBvcnQgY29uc3QgSU5JVElBTElaRV9UUkFDS0VSX0ZVTkNUSU9OID0gXCIudGFpbC5qcy5pbml0XCI7XG5cbmV4cG9ydCBjb25zdCBFVkVOVF9IVUJfUVVFUlkgPSBcInZhclwiO1xuZXhwb3J0IGNvbnN0IFZBUklBQkxFU19RVUVSWSA9IFwidXNyXCI7XG5leHBvcnQgY29uc3QgQ09OVEVYVF9NRU5VX1FVRVJZID0gXCJtbnRcIjtcbiIsIi8vIFV0aWxpdHkgZnVuY3Rpb25zIGZvciB0ZXN0aW5nIGFuZCBtYW5pcHVsYXRpbmcgdmFsdWVzLCBzZXRzIGFuZCBvYmplY3RzLlxuXG5pbXBvcnQgdHlwZSB7XG4gIEFyZ051bGxzLFxuICBLZXlWYWx1ZVByb2plY3Rpb24sXG4gIE51bGxpc2gsXG4gIE51bGxzLFxuICBPbWl0TnVsbGlzaCxcbn0gZnJvbSBcIkB0YWlsanMvdXRpbFwiO1xuaW1wb3J0IHtcbiAgRixcbiAgVCxcbiAgYXJyYXksXG4gIGFzc2lnbixcbiAgZW50cmllcyxcbiAgZmlsdGVyLFxuICBmb3JFYWNoLFxuICBmcm9tRW50cmllcyxcbiAgZnVuLFxuICBrZXlzLFxuICBuaWwsXG4gIG9iaixcbn0gZnJvbSBcIi5cIjtcblxuLyoqXG4gKiBCZXR0ZXIgbWluaWZ5YWJsZSB3YXkgdG8gaW5zdGFudGlhdGUgYSBTZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoU2V0ID0gPFQgPSBhbnk+KHZhbHVlcz86IHJlYWRvbmx5IFRbXSB8IG51bGwpID0+XG4gIG5ldyBTZXQ8VD4odmFsdWVzKTtcblxuLyoqXG4gKiBCZXR0ZXIgbWluaWZ5YWJsZSB3YXkgdG8gaW5zdGFudGlhdGUgYSBNYXAuXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoTWFwID0gPEsgPSBhbnksIFYgPSBhbnk+KFxuICBlbnRyaWVzPzogcmVhZG9ubHkgKHJlYWRvbmx5IFtLLCBWXSlbXSB8IG51bGxcbikgPT4gbmV3IE1hcDxLLCBWPihlbnRyaWVzKTtcblxuLyoqXG4gKiBCZXR0ZXIgbWluaWZ5YWJsZSB3YXkgdG8gaW5zdGFudGlhdGUgYSBXZWFrTWFwLlxuICovXG5leHBvcnQgY29uc3Qgd2Vha01hcCA9IDxLIGV4dGVuZHMgb2JqZWN0ID0gYW55LCBWID0gYW55PihcbiAgZW50cmllcz86IHJlYWRvbmx5IChyZWFkb25seSBbSywgVl0pW10gfCBudWxsXG4pID0+IG5ldyBXZWFrTWFwPEssIFY+KGVudHJpZXMpO1xuXG4vKipcbiAqIEEgY29tbW9uIHBhdHRlcm4gdXNlZCBpbiB0aGUgY29kZSBiYXNlIHdoZXJlIHNvbWV0aGluZyBoYXMgYSBgY2xlYXJgIG1ldGhvZC5cbiAqL1xudHlwZSBDbGVhcmFibGU8QSBleHRlbmRzIGFueVtdPiA9IHsgY2xlYXIoLi4uYXJnczogQSk6IGFueSB9O1xuXG4vKipcbiAqICBHZW5lcmFsIGZ1bmN0aW9uIHRvIFwiY2xlYXJcIiBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHMuXG4gKi9cbmV4cG9ydCBjb25zdCBjbGVhcjoge1xuICA8VCBleHRlbmRzIENsZWFyYWJsZTxBPiB8IE51bGxpc2gsIEEgZXh0ZW5kcyBhbnlbXSA9IFtdPihcbiAgICBtYXA6IFQsXG4gICAgLi4uYXJnczogQVxuICApOiBUO1xuICA8VCBleHRlbmRzIFJlY29yZDxrZXlvZiBhbnksIGFueT4+KHJlY29yZDogVCk6IFQ7XG59ID0gKGNsZWFyYWJsZTogYW55LCAuLi5hcmdzOiBhbnlbXSkgPT4gKFxuICBjbGVhcmFibGUgIT0gbmlsICYmXG4gICAgKGNsZWFyYWJsZS5jbGVhclxuICAgICAgPyBjbGVhcmFibGUuY2xlYXIoLi4uYXJncylcbiAgICAgIDogYXJyYXkoY2xlYXJhYmxlKVxuICAgICAgPyAoY2xlYXJhYmxlLmxlbmd0aCA9IDApXG4gICAgICA6IGtleXMoY2xlYXJhYmxlLCAoa2V5KSA9PiBkZWwoY2xlYXJhYmxlLCBrZXkpKSksXG4gIGNsZWFyYWJsZVxuKTtcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYSBzZXQgaGFzIGEgc3BlY2lmaWVkIGtleSwgYW5kIGlmIG5vdCwgc2V0cyBpdCBhbmQgcmV0dXJucyBgdHJ1ZWAuIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGZvciByZWN1cnNpdmUgaXRlcmF0aW9uIHdoZXJlIHRoZSBzYW1lIGVsZW1lbnQgbXVzdCBub3QgYmUgdmlzaXRlZCBtb3JlIHRoYW4gb25jZSAoYmVjYXVzZSBpbmZpbml0ZSByZWN1cnNpb24gc3Vja3MpLlxuICovXG5leHBvcnQgY29uc3QgbWFyayA9IDxLPihcbiAgc2V0OiB7IGhhcyh2YWx1ZTogSyk6IGJvb2xlYW47IGFkZCh2YWx1ZTogSyk6IGFueSB9LFxuICB2YWx1ZTogS1xuKSA9PiAoc2V0Lmhhcyh2YWx1ZSkgPyBGIDogKHNldC5hZGQodmFsdWUpLCBUKSk7XG5cbi8qKlxuICogQSBnZW5lcmFsaXplZCBmdW5jdGlvbiB0byBnZXQgdmFsdWVzIGZyb20gbWFwcywgdGVzdCBleGlzdGVuY2UgaW4gc2V0cyBhbmQgZ2V0IHByb3BlcnRpZXMgb24gb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldDoge1xuICA8SywgViwgQXJnPihcbiAgICB0YXJnZXQ6IEFyZ051bGxzPHsgZ2V0KGtleTogSyk6IFYgfSB8IHsgaGFzKGtleTogSyk6IFYgfSwgQXJnPixcbiAgICBrZXk6IEtcbiAgKTogViB8IE51bGxzPEFyZywgdW5kZWZpbmVkPjtcbiAgPEsgZXh0ZW5kcyBrZXlvZiBhbnksIFYsIEFyZz4odGFyZ2V0OiBBcmdOdWxsczxSZWNvcmQ8SywgVj4sIEFyZz4sIGtleTogSyk6XG4gICAgfCBWXG4gICAgfCBOdWxsczxBcmcsIHVuZGVmaW5lZD47XG59ID0gKHRhcmdldDogYW55LCBrZXk6IGFueSkgPT5cbiAgdGFyZ2V0LmdldD8uKGtleSkgPz8gdGFyZ2V0Py5oYXMoa2V5KSA/PyB0YXJnZXQ/LltrZXldO1xuXG4vKipcbiAqIEEgZ2VuZXJhbGl6ZWQgZnVuY3Rpb24gdG8gcmVtb3ZlIGl0ZW1zIGZyb20gc2V0cyBhbmQgbWFwcywgYW5kIGRlbGV0ZSBwcm9wZXJ0aWVzIGZyb20gb2JqZWN0cy5cbiAqIFdoZW4gb25seSBhIHNpbmdsZSBrZXkvcHJvcGVydHkgaXMgc3BlY2lmaWVkIHRoZSBkZWxldGVkIHZhbHVlIGlzIHJldHVybmVkIChgdW5kZWZpbmVkYCBpZiBub3QgcHJlc2VudCkuXG4gKlxuICogTXVsdGlwbGUga2V5cyBjYW4gYmUgc3BlY2lmaWVkIGFzIG9uY2UgaW4gd2hpY2ggY2FzZSB0aGUgdGFyZ2V0IHdpbGwganVzdCBiZSByZXR1cm5lZCAobGlrZSBmbHVlbnQgQVBJIG9yIHdoYXRldmVyKS5cbiAqL1xuXG5leHBvcnQgY29uc3QgZGVsOiB7XG4gICh0YXJnZXQ6IG51bGwgfCB1bmRlZmluZWQsIGtleXM6IHN0cmluZyB8IHN0cmluZ1tdKTogdW5kZWZpbmVkO1xuICA8SywgVj4odGFyZ2V0OiB7IGdldChrZXk6IEspOiBWOyBkZWxldGUoa2V5OiBLKTogYW55IH0sIGl0ZW06IEspOlxuICAgIHwgVlxuICAgIHwgdW5kZWZpbmVkO1xuICA8SywgUj4oXG4gICAgdGFyZ2V0OiB7IGhhcyhrZXk6IEspOiBib29sZWFuOyBkZWxldGUoa2V5OiBLKTogYW55IH0sXG4gICAgaXRlbTogS1xuICApOiBib29sZWFuO1xuICA8VCBleHRlbmRzIHsgZGVsZXRlKGtleTogSyk6IGFueSB9LCBLPih0YXJnZXQ6IFQsIGtleXM6IEtbXSk6IFQ7XG4gIDxULCBLIGV4dGVuZHMga2V5b2YgVD4odGFyZ2V0OiBULCBrZXk6IEspOiBUW0tdIHwgdW5kZWZpbmVkO1xuICA8VD4odGFyZ2V0OiBULCBrZXlzOiAoa2V5b2YgVClbXSk6IFQ7XG59ID0gPFQ+KFxuICB0YXJnZXQ6XG4gICAgfCB7IGdldD8oaXRlbTogVCk6IGFueTsgaGFzPyhrZXk6IGFueSk6IGJvb2xlYW47IGRlbGV0ZT8oaXRlbTogVCk6IGFueSB9XG4gICAgfCBudWxsXG4gICAgfCB1bmRlZmluZWQsXG4gIGtleTogYW55XG4pID0+XG4gICF0YXJnZXRcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogYXJyYXkoa2V5KVxuICAgID8gKGZvckVhY2goa2V5LCAoa2V5KSA9PiB0YXJnZXQuZGVsZXRlPy4oa2V5KSA/PyBkZWxldGUgdGFyZ2V0W2tleV0pLFxuICAgICAgdGFyZ2V0KVxuICAgIDogKGN1cnJlbnRWYWx1ZSA9IHRhcmdldC5oYXM/LihrZXkpKSAhPSBudWxsXG4gICAgPyAhY3VycmVudFZhbHVlXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiAoKGN1cnJlbnRWYWx1ZSA9IHRhcmdldC5nZXQ/LihrZXkpKSxcbiAgICAgICAgdGFyZ2V0LmRlbGV0ZSEoa2V5KSxcbiAgICAgICAgY3VycmVudFZhbHVlID8/IFQpXG4gICAgOiAoKGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtrZXldKSwgZGVsZXRlIHRhcmdldFtrZXldLCBjdXJyZW50VmFsdWUpO1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgc3BlY2lmaWVkIGtleSBpbiBhIG1hcCwgdG9nZ2xlcyB0aGUgaXRlbSBpbiBhIHNldCwgb3Igc2V0cyB0aGUgcHJvcGVydHkgb24gYW4gb2JqZWN0LlxuICpcbiAqIFRoZSB2YWx1ZSBgdW5kZWZpbmVkYCBkZWxldGVzIHRoZSBrZXkvcHJvcGVydHkgZnJvbSBtYXBzIGFuZCBvYmplY3RzLlxuICogRm9yIHNldHMgYHVuZGVmaW5lZGAgY29ycmVzcG9uZHMgdG8gdGhlIGRlZmF1bHQgdmFsdWUgYHRydWVgLCBzbyBoZXJlIGl0IGhhcyB0aGUgb3Bwb3NpdGUgZWZmZWN0LlxuICovXG5sZXQgY3VycmVudFZhbHVlOiBhbnk7XG5leHBvcnQgY29uc3Qgc2V0OiB7XG4gIDxUPihcbiAgICBzZXQ6IHsgYWRkKGtleTogVCk6IHZvaWQ7IGRlbGV0ZShrZXk6IFQpOiB2b2lkIH0sXG4gICAgaXRlbTogVCxcbiAgICB0b2dnbGU/OiBib29sZWFuXG4gICk6IGJvb2xlYW47XG4gIDxLLCBWPihcbiAgICBtYXA6IHtcbiAgICAgIGdldChrZXk6IEspOiBWIHwgbnVsbDtcbiAgICAgIHNldChrZXk6IEssIHZhbHVlOiBWKTogYW55O1xuICAgICAgZGVsZXRlKGtleTogSyk6IHZvaWQ7XG4gICAgfSxcbiAgICBrZXk6IEssXG4gICAgdmFsdWU6IFYgfCAoKGN1cnJlbnQ6IFYgfCBudWxsKSA9PiBWIHwgbnVsbCkgfCBOdWxsaXNoXG4gICk6IGJvb2xlYW47XG59ID0gKHRhcmdldDogYW55LCBrZXk6IGFueSwgdmFsdWU6IGFueSA9IHVuZGVmaW5lZCkgPT5cbiAgISF0YXJnZXQuYWRkIC8vIEl0J3MgYSBzZXRcbiAgICA/ICgoY3VycmVudFZhbHVlID0gdGFyZ2V0LmhhcyhrZXkpKSxcbiAgICAgIGN1cnJlbnRWYWx1ZSA9PT0gKHZhbHVlID8/PSBUKSAvLyBUb2dnbGU/IChEZWZhdWx0IGlzIGB0cnVlYCB3aGljaCB3ZSBzZXQgaGVyZSkuXG4gICAgICAgID8gRlxuICAgICAgICA6ICh2YWx1ZSA/IHRhcmdldC5hZGQoa2V5KSA6IGRlbCh0YXJnZXQsIGtleSksIFQpKVxuICAgIDogKChjdXJyZW50VmFsdWUgPSB0YXJnZXQuZ2V0Py4oa2V5KSA/PyB0YXJnZXRba2V5XSksIC8vIEdldCBpdGVtIGZyb20gbWFwIC8gcmVhZCBwcm9wZXJ0eSBmcm9tIG9iamVjdC5cbiAgICAgIGZ1bih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUoY3VycmVudFZhbHVlKSksIC8vIEFwcGx5IG9wdGlvbmFsIHByb2plY3Rpb24gb24gY3VycmVudCB2YWx1ZS5cbiAgICAgIHZhbHVlID09PSBjdXJyZW50VmFsdWVcbiAgICAgICAgPyBGIC8vIE5vIGNoYW5nZVxuICAgICAgICA6ICh2YWx1ZSA9PT0gdW5kZWZpbmVkIC8vIGB1bmRlZmluZWRgIG1lYW5zIFwiZGVsZXRlXCIuXG4gICAgICAgICAgICA/IGRlbCh0YXJnZXQsIGtleSlcbiAgICAgICAgICAgIDogdGFyZ2V0LnNldD8uKGtleSwgdmFsdWUpID8/ICh0YXJnZXRba2V5XSA9IHZhbHVlKSxcbiAgICAgICAgICAvLyBSZXR1cm4gdGhhdCB0aGUgdmFsdWUgd2FzIGNoYW5nZWQuXG4gICAgICAgICAgVCkpO1xuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgaXRlbSBmb3IgYSBrZXkgaW4gYSBtYXAsIG9yIGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LlxuICogSWYgbm8gdmFsdWUgaXMgcHJlc2VudCwgaXQgaXMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgYGRlZmF1bHRWYWx1ZWAgYW5kIHRoZW4gcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRPclNldDoge1xuICA8SywgViwgUiBleHRlbmRzIFYgfCBSZWFkb25seTxWPj4oXG4gICAgbWFwOlxuICAgICAgfCB7XG4gICAgICAgICAgaGFzKGtleTogSyk6IGJvb2xlYW47XG4gICAgICAgICAgZ2V0KGtleTogSyk6IFYgfCBOdWxsaXNoO1xuICAgICAgICAgIHNldChrZXk6IEssIHZhbHVlOiBWKTogdm9pZDtcbiAgICAgICAgfVxuICAgICAgfCBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+LFxuICAgIGtleTogSyxcbiAgICBkZWZhdWx0VmFsdWU6IChrZXk6IEspID0+IFJcbiAgKTogVjtcbiAgPFxuICAgIFQgZXh0ZW5kcyBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+LFxuICAgIEsgZXh0ZW5kcyBrZXlvZiBULFxuICAgIFYsXG4gICAgUiBleHRlbmRzIFYgfCBSZWFkb25seTxWPlxuICA+KFxuICAgIHRhcmdldDogVCxcbiAgICBrZXk6IEssXG4gICAgZGVmYXVsdFZhbHVlOiAoa2V5OiBLKSA9PiBSXG4gICk6IFY7XG59ID0gKG1hcDogYW55LCBrZXk6IGFueSwgZGVmYXVsdFZhbHVlOiAoa2V5OiBhbnkpID0+IGFueSkgPT5cbiAgbWFwLmhhcz8uKGtleSlcbiAgICA/IG1hcC5nZXQ/LihrZXkpXG4gICAgOiAoKGN1cnJlbnRWYWx1ZSA9IGRlZmF1bHRWYWx1ZShrZXkpKSxcbiAgICAgIG1hcC5zZXQ/LihrZXksIGN1cnJlbnRWYWx1ZSlcbiAgICAgICAgPyBjdXJyZW50VmFsdWVcbiAgICAgICAgOiAobWFwW2tleV0gPz89IGRlZmF1bHRWYWx1ZShrZXkpKSk7XG5cbi8qKlxuICogQ29udmVuaWVudCB3YXkgdG8gdXNlIHRoZSB2YWx1ZXMgZnJvbSBhIHR1cGxlLlxuICogSWYgdGhlIHR1cGxlIGlzIG51bGwgb3IgdW5kZWZpbmVkLCB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZCBvZiBhcHBseWluZyB0aGUgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvbXBvc2UgPSA8VmFsdWVzIGV4dGVuZHMgYW55W10gfCBOdWxsaXNoLCBSPihcbiAgdHVwbGU6IFZhbHVlcyxcbiAgYXBwbHk6ICguLi52YWx1ZXM6IE9taXROdWxsaXNoPFZhbHVlcz4pID0+IFJcbik6IFIgfCBOdWxsczxWYWx1ZXM+ID0+IHR1cGxlICYmIGFwcGx5KC4uLih0dXBsZSBhcyBhbnkpKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBieSBwcm9qZWN0aW5nIG9yIGV4Y2x1ZGluZyB0aGUgcHJvcGVydGllcyBvZiBhbiBleGlzdGluZyBvbmUuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc3Bvc2UgPSA8XG4gIEsgZXh0ZW5kcyBrZXlvZiBhbnksXG4gIFYsXG4gIEtQIGV4dGVuZHMga2V5b2YgYW55ID0gSyxcbiAgVlAgPSBWXG4+KFxuICBzb3VyY2U6IFJlY29yZDxLLCBWPixcbiAgcHJvamVjdGlvbj86IEtleVZhbHVlUHJvamVjdGlvbjxLLCBWLCBbS1AsIFZQXSB8IG51bGw+LFxuICBhZGRpdGlvbmFsRW50cmllcz86IFJlY29yZDxLUCwgVlA+XG4pOiBSZWNvcmQ8S1AsIFZQPiA9PlxuICBhZGRpdGlvbmFsRW50cmllc1xuICAgID8gYXNzaWduKHRyYW5zcG9zZShzb3VyY2UsIHByb2plY3Rpb24pLCBhZGRpdGlvbmFsRW50cmllcylcbiAgICA6IHByb2plY3Rpb25cbiAgICA/IChmcm9tRW50cmllcyhmaWx0ZXIoZW50cmllcyhzb3VyY2UsIHByb2plY3Rpb24pKSBhcyBhbnkpIGFzIGFueSlcbiAgICA6IHNvdXJjZTtcblxuLyoqIFJlbW92ZXMgbnVsbCdpc2ggcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdCAqL1xuZXhwb3J0IGNvbnN0IGNsZWFuID0gPFQgZXh0ZW5kcyBvYmplY3Q+KG86IFQpOiBSZXF1aXJlZDxUPiA9PiB7XG4gIGNvbnN0IGlubmVyID0gKG86IG9iamVjdCkgPT5cbiAgICBmb3JFYWNoKGVudHJpZXMobyksIChba2V5LCB2YWx1ZV0sIEYpID0+XG4gICAgICB2YWx1ZSA9PSBuaWwgfHwgKG9iaih2YWx1ZSkgJiYgIWlubmVyKHZhbHVlKSkgPyAoZGVsKG8sIGtleSksIEYpIDogVFxuICAgICk7XG4gIGlubmVyKG8pO1xuICByZXR1cm4gbyBhcyBhbnk7XG59O1xuIiwiaW1wb3J0IHR5cGUge1xuICBDb25zdFRvVHVwbGVzLFxuICBJdGVyYWJsZU9yU2VsZixcbiAgTnVsbGlzaCxcbiAgTnVsbHMsXG59IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIFJFR0VYLFxuICBUZXN0T3JDb252ZXJ0RnVuY3Rpb24sXG4gIGFycmF5LFxuICBib29sLFxuICBmaWx0ZXIsXG4gIG1hcCxcbiAgc3RyLFxuICB0ZXN0T3JDb252ZXJ0RnVuY3Rpb24sXG4gIHVuZGVmaW5lZCxcbiAgZGlzdGluY3QsXG4gIHNpemUsXG4gIG5pbCxcbiAgcHVzaCxcbn0gZnJvbSBcIi5cIjtcblxuLyoqXG4gKiBDb21tb24gZGVmaW5pdGlvbiBvZiBleHByZXNpb25zIHRoYXQgYXJlIHVzZWQgZm9yIHN0cmluZyBtYXRjaGluZy5cbiAqXG4gKiBJZiBub3QgYWxyZWFkeSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYSBzdHJpbmcgdGhhdCBzdGFyc3Qgd2l0aCBgL2AgYW5kIG9wdGlvbmFsbHkgZW5kcyB3aXRoIGAvYCBpcyBwYXJzZWQgYXMgcmVndWxhciBleHByZXNzaW9ucyB3aXRoIGZsYWdzIGBndWAgYXBwbGllZCAoZ2xvYmFsIGFuZCBVbmljb2RlKS5cbiAqIFRoaXMgZW5hYmxlcyBkZWZpbmluZyByZWd1bGFyIGV4cHJlc3Npb24gaW4gdGV4dCBiYXNlZCBjb25maWd1cmF0aW9uIGZpbGVzIHRoYXQgZG8gbm90IGhhdmUgbmF0aXZlIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlIGFuIGFzdGVyaXNrIChgKmApIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFueSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiBzdHJpbmdzLCBhbmQgIGAsYCBhbmQgd2hpdGUtc3BhY2UgYCBgIGFyZSBpbnRlcHJldGVkIGFzIGxpc3Qgc2VwYXJhdG9ycy5cbiAqIGBcXGAgaXMgdXNlZCBhcyB0aGUgZXNjYXBlIGNoYXJhY3RlciBzbyB0aGUgc3RyaW5nIGBcXC9lc2NhcGVkXFwqLGFuZFxcIHRoaXNgIHdpbGwgb25seSBtYXRjaCB0aGUgc3RyaW5ncywgbGl0ZXJhbGx5LCBgXFwvZXNjYXBlZFxcKmAgYW5kIGBhbmQgdGhpc2AuXG4gKiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpbnRlbnRpb25hbCBiYWNrc2xhc2hlcywgY29tbWFzIGFuZCBzcGFjZXMgbXVzdCBiZSBlc2NhcGVkIGFzIGBcXFxcYCwgYFxcLGAgYW5kIGBcXCBgIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBBcnJheXMgb2Ygc3RyaW5ncyBhbmQvb3IgcmVndWxhciBleHByZXNzaW9ucyBhcmUgZXZhbHVhdGVkIGFzIHVuaW9ucyAoX3N0cmluZyAxXyBcIm9yXCIgX3N0cmluZyAyXyBcIm9yXCIgLi4uKS5cbiAqXG4gKiBUaGUgc3BlY2lhbCB2YWx1ZXMgYG51bGxgLCBgdW5kZWZpbmVkYCwgdGhlIGVtcHR5IHN0cmluZywgIGFuZCBgZmFsc2VgIGFyZSBpbnRlcnByZXRlZCBhcyBcIm5ldmVyXCIsIGFuZCBgdHJ1ZWAgaXMgXCJhbHdheXNcIi5cbiAqXG4gKiBSZWdhcmRpbmcgc2VwYXJhdG9ycywgdGhleSBtYXkgYmUgZGlmZmVyZW50IGluIHNwZWNpZmljIGNvbnRleHRzLiBJZiBzbywgaXQgd2lsbCBiZSBtZW50aW9uZWQgdGhlcmUuXG4gKi9cbmV4cG9ydCB0eXBlIFBhcnNhYmxlUmVnRXhwID1cbiAgfCBJdGVyYWJsZU9yU2VsZjxudWxsIHwgdW5kZWZpbmVkIHwgYm9vbGVhbiB8IHN0cmluZyB8IFJlZ0V4cD5cbiAgfCBJdGVyYWJsZTxQYXJzYWJsZVJlZ0V4cD47XG5cbi8qKlxuICogYFJlZ2V4LnRlc3RgIG9wdGltaXplZCBmb3IgbWluaWZ5aW5nLlxuICovXG5leHBvcnQgY29uc3QgdGVzdCA9IChzOiBzdHJpbmcgfCBOdWxsaXNoLCBtYXRjaDogUmVnRXhwIHwgTnVsbGlzaCkgPT5cbiAgISEocyAmJiBtYXRjaCkgJiYgbWF0Y2gudGVzdChzKTtcblxubGV0IG1hdGNoU2VsZWN0ZWQ6IGFueTtcbi8qKlxuICogTWF0Y2hlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhZ2FpbnN0IGEgc3RyaW5nIGFuZCBwcm9qZWN0cyB0aGUgbWF0Y2hlZCBwYXJ0cywgaWYgYW55LlxuICovXG5leHBvcnQgY29uc3QgbWF0Y2g6IHtcbiAgPFI+KFxuICAgIHM6IHN0cmluZyB8IE51bGxpc2gsXG4gICAgbWF0Y2g6IFJlZ0V4cCB8IE51bGxpc2gsXG4gICAgc2VsZWN0b3I6ICguLi5hcmdzOiBzdHJpbmdbXSkgPT4gUiB8IE51bGxpc2gsXG4gICAgZGVmYXVsdFZhbHVlOiBSW11cbiAgKTogQ29uc3RUb1R1cGxlczxSPltdO1xuICA8Uj4oXG4gICAgczogc3RyaW5nIHwgTnVsbGlzaCxcbiAgICBtYXRjaDogUmVnRXhwIHwgTnVsbGlzaCxcbiAgICBzZWxlY3RvcjogKC4uLmFyZ3M6IHN0cmluZ1tdKSA9PiBSLFxuICAgIGRlZmF1bHRWYWx1ZT86IFJcbiAgKTogQ29uc3RUb1R1cGxlczxSPiB8IHVuZGVmaW5lZDtcbiAgKHM6IHN0cmluZyB8IE51bGxpc2gsIG1hdGNoOiBSZWdFeHAgfCBOdWxsaXNoKTogUmVnRXhwTWF0Y2hBcnJheSB8IG51bGw7XG59ID0gPFI+KFxuICBzOiBzdHJpbmcsXG4gIHJlZ2V4OiBSZWdFeHAsXG4gIHNlbGVjdG9yPzogKC4uLmFyZ3M6IHN0cmluZ1tdKSA9PiBSLFxuICBkZWZhdWx0VmFsdWU/OiBSXG4pID0+XG4gIHMgJiZcbiAgcmVnZXggJiZcbiAgKHNlbGVjdG9yXG4gICAgPyAoYXJyYXkoZGVmYXVsdFZhbHVlKVxuICAgICAgICA/IG1hdGNoKFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHJlZ2V4LFxuICAgICAgICAgICAgKC4uLmFyZ3MpID0+XG4gICAgICAgICAgICAgIChtYXRjaFNlbGVjdGVkID0gc2VsZWN0b3IoLi4uYXJncykpICE9IG5pbCAmJlxuICAgICAgICAgICAgICBwdXNoKGRlZmF1bHRWYWx1ZSBhcyBhbnksIG1hdGNoU2VsZWN0ZWQpXG4gICAgICAgICAgKVxuICAgICAgICA6IHMucmVwbGFjZShcbiAgICAgICAgICAgIHJlZ2V4LFxuICAgICAgICAgICAgKC4uLmFyZ3MpID0+ICgoZGVmYXVsdFZhbHVlID0gc2VsZWN0b3IoLi4uYXJncykpLCBcIlwiKVxuICAgICAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWUpXG4gICAgOiBzLm1hdGNoKHJlZ2V4KSk7XG5cbi8qKlxuICogUmVwbGFjZXMgcmVzZXJ2ZWQgY2hhcmFjdGVycyB0byBnZXQgYSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIHRoZSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVSZWdFeCA9IChpbnB1dDogc3RyaW5nKSA9PlxuICBpbnB1dC5yZXBsYWNlKC9bXFxeJFxcXFwuKis/KClbXFxde318XS9nLCBcIlxcXFwkJlwiKTtcblxuY29uc3QgUkVHRVhfTkVWRVIgPSAvXFx6Li9nO1xuY29uc3QgdW5pb25Pck5ldmVyID0gKHBhcnRzOiAoc3RyaW5nIHwgTnVsbGlzaClbXSwgam9pbmVkPzogc3RyaW5nKSA9PlxuICAoam9pbmVkID0gam9pbihkaXN0aW5jdChmaWx0ZXIocGFydHMsIHNpemUpKSwgXCJ8XCIpKVxuICAgID8gbmV3IFJlZ0V4cChqb2luZWQsIFwiZ3VcIilcbiAgICA6IFJFR0VYX05FVkVSO1xuXG5jb25zdCBzdHJpbmdSdWxlQ2FjaGU6IHsgW3BhdHRlcm46IHN0cmluZ106IFJlZ0V4cCB9ID0ge307XG4vKipcbiAqIFRlc3RzIG9yIHBhcnNlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhY2NlcHRpbmcgdGhlIHtAbGluayBQYXJzYWJsZVJlZ0V4cH0gZm9ybWF0LlxuICpcbiAqIFN0cmluZ3MgYXJlIGNhY2hlZCwgc28gdGhlcmUgaXMgbm8gbmVlZCB0byBkbyBhZGRpdGlvbmFsIGNhY2hpbmcgb3V0c2lkZSB0aGlzIGZ1bmN0aW9uIChhcyBmYXIgYXMgdGhlIGNhY2hpbmcgd291bGQgb25seSBjb25jZXJuIHN0cmluZ3MpLlxuICovXG5leHBvcnQgY29uc3QgcmVnZXg6IFRlc3RPckNvbnZlcnRGdW5jdGlvbjxcbiAgUmVnRXhwLFxuICBQYXJzYWJsZVJlZ0V4cCxcbiAgW3NlcGFyYXRvcnM/OiBzdHJpbmdbXV1cbj4gPSB0ZXN0T3JDb252ZXJ0RnVuY3Rpb24oXG4gIFJFR0VYLFxuICAoaW5wdXQ6IHN0cmluZyB8IGJvb2xlYW4gfCBhbnlbXSB8IE51bGxpc2gsIHNlcGFyYXRvcnMgPSBbXCIsXCIsIFwiIFwiXSkgPT5cbiAgICByZWdleChpbnB1dClcbiAgICAgID8gaW5wdXRcbiAgICAgIDogYXJyYXkoaW5wdXQpIC8vIFBhcnNlIGluZGl2aWR1YWwgc3BlY2lmaWVycywgYW5kIGpvaW4gdGhlbSBpbnRvIG9uZSBsb25nIHJlZ2V4LiBBbiBlbXB0eSBhcnJheSBpcyBpbnRlcnByZXRlZCBhcyBcIm5ldmVyXCIuXG4gICAgICA/IHVuaW9uT3JOZXZlcihcbiAgICAgICAgICBtYXAoaW5wdXQsIChwYXJ0KSA9PiByZWdleChwYXJ0LCBmYWxzZSwgc2VwYXJhdG9ycyk/LnNvdXJjZSlcbiAgICAgICAgKVxuICAgICAgOiBib29sKGlucHV0KVxuICAgICAgPyBpbnB1dCAvLyBgdHJ1ZWAgaXMgXCJhbHdheXNcIiwgYGZhbHNlYCBpcyBcIm5ldmVyXCJcbiAgICAgICAgPyAvLi9nXG4gICAgICAgIDogUkVHRVhfTkVWRVIgLy8gTWF0Y2hlcyBub3RoaW5nLiBFbmQgb2Ygc3RyaW5nIGZvbGxvd2VkIGJ5IHNvbWV0aGluZyBpcyBuZXZlciB0aGUgY2FzZS5cbiAgICAgIDogc3RyKGlucHV0KVxuICAgICAgPyAoc3RyaW5nUnVsZUNhY2hlW2lucHV0XSA/Pz0gbWF0Y2goXG4gICAgICAgICAgaW5wdXQgfHwgXCJcIixcbiAgICAgICAgICAvXig/OlxcLyguKz8pXFwvP3woLiopKSQvZ3UsXG4gICAgICAgICAgKF8sIHJlZ2V4LCB0ZXh0KSA9PlxuICAgICAgICAgICAgcmVnZXhcbiAgICAgICAgICAgICAgPyBuZXcgUmVnRXhwKHJlZ2V4LCBcImd1XCIpXG4gICAgICAgICAgICAgIDogdW5pb25Pck5ldmVyKFxuICAgICAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICAgICBzcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICAgICBgPzwhKD88IVxcXFwpXFxcXClbJHtqb2luKG1hcChzZXBhcmF0b3JzLCBlc2NhcGVSZWdFeCkpfV0vYFxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgKHRleHQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgdGV4dCAmJlxuICAgICAgICAgICAgICAgICAgICAgIGBeJHtqb2luKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGxpdCBvbiBub24tZXNjYXBlZCBhc3RlcmlzayAoQ2hhcmFjdGVyaXplZCBieSBhIGxlYWRpbmcgYmFja3NsYXNoIHRoYXQgaXMgbm90IGl0c2VsZiBhbiBlc2NhcGVkIGJhY2tzbGFzaCkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0KHRleHQsIC8oPzwhKD88IVxcXFwpXFxcXClcXCovKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXNjYXBlUmVnRXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYmFja3NsYXNoZXMgdXNlZCBmb3IgZXNjYXBpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlKHBhcnQsIC9cXFxcKC4pL2csIFwiJDFcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSm9pbiB0aGUgcGFydHMgc2VwYXJhdGVkIGJ5IG5vbi1lc2NhcGVkIGFzdGVyaXNrcyB3aXRoIHRoZSByZWdleCB3aWxkY2FyZCBlcXVpdmFsZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgXCIuKlwiXG4gICAgICAgICAgICAgICAgICAgICAgKX0kYFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKSEpXG4gICAgICA6IHVuZGVmaW5lZFxuKTtcblxuLyoqXG4gKiBCZXR0ZXIgbWluaWZ5YWJsZSB2ZXJzaW9uIG9mIGBTdHJpbmdgJ3MgYHNwbGl0YCBtZXRob2QgdGhhdCBhbGxvd3MgYSBudWxsJ2lzaCBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzcGxpdCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgTnVsbGlzaD4oXG4gIHM6IFQsXG4gIHNlcGFyYXRvcjogUmVnRXhwIHwgc3RyaW5nXG4pOiBUIGV4dGVuZHMgc3RyaW5nID8gc3RyaW5nW10gOiBzdHJpbmdbXSB8IE51bGxzPFQ+ID0+XG4gIHM/LnNwbGl0KHNlcGFyYXRvcikgPz8gKHMgYXMgYW55KTtcblxuLyoqXG4gKiBCZXR0ZXIgbWluaWZ5YWJsZSB2ZXJzaW9uIG9mIGBTdHJpbmdgJ3MgYHJlcGxhY2VgIG1ldGhvZCB0aGF0IGFsbG93cyBhIG51bGwnaXNoIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGxhY2UgPSA8VCBleHRlbmRzIHN0cmluZyB8IE51bGxpc2g+KFxuICBzOiBULFxuICBtYXRjaDogUmVnRXhwLFxuICByZXBsYWNlVmFsdWU6IHN0cmluZyB8ICgoLi4uYXJnczogc3RyaW5nW10pID0+IHN0cmluZylcbik6IFQgPT4gcz8ucmVwbGFjZShtYXRjaCwgcmVwbGFjZVZhbHVlIGFzIGFueSkgPz8gKHMgYXMgYW55KTtcblxuLyoqXG4gKiAgQmV0dGVyIG1pbmlmeWFibGUgdmVyc2lvbiBvZiBgU3RyaW5nYCdzIGBqb2luYCBtZXRob2QgdGhhdCBhbGxvd3MgYSBudWxsJ2lzaCBwYXJhbWV0ZXIgYW5kIHJlbW92ZXMgZW1wdHkuXG4gKi9cbmV4cG9ydCBjb25zdCBqb2luID0gPFQgZXh0ZW5kcyAoc3RyaW5nIHwgTnVsbGlzaClbXSB8IE51bGxpc2g+KFxuICBzOiBULFxuICBzZXBhcmF0b3IgPSBcIlwiXG4pOiBzdHJpbmcgfCBOdWxsczxUPiA9PiAocz8uam9pbihzZXBhcmF0b3IpID8/IHMpIGFzIGFueTtcbiIsImltcG9ydCB7IFRyYWNrZWRFdmVudCB9IGZyb20gXCIuLi9ldmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IHR5cGVUZXN0ID1cbiAgPFQgZXh0ZW5kcyBUcmFja2VkRXZlbnQ+KC4uLnR5cGVzOiBzdHJpbmdbXSkgPT5cbiAgKGV2OiBhbnkpOiBldiBpcyBUID0+XG4gICAgZXY/LnR5cGUgJiYgdHlwZXMuc29tZSgodHlwZSkgPT4gdHlwZSA9PT0gZXY/LnR5cGUpO1xuIiwiaW1wb3J0IHR5cGUge1xuICBDYXJ0VXBkYXRlZEV2ZW50LFxuICBDb21wb25lbnRDbGlja0V2ZW50LFxuICBMb2NhbElELFxuICBTZXNzaW9uLFxuICBWaWV3RXZlbnQsXG4gIFRhZ2dlZCxcbiAgVGltZXN0YW1wLFxuICBJbnRlZ2VyLFxufSBmcm9tIFwiLi5cIjtcblxuLyoqXG4gKiBUaGUgYmFzZSB0eXBlIGZvciBhbGwgZXZlbnRzIHRoYXQgYXJlIHRyYWNrZWQuXG4gKlxuICogVGhlIG5hbWluZyBjb252ZW50aW9uIGlzOlxuICogLSBJZiB0aGUgZXZlbnQgcmVwcmVzZW50cyBzb21ldGhpbmcgdGhhdCBjYW4gYWxzbyBiZSBjb25zaWRlcmVkIGFuIGVudGl0eSBsaWtlIFwiYSBwYWdlIHZpZXdcIiwgXCJhIHVzZXIgbG9jYXRpb25cIiBldGMuIHRoZSBuYW1lIHNob3VsZCBiZSBhIChkZXZlcmJhbCkgbm91bi5cbiAqIC0gSWYgdGhlIGV2ZW50IG9ubHkgaW5kaWNhdGVzIHNvbWV0aGluZyB0aGF0IGhhcHBlbmQsIGxpa2UgXCJzZXNzaW9uIHN0YXJ0ZWRcIiwgXCJ2aWV3IGVuZGVkXCIgZXRjLiB0aGUgbmFtZSBzaG91bGQgYmUgYSB2ZXJiIGluIHRoZSBwYXN0IHRlbnNlLlxuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFja2VkRXZlbnQgZXh0ZW5kcyBUYWdnZWQge1xuICAvKipcbiAgICogVGhlIHR5cGUgbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAqXG4gICAqIFRoaXMgTVVTVCBiZSBzZXQgdG8gYSBjb25zdGFudCB2YWx1ZSBpbiBleHRlbmRpbmcgaW50ZXJmYWNlcyBhbmQgaW1wbGVtZW50aW5nIGNsYXNzZXMgZm9yIHRoZSBldmVudCB0byBiZSByZWdpc3RlcmVkLlxuICAgKiAqL1xuICB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgc2NoZW1hIHRoZSBldmVudCBjb21lcyBmcm9tLiBJdCBpcyBzdWdnZXN0ZWQgdGhhdCB0aGUgc2NoZW1hIElEIGVuZHMgd2l0aCBhIGhhc2ggZm9sbG93ZWQgYnkgYSBTZW1WZXIgdmVyc2lvbiBudW1iZXIuIChlLmcuIHVybjp0YWlsanMjMC45LjApXG4gICAqL1xuICBzY2hlbWE/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgdG9rZW4gdGhhdCBtYXkgYmUgaW5jbHVkZWQgYnkgdGhlIGNsaWVudCB0byBlbnN1cmUgdGhhdCBzZXNzaW9uIHN0YXRlIGRvZXMgbm90IGdldCBsb3N0IGlmIGNvb2tpZXMgYXJlIG1pc3NpbmcuXG4gICAqIEl0IHNob3VsZCBvbmx5IGJlIGluY2x1ZGVkIGluIHRoZSBmaXJzdCBldmVudCBpZiBtdWx0aXBsZSBldmVudHMgYXJlIHBvc3RlZCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdW5uZWNlc3NhcnkgZGF0YS5cbiAgICpcbiAgICogSXQgZ2V0cyBjbGVhcmVkIGJ5IHRoZSByZXF1ZXN0IGhhbmRsZXIgYmVmb3JlIHNlbnQgdG8gYmFja2VuZHMgYW5kIHNob3VsZCBub3QgYmUgY29uc2lkZXJlZCBmb3IgYW5hbHl0aWNzIHNpbmNlIGl0IGlzIGFuIGludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbC5cbiAgICovXG4gIGFmZmluaXR5PzogYW55O1xuXG4gIC8qKlxuICAgKiBUaGlzIG1heSBiZSBhc3NpZ25lZCBvciB0cmFuc2Zvcm1lZCBieSBiYWNrZW5kcyBpZiBuZWVkZWQuXG4gICAqIEl0IGlzIGNsaWVudC1hc3NpZ25lZCBmb3Ige0BsaW5rIFZpZXdFdmVudH1zXG4gICAqL1xuICBpZD86IExvY2FsSUQ7XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgc2V0IGJ5IHRoZSBjbGllbnQgYW5kIGNhbiBiZSB1c2VkIHRvIGRlZHVwcGxpY2F0ZSBldmVudHMgc2VudCBtdWx0aXBsZSB0aW1lcyBpZiB0aGUgZW5kcG9pbnQgdGltZWQgb3V0LlxuICAgKi9cbiAgY2xpZW50SWQ/OiBMb2NhbElEO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBjbGllbnQgdHJpZWQgdG8gc2VudCB0aGUgZXZlbnQgaWYgdGhlIGVuZHBvaW50IHRpbWVkIG91dFxuICAgKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICByZXRyeT86IEludGVnZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0aGF0IGNhdXNlZCB0aGlzIGV2ZW50IHRvIGJlIHRyaWdnZXJlZCBvciBnb3QgdHJpZ2dlcmVkIGluIHRoZSBzYW1lIGNvbnRleHQuXG4gICAqIEZvciBleGFtcGxlIGEge0BsaW5rIE5hdmlnYXRpb25FdmVudH0gbWF5IHRyaWdnZXIgYSB7QGxpbmsgVmlld0V2ZW50fSxcbiAgICogb3IgYSB7QGxpbmsgQ2FydFVwZGF0ZWRFdmVudH0gbXkgYmUgdHJpZ2dlcmVkIHdpdGggYSB7QGxpbmsgQ29tcG9uZW50Q2xpY2tFdmVudH0uXG4gICAqL1xuICByZWxhdGVkPzogTG9jYWxJRDtcblxuICAvKipcbiAgICogVGhlIHNlc3Npb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICovXG4gIHNlc3Npb24/OiBTZXNzaW9uO1xuXG4gIC8qKlxuICAgKiBXaGVuIGFwcGxpY2FibGUsIHRoZSB2aWV3IHdoZXJlIHRoZSBldmVudCBoYXBwZW5lZCAocmVsYXRlZCBieSB7QGxpbmsgVmlld0V2ZW50fSkuXG4gICAqL1xuICB2aWV3PzogTG9jYWxJRDtcblxuICAvKipcbiAgICogVGhpcyB0aW1lc3RhbXAgd2lsbCBhbHdheXMgaGF2ZSBhIHZhbHVlIGJlZm9yZSBpdCByZWFjaGVzIGEgYmFja2VuZC5cbiAgICogSWYgc3BlY2lmaWVkLCBpdCBtdXN0IGJlIGEgbmVnYXRpdmUgbnVtYmVyIHdoZW4gc2VudCBmcm9tIHRoZSBjbGllbnQgKGRpZmZlcmVuY2UgYmV0d2VlbiB3aGVuIHRoZSBldmVudCB3YXMgZ2VuZXJhdGVkIGFuZCB3aGVuIGlzIHdhcyBwb3N0ZWQgaW4gbWlsbGlzZWNvbmRzKS5cbiAgICpcbiAgICogQGRlZmF1bHQgbm93XG4gICAqL1xuICB0aW1lc3RhbXA/OiBUaW1lc3RhbXA7XG59XG5cbmV4cG9ydCBjb25zdCBpc1RyYWNrZWRFdmVudCA9IChldjogYW55KTogZXYgaXMgVHJhY2tlZEV2ZW50ID0+XG4gIGV2ICYmIHR5cGVvZiBldi50eXBlID09PSBcInN0cmluZ1wiO1xuIiwiaW1wb3J0IHR5cGUgeyBEb21haW4sIEludGVnZXIsIExvY2FsSUQsIFNpemUsIFRyYWNrZWRFdmVudCwgVmlldyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgdHlwZVRlc3QgfSBmcm9tIFwiLi4vdXRpbC90eXBlLXRlc3RcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDbGlja0lkcyB7XG4gIGdvb2dsZT86IHN0cmluZztcbiAgZ29vZ2xlRG91YmxlQ2xpY2s/OiBzdHJpbmc7XG4gIGZhY2Vib29rPzogc3RyaW5nO1xuICBtaWNyb3NvZnQ/OiBzdHJpbmc7XG4gIGdvb2dsZUFuYWx5dGljcz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3RXZlbnQgZXh0ZW5kcyBUcmFja2VkRXZlbnQge1xuICB0eXBlOiBcIlZJRVdcIjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSB2aWV3IGV2ZW50IHRoYXQgaXMgcmVmZXJlbmNlZCBieSB7QGxpbmsgVmlld0NvbnRleHR9LlxuICAgKi9cbiAgaWQ6IExvY2FsSUQ7XG5cbiAgLyoqXG4gICAqIFRoZSBwcmltYXJ5IGNvbnRlbnQgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdmlldyBpbmNsdWRpbmcgdGhlIHBlcnNvbmFsaXphdGlvbiB0aGF0IGxlZCB0byB0aGUgZGVjaXNpb24sIGlmIGFueS5cbiAgICovXG4gIGRlZmluaXRpb24/OiBWaWV3O1xuXG4gIC8qKlxuICAgKiBUaGUgdGFiIHdoZXJlIHRoZSB2aWV3IHdhcyBzaG93bi5cbiAgICovXG4gIHRhYj86IExvY2FsSUQ7XG5cbiAgLyoqXG4gICAqIFRoZSBmdWxseSBxdWFsaWZpZWQgVVJMIGFzIHNob3duIGluIHRoZSBhZGRyZXNzIGxpbmUgb2YgdGhlIGJyb3dzZXIgZXhjbHVkaW5nIHRoZSBkb21haW4uXG4gICAqL1xuICBocmVmOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBoYXNoIHBhcnQgb2YgdGhlIFVSTCAoL2Fib3V0LXVzI2FkZHJlc3MpLlxuICAgKi9cbiAgaGFzaD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBhdGggcG9ydGlvbiBvZiB0aGUgVVJMLlxuICAgKi9cbiAgcGF0aD86IHN0cmluZztcblxuICAvKipcbiAgICogVXJjaGluIFRyYWNraW5nIE1vZHVsZSAoVVRNKSBwYXJhbWV0ZXJzIGFzIGRlZmluZWQgYnkgKFdpa2lwZWRpYSlbaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRNX3BhcmFtZXRlcnNdLlxuICAgKi9cbiAgdXRtPzoge1xuICAgIHNvdXJjZT86IHN0cmluZztcbiAgICBtZWRpdW0/OiBzdHJpbmc7XG4gICAgY2FtcGFpZ24/OiBzdHJpbmc7XG4gICAgdGVybT86IHN0cmluZztcbiAgICBjb250ZW50Pzogc3RyaW5nO1xuICB9O1xuICAvKipcbiAgICogVGhlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzIGluIHRoZSBVUkwsIGUuZy4gdXRtX2NhbXBhaWduLlxuICAgKiBFYWNoIHBhcmFtZXRlciBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMsIGZvciBleGFtcGxlIElmIHRoZSBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkIG1vcmUgdGhhbiBvbmNlLlxuICAgKiBJZiB0aGUgcGFyYW1ldGVyIGlzIG9ubHkgc3BlY2lmaWVkIG9uY2UgcGlwZXMsIHNlbWljb2xvbnMgYW5kIGNvbW1hcyBhcmUgYXNzdW1lZCB0byBzZXBhcmF0ZSB2YWx1ZXMgKGluIHRoYXQgb3JkZXIpLlxuICAgKiBBIHBhcmFtZXRlciB3aXRob3V0IGEgdmFsdWUgd2lsbCBnZXQgcmVjb3JkZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKiBAZXhhbXBsZSBUaGUgVVJMIGh0dHBzOi8vd3d3LmZvby5jb20vP3V0bV9zb3VyY2U9YmFyJnV0bV9jYW1wYWlnbj1jYW1wYWlnbjEsY2FtcGFpZ24yJmZsYWcmZ2NsaWQ9MTIzeHl6JnAxPWEmcDE9YiZwMj1hO2IsYztkIGhhcyB0aGVzZSBwYXJhbWV0ZXJzOlxuICAgKiAgdXRtX3NvdXJjZSA9IFtcImJhclwiXSBcXFxuICAgKiAgdXRtX2NhbXBhaWduID0gW1wiY2FtcGFpZ24xXCIsIFwiY2FtcGFpZ24yXCJdIFxcXG4gICAqICBnY2xpZCA9IFtcIjEyM3h5elwiXSBcXFxuICAgKiAgZmxhZyA9IFtcIlwiXSBcXFxuICAgKiAgZ2NsaWQ9W1wiMTIzeHl6XCJdIFxcXG4gICAqICBwMT1bXCJhXCIsIFwiYlwiXSBcXFxuICAgKiAgcDI9W1wiYVwiLCBcImIsY1wiLCBcImRcIl1cbiAgICovXG4gIHF1ZXJ5U3RyaW5nPzogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuXG4gIC8vIHF1ZXJ5U3RyaW5nPzoge1xuICAvLyAgIHNvdXJjZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgLy8gICBwYXJzZWQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcbiAgLy8gfTtcblxuICAvKipcbiAgICogVGhlIGRvbWFpbiBwYXJ0IG9mIHRoZSBocmVmLCBpZiBhbnkuXG4gICAqL1xuICBkb21haW4/OiBEb21haW47XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoaXMgd2FzIHRoZSBmaXJzdCB2aWV3IGluIHRoZSBmaXJzdCB0YWIgdGhlIHVzZXIgb3BlbmVkLlxuICAgKiBOb3RlIHRoYXQgdGhpcyBpcyBOT1QgdGllZCB0byB0aGUgc2Vzc2lvbi4gSWYgYSB1c2VyIGNsb3NlcyBhbGwgdGFicyBhbmQgd2luZG93cyBmb3IgdGhlIHNpdGUgYW5kIHRoZW4gbGF0ZXIgbmF2aWdhdGVzIGJhY2sgdG8gdGhlIHNpdGUgaW4gdGhlIHNhbWUgc2Vzc2lvbiB0aGlzIGZsYWcgd2lsbCBiZSBzZXQgYWdhaW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsYW5kaW5nUGFnZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IG5vIG90aGVyIHRhYnMgd2VyZSBvcGVuIHdoZW4gdGhlIHZpZXcgaGFwcGVuZWQuXG4gICAqIFRoaXMgZmxhZyBhbGxvd3MgYSBiYWNrZW5kIHRvIGV4dGVuZCB0aGUgZGVmaW5pdGlvbiBvZiBhIHNlc3Npb24gdGhhdCBjYW4gbGFzdCBpbmRlZmluaXRlbHkgYnV0IHN0aWxsIHJlc3RhcnQgYWZ0ZXIgaW5hY3Rpdml0eS5cbiAgICogQnkgbWVhc3VyaW5nIHRoZSB0aW1lIGJldHdlZW4gYSB2aWV3IHdpdGggdGhpcyBmbGFnIGFuZCB0aGUgcHJldmlvdXMgZXZlbnQgZnJvbSB0aGUgc2FtZSBkZXZpY2UsIGl0IGlzIHBvc3NpYmxlIHRvIHNlZSBmb3IgaG93IGxvbmcgdGhlIGRldmljZSBoYXMgYmVlbiBhd2F5IGZyb20gdGhlIHNpdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmaXJzdFRhYj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSAxLWluZGV4ZWQgdmlldyBudW1iZXIgaW4gdGhlIGN1cnJlbnQgdGFiLlxuICAgKiBUaGlzIGlzIGtlcHQgYXMgYSBjb252ZW5pZW5jZSwgeWV0IHRlY2huaWNhbGx5IHJlZHVuZGFudCBzaW5jZSBpdCBmb2xsb3dzIGZyb20gdGltZXN0YW1wcyBhbmQgY29udGV4dC5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgdGFiSW5kZXg/OiBJbnRlZ2VyO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcmVkaXJlY3RzIHRoYXQgaGFwcGVuZWQgZHVyaW5nIG5hdmlnYXRpb24gdG8gdGhpcyB2aWV3LiovXG4gIHJlZGlyZWN0cz86IEludGVnZXI7XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRpb24gdHlwZS5cbiAgICovXG4gIG5hdmlnYXRpb25UeXBlPzogXCJuYXZpZ2F0ZVwiIHwgXCJiYWNrLWZvcndhcmRcIiB8IFwicHJlcmVuZGVyXCIgfCBcInJlbG9hZFwiO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZXZlbnQgd2FzIG1hbnVhbGx5IHRyaWdnZXJlZCB0aHJvdWdoIGEgdHJhY2tlciBjb21tYW5kLCBvciBoYXBwZW5lZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSB0cmFja2VyJ3MgYWJpbGl0eSB0byBpbmZlciBuYXZpZ2F0aW9uLlxuICAgKlxuICAgKiBAZGVmYXVsdCBcImF1dG9tYXRpY1wiXG4gICAqL1xuICBtb2RlPzogXCJtYW51YWxcIiB8IFwiYXV0b21hdGljXCI7XG5cbiAgLyoqXG4gICAqIEV4dGVybmFsIHJlZmVycmVyLiBJbnRlcm5hbCByZWZlcnJlcnMgZm9sbG93cyBmcm9tIHRoZSBldmVudCdzIHtAbGluayBUcmFja2VkRXZlbnRbXCJyZWxhdGVkVmlld1wiXX0gZmllbGQuXG4gICAqL1xuICBleHRlcm5hbFJlZmVycmVyPzoge1xuICAgIGhyZWY/OiBzdHJpbmc7XG4gICAgZG9tYWluPzogRG9tYWluO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgdXNlcidzIHZpZXcgcG9ydCAoZS5nLiBicm93c2VyIHdpbmRvdykgd2hlbiB0aGUgcGFnZSB3YXMgb3BlbmVkLlxuICAgKi9cbiAgdmlld3BvcnQ/OiBTaXplO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB2aWV3LCBlLmcuIFwicGFnZVwiIG9yIFwic2NyZWVuXCIuXG4gICAqXG4gICAqIEBkZWZhdWx0IFwicGFnZVwiXG4gICAqL1xuICB2aWV3VHlwZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGlzVmlld0V2ZW50ID0gdHlwZVRlc3Q8Vmlld0V2ZW50PihcIlZJRVdcIik7XG4iLCJpbXBvcnQgdHlwZSB7IFRyYWNrZWRFdmVudCwgVmlld1RpbWluZ0V2ZW50IH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyB0eXBlVGVzdCB9IGZyb20gXCIuLi91dGlsL3R5cGUtdGVzdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdFbmRlZEV2ZW50IGV4dGVuZHMgVHJhY2tlZEV2ZW50LCBWaWV3VGltaW5nRXZlbnQge1xuICB0eXBlOiBcIlZJRVdfRU5ERURcIjtcbiAgYm91bmNlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGlzVmlld0VuZGVkRXZlbnQgPSB0eXBlVGVzdDxWaWV3RW5kZWRFdmVudD4oXCJWSUVXX0VOREVEXCIpO1xuIiwiaW1wb3J0IHsgVHJhY2tlZEV2ZW50IH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyB0eXBlVGVzdCB9IGZyb20gXCIuLi91dGlsL3R5cGUtdGVzdFwiO1xuXG4vKipcbiAqIFRoZSBldmVudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGEgdXNlciBoYXMgb3B0ZWQgaW4gdG8gbm9uLWVzc2VudGlhbCB0cmFja2luZyB1c2VkIGZvciBwdXJwb3NlcyBiZXlvbmQgbm9uLXBlcnNvbmFsLCBhZ2dyZWdhdGVkIHN0YXRpc3RpY3Mgb3IgdGhlIHN0b3JhZ2Ugb2YgdGhpcyBjb25zZW50IGl0c2VsZi5cbiAqXG4gKiBUaGlzIGV2ZW50IGhhcyBhIHNpZ25pZmljYW50IGVmZmVjdCB0aHJvdWdob3V0IHRoZSBzeXN0ZW0gc2luY2UgdGhlIGxhY2sgb2YgY29uc2VudCB0byBub24tZXNzZW50aWFsIHRyYWNraW5nIHdpbGwgcHJldmVudCBhbGwgbm9uLWVzc2VudGlhbCBjb29raWVzIGFuZCBpZGVudGlmaWVycyB0byBldmVyIHJlYWNoIHRoZSB1c2VyJ3MgZGV2aWNlLlxuICogSW4gdGhlIHNhbWUgd2F5LCBzdWNoIGluZm9ybWF0aW9uIGlzIGNsZWFyZWQgaWYgdGhlIHVzZXIgb3B0cyBvdXQuXG4gKlxuICogQmFja2VuZHMgYXJlIHJlcXVpcmVkIHRvIHJlc3BlY3QgdGhpcyBjb25zZW50LCB5ZXQgSVQgSVMgTk9UIFRIRSBSRVNQT05TSUJJTElUWSBPRiB0YWlsanMuSlMgVE8gRU5GT1JDRSBJVCBzaW5jZSBpdCBoYXMgbm8gd2F5IHRvIGtub3cgdGhlIGRvbWFpbiBjb250ZXh0IG9mIHRoZSBkYXRhIGl0IHJlbGF5cy5cbiAqXG4gKiBUaGUgdXNlcidzIGRlY2lzaW9uIGlzIHN0b3JlZCBpbiBhbiBlc3NlbnRpYWwgY29va2llIGFuZCB1cGRhdGVkIGFjY29yZGluZ2x5IHdpdGggdGhpcyBldmVudC4gU2VuZGluZyB0aGUgZXZlbnQgd2l0aCB7QGxpbmsgbm9uRXNzZW50aWFsVHJhY2tpbmd9IGBmYWxzZWAgcmV2b2tlcyB0aGUgY29uc2VudCBpZiBhbHJlYWR5IGdpdmVuLlxuICogVGhlIGV2ZW50IHNob3VsZCBpZGVhbGx5IGJlIHNlbnQgZnJvbSBhIGNvb2tpZSBkaXNjbGFpbWVyLlxuICpcbiAqIEdyYW51bGFyIGNvbnNlbnRzIHRvIGVtYWlsIG1hcmtldGluZywgZXh0ZXJuYWwgYWR2ZXJ0aXNpbmcgYW5kIHRoZSBsaWtlIG11c3QgYmUgaGFuZGxlZCBieSBvdGhlciBtZWNoYW5pc21zIHRoYW4gdHJhY2tpbmcgZXZlbnRzLlxuICogVGhpcyBldmVudCBvbmx5IGVuc3VyZXMgdGhhdCBub24tZXNzZW50aWFsIHRyYWNraW5nIGluZm9ybWF0aW9uIGlzIG5vdCBzdG9yZWQgYXQgdGhlIHVzZXIgdW5sZXNzIGNvbnNlbnQgaXMgZ2l2ZW4uXG4gKlxuICogQWxzbywgXCJjb25zZW50XCIgYW5kIFwiZXZlbnRcIiByaHltZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29uc2VudEV2ZW50IGV4dGVuZHMgVHJhY2tlZEV2ZW50IHtcbiAgdHlwZTogXCJDT05TRU5UXCI7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHVzZXIgaGFzIGNvbnNlbnRlZCB0byBub24tZXNzZW50aWFsIHRyYWNraW5nLlxuICAgKi9cbiAgbm9uRXNzZW50aWFsVHJhY2tpbmc6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBpc0NvbnNlbnRFdmVudCA9IHR5cGVUZXN0PENvbnNlbnRFdmVudD4oXCJDT05TRU5UXCIpO1xuIiwiZXhwb3J0IHR5cGUgUGFyc2VkVGFnID0geyByYW5rczogc3RyaW5nW107IHZhbHVlPzogc3RyaW5nIH07XG5cbmNvbnN0IHNwbGl0UmFua3MgPSAocmFua3M/OiBzdHJpbmcpID0+XG4gIHJhbmtzXG4gICAgPy50b0xvd2VyQ2FzZSgpXG4gICAgLnJlcGxhY2UoL1teYS16QS1aMC05Oi4tXS9nLCBcIl9cIilcbiAgICAuc3BsaXQoXCI6XCIpXG4gICAgLmZpbHRlcigocmFuaykgPT4gcmFuaykgPz8gW107XG5cbi8qKlxuICogUGFyc2VzIHRoZSB0YWdzIG91dCBvZiBhIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgcGFyc2VUYWdTdHJpbmcgPSAoXG4gIGlucHV0OiBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGwgfCB1bmRlZmluZWQsXG4gIGJhc2VSYW5rPzogc3RyaW5nLFxuICB0YXJnZXQ/OiBTZXQ8c3RyaW5nPlxuKSA9PiB7XG4gIGlmICghaW5wdXQpIHJldHVybiBbXTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSBpbnB1dCA9IGlucHV0LmpvaW4oXCIsXCIpO1xuICAvLyBXZSBoYXZlIGFuIHVuZXNjYXBlZCBwZXJjZW50YWdlIHNpZ24gZm9sbG93ZWQgYnkgYW4gdXBwZXJjYXNlIHR3by1kaWdpdCBoZXhhZGVjaW1hbCBudW1iZXIuIFNtZWxscyBsaWtlIFVSSSBlbmNvZGluZyFcbiAgaWYgKC8oPzwhKD88IVxcXFwpXFxcXCklW0EtWjAtOV17Mn0vLnRlc3QoaW5wdXQpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlucHV0ID0gZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICBpbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC8vIENoYW5nZSBhbXBlcnNhbmRzIHRvIGNvbW1hcyAoYXMgdGhleSBhcmUgdmFsdWUgc2VwYXJhdG9ycyksIGFuZCBxdW90ZSBhbGwgdmFsdWVzIGp1c3QgdG8gYmUgc3VyZSBub3RoaW5nIGdldHMgb3V0IG9mIGNvbnRyb2wuXG4gICAgICAgICAgLy8gVGhhdCBpcywgYHRhZz10ZXN0JnRhZzImdGFnMz1FbmNvZGVkJTNBJTIwJTIyJUYwJTlGJUE1JUIzJTIyYCBiZWNvbWVzIGB0YWc9XCJ0ZXN0XCIsdGFnMix0YWczPVwiRW5jb2RlZDogXFxcIvCfpbNcXFwiXCJcbiAgICAgICAgICAvKFtePSZdKykoPzpcXD0oW14mXSspKT8oJnwkKS9nLFxuICAgICAgICAgIChfLCBuYW1lLCB2YWx1ZSwgc2VwKSA9PlxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICB2YWx1ZSAmJiBgPVwiJHt2YWx1ZS5yZXBsYWNlKC8oPzwhKD88IVxcXFwpXFxcXCkoXCJ8JTIyKS9nLCAnXFxcXFwiJyl9XCJgLCAvLyBFc2NhcGUgZG91YmxlIHF1b3RlcyAoYm90aCBlbmNvZGVkIGAlMjJgIGFuZCBub24tZW5jb2RlZCBgXCJgXCIpLCBidXQgaWdub3JlIHF1b3RlcyB0aGF0IGFyZSBhbHJlYWR5IGVzY2FwZWQgKHllcywgd2h5IG5vdD8pLlxuICAgICAgICAgICAgICBzZXAgJiYgXCIsXCIsXG4gICAgICAgICAgICBdLmpvaW4oXCJcIilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIC8vIE5lZWQgdG8gY2F0Y2ggZXhjZXB0aW9ucy4gYGRlY29kZVVSSUNvbXBvbmVudGAgd2lsbCBmYWlsIG9uIGludmFsaWQgc3Vycm9nYXRlIGNvZGUgcG9pbnRzLiBgJTgwYCBpcyBvbmUgb2YgdGhvc2UuXG4gICAgfSBjYXRjaCB7fVxuICB9XG5cbiAgbGV0IHRhZ3M6IFBhcnNlZFRhZ1tdID0gW10sXG4gICAgcGFyc2VkVGFnOiBQYXJzZWRUYWcsXG4gICAgYmFzZVJhbmtzID0gc3BsaXRSYW5rcyhiYXNlUmFuayk7XG5cbiAgaW5wdXQucmVwbGFjZShcbiAgICAvLyBFeHBsYWluZWQ6XG4gICAgLy8gMS4gVGFnIChncm91cCAxKTogKFxccyooPz1cXD0pfCg/OlxcXFwufFteLD1cXHJcXG5dKSspLiBJdCBtZWFucyBcInNraXAgbGVhZGluZyB3aGl0ZS1zcGFjZVwiLCB0aGVuIGVpdGhlclwiXG4gICAgLy8gICAxLjEuIFxccyooPz1cXD0pIGlzIFwibm90aGluZyBidXQgYSBgPWBcIjogYSBibGFuayB0YWcgbmFtZSBjYXVzaW5nIHRoZSBleHByZXNzaW9uIHRvIHNraXAgdG8gdGhlIGFjdHVhbCB2YWx1ZS4gKFwiPTgwLD00M1wiIGFyZSB0ZWNoaW5jYWxseSBzdXBwb3J0ZWQgYnV0IHdpbGwgZ2V0IG9taXR0ZWQgdW5sZXNzIHRoZSBhcmUgYmFzZSByYW5rcyAoKikpXG4gICAgLy8gICAyLjEuICg/OlxcXFwufFteLD1cXHJcXG5dKSsgaXMgXCJzb21ldGhpbmcgbm90IGEgbGluZWJyZWFrIGluY2x1ZGluZyBlc2NhcGVkIGNoYXJhY3RlcnMgc3VjaCBhcyBcXD1cIjpcbiAgICAvLyAyLiBWYWx1ZTogKD86XFw9XFxzKig/OlwiKCg/OlxcXFwufFteXCJdKSopXCJ8JygoPzpcXFxcLnxbXiddKSopJ3woKD86XFxcXC58XFxzKlteLFxcc10pKikpKT8uIEFueXRoaW5nIHRoYXQgc3RhcnRzIHdpdGggYSBgPWAgdW50aWwgd2UgZmluZCBhIChub24tZXNjYXBlZCkgY29tbWFcbiAgICAvLyAgMi4xOiAoZ3JvdXAgMikgXCIoKD86XFxcXC58W15cIl0pKilcIiBpcyBhbnkgZG91YmxlLXF1b3RlZCAoKWBcImApIHZhbHVlLCBjYW4gY29udGFpbiBjb21tYXMsIGFueXRoaW5nIGVzY2FwZWQsIG9yIHdoYXRldmVyLiBHb2VzIHdlbGwgd2l0aCBKU09OLlxuICAgIC8vICAyLjI6IChncm91cCAzKSBpcyBzYW1lIGFzIDIuMSBqdXN0IHdpdGggYSBzaW5nbGUgcXVvdGUgKGAnYCkuXG4gICAgLy8gIDIuMzogKGdyb3VwIDQpIGlzIGFueXRoaW5nIGJ1dCBhIG5vbi1lc2NhcGVkIGNvbW1hIChgLGApXG4gICAgLy8gMy4gVGhlIGVuZC4gKD86WyxcXHNdK3wkKS4gVGhpcyBpcyB0aGUgdGFnIHNlcGFyYXRvciBvciBlbmQgb2Ygc3RyaW5nLlxuICAgIC8vICAgICAgICBTaW5jZSB0YWdzIGNhbm5vdCBoYXZlIGxpbmUtYnJlYWtzIGluIHRoZW0sIHRoaXMgdGVjaG5pY2FsbHkgYWxsb3dzIHRhZ3MgdG8gYmUgc2VwYXJhdGVkIGJ5IGxpbmUtYnJlYWtzIGluc3RlYWQgb2YgY29tbWEuXG4gICAgLy8gICAgICAgIFRoaXMgc2hvdWxkIG5vdCBiZSBkb2N1bWVudGVkIGFzIHZhbHVlcyBjYW4gdmVyeSBtdWNoIGhhdmUgbGluZS1icmVha3MsIGFuZCB0aGF0IHN5bnRheCB3aWxsIHRoZW4gYml0ZSB5b3UgaW4gdGhlIG1vbmV5LW1ha2VyIGF0IHNvbWUgcG9pbnQuXG4gICAgLy8gICAgICAgIEluIHRoZSBzY2FyeSBleGFtcGxlIGJlbG93IHdlIGdldCBcInRhZzFcIiwgXCJ0YWcyMTp0YWcyMlwiIGFuZCB0aGVuIFwidGFnM1wiIHdpdGggdGhlIHZhbHVlIFwidmFsdWVcXHRhZzQ9dmFsdWVcIighKS5cbiAgICAvLyAgICAgICAgYHRhZzFcbiAgICAvLyAgICAgICAgdGFnMjE6dGFnMjJcbiAgICAvLyAgICAgICAgdGFnMz12YWx1ZVxuICAgIC8vICAgICAgICB0YWc0PXZhbHVlYFxuICAgIC9cXHMqKFxccyooPz1cXD0pfCg/OlxcXFwufFteLD1cXHJcXG5dKSspXFxzKig/OlxcPVxccyooPzpcIigoPzpcXFxcLnxbXlwiXSkqKVwifCcoKD86XFxcXC58W14nXSkqKSd8KCg/OlxcXFwufFteLF0pKikpKT9cXHMqKD86WyxcXHNdK3wkKS9nLFxuICAgIChfMCwgdGFnLCBxdW90ZTEsIHF1b3RlMiwgdW5xdW90ZWQpID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IHF1b3RlMSB8fCBxdW90ZTIgfHwgdW5xdW90ZWQ7XG4gICAgICBsZXQgcmFua3MgPSBzcGxpdFJhbmtzKHRhZyk7XG5cbiAgICAgIGJhc2VSYW5rcy5sZW5ndGggJiZcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBiYXNlIHJhbmtzICh0aGF0LCBpcyBhIFwicHJlZml4XCIpLCBhIHNpbmdsZSB0YWcgdmFsdWUgaXMgaW50ZXJwcmV0ZWQgYXMgYSB2YWx1ZS4gRS5nLiBgPGEgZGF0YS1uYW1lPVwiZm9vXCIuLi5gIGJlY29tZXMgYGRhdGE6bmFtZT1mb29gLlxuICAgICAgICAvLyBXZSBoYXZlIHRoaXMgc2l0dWF0aW9uIGlmIHRoZXJlIGlzIGV4YWN0bHkgb25lIHJhbmssIGFuZCBubyB2YWx1ZS5cbiAgICAgICAgLy8gT3RoZXIgZXhhbXBsZXM6IGA8YSBkYXRhLWVtcGxveWVlPVwiZm9vOnRlc3RcIiAuLi5gIGdpdmVzIGBkYXRhOmVtcGxveWVlOmZvbzp0ZXN0YC4gYGRhdGEtZW1wbG95ZWU9XCI9dGVzdFwiYCBnaXZlcyB1cyBgZGF0YTplbXBsb3llZT10ZXN0YCwgYW5kXG4gICAgICAgIC8vICAgIGBkYXRhLWVtcGxveWVlPVwiaWQ9ODBcImAgZ2l2ZXMgdXMgYGRhdGE6ZW1wbG95ZWU6aWQ9ODBgLlxuICAgICAgICAocmFua3MubGVuZ3RoID09PSAxICYmICF2YWx1ZSAmJiAodmFsdWUgPSByYW5rcy5wb3AoKSksXG4gICAgICAgIChyYW5rcyA9IGJhc2VSYW5rcy5jb25jYXQocmFua3MpKSksXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IHJhbmtzIChvbmx5IGEgdmFsdWUpLCB3ZSBkb24ndCBoYXZlIGEgdGFnLlxuICAgICAgICByYW5rcy5sZW5ndGggJiYgLy8gKiBjZi4gZXhwcmVzc2lvbiBleHBsYW5pdGlvbiAxLjFcbiAgICAgICAgICAodGFncy5wdXNoKFxuICAgICAgICAgICAgKHBhcnNlZFRhZyA9IHtcbiAgICAgICAgICAgICAgcmFua3MsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgdGFyZ2V0Py5hZGQoZW5jb2RlVGFnKHBhcnNlZFRhZykpKTtcbiAgICAgIHJldHVybiBcIlwiOyAvLyBUaGlzIGlzIGEgdHJpY2suIFdlIGFyZSBub3QgcmVhbGx5IHJlcGxhY2luZyBhbnl0aGluZywgd2UgYXJlIGluc3RlYWQgdXNpbmcgcmVwbGFjZSBhcyBhIGZvciBsb29wLlxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIHRhZ3M7XG59O1xuXG5leHBvcnQgY29uc3QgZW5jb2RlVGFnID0gPFQgZXh0ZW5kcyBQYXJzZWRUYWcgfCBudWxsIHwgdW5kZWZpbmVkPihcbiAgdGFnOiBUXG4pOiBUIGV4dGVuZHMgUGFyc2VkVGFnID8gc3RyaW5nIDogbnVsbCB8IHVuZGVmaW5lZCA9PlxuICB0YWcgPT0gbnVsbFxuICAgID8gKHRhZyBhcyBhbnkpXG4gICAgOiBgJHt0YWcucmFua3Muam9pbihcIjpcIil9JHtcbiAgICAgICAgdGFnLnZhbHVlID8gYD0ke3RhZy52YWx1ZS5yZXBsYWNlKC8sL2csIFwiXFxcXCxcIil9YCA6IFwiXCJcbiAgICAgIH1gO1xuIiwiLy8gVG8gbGV0IG1pbmlmaWVyIHNob3J0ZW4gZ2xvYmFscyBhcyBub3JtYWwgdmFyaWFibGVzLlxuY29uc3QgbyA9IE9iamVjdDtcbmNvbnN0IHMgPSBTeW1ib2w7XG5jb25zdCBhID0gQXJyYXk7XG5jb25zdCB1bmRlZmluZWQgPSB2b2lkIDA7XG5jb25zdCBuaWwgPSBudWxsO1xuZXhwb3J0IGNvbnN0IFQgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IEYgPSBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IGZyb21FbnRyaWVzID0gT2JqZWN0LmZyb21FbnRyaWVzO1xuZXhwb3J0IGNvbnN0IGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5jb25zdCBzdCA9IHNldFRpbWVvdXQ7XG5jb25zdCBwaSA9IHBhcnNlSW50O1xuXG5leHBvcnQgY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuXG5leHBvcnQgY29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb207XG5cbmV4cG9ydCB7XG4gIGEgYXMgQXJyYXksXG4gIG8gYXMgT2JqZWN0LFxuICBzIGFzIFN5bWJvbCxcbiAgbmlsLFxuICBwaSBhcyBwYXJzZUludCxcbiAgc3QgYXMgc2V0VGltZW91dCxcbiAgdW5kZWZpbmVkLFxufTtcbiIsImltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IFNTUiA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCI7XG5cbmNvbnN0IHdpbiA9IHdpbmRvdztcbmNvbnN0IGRvYyA9IGRvY3VtZW50O1xuY29uc3QgbmF2ID0gbmF2aWdhdG9yO1xuY29uc3QgYm9keSA9IGRvYy5ib2R5O1xuY29uc3QgbG9jID0gbG9jYXRpb247XG5jb25zdCBwZXJmID0gcGVyZm9ybWFuY2U7XG5jb25zdCBoaXN0ID0gd2luLmhpc3Rvcnk7XG5leHBvcnQge1xuICBib2R5LFxuICBkb2MgYXMgZG9jdW1lbnQsXG4gIGhpc3QgYXMgaGlzdG9yeSxcbiAgbG9jIGFzIGxvY2F0aW9uLFxuICBuYXYgYXMgbmF2aWdhdG9yLFxuICBwZXJmIGFzIHBlcmZvcm1hbmNlLFxuICB3aW4gYXMgd2luZG93LFxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAodGFnTmFtZTogc3RyaW5nKSA9PiBkb2MuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoZXMgPSAobm9kZTogRWxlbWVudCB8IE51bGxpc2gsIHNlbGVjdG9yOiBzdHJpbmcpID0+XG4gICEhbm9kZT8ubWF0Y2hlcyhzZWxlY3Rvcik7XG4iLCIvLyBHZW5lcmFsIHV0aWxpdHkgZnVuY3Rpb25zLlxuXG5pbXBvcnQgdHlwZSB7IENvbnN0VG9UdXBsZXMsIE51bGxpc2ggfSBmcm9tIFwiQHRhaWxqcy91dGlsXCI7XG5pbXBvcnQge1xuICBGLFxuICBib29sLFxuICBmaWx0ZXIsXG4gIGtleXMsXG4gIG1hdGNoLFxuICBuaWwsXG4gIHB1c2gsXG4gIHNpemUsXG4gIHN0cixcbiAgdW5kZWZpbmVkLFxuICB0eXBlIEpzb24sXG59IGZyb20gXCIuXCI7XG5cbi8qKlxuICogUmFpc2VzIGFuIGVycm9yIGluIHRoZSBVSSBiYXNlZCBvbiBjb25maWd1cmF0aW9uIGFuZCBidWlsZCBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVyciA9IChjb2RlOiBzdHJpbmcgfCBOdWxsaXNoLCBhcmdzPzogYW55LCBlcnJvcj86IEVycm9yKTogdm9pZCA9PlxuICBjb25zb2xlLmVycm9yKFxuICAgIC4uLmZpbHRlcihbY29kZSA/PyBlcnJvcj8ubWVzc2FnZSA/PyBlcnJvciA/PyBcImVycm9yXCIsIGFyZ3MsIGVycm9yXSlcbiAgKTtcblxuLyoqXG4gKiBBcHBsaWVzIGEgZnVuY3Rpb24gdG8gYSB2YWx1ZSBpZiBpdCBpcyBub3QgaXRzIHR5cGVzIGRlZmF1bHQgdmFsdWUuXG4gKiBBbiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGFuZCBhbiBlbXB0eSBhcnJheSBhcmUgY29uc2lkZXJlZCB0aGUgXCJkZWZhdWx0XCIgZm9yIHRob3NlIHR5cGVzLlxuICovXG5leHBvcnQgY29uc3QgaWZOb3REZWZhdWx0ID0gPFQsIFIgPSBUPihcbiAgdmFsdWU6IFQsXG4gIGFjdGlvbj86ICh2YWx1ZTogVCkgPT4gUlxuKTogUiB8IHVuZGVmaW5lZCA9PlxuICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHNpemUoa2V5cyh2YWx1ZSBhcyBhbnkpKSkgfHwgdmFsdWVcbiAgICA/IGFjdGlvblxuICAgICAgPyBhY3Rpb24odmFsdWUpXG4gICAgICA6IHZhbHVlXG4gICAgOiAodW5kZWZpbmVkIGFzIGFueSk7XG5cbi8qKlxuICogUm91bmQgYSBudW1iZXIgb2YgdG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGVjaW1hbHMuXG4gKi9cbmV4cG9ydCBjb25zdCByb3VuZCA9ICh4OiBudW1iZXIsIGRlY2ltYWxzOiBudW1iZXIgfCBib29sZWFuID0gMCkgPT5cbiAgKGJvb2woZGVjaW1hbHMpID8gLS0oZGVjaW1hbHMgYXMgYW55KSA6IGRlY2ltYWxzKSA8IDBcbiAgICA/IHhcbiAgICA6ICgoZGVjaW1hbHMgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMgYXMgYW55KSksXG4gICAgICBNYXRoLnJvdW5kKHggKiBkZWNpbWFscykgLyBkZWNpbWFscyk7XG5cbi8qKlxuICogYGRlY29kZVVSSUNvbXBvbmVudGAgZm9yIGVmZmljaWVudCBtaW5pZnlpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSA8VCBleHRlbmRzIHN0cmluZyB8IE51bGxpc2g+KFxuICB2YWx1ZTogVFxuKTogVCBleHRlbmRzIHN0cmluZyA/IHN0cmluZyA6IG51bGwgPT5cbiAgdmFsdWUgPT0gbmlsID8gbmlsIDogKGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgYXMgYW55KTtcblxuLyoqXG4gKiBgZW5jb2RlVVJJQ29tcG9uZW50YCBmb3IgZWZmaWNpZW50IG1pbmlmeWluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgTnVsbGlzaD4oXG4gIHZhbHVlOiBUXG4pOiBUIGV4dGVuZHMgc3RyaW5nID8gc3RyaW5nIDogbnVsbCA9PlxuICB2YWx1ZSA9PSBuaWwgPyBuaWwgOiAoZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSBhcyBhbnkpO1xuXG5sZXQgcGFyYW1ldGVycyA9IHt9O1xuLyoqXG4gKiBQYXJzZXMga2V5L3ZhbHVlIHBhaXJzIGVuY29kZWQgYXMgYSBVUkkgcXVlcnkgc3RyaW5nIChibGFoPWZvbyZiYXI9Z3olMjVuaykuXG4gKlxuICogSXQgc3VwcG9ydHMgdGhhdCB0aGUgc2FtZSBrZXkgY2FuIGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcy5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlUGFyYW1ldGVycyA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgTnVsbGlzaD4oXG4gIHF1ZXJ5OiBUXG4pOiBUIGV4dGVuZHMgc3RyaW5nID8gUmVjb3JkPHN0cmluZywgc3RyaW5nW10+IDogVCA9PlxuICBxdWVyeSA9PSBuaWxcbiAgICA/IChxdWVyeSBhcyBhbnkpXG4gICAgOiAoKHBhcmFtZXRlcnMgPSB7fSksXG4gICAgICBtYXRjaChxdWVyeSwgLyhbXiY9XSspKD86PShbXiZdKykpPy9nLCAoYWxsLCBuYW1lLCB2YWx1ZSkgPT5cbiAgICAgICAgcHVzaChcbiAgICAgICAgICAocGFyYW1ldGVyc1tsb3dlckNhc2UoZGVjb2RlKG5hbWUpKV0gPz89IFtdKSxcbiAgICAgICAgICBkZWNvZGUoc3RyKHZhbHVlLCBGKSlcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIHBhcmFtZXRlcnMpO1xuXG4vKipcbiAqIENvbnZlbmllbnQgd2F5IHRvIGNvbXBhcmUgYSB2YWx1ZSBhZ2FpbnN0IG11bHRpcGxlIG90aGVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFscyA9IDxUPih2YWx1ZTogVCwgLi4udmFsdWVzOiBUW10pID0+XG4gIHZhbHVlcy5zb21lKHZhbHVlID09IG5pbCA/ICh0ZXN0KSA9PiB0ZXN0ID09IG5pbCA6ICh0ZXN0KSA9PiB2YWx1ZSA9PT0gdGVzdCk7XG5cbi8qKlxuICogIEJldHRlciBtaW5pZnlhYmxlIHZlcnNpb24gb2YgYFN0cmluZ2AncyBgdG9Mb3dlckNhc2VgIG1ldGhvZCB0aGF0IGFsbG93cyBhIG51bGwnaXNoIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvd2VyQ2FzZSA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgTnVsbGlzaD4oczogVCk6IFQgPT5cbiAgcz8udG9Mb3dlckNhc2UoKSA/PyAocyBhcyBhbnkpO1xuXG4vKipcbiAqIGBKU09OLnN0cmluZ2lmeWAgd2l0aCBkZWZhdWx0IHNldHRpbmdzIGZvciBwcmV0dHktcHJpbnRpbmcgYW55IHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgcHJldHRpZnkgPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiBzdHJpbmdpZnkodmFsdWUsIG5pbCwgMikgPz8gXCJcIjtcblxuLyoqXG4gKiBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBmb3IgZWZmaWNpZW50IG1pbmlmeWluZyB0aGF0IGFsc28gaWdub3JlcyBudWxsJ2lzaCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdpZnkgPSA8VD4oXG4gIHZhbHVlOiBULFxuICByZXBsYWNlcj86IGFueSxcbiAgc3BhY2U/OiBzdHJpbmcgfCBudW1iZXJcbik6IFQgZXh0ZW5kcyBOdWxsaXNoID8gbnVsbCA6IHN0cmluZyA9PlxuICB2YWx1ZSA9PSBuaWwgPyBuaWwgOiAoSlNPTi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkgYXMgYW55KTtcblxuLyoqXG4gKiBgSlNPTi5wYXJzZWAgbWV0aG9kIGZvciBlZmZpY2llbnQgbWluaWZ5aW5nIHRoYXQgYWxzbyBncmFjZWZ1bGx5IGhhbmRsZXMgbnVsbCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZSA9IDxUIGV4dGVuZHMgSnNvbiA9IEpzb24+KHZhbHVlOiBzdHJpbmcgfCBudWxsKTogVCA9PlxuICB2YWx1ZSA9PSBuaWwgPyBuaWwgOiBKU09OLnBhcnNlKHZhbHVlKTtcblxuLyoqXG4gKiBGYXN0IHdheSB0byBqb2luIHR3byBvcHRpb25hbCBzdHJpbmdzIHdpdGggYSBzcGFjZS5cbiAqIElmIHRoZXkgYXJlIGJvdGggbnVsbGlzaCwgbnVsbGlzaCB3aWxsIGJlIHJldHVybmVkICh1bmxlc3MgYGRlZmF1bHRWYWx1ZWApLlxuICovXG5leHBvcnQgY29uc3QgY29uY2F0MiA9IDxcbiAgVDEgZXh0ZW5kcyBzdHJpbmcgfCBOdWxsaXNoLFxuICBUMiBleHRlbmRzIHN0cmluZyB8IE51bGxpc2gsXG4gIERlZmF1bHQgZXh0ZW5kcyBzdHJpbmcgfCBOdWxsaXNoID0gbnVsbFxuPihcbiAgdmFsdWUxOiBUMSxcbiAgdmFsdWUyOiBUMixcbiAgZGVmYXVsdFZhbHVlOiBEZWZhdWx0ID0gbmlsIGFzIGFueVxuKSA9PlxuICB2YWx1ZTEgJiYgdmFsdWUyID8gdmFsdWUxICsgXCIgXCIgKyB2YWx1ZTIgOiAodmFsdWUxIHx8IHZhbHVlMikgPz8gZGVmYXVsdFZhbHVlO1xuIiwiaW1wb3J0IHR5cGUgeyBJc0FueSwgSXRlcmFibGVPckFycmF5TGlrZSwgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7IEYsIFQsIG5pbCB9IGZyb20gXCIuXCI7XG5cbi8qKlxuICogQ29udmVydHMgdmFyaW91cyB0eXBlcycgY29tbW9uIHJlcHJlc2VudGF0aW9uIG9mIGB0cnVlYCBhbmQgYGZhbHNlYCB0byBhY3R1YWwgYHRydWVgIGFuZCBgZmFsc2VgLlxuICovXG5leHBvcnQgY29uc3QgcGFyc2VCb29sZWFuID0gKFxuICB2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IG51bGwgfCBudW1iZXIgfCB1bmRlZmluZWRcbikgPT5cbiAgYm9vbCh2YWx1ZSlcbiAgICA/IHZhbHVlXG4gICAgOiB2YWx1ZSA9PT0gMFxuICAgID8gRlxuICAgIDogdmFsdWUgPT09IDFcbiAgICA/IFRcbiAgICA6IHZhbHVlID09PSBcImZhbHNlXCJcbiAgICA/IEZcbiAgICA6IHZhbHVlID09PSBcInRydWVcIlxuICAgID8gVFxuICAgIDogdW5kZWZpbmVkO1xuXG4vKiogQ29uc3RhbnRzIGZvciB0eXBlIHRlc3RpbmcuICovXG5leHBvcnQgY29uc3QgU1RSSU5HID0gMCxcbiAgQk9PTEVBTiA9IDEsXG4gIE5VTUJFUiA9IDIsXG4gIEZVTkNUSU9OID0gMyxcbiAgT0JKRUNUID0gNCxcbiAgQVJSQVkgPSA1LFxuICBSRUdFWCA9IDY7XG5cbi8qKlxuICogV2hlbiBjaGVja2luZyB0aGUgc3RyaW5nIGZyb20gYHR5cGVvZiBibGFoYCwgbm8gbW9yZSB0aGFuIHRoaXMgaXMgcmVxdWlyZWQgZm9yIHR5cGUgdGVzdHMuXG4gKi9cbmNvbnN0IHR5cGVQcmVmaXhlcyA9IFtcInNcIiwgXCJiXCIsIFwiblwiLCBcImZcIiwgXCJvXCJdO1xuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYSBnaXZlbiB2YWx1ZSBpcyBvZiB0aGUgZGVzaXJlZCB0eXBlLlxuICovXG5leHBvcnQgY29uc3QgaXMgPSA8VCBleHRlbmRzIG51bWJlcj4oXG4gIHR5cGU6IFQsXG4gIHZhbHVlOiBhbnlcbik6IHZhbHVlIGlzIFQgZXh0ZW5kcyB0eXBlb2YgU1RSSU5HXG4gID8gc3RyaW5nXG4gIDogVCBleHRlbmRzIHR5cGVvZiBCT09MRUFOXG4gID8gYm9vbGVhblxuICA6IFQgZXh0ZW5kcyB0eXBlb2YgTlVNQkVSXG4gID8gbnVtYmVyXG4gIDogVCBleHRlbmRzIHR5cGVvZiBGVU5DVElPTlxuICA/ICguLi5hcmdzOiBhbnkpID0+IGFueVxuICA6IFQgZXh0ZW5kcyB0eXBlb2YgT0JKRUNUXG4gID8geyBbUCBpbiBrZXlvZiBhbnldOiBhbnkgfVxuICA6IFQgZXh0ZW5kcyB0eXBlb2YgQVJSQVlcbiAgPyBhbnlbXVxuICA6IFQgZXh0ZW5kcyB0eXBlb2YgUkVHRVhcbiAgPyBSZWdFeHBcbiAgOiBuZXZlciA9PlxuICB0eXBlID09PSBBUlJBWVxuICAgID8gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICA6ICh2YWx1ZSAhPSBuaWwgJiYgdHlwZVByZWZpeGVzW3R5cGVdID09PSAodHlwZW9mIHZhbHVlKVswXSkgfHxcbiAgICAgICh0eXBlID09PSBSRUdFWCAmJiB2YWx1ZS5leGVjKTtcblxudHlwZSBVbndyYXBBcnJheTxULCBWID0gYW55PiA9IElzQW55PFY+IGV4dGVuZHMgdHJ1ZVxuICA/IFRcbiAgOiBUIGV4dGVuZHMgSXRlcmFibGVPckFycmF5TGlrZTxhbnk+XG4gID8gViBleHRlbmRzIEl0ZXJhYmxlT3JBcnJheUxpa2U8aW5mZXIgVj4gJiB7IHRvTG93ZXJDYXNlPygpOiBuZXZlciB9XG4gICAgPyBWW11cbiAgICA6IFRcbiAgOiBUO1xuXG4vKipcbiAqIEEgZ2VuZXJhbCBwYXR0ZXJuIHVzZWQgdG8gdHlwZSB0ZXN0IG9yIHBhcnNlIHZhbHVlcyBvZiB2YXJpb3VzIHR5cGVzLlxuICovXG5leHBvcnQgdHlwZSBUZXN0T3JDb252ZXJ0RnVuY3Rpb248XG4gIFQsXG4gIEFsbG93UGFyc2UgPSBuZXZlcixcbiAgQ29udmVydEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdXG4+ID0ge1xuICA8Vj4odmFsdWU6IFYsIHBhcnNlU3RyaWN0OiBmYWxzZSwgLi4uYXJnczogQ29udmVydEFyZ3MpOiBWIGV4dGVuZHMgVFxuICAgID8gVCBleHRlbmRzIFZcbiAgICAgID8gVW53cmFwQXJyYXk8VCwgVj5cbiAgICAgIDogVlxuICAgIDogViBleHRlbmRzIEFsbG93UGFyc2VcbiAgICA/IFVud3JhcEFycmF5PFQsIFY+XG4gICAgOiBUIHwgdW5kZWZpbmVkO1xuICA8Vj4odmFsdWU6IFYsIHBhcnNlU3RyaWN0OiB0cnVlKTogViBleHRlbmRzIFQgPyBWIDogVDtcbiAgPFYgZXh0ZW5kcyBUID0gVD4odmFsdWU6IGFueSk6IHZhbHVlIGlzIEV4Y2x1ZGU8ViwgTnVsbGlzaD47XG59O1xuXG4vKipcbiAqIEZhY3RvcnkgY3JlYXRpbmcge0BsaW5rIFRlc3RPckNvbnZlcnRGdW5jdGlvbn1zLlxuICovXG5leHBvcnQgY29uc3QgdGVzdE9yQ29udmVydEZ1bmN0aW9uOiB7XG4gIDxULCBBbGxvd1BhcnNlID0gbmV2ZXIsIENvbnZlcnRBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oXG4gICAgdHlwZTogbnVtYmVyLFxuICAgIGNvbnZlcnQ6ICh2YWx1ZTogYW55LCAuLi5hcmdzOiBDb252ZXJ0QXJncykgPT4gVCB8IHVuZGVmaW5lZFxuICApOiBUZXN0T3JDb252ZXJ0RnVuY3Rpb248VCwgQWxsb3dQYXJzZSwgQ29udmVydEFyZ3M+O1xuICA8VD4odHlwZTogbnVtYmVyKTogPFYgZXh0ZW5kcyBUID0gVD4oXG4gICAgdmFsdWU6IGFueVxuICApID0+IHZhbHVlIGlzIEV4Y2x1ZGU8ViwgTnVsbGlzaD47XG59ID1cbiAgKFxuICAgIHR5cGU6IG51bWJlcixcbiAgICBjb252ZXJ0PzogKHZhbHVlOiBhbnksIHBhcnNlPzogYm9vbGVhbiwgLi4uYXJnczogYW55W10pID0+IGFueVxuICApID0+XG4gICh2YWx1ZTogYW55LCBwYXJzZT86IGJvb2xlYW4sIC4uLmFyZ3M6IGFueSk6IHZhbHVlIGlzIGFueSA9PlxuICAgIHBhcnNlID09PSB1bmRlZmluZWRcbiAgICAgID8gaXModHlwZSwgdmFsdWUpXG4gICAgICA6IGlzKHR5cGUsIHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAhcGFyc2VcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGNvbnZlcnQ/Lih2YWx1ZSwgcGFyc2UsIC4uLmFyZ3MpO1xuXG4vKipcbiAqIFRlc3RzIG9yIHBhcnNlcyBCb29sZWFuIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGJvb2wgPSB0ZXN0T3JDb252ZXJ0RnVuY3Rpb248Ym9vbGVhbiwgYW55PihcbiAgQk9PTEVBTixcbiAgKHZhbHVlKSA9PiB2YWx1ZSAhPT0gXCIwXCIgJiYgdmFsdWUgIT09IFwiZmFsc2VcIiAmJiB2YWx1ZSAhPT0gXCJub1wiICYmICEhdmFsdWVcbik7XG5cbi8qKlxuICogVGVzdHMgb3IgcGFyc2VzIG51bWVyaWNhbCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBudW0gPSB0ZXN0T3JDb252ZXJ0RnVuY3Rpb248bnVtYmVyPihcbiAgTlVNQkVSLFxuICAodmFsdWUpID0+ICgodmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSksIGlzTmFOKHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlKVxuKTtcblxuLyoqXG4gKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgc3RyaW5nLCBhbmQgaWYgbm90LCBtYWtlcyBvbmUgYnkgY2FsbGluZyB0aGUgdmFsdWUncyBgdG9TdHJpbmcoKWAgbWV0aG9kLlxuICovXG5leHBvcnQgY29uc3Qgc3RyID0gdGVzdE9yQ29udmVydEZ1bmN0aW9uPHN0cmluZz4oU1RSSU5HLCAodmFsdWUpID0+XG4gIHZhbHVlPy50b1N0cmluZygpXG4pO1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgY2FuIGJlIGludm9rZWQgYXMgYSBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGZ1biA9IHRlc3RPckNvbnZlcnRGdW5jdGlvbjwoLi4uYXJnczogYW55W10pID0+IGFueT4oXG4gIEZVTkNUSU9OLFxuICAoXykgPT4gdW5kZWZpbmVkXG4pO1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgc3RyaWN0bHkgYW4gb2JqZWN0IChvYmplY3QgYnV0IG5vdCBhcnJheSkuXG4gKi9cbmV4cG9ydCBjb25zdCBvYmogPSB0ZXN0T3JDb252ZXJ0RnVuY3Rpb248b2JqZWN0PihPQkpFQ1QpO1xuXG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYW4gRUNNQVNjcmlwdCBhcnJheSAobm90IFR5cGVkQXJyYXksIHRob3NlIGFyZSB0b28gZmFuY3kpLlxuICovXG5leHBvcnQgY29uc3QgYXJyYXkgPSAoKCkgPT5cbiAgLy8gTmVlZHMgd3JhcHBlZCBpbiBmdW5jdGlvbiwgb3RoZXJ3aXNlIHRoZSBtdWx0aS1saW5lIHR5cGUgc2NyZXdzIHN5bnRheCBoaWdobGlnaHRpbmcuXG4gIHRlc3RPckNvbnZlcnRGdW5jdGlvbjxcbiAgICBhbnlbXSxcbiAgICBJdGVyYWJsZU9yQXJyYXlMaWtlPGFueT4gJiB7IHRvTG93ZXJDYXNlPygpOiBuZXZlciB9XG4gID4oQVJSQVksICh2YWx1ZSkgPT4gKGl0ZXJhYmxlKHZhbHVlKSA/IFsuLi52YWx1ZV0gOiB1bmRlZmluZWQpKSkoKTtcblxuLyoqXG4gKiBVdGlsaXR5IHR5cGUgZm9yIHtAbGluayBpdGVyYWJsZX0gdG8gaGVscCBUeXBlU2NyaXB0IGtub3cgc3RyaW5ncyBhcmUgbm90IGl0ZXJhYmxlcy5cbiAqL1xudHlwZSBJdGVyYWJsZU5vdFN0cmluZzxUPiA9IFQgZXh0ZW5kcyBzdHJpbmdcbiAgPyBuZXZlclxuICA6IFQgZXh0ZW5kcyBJdGVyYWJsZU9yQXJyYXlMaWtlPGFueT5cbiAgPyBUXG4gIDogbmV2ZXI7XG5cbi8qKlxuICogVGVzdHMgaWYgYSB2YWx1ZSBpcyBhbiBpdGVyYWJsZSBjb2xsZWN0aW9uIG9mIHZhbHVlcyAoSXRlcmFibGUgYnV0IG5vdCBzdHJpbmcpLlxuICovXG5leHBvcnQgY29uc3QgaXRlcmFibGUgPSA8VD4odmFsdWU6IFQpOiB2YWx1ZSBpcyBJdGVyYWJsZU5vdFN0cmluZzxUPiA9PlxuICB2YWx1ZSAmJiAhc3RyKHZhbHVlKSAmJiAhIXZhbHVlW1N5bWJvbC5pdGVyYXRvcl07XG4iLCIvLyBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgYXJyYXlzIGFuZCBpdGVyYWJsZXMuXG5cbmltcG9ydCB0eXBlIHtcbiAgQXJnTnVsbHMsXG4gIENvbnN0VG9UdXBsZXMsXG4gIEl0ZXJhYmxlT3JBcnJheUxpa2UsXG4gIEl0ZXJhYmxlT3JTZWxmLFxuICBLZXlWYWx1ZVByb2plY3Rpb24sXG4gIE51bGxpc2gsXG4gIE51bGxzLFxufSBmcm9tIFwiQHRhaWxqcy91dGlsXCI7XG5pbXBvcnQgeyBGLCBULCBhcnJheSwgYm9vbCwgZnVuLCBoYXNoU2V0LCBpdGVyYWJsZSwgbmlsLCBudW0sIG9iaiB9IGZyb20gXCIuXCI7XG5cbi8qKlxuICogQXJyYXkncyBgc29ydGAgZnVuY3Rpb24gdGhhdCBvZmZlcnMgYSBzaW5nbGUgZnVuY3Rpb24gdGhhdCBpcyBhcHBsaWVkIG9uIGVhY2ggZWxlbWVudCBpbnN0ZWFkIG9mIGhhdmluZyB0byBkbyBpdCB0d2ljZSAoYFsuLi5dLnNvcnQoeCx5KT0+Zih4KS1mKHkpYCkuXG4gKiBEZWZhdWx0IGlzIHRvIHVzZSB0aGUgdmFsdWUgZGlyZWN0bHkuXG4gKi9cbmV4cG9ydCBjb25zdCBzb3J0ID0gPFQgPSBudW1iZXIsIEFyZyA9IGFueT4oXG4gIGl0ZW1zOiBBcmdOdWxsczxUW10sIEFyZz4sXG4gIHNvcnRLZXk6IChpdGVtOiBUKSA9PiBudW1iZXIgPSAoaXRlbSkgPT4gaXRlbSBhcyBhbnlcbik6IE51bGxzPEFyZz4gPT5cbiAgKGl0ZW1zPy5zb3J0KChsaHMsIHJocykgPT4gc29ydEtleShsaHMpIC0gc29ydEtleShyaHMpKSwgaXRlbXMpIGFzIGFueTtcblxuLyoqXG4gKiBBcnJheSdzIGBzcGxpY2VgIG1ldGhvZCBmb3IgZWZmaWNpZW50IG1pbmlmeWluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNwbGljZSA9IDxULCBBcmc+KFxuICB2YWx1ZTogQXJnTnVsbHM8VFtdLCBBcmc+LFxuICBzdGFydDogbnVtYmVyLFxuICBkZWxldGVDb3VudD86IG51bWJlcixcbiAgLi4udmFsdWVzOiBUW11cbik6IFRbXSB8IE51bGxzPEFyZz4gPT5cbiAgdmFsdWUgJiZcbiAgKGRlbGV0ZUNvdW50ICE9IG5pbFxuICAgID8gKHZhbHVlLnNwbGljZSBhcyBhbnkpKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4udmFsdWVzKVxuICAgIDogKHZhbHVlLnNwbGljZSBhcyBhbnkpKHN0YXJ0KSk7XG5cbi8qKlxuICogQXJyYXkncyBgdW5zaGlmdGAgbWV0aG9kIGZvciBlZmZpY2llbnQgbWluaWZ5aW5nIHRoYXQgYWxzbyByZXR1cm5zIHRoZSBhcnJheSBpdHNlbGYgZm9yIGZsdWVudCBjb252ZW5pZW5jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHVuc2hpZnQgPSA8VCBleHRlbmRzIHsgdW5zaGlmdCguLi5hcmdzOiBhbnkpOiBhbnkgfSwgQXJnPihcbiAgdGFyZ2V0OiBBcmdOdWxsczxULCBBcmc+LFxuICAuLi52YWx1ZXM6IFRbXCJ1bnNoaWZ0XCJdIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEEpID0+IGFueSA/IEEgOiBuZXZlclxuKTogVCB8IE51bGxzPEFyZywgdW5kZWZpbmVkPiA9PiAodGFyZ2V0Py51bnNoaWZ0KC4uLnZhbHVlcyksIHRhcmdldCkgYXMgYW55O1xuXG4vKipcbiAqIEFycmF5J3MgYHNoaWZ0YCBtZXRob2QgZm9yIGVmZmljaWVudCBtaW5pZnlpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBzaGlmdCA9IDxUPihhcnJheTogeyBzaGlmdCgpOiBUIH0gfCBOdWxsaXNoKSA9PiBhcnJheT8uc2hpZnQoKTtcblxuLyoqXG4gKiBBcnJheSdzIGBwdXNoYCBtZXRob2QgZm9yIGVmZmljaWVudCBtaW5pZnlpbmcgdGhhdCBhbHNvIHJldHVybnMgdGhlIGFycmF5IGl0c2VsZiBmb3IgZmx1ZW50IGNvbnZlbmllbmNlLlxuICovXG5leHBvcnQgY29uc3QgcHVzaCA9IDxUIGV4dGVuZHMgeyBwdXNoKC4uLmFyZ3M6IGFueSk6IGFueSB9LCBBcmc+KFxuICB0YXJnZXQ6IEFyZ051bGxzPFQsIEFyZz4sXG4gIC4uLnZhbHVlczogVFtcInB1c2hcIl0gZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQSkgPT4gYW55ID8gQSA6IG5ldmVyXG4pOiBUIHwgTnVsbHM8QXJnLCB1bmRlZmluZWQ+ID0+ICh0YXJnZXQ/LnB1c2goLi4udmFsdWVzKSwgdGFyZ2V0KSBhcyBhbnk7XG5cbi8qKlxuICogQXJyYXkncyBgcG9wYCBtZXRob2QgZm9yIGVmZmljaWVudCBtaW5pZnlpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBwb3AgPSA8VD4oYXJyYXk6IHsgcG9wKCk6IFQgfSB8IE51bGxpc2gpID0+IGFycmF5Py5wb3AoKTtcblxuLyoqXG4gKiBMaWtlIEFycmF5J3MgYGNvbmNhdGAgYnV0IHN1cHBvcnRzIGl0ZXJhYmxlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmNhdCA9IDxUPiguLi5zb3VyY2VzOiAoSXRlcmFibGVPclNlbGY8VD4gfCBOdWxsaXNoKVtdKTogVFtdID0+XG4gIHNpemUoKHNvdXJjZXMgPSBmaWx0ZXIoc291cmNlcykpKSA8IDJcbiAgICA/IG1hcChzb3VyY2VzWzBdKVxuICAgIDogW10uY29uY2F0KC4uLihtYXAoc291cmNlcyBhcyBhbnksIG1hcCBhcyBhbnkpIGFzIGFueSkpO1xuXG4vKipcbiAqIEdpdmVzIHRoZSBkaXN0aW5jdCBlbGVtZW50cyBvZiB0aGUgc3BlY2lmaWVkIHZhbHVlcy4gSWYgYSB2YWx1ZSBpcyBpdGVyYWJsZSBpdCBpcyBleHBhbmRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc3RpbmN0ID0gPFQ+KFxuICAuLi52YWx1ZXM6IChJdGVyYWJsZU9yU2VsZjxUIHwgTnVsbGlzaD4gfCBOdWxsaXNoKVtdXG4pOiBUW10gPT4gbWFwKGhhc2hTZXQ8VD4oZmlsdGVyKGNvbmNhdCguLi52YWx1ZXMpKSkpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSByYW5nZSAob3IgZW1wdHkgYXJyYXkpIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCByYW5nZToge1xuICAobGVuZ3RoOiBudW1iZXIsIGVtcHR5PzogZmFsc2UpOiBudW1iZXJbXTtcbiAgKGxlbmd0aDogbnVtYmVyLCBlbXB0eTogdHJ1ZSk6IHVuZGVmaW5lZFtdO1xuICA8VCA9IG51bWJlcj4obGVuZ3RoOiBudW1iZXIsIHByb2plY3Q6IChuOiBudW1iZXIpID0+IFQpOiBUW107XG4gIChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IG51bWJlcltdO1xufSA9IChhcmcwOiBhbnksIGFyZzE6IGFueSkgPT5cbiAgYXJnMSA9PT0gVFxuICAgID8gWy4uLkFycmF5KGFyZzApXVxuICAgIDogbnVtKGFyZzEpXG4gICAgPyByYW5nZShhcmcxIC0gYXJnMCwgKG4pID0+IGFyZzAgKyBuKVxuICAgIDogKGZ1bihhcmcxKSB8fCAoYXJnMSA9ICgobjogbnVtYmVyKSA9PiBuKSBhcyBhbnkpLFxuICAgICAgbWFwKHJhbmdlKGFyZzAsIFQpLCAoXywgaSkgPT4gKGFyZzEgYXMgYW55KShpKSkpO1xuXG4vKipcbiAqIFRoZSBsZW5ndGggb2YgYW4gYXJyYXkgYW5kIHN0cmluZ3MsIHNpemUgb2Ygc2V0cyBhbmQgbWFwcyBhbmQgdGhlIG51bWJlciBvZiBrZXlzIGluIGFuIG9iamVjdC5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgYSBwcmltaXRpdmUgdHlwZSAobm90IHN0cmluZykgdGhlIHNpemUgaXMgZGVmaW5lZCBhcyAwLlxuICovXG5leHBvcnQgY29uc3Qgc2l6ZSA9IChcbiAgaXRlbTpcbiAgICB8IEl0ZXJhYmxlPGFueT5cbiAgICB8IFJlY29yZDxrZXlvZiBhbnksIGFueT5cbiAgICB8IHsgc2l6ZTogbnVtYmVyIH1cbiAgICB8IHsgbGVuZ3RoOiBudW1iZXIgfVxuICAgIHwgTnVsbGlzaFxuKSA9PlxuICBpdGVtID09IG5pbFxuICAgID8gMFxuICAgIDogaXRlbVtcImxlbmd0aFwiXSA/PyBpdGVtW1wic2l6ZVwiXSA/PyAob2JqKGl0ZW0pID8ga2V5cyhpdGVtKS5sZW5ndGggOiAwKTtcblxuLyoqXG4gKiBBbiBleHRlbmRlZCB2ZXJzaW9uIG9mIE9iamVjdC5lbnRyaWVzIHRoYXQgYWxzbyBzdXBwb3J0cyBtYXBzLCBzZXRzIGFuZCBhcnJheXMuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnRyaWVzOiB7XG4gIDxLLCBWLCBQID0gW0ssIFZdPihcbiAgICBtYXA6XG4gICAgICB8IHtcbiAgICAgICAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlPFtLLCBWXT47XG4gICAgICAgIH1cbiAgICAgIHwgTnVsbGlzaCxcbiAgICBwcm9qZWN0PzogS2V5VmFsdWVQcm9qZWN0aW9uPEssIFYsIFA+XG4gICk6IENvbnN0VG9UdXBsZXM8UD5bXTtcbiAgPFYsIFAgPSBbbnVtYmVyLCBWXT4oXG4gICAgYXJyYXk6IFZbXSxcbiAgICBwcm9qZWN0PzogS2V5VmFsdWVQcm9qZWN0aW9uPG51bWJlciwgViwgUD5cbiAgKTogQ29uc3RUb1R1cGxlczxQPltdO1xuICA8SyBleHRlbmRzIGtleW9mIGFueSA9IGtleW9mIGFueSwgViA9IGFueSwgUCA9IFtLLCBWXT4oXG4gICAgcmVjb3JkOiB7IFtrZXkgaW4gS10/OiBWIH0sXG4gICAgcHJvamVjdD86IEtleVZhbHVlUHJvamVjdGlvbjxLLCBWLCBQPlxuICApOiBDb25zdFRvVHVwbGVzPFA+W107XG59ID0gKG1hcE9yUmVjb3JkOiBhbnksIHByb2plY3Q/OiBhbnkpID0+XG4gICFtYXBPclJlY29yZFxuICAgID8gW11cbiAgICA6IGFycmF5KG1hcE9yUmVjb3JkKVxuICAgID8gbWFwKG1hcE9yUmVjb3JkLCAodmFsdWUsIGluZGV4KSA9PlxuICAgICAgICBwcm9qZWN0ID8gcHJvamVjdChpbmRleCwgdmFsdWUpIDogW2luZGV4LCB2YWx1ZV1cbiAgICAgIClcbiAgICA6IG1hcChtYXBPclJlY29yZC5lbnRyaWVzPy4oKSA/PyBPYmplY3QuZW50cmllcyhtYXBPclJlY29yZCksIHByb2plY3QpO1xuXG4vKipcbiAqIEFuIGV4dGVuZGVkIHZlcnNpb24gb2YgT2JqZWN0LmtleXMgdGhhdCBhbHNvIHN1cHBvcnRzIG1hcHMgYW5kIHNldHMuXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlzOiB7XG4gIDxLID0ga2V5b2YgYW55LCBQID0gSz4oXG4gICAgbWFwOlxuICAgICAgfCB7XG4gICAgICAgICAga2V5cygpOiBJdGVyYWJsZTxLPjtcbiAgICAgICAgfVxuICAgICAgfCBOdWxsaXNoLFxuICAgIHByb2plY3Q/OiAoa2V5OiBLLCBpbmRleDogbnVtYmVyKSA9PiBQXG4gICk6IENvbnN0VG9UdXBsZXM8UD5bXTtcbiAgPEsgZXh0ZW5kcyBrZXlvZiBhbnkgPSBrZXlvZiBhbnksIFAgPSBLPihcbiAgICByZWNvcmQ6IHsgW2tleSBpbiBLXT86IGFueSB9LFxuICAgIHByb2plY3Q/OiAoa2V5OiBLLCBpbmRleDogbnVtYmVyKSA9PiBQXG4gICk6IENvbnN0VG9UdXBsZXM8UD5bXTtcbn0gPSAobWFwT3JSZWNvcmQ6IGFueSwgcHJvamVjdD86IGFueSkgPT5cbiAgIW1hcE9yUmVjb3JkXG4gICAgPyBbXVxuICAgIDogbWFwKG1hcE9yUmVjb3JkLmtleXM/LigpID8/IE9iamVjdC5rZXlzKG1hcE9yUmVjb3JkKSwgcHJvamVjdCk7XG5cbi8qKlxuICogQW4gZXh0ZW5kZWQgdmVyc2lvbiBvZiBPYmplY3QudmFsdWVzIHRoYXQgYWxzbyBzdXBwb3J0cyBhcnJheXMgYW5kIHNldHMuXG4gKi9cbmV4cG9ydCBjb25zdCB2YWx1ZXM6IHtcbiAgPFYsIFAgPSBWPihcbiAgICBtYXA6XG4gICAgICB8IHtcbiAgICAgICAgICB2YWx1ZXMoKTogSXRlcmFibGU8Vj47XG4gICAgICAgIH1cbiAgICAgIHwgTnVsbGlzaCxcbiAgICBwcm9qZWN0PzogKHZhbHVlOiBWLCBpbmRleDogbnVtYmVyKSA9PiBQXG4gICk6IENvbnN0VG9UdXBsZXM8UD5bXTtcbiAgPFYgPSBhbnksIFAgPSBWPihcbiAgICByZWNvcmQ6IHsgW2tleSBpbiBrZXlvZiBhbnldPzogViB9LFxuICAgIHByb2plY3Q/OiAodmFsdWU6IFYsIGluZGV4OiBudW1iZXIpID0+IFBcbiAgKTogQ29uc3RUb1R1cGxlczxQPltdO1xufSA9IChtYXBPclJlY29yZDogYW55LCBwcm9qZWN0PzogYW55KSA9PlxuICAhbWFwT3JSZWNvcmRcbiAgICA/IFtdXG4gICAgOiBtYXAobWFwT3JSZWNvcmQudmFsdWVzPy4oKSA/PyBPYmplY3QudmFsdWVzKG1hcE9yUmVjb3JkKSwgcHJvamVjdCk7XG5cbi8qKlxuICogR2VuZXJhbGl6ZWQgdmVyc2lvbiBvZiBBcnJheSdzIGBmb3JFYWNoYCBtZXRob2QgdGhhdCBlbmFibGVzIGJyZWFraW5nIGFuZCBhIHJldHVybiB2YWx1ZS5cbiAqIE5vbiBpdGVyYWJsZXMgYXJlIGludGVwcmV0ZWQgYXMgYW4gYXJyYXkgd2l0aCB0aGVtc2VsdmVzIGFzIHRoZSBvbmx5IGl0ZW0uXG4gKlxuICogSWYgdGhlIGBicmVha1NpZ25hbGAgaXMgY2FsbGVkLCBpdGVyYXRpb24gd2lsbCBzdG9wLlxuICogRm9yIGNvbnZlbmllbmNlIHRoZSBicmVhayBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIHdpdGggYSB2YWx1ZSB0aGF0IHdpbGwgdGhlbiBiZSBwYXNzZWQgdGhyb3VnaCB0byBjb21iaW5lIGJyZWFraW5nIGFuZCByZXR1cm5pbmcgYSB2YWx1ZS5cbiAqIFRoaXMgZG9lcyBub3QgY2hhbmdlIHRoZSByZXR1cm4gdmFsdWUgYnkgaXRzZWxmLlxuICpcbiAqIGBjb25zdCBoYXNQb3NpdGl2ZSA9IGZvckVhY2gobnVtYmVycywgKHgsXyxzdG9wKT0+eCA+IDAgJiYgc3RvcCh0cnVlKSlgXG4gKlxuICogQHJldHVybnMgVGhlIGxhc3QgcmV0dXJuZWQgdmFsdWUgZnJvbSB0aGUgYWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgZm9yRWFjaCA9IDxULCBSID0gdm9pZCwgSW5pdGlhbFZhbHVlID0gdW5kZWZpbmVkPihcbiAgaXRlbXM6IEl0ZXJhYmxlT3JTZWxmPFQ+IHwgTnVsbGlzaCxcbiAgYWN0aW9uOiAoXG4gICAgaXRlbTogVCxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGJyZWFrU2lnbmFsOiA8VD4ocGFzc1Rocm91Z2hWYWx1ZT86IFQpID0+IFQsXG4gICAgY3VycmVudFZhbHVlOiBSIHwgSW5pdGlhbFZhbHVlXG4gICkgPT4gUixcbiAgaW5pdGlhbFZhbHVlPzogSW5pdGlhbFZhbHVlXG4pOiBJbml0aWFsVmFsdWUgfCBSID0+IHtcbiAgaWYgKGl0ZW0gPT0gbmlsIHx8ICFzaXplKGl0ZXJhYmxlKGl0ZW1zKSA/IGl0ZW1zIDogKGl0ZW1zID0gW2l0ZW1zXSBhcyBhbnkpKSlcbiAgICByZXR1cm4gaW5pdGlhbFZhbHVlIGFzIGFueTtcblxuICBjb25zdCBicmVha1NpZ25hbCA9ICguLi5hcmdzOiBhbnkpID0+IChcbiAgICAoaW5kZXggPSAwKSwgc2l6ZShhcmdzKSA/IGFyZ3NbMF0gOiBpbml0aWFsVmFsdWVcbiAgKTtcblxuICBsZXQgaW5kZXggPSAwO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMgYXMgYW55KVxuICAgIGlmIChcbiAgICAgICgoaW5pdGlhbFZhbHVlID0gYWN0aW9uKFxuICAgICAgICBpdGVtLFxuICAgICAgICBpbmRleCsrLFxuICAgICAgICBicmVha1NpZ25hbCxcbiAgICAgICAgaW5pdGlhbFZhbHVlIGFzIGFueVxuICAgICAgKSBhcyBhbnkpLFxuICAgICAgIWluZGV4KSAvLyBJbmRleCBpcyBzZXQgdG8gemVybyBmcm9tIHRoZSBicmVha1NpZ25hbFxuICAgIClcbiAgICAgIGJyZWFrO1xuXG4gIHJldHVybiBpbml0aWFsVmFsdWUgYXMgYW55O1xufTtcblxuLyoqXG4gKiBHZW5lcmFsaXplZCB2ZXJzaW9uIG9mIEFycmF5J3MgYG1hcGAgbWV0aG9kIHRoYXQgYWxzbyBzdXBwb3J0cyBpdGVyYWJsZXMgYW5kIG5vZGUgbGlzdHMuXG4gKlxuICogSWYgY2FsbGVkIHdpdGhvdXQgYSBwcm9qZWN0aW9uLCBpdCBjb252ZXJ0cyB3aGF0ZXZlciBpcyBwYXNzZWQgdG8gaXQgdG8gYW4gYXJyYXkuXG4gKiBXaGVuIHRoZSB2YWx1ZSBpcyBhbHJlYWR5IGFuIGFycmF5LCB0aGUgYGNsb25lYCBwYXJhbWV0ZXIgZGVjaWRlcyB3aGV0aGVyIHRoZSBhcnJheSBpdHNlbGYgb3IgYSBjbG9uZSBzaG91bGQgYmUgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXA6IHtcbiAgPFQsIFAgPSBUIGV4dGVuZHMgSXRlcmFibGVPckFycmF5TGlrZTxpbmZlciBUPiA/IFQgOiBUPihcbiAgICB2YWx1ZTogSXRlcmFibGVPclNlbGY8VD4gfCBOdWxsaXNoLFxuICAgIHByb2plY3Rpb246IChpdGVtOiBULCBpbmRleDogbnVtYmVyKSA9PiBQXG4gICk6IENvbnN0VG9UdXBsZXM8UD5bXTtcbiAgPFQsIFAgPSBUIGV4dGVuZHMgSXRlcmFibGVPckFycmF5TGlrZTxpbmZlciBUPiA/IFQgOiBUPihcbiAgICB2YWx1ZTogSXRlcmFibGVPclNlbGY8VD4gfCBOdWxsaXNoLFxuICAgIGNsb25lPzogYm9vbGVhblxuICApOiBDb25zdFRvVHVwbGVzPFA+W107XG59ID0gKHZhbHVlOiBhbnksIGNsb25lT3JQcm9qZWN0PzogYW55KTogYW55W10gPT5cbiAgdmFsdWUgPT0gbmlsXG4gICAgPyBbXVxuICAgIDogZnVuKGNsb25lT3JQcm9qZWN0KVxuICAgID8gKG1hcCh2YWx1ZSwgRikubWFwKCh2YWx1ZSwgaW5kZXgpID0+IGNsb25lT3JQcm9qZWN0KHZhbHVlLCBpbmRleCkpIGFzIGFueSlcbiAgICA6IGFycmF5KHZhbHVlKSAmJiAhY2xvbmVPclByb2plY3RcbiAgICA/IHZhbHVlXG4gICAgOiAoaXRlcmFibGUodmFsdWUpICYmIFsuLi52YWx1ZV0pIHx8IFt2YWx1ZV07XG5cbi8qKlxuICogQSBnZW5lcmFsaXplZCB2ZXJzaW9uIG9mIEFycmF5J3MgYGZsYXRNYXBgIHRoYXQgYWxzbyBzdXBwb3J0cyBpdGVyYWJsZXMgYW5kIG5vZGUgbGlzdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBmbGF0TWFwOiB7XG4gIDxULCBQID0gVCBleHRlbmRzIEl0ZXJhYmxlPGluZmVyIFQ+ID8gVCA6IFQ+KFxuICAgIHZhbHVlOiBJdGVyYWJsZU9yQXJyYXlMaWtlPFQ+IHwgVCB8IE51bGxpc2gsXG4gICAgcHJvamVjdDogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IFAgfCBQW11cbiAgKTogQ29uc3RUb1R1cGxlczxQPltdO1xufSA9IDxULCBQID0gVD4oXG4gIHZhbHVlOiBUIHwgSXRlcmFibGU8VCB8IE51bGxpc2g+IHwgTnVsbGlzaCxcbiAgcHJvamVjdGlvbjogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IFAgfCBQW10gPSAoaXRlbSkgPT4gaXRlbSBhcyBhbnlcbik6IENvbnN0VG9UdXBsZXM8UD5bXSA9PlxuICB2YWx1ZSA9PSBuaWxcbiAgICA/IFtdXG4gICAgOiAoZmlsdGVyKG1hcCh2YWx1ZSwgRikpLmZsYXRNYXAoKGl0ZW0sIGluZGV4KSA9PlxuICAgICAgICBwcm9qZWN0aW9uKGl0ZW0gYXMgYW55LCBpbmRleClcbiAgICAgICkgYXMgYW55KTtcblxuLyoqXG4gKiBBIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgcmV0dXJuaW5nIHRoZSBuJ3RoIGl0ZW0gZnJvbSBhbiBpdGVyYWJsZSBvciB0aGUgbid0aCBjaGFyYWN0ZXIgZnJvbSBhIHN0cmluZy5cbiAqXG4gKiBJZiB0aGUgc291cmNlIGlzIG5vdCBhbHJhZHkgYW4gYXJyYXkgKG9yIGluZGV4YWJsZSBieSBhbiBpdGVtIG1ldGhvZCksIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIG9uZSBmaXJzdC5cbiAqIFRoZSBsYXR0ZXIgZmVhdHVyZSBzaG91bGQgYmUgdXNlZCB3aXRoIGNhdXRpb24gc2luY2UgaXQgYWRkcyBhIHRlcnJpYmxlIHBlcmZvcm1hbmNlIG92ZXJoZWFkIGlmIHVzZWQgZnJvbSB3aXRoaW4gYSBsb29wLlxuICovXG5leHBvcnQgY29uc3QgaXRlbToge1xuICA8VD4oXG4gICAgYXJyYXk6XG4gICAgICB8IEl0ZXJhYmxlPFQ+XG4gICAgICB8IFRcbiAgICAgIHwgeyBbaW5kZXg6IG51bWJlcl06IFQ7IGxlbmd0aDogbnVtYmVyIH1cbiAgICAgIHwgc3RyaW5nXG4gICAgICB8IG51bGxcbiAgICAgIHwgdW5kZWZpbmVkLFxuICAgIGluZGV4PzogbnVtYmVyXG4gICk6IFQgfCB1bmRlZmluZWQ7XG4gICh0ZXh0OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufSA9IDxUPihzb3VyY2U6IGFueSwgaW5kZXggPSAwKTogVCB8IHVuZGVmaW5lZCA9PlxuICBzb3VyY2UgPT0gbmlsXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IChzb3VyY2UubGVuZ3RoID09IG51bGwgJiYgKHNvdXJjZSA9IG1hcChzb3VyY2UpKSxcbiAgICAgIHNvdXJjZS5pdGVtLFxuICAgICAgc291cmNlW2luZGV4IDwgMCA/IChzb3VyY2UgYXMgVFtdKS5sZW5ndGggKyBpbmRleCA6IGluZGV4XSk7XG5cbi8qKlxuICogQSBnZW5lcmFsaXplZCB2ZXJzaW9uIG9mIEFycmF5J3MgYGZpbHRlcmAgdGhhdCB3b3JrcyBvbiBhbGwgdGhlIHR5cGVzIHN1cHBvcnRlZCBieSB7QGxpbmsgbWFwfS5cbiAqXG4gKiBJbiBhZGRpdGlvbiBpdCBhbGxvd3MgYW4gZW1wdHkgcmVzdWx0IHRvIGJlIHJldHVybmVkIGFzIGBudWxsYFxuICovXG5leHBvcnQgY29uc3QgZmlsdGVyOiB7XG4gIDxULCBSIGV4dGVuZHMgVCA9IFQsIEIgZXh0ZW5kcyBib29sZWFuID0gZmFsc2U+KFxuICAgIHZhbHVlOiBJdGVyYWJsZU9yU2VsZjxUPiB8IE51bGxpc2gsXG4gICAgcHJlZGljYXRlOiAoaXRlbTogUiwgaW5kZXg6IG51bWJlcikgPT4gYW55LFxuICAgIGVtcHR5SXNOdWxsPzogQlxuICApOiBUW10gfCAoQiBleHRlbmRzIHRydWUgPyBudWxsIDogbmV2ZXIpO1xuICA8VCwgQiBleHRlbmRzIGJvb2xlYW4gPSBmYWxzZT4oXG4gICAgdmFsdWU6IEl0ZXJhYmxlT3JTZWxmPFQgfCBOdWxsaXNoPiB8IE51bGxpc2gsXG4gICAgZW1wdHlJc051bGw/OiBCXG4gICk6IFRbXSB8IChCIGV4dGVuZHMgdHJ1ZSA/IG51bGwgOiBuZXZlcik7XG59ID0gPFQ+KFxuICB2YWx1ZTogSXRlcmFibGVPclNlbGY8VD4gfCBOdWxsaXNoLFxuICBwcmVkaWNhdGU/OiBib29sZWFuIHwgKChpdGVtOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnkpLFxuICBlbXB0eUlzTnVsbCA9IGJvb2wocHJlZGljYXRlKSB8fCBGXG4pOiBUW10gPT5cbiAgKCh2YWx1ZSA9IChtYXAodmFsdWUpIGFzIGFueSkuZmlsdGVyKChpdGVtOiBhbnksIGluZGV4OiBhbnkpID0+XG4gICAgKGZ1bihwcmVkaWNhdGUsIHRydWUpID8/ICgoaXRlbTogYW55KSA9PiBpdGVtICE9IG5pbCkpKGl0ZW0sIGluZGV4KVxuICApKSxcbiAgZW1wdHlJc051bGwgJiYgIXNpemUodmFsdWUhKSA/IG5pbCA6IHZhbHVlKSBhcyBhbnk7XG5cbi8qKlxuICogQSBjb252ZW5pZW5jZSBtZXRob2QgdG8gdGVzdCB3aGV0aGVyIGFuIGl0ZXJhYmxlIGhhcyBhbnkgZWxlbWVudCBtYXRjaGluZyB0aGUgcHJlZGljYXRlIHNwZWNpZmllZC5cbiAqXG4gKiBJZiB0aGUgcGFyYW1ldGVyIGlzIG5vdCBpdGVyYWJsZSBpcyBpbiBpbnRlcnByZXRlZCBhcyBhbiBhcnJheSB3aXRoIGl0c2VsZiBhcyB0aGUgb25seSBlbGVtZW50LlxuICovXG5leHBvcnQgY29uc3QgYW55ID0gPFQ+KFxuICB2YWx1ZTogSXRlcmFibGVPclNlbGY8VD4sXG4gIHByZWRpY2F0ZTogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSA9IChpdGVtKSA9PlxuICAgIGl0ZW0gIT0gKG5pbCBhcyBhbnkpICYmIGl0ZW0gIT09IEZcbik6IGJvb2xlYW4gPT5cbiAgdmFsdWUgIT0gbmlsICYmXG4gIChpdGVyYWJsZSh2YWx1ZSkgfHwgKHZhbHVlID0gW3ZhbHVlIGFzIGFueV0pKSAmJlxuICAoIXByZWRpY2F0ZVxuICAgID8gISFzaXplKHZhbHVlIGFzIGFueSlcbiAgICA6IGZvckVhY2godmFsdWUsIChpdGVtLCBpLCBzdG9wKSA9PiBwcmVkaWNhdGUoaXRlbSwgaSkgJiYgc3RvcChUKSwgRikpO1xuXG4vKipcbiAqIEFycmF5J3MgYHJlZHVjZWAgbWV0aG9kIHRoYXQgYWxzbyB3b3JrcyBmb3IgaXRlcmFibGVzLlxuICovXG5leHBvcnQgY29uc3QgcmVkdWNlID0gPFQsIFY+KFxuICBpdGVtczogSXRlcmFibGVPckFycmF5TGlrZTxUPixcbiAgcmVkdWNlcjogKHByZXZpb3VzOiBWLCBpdGVtOiBUKSA9PiBWLFxuICBpbml0aWFsVmFsdWU6IFZcbikgPT5cbiAgbWFwKGl0ZW1zKS5yZWR1Y2UoXG4gICAgKHByZXZpb3VzLCBjdXJyZW50KSA9PiByZWR1Y2VyKHByZXZpb3VzLCBjdXJyZW50IGFzIGFueSksXG4gICAgaW5pdGlhbFZhbHVlXG4gICk7XG5cbi8qKlxuICogVGFrZXMgdGhlIHN1bSBvZiB0aGUgaXRlbXMgaW4gYW4gaXRlcmFibGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzdW0gPSA8VCwgQXJnPihcbiAgaXRlbXM6IEFyZ051bGxzPEl0ZXJhYmxlT3JBcnJheUxpa2U8VD4sIEFyZz4sXG4gIHNlbGVjdG9yPzogKGl0ZW06IFQpID0+IG51bWJlclxuKTogbnVtYmVyIHwgTnVsbHM8QXJnPiA9PlxuICBpdGVtcyAmJlxuICAocmVkdWNlKFxuICAgIGl0ZW1zLFxuICAgIChzdW0sIGl0ZW0pID0+IChzZWxlY3Rvcj8uKGl0ZW0pID8/IChpdGVtIGFzIG51bWJlcikpICsgc3VtLFxuICAgIDBcbiAgKSBhcyBhbnkpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGhpZ2hlc3QgdmFsdWUgaW4gYSBzZXJpZXMgb2YgbnVtYmVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IG1heDogKHR5cGVvZiBNYXRoKVtcIm1heFwiXSA9ICguLi52YWx1ZXMpID0+IE1hdGgubWF4KC4uLnZhbHVlcyk7XG4iLCJpbXBvcnQgeyBULCBhc3NpZ24sIGRlbGF5LCBuaWwsIHNpemUsIHVuZGVmaW5lZCB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlOiB7XG4gIDxUPigpOiBQcm9taXNlPHZvaWQ+O1xuICA8VD4oLi4uYXJnczogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBQcm9taXNlPFQ+Pik6IFByb21pc2U8VD47XG59ID0gKC4uLmFyZ3M6IGFueVtdKSA9PlxuICAhYXJncy5sZW5ndGggPyBQcm9taXNlLnJlc29sdmUoKSA6IChuZXcgUHJvbWlzZShhcmdzWzBdKSBhcyBhbnkpO1xuXG4vKipcbiAqIE1hZ2ljIHZhbHVlIHRvIHJlc2V0IGFuICB7QGxpbmsgT3BlblByb21pc2V9LlxuICovXG5leHBvcnQgY29uc3QgUmVzZXQgPSBTeW1ib2woKTtcblxuZXhwb3J0IHR5cGUgT3BlblByb21pc2U8VCA9IGJvb2xlYW4+ID0gUHJvbWlzZUxpa2U8VD4gJiB7XG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGUgcHJvbWlzZSB3aXRoIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqL1xuICAodmFsdWU6IFQpOiBPcGVuUHJvbWlzZTxUPjtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBwcm9taXNlLCBvcHRpb25hbGx5IG9ubHkgaWYgY29tcGxldGVkXG4gICAqL1xuICAocmVzZXQ6IHR5cGVvZiBSZXNldCwgaWZDb21wbGV0ZWQ/OiBib29sZWFuKTogT3BlblByb21pc2U8VD47XG5cbiAgLyoqXG4gICAqIFRlc3RzIHdoZXRoZXIgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQsIG9wdGlvbmFsbHkgdGltZWQgb3V0LlxuICAgKi9cbiAgKCk6IFQgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIHtAbGluayBPcGVuUHJvbWlzZVdpdGhUaW1lb3V0fSBoYXMgdGltZWQgb3V0LlxuICovXG5leHBvcnQgY29uc3QgRXhwaXJlZCA9IFN5bWJvbCgpO1xuZXhwb3J0IHR5cGUgT3BlblByb21pc2VXaXRoVGltZW91dDxUID0gYm9vbGVhbj4gPSBPcGVuUHJvbWlzZTxcbiAgVCB8IHR5cGVvZiBFeHBpcmVkXG4+O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIE9wZW5Qcm9taXNlfSBvciB7QGxpbmsgT3BlblByb21pc2VXaXRoVGltZW91dH0gaWYgYSB0aW1lb3V0IGlzIHNwZWNpZmllZC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9wZW5Qcm9taXNlOiB7XG4gIDxUID0gYm9vbGVhbj4oKTogT3BlblByb21pc2U8VD47XG4gIDxUID0gYm9vbGVhbj4odGltZW91dDogbnVtYmVyKTogT3BlblByb21pc2VXaXRoVGltZW91dDxUPjtcbn0gPSAodGltZW91dD86IG51bWJlcik6IE9wZW5Qcm9taXNlPGFueT4gPT4ge1xuICBsZXQgY3VycmVudFJlc29sdmU6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gbmlsITtcbiAgbGV0IGN1cnJlbnRQcm9taXNlOiBQcm9taXNlPGFueT4gPSBuaWwhO1xuICBsZXQgcmVzb2x2ZWQ6IGFueSA9IHVuZGVmaW5lZDtcblxuICBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgICByZXNvbHZlZCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgY2FwdHVyZWRSZXNvbHZlOiAoKHZhbHVlOiBhbnkpID0+IHZvaWQpIHwgbnVsbCA9IG5pbDtcblxuICAgIGN1cnJlbnRQcm9taXNlID0gcHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY3VycmVudFJlc29sdmUgPSBjYXB0dXJlZFJlc29sdmUgPSAodmFsdWUpID0+XG4gICAgICAgIGNhcHR1cmVkUmVzb2x2ZSAmJlxuICAgICAgICAoKGNhcHR1cmVkUmVzb2x2ZSA9IG5pbCksIHJlc29sdmUoKHJlc29sdmVkID0gdmFsdWUpKSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGltZW91dCkge1xuICAgICAgZGVsYXkodGltZW91dCkudGhlbigoKSA9PiBjYXB0dXJlZFJlc29sdmU/LihFeHBpcmVkKSk7XG4gICAgfVxuICB9O1xuICByZXNldCgpO1xuICBjb25zdCBwID0gYXNzaWduKFxuICAgICguLi5hcmdzOiBhbnlbXSk6IGFueSA9PlxuICAgICAgIXNpemUoYXJncylcbiAgICAgICAgPyByZXNvbHZlZFxuICAgICAgICA6IChhcmdzWzBdID09PSBSZXNldFxuICAgICAgICAgICAgPyAoYXJnc1sxXSAhPT0gVCB8fCByZXNvbHZlZCAhPT0gdW5kZWZpbmVkKSAmJiByZXNldCgpXG4gICAgICAgICAgICA6IGN1cnJlbnRSZXNvbHZlKGFyZ3NbMF0pLFxuICAgICAgICAgIHApLFxuICAgIHtcbiAgICAgIHRoZW46ICguLi5hcmdzOiBhbnkpID0+IGN1cnJlbnRQcm9taXNlLnRoZW4oLi4uYXJncyksXG4gICAgfVxuICApO1xuXG4gIHJldHVybiBwO1xufTtcbiIsImV4cG9ydCB0eXBlIEVuY29kYWJsZUFycmF5ID0gRW5jb2RhYmxlW107XG5cbmV4cG9ydCB0eXBlIEVuY29kYWJsZVR1cGxlID0gWy4uLkl0ZW1zOiBFbmNvZGFibGVbXV07XG5cbmV4cG9ydCB0eXBlIEVuY29kYWJsZU9iamVjdCA9IFBhcnRpYWw8e1xuICBbSyBpbiBzdHJpbmcgfCBudW1iZXJdPzogRW5jb2RhYmxlO1xufT47XG5cbi8qKlxuICogQWxsIHBvc3NpYmxlIHZhbHVlcyB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCB3aXRoIEpTT04uXG4gKi9cbmV4cG9ydCB0eXBlIEVuY29kYWJsZSA9XG4gIHwgbnVsbFxuICB8IHVuZGVmaW5lZFxuICB8IHN0cmluZ1xuICB8IG51bWJlclxuICB8IGJvb2xlYW5cbiAgfCBFbmNvZGFibGVBcnJheVxuICB8IEVuY29kYWJsZVR1cGxlXG4gIHwgRW5jb2RhYmxlT2JqZWN0O1xuXG50eXBlIENvbnZlcnRlckZ1bmN0aW9uVmFsdWU8VD4gPSBUIGV4dGVuZHMgeyB0b0pTT04oKTogaW5mZXIgViB9XG4gID8gVlxuICA6IFQgZXh0ZW5kcyB7IHZhbHVlT2YoKTogaW5mZXIgViB9XG4gID8gVlxuICA6IFQ7XG5cbnR5cGUgQ29udmVydGVyVmFsdWU8VD4gPSBUIGV4dGVuZHMgQ29udmVydGVyRnVuY3Rpb25WYWx1ZTxUPlxuICA/IG5ldmVyXG4gIDogQ29udmVydGVyRnVuY3Rpb25WYWx1ZTxUPjtcblxudHlwZSBJc05ldmVyPFQ+ID0gW1RdIGV4dGVuZHMgW25ldmVyXSA/IHRydWUgOiBmYWxzZTtcblxuLyoqXG4gKiBUaGUgc2hhcGUgb2YgdGhlIGRhdGEgdGhhdCB3aWxsIGNvbWUgYmFjayB3aGVuIGRlY29kaW5nIHRoZSBlbmNvZGVkIHZhbHVlIG9mIGEgdHlwZS5cbiAqXG4gKiBUaGlzIGFzc3VtZXMgdGhhdCBvbmx5IHRoZSBzaGFwZXMgcGVybWl0dGVkIGJ5IHtAbGluayBFbmNvZGFibGV9IGFyZSBzZXJpYWxpemVkLlxuICogT3RoZXJ3aXNlIG5vdCBpZ25vcmVkIHNpbmNlIGZ1bmN0aW9ucyBhcmUgaW4gZmFjdCBzZXJpYWxpemVkIGFzIGB7fWAuXG4gKi9cbmV4cG9ydCB0eXBlIERlY29kZWQ8VCA9IEVuY29kYWJsZT4gPSBFbmNvZGFibGUgZXh0ZW5kcyBUXG4gID8gRW5jb2RhYmxlXG4gIDogVCBleHRlbmRzIHZvaWRcbiAgPyB1bmRlZmluZWQgLy8gRm9yIGFubm95aW5nIHJlYXNvbiwgVHlwZVNjcmlwdCBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGB1bmRlZmluZWRgIGFuZCBgdm9pZGAuIFdlIHdhbnQgYHZvaWRgLlxuICA6IFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZFxuICA/IFRcbiAgOiBJc05ldmVyPENvbnZlcnRlclZhbHVlPFQ+PiBleHRlbmRzIGZhbHNlXG4gID8gRGVjb2RlZDxDb252ZXJ0ZXJWYWx1ZTxUPj5cbiAgOiBUIGV4dGVuZHMgYW55W11cbiAgPyB7IFtpbmRleCBpbiBrZXlvZiBUXTogRGVjb2RlZDxUW2luZGV4XT4gfVxuICA6IFQgZXh0ZW5kcyBJdGVyYWJsZTxpbmZlciBUPlxuICA/IERlY29kZWQ8VD5bXVxuICA6IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueVxuICA/IHVuZGVmaW5lZFxuICA6IFQgZXh0ZW5kcyBvYmplY3RcbiAgPyB7XG4gICAgICAtcmVhZG9ubHkgW1AgaW4ga2V5b2YgVCBhcyBQIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyXG4gICAgICAgID8gRGVjb2RlZDxUW1BdPiBleHRlbmRzIHVuZGVmaW5lZFxuICAgICAgICAgID8gbmV2ZXJcbiAgICAgICAgICA6IFBcbiAgICAgICAgOiBuZXZlcl06IERlY29kZWQ8VFtQXT47XG4gICAgfVxuICA6IG5ldmVyO1xuXG4vKipcbiAqIFRoZSBicm9hZGVzdCBwb3NzaWJsZSBzdWJ0eXBlIG9mIGEgZ2l2ZW4gdHlwZSB0aGF0IGNhbiBiZSBzZXJpYWxpemVkIGFuZCB0aGVuIGRlc2VyaWFsaXplZCB3aXRob3V0IHZpb2xhdGluZyB0aGUgdHlwZSdzIGNvbnRyYWN0LFxuICogd2l0aCB0aGUgZXhjZXB0aW9uIG9mIHdlbGwta25vd24gc3ltYm9sIHByb3BlcnRpZXMuIFRob3NlIGFyZSBpZ25vcmVkLlxuICpcbiAqIE5vdCB2aW9sYXRpbmcgdGhlIGNvbnN0cmFjdCBkb2VzIG5vdCBtZWFuIHRoYXQgdGhlIHR5cGUgY2FuIGxvc2xlc3NseSBiZSBzZXJpYWxpemVkIGFuZCB0aGVuIGRlc2VyaWFsaXplZCBiYWNrLlxuICogSXQganVzdCBtZWFucyB0aGF0IGl0cyBjb250cmFjdCB3aWxsIG5vdCBiZSB2aW9sYXRlZCBpZiB2YWx1ZXMgb2YgYSBjZXJ0YWluIHR5cGUgYXJlIG9taXR0ZWQgb3IgZGVzZXJpYWxpemVkIGJhY2sgdG8gYW5vdGhlciB2YWxpZCBzdWJ0eXBlLlxuICogRm9yIGV4YW1wbGUsIGFuIGl0ZXJhYmxlIHRoYXQgaXMgbm90IGFuIGFycmF5IHdpbGwgYmUgZGVzZXJpYWxpemVkIGFzIGFuIGFycmF5LlxuICpcbiAqIEluIHBhcnRpY3VsYXIgZnVuY3Rpb25zIG9yIHByb21pc2VzIGFyZSBzZXJpYWxpemVkIGFzIGVtcHR5IG9iamVjdHMgYHt9YCwgYW5kIGNhbm5vdCBiZSBkZXNlcmlhbGl6ZWQgYmFjay5cbiAqIFRoaXMgbWVhbnMgdGhhdCByZXF1aXJlZCBjb25zdHJhaW50cyBvbiBwcm9wZXJpZXMgdGhhdCBvbmx5IGFsbG93IHRoZXNlIHR5cGVzIGNhbiBuZXZlciBiZSBtZXQuXG4gKiBTaW1pbGFybHksIGFycmF5cyB0aGUgY2FuIG9ubHkgaG9sZCBmdW5jdGlvbnMgb3IgcHJvbWlzZXMgbXVzdCBiZSBlbXB0eSAoYG5ldmVyW11gKSB0byBzYXRpc2Z5IHRoZSB0eXBlIGNvbnN0cmFpbnQuXG4gKlxuICovXG5leHBvcnQgdHlwZSBFbmNvZGFibGVDb250cmFjdDxUID0gRW5jb2RhYmxlPiA9IEVuY29kYWJsZSBleHRlbmRzIFRcbiAgPyBFbmNvZGFibGVcbiAgOiBUIGV4dGVuZHMgdm9pZFxuICA/IHVuZGVmaW5lZCAvLyBGb3IgYW5ub3lpbmcgcmVhc29ucywgVHlwZVNjcmlwdCBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGB1bmRlZmluZWRgIGFuZCBgdm9pZGAuIFdlIHdhbnQgYHZvaWRgLlxuICA6IFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB8IHZvaWRcbiAgPyBUXG4gIDogSXNOZXZlcjxDb252ZXJ0ZXJWYWx1ZTxUPj4gZXh0ZW5kcyBmYWxzZVxuICA/IEVuY29kYWJsZUNvbnRyYWN0PENvbnZlcnRlclZhbHVlPFQ+PlxuICA6IFQgZXh0ZW5kcyBhbnlbXVxuICA/IHsgW2luZGV4IGluIGtleW9mIFRdOiBFbmNvZGFibGVDb250cmFjdDxUW2luZGV4XT4gfVxuICA6IFQgZXh0ZW5kcyBJdGVyYWJsZTxhbnk+XG4gID8gVFxuICA6IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueVxuICA/IHVuZGVmaW5lZFxuICA6IFQgZXh0ZW5kcyBvYmplY3RcbiAgPyB7XG4gICAgICAvLyBGdW4gZmFjdDogVHlwZVNjcmlwdCBrZWVwcyBvcHRpb25hbCBwcm9wZXJ0aWVzIGlmIHdlIGl0ZXJhdGUga2V5b2YgUCBhbmQgdGhlbiBleGNsdWRlIHN5bWJvbHMgd2l0aCB0aGUgYGV4dGVuZHNgIGNvbnN0cnVjdC5cbiAgICAgIC8vICBgKGtleW9mIFQgJiBzeW1ib2wpYCBvciBgRXhjbHVkZSA8a2V5b2YgVCwgc3ltYm9sPmAgbWFrZXMgYWxsIHByb3BlcnRpZXMgcmVxdWlyZWQuIChgeyBhPzogdW5kZWZpbmVkfWAgYmVjb21lcyBge2E6dW5kZWZpbmVkfWApXG4gICAgICAvLyBLZWVwaW5nIG9wdGlvbmFsIGB1bmRlZmluZWRgIHByb3BlcnRpZXMgbWVhbnMgdGhhdCB0aGUgcHJvcGVydHkgbmFtZSBpcyBzdGlsbCBhbGxvd2VkIGluIGEgdHlwZSBsaWtlIGB7YSgpPzogYm9vbGVhbn1gLCBldmVuIHRob3VnaCBmdW5jdGlvbnMgYXJlIG5vdCBhbGxvd2VkLlxuICAgICAgW1AgaW4ga2V5b2YgVCBhcyBQIGV4dGVuZHMgc3ltYm9sID8gbmV2ZXIgOiBQXTogRW5jb2RhYmxlQ29udHJhY3Q8VFtQXT47XG4gICAgfVxuICA6IG5ldmVyO1xuXG4vKipcbiAqIFNob3J0aGFuZCBmb3IgYSB2YWx1ZSB0aGF0IGlzIG9wdGlvbmFsbHkgYXdhaXRhYmxlLlxuICovXG5leHBvcnQgdHlwZSBNYXliZVByb21pc2U8VD4gPSBQcm9taXNlTGlrZTxUPiB8IFQ7XG5cbmV4cG9ydCB0eXBlIFZhbHVlT3JEZWZhdWx0PFQsIFIsIEQgPSB1bmRlZmluZWQ+ID0gVCBleHRlbmRzXG4gIHwgbnVsbFxuICB8IHVuZGVmaW5lZFxuICB8IHZvaWRcbiAgPyBEXG4gIDogUjtcblxuLyoqIFNob3J0ZXIgdGhhbiB3cml0aW5nIGFsbCB0aGlzIG91dCwgYW5kIHNsaWdodGx5IGVhc2llciB0byByZWFkLiAqL1xuZXhwb3J0IHR5cGUgTnVsbGlzaCA9IG51bGwgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmVtb3ZlcyBudWxsJ2lzaCB2YWx1ZXMgZnJvbSBhIHVuaW9uLlxuICovXG5leHBvcnQgdHlwZSBPbWl0TnVsbGlzaDxUPiA9IFQgZXh0ZW5kcyBOdWxsaXNoID8gbmV2ZXIgOiBUO1xuXG4vKipcbiAqIENvbW1vbiBmdW5jdGlvbiB0eXBlIHVzZWQgZm9yIHByb2plY3Rpb24gb2YgW2tleSx2YWx1ZV0gZW50cmllcy5cbiAqL1xuZXhwb3J0IHR5cGUgS2V5VmFsdWVQcm9qZWN0aW9uPEssIFYsIFI+ID0gKFxuICBlbnRyeTogW2tleTogSywgdmFsdWU6IFZdLFxuICBpbmRleDogbnVtYmVyXG4pID0+IFI7XG5cbi8qKlxuICogU2hvcnRoYW5kIGZvciBhIHR5cGUgdGhhdCBpcyBpbmZlcnJlZCBmcm9tIGEgcGFyYW1ldGVyIGFuZCBjYW4gZWl0aGVyIGJlIHRoZSBpdGVtIGluIGFuIGl0ZXJhYmxlLCBvciBqdXN0IHRoZSB0eXBlIGl0c2VsZi5cbiAqL1xuZXhwb3J0IHR5cGUgSXRlcmFibGVPclNlbGY8VD4gPSBJdGVyYWJsZU9yQXJyYXlMaWtlPFQ+IHwgVDtcblxuLyoqXG4gKiBUZXN0cyBpZiBhIHR5cGUgaXMgYGFueWAuIFRoZSB0ZXN0IHVzZWQgaXMgdGVjaG5pY2FsbHkgaW1wb3NzYWJsZSB0byBzdWNjZWVkIHVubGVzcyB0aGUgdHlwZSBpcyBpbiBmYWN0IGBhbnlgLlxuICovXG5leHBvcnQgdHlwZSBJc0FueTxUPiA9XG4gIHwgW1xuICAgICAge1xuICAgICAgICBkN2Q1MmU1NmI5YzE0YjJiOTljMjA3Zjg5ZjgzOTYzMDogVDtcbiAgICAgIH1cbiAgICBdXG4gIHwgKCh1bmxpa2VseTogeyBkN2Q1MmU1NmI5YzE0YjJiOTljMjA3Zjg5ZjgzOTYzMDogVCB9KSA9PiB7XG4gICAgICBiZDg4MTgxOTAyZDU0NDAxYmIzN2U3MTE5NGRkOGI3ZDogVDtcbiAgICB9KSBleHRlbmRzIFRcbiAgPyB0cnVlXG4gIDogZmFsc2U7XG5cbi8qKlxuICogVXRpbGl0eSB0eXBlIHRvIGFsbG93IGBhcyBjb25zdGAgdG8gYmUgdXNlZCBvbiB0dXBsZXMgcmV0dXJuZWQgZnJvbSBmdW5jdGlvbnMgd2l0aG91dCBhY3R1YWxseSBtYWtpbmcgdGhlbSBgcmVhZG9ubHlgICh3aGljaCBpcyBhbm5veWluZykuXG4gKiBOb3JtYWxseSBUeXBlU2NyaXB0IGNvbnNpZGVycyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gbGlrZSBgeD0+WzEwLFwiZm91clwiXWAgdG8gYmUgYChzdHJpbmd8bnVtYmVyKVtdYCAod2hpY2ggaXMgYWxzbyBhbm5veWluZykuXG4gKi9cbmV4cG9ydCB0eXBlIENvbnN0VG9UdXBsZXM8VD4gPSBUIGV4dGVuZHMgcmVhZG9ubHkgYW55W11cbiAgPyB7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogVFtQXSB9XG4gIDogVm9pZGVmaW5lZDxUPjtcblxuLyoqXG4gKiBHb2VzIHdpdGgge0BsaW5rIE51bGxzfSB0byBzaW1wbGlmeSB0aGUgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IHR5cGUgQXJnTnVsbHM8VCwgQXJnPiA9IChUIHwgTnVsbGlzaCkgJiBBcmc7XG5cbi8qKlxuICogVHJpY2sgZm9yIGhhdmluZyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIG5vbi1udWxsIHZhbHVlLCBpZiBhIGZvcm1hbCBwYXJhbXRlciBhbHdheXMgaGFzIGEgbm9uLW51bGwgdmFsdWUuXG4gKiBJZiB0aGUgYWN0dWFsIHBhcmFtZXRlciBjYW4gaGF2ZSBhIG51bGwgb3IgdW5kZWZpbmVkIHZhbHVlIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBpbmNsdWRlIHRoZXNlIG9wdGlvbnMuXG4gKlxuICogYGZ1bmN0aW9uIGV4YW1wbGU8VCxBPihhcmc6IChUfG51bGx8dW5kZWZpbmVkKSZBKTogc3RyaW5nIHwgTnVsbDxBPiB7Li4ufWBcbiAqIGBleGFtcGxlKDgwKWAgcmV0dXJucyBgc3RyaW5nYFxuICogIGBjb25zdCB4OiBudW1iZXJ8bnVsbDsgZXhhbXBsZSh4KWAgcmV0dXJucyBgc3RyaW5nfG51bGxgLlxuICpcbiAqIFRoZXJlIGNhbiBhbHNvIGJlIGEgXCJudWxsXCIgZGVmYXVsdCAoc28gYWxsIE51bGwnaXNoIHZhbHVlcyBtYXBzIHRvIG9uZSB2YWx1ZSkuIElmIHRoZSBmdW5jdGlvbiBhYm92ZSByZXR1cm5lZCBgc3RyaW5nIHwgTnVsbDxULHVuZGVmaW5lZD5gLCB0aGVuXG4gKiBgZXhhbXBsZSh4KWAgcmV0dXJucyBgc3RyaW5nfHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCB0eXBlIE51bGxzPFQsIE51bGxMZXZlbHMgPSBudWxsIHwgdW5kZWZpbmVkPiA9IFQgZXh0ZW5kc1xuICB8IG51bGxcbiAgfCB1bmRlZmluZWRcbiAgfCB2b2lkXG4gID8gVCBleHRlbmRzIE51bGxMZXZlbHMgfCB2b2lkXG4gICAgPyBUICYgTnVsbExldmVsc1xuICAgIDogTnVsbExldmVsc1xuICA6IG5ldmVyO1xuXG4vKipcbiAqIFR5cGVzY3JpcHQgaGFzIHRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIGB2b2lkYCBhbmQgYHVuZGVmaW5lZGAuXG4gKiBJJ20gc3VyZSB0aGVyZSBpcyBhIHRoZW9yaWNhbGx5IHNvdW5kIGV4cGxhbmF0aW9uLiBCb3RoIHRoYXQgYW5kIHRoZSBkaXN0aW5jdGlvbiBhcmUgYW5ub3lpbmcgc28gdGhpcyBsaXR0bGUgdXRpbGl0eSB0eXBlIG1hcHMgYHZvaWRgIHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIFRoZSBhbXBlcnNhbmQgdW5pb24gdHJpY2sgbWFrZXMgVHlwZVNjcmlwdCByZWxheCBpbnN0ZWFkIG9mIHRoZSBcIlRoZSB0eXBlIFQgY291bGQgYmUgaW5zdGFudGlhdGVkIGV0Yy4uLlwiIGVycm9yLlxuICovXG5leHBvcnQgdHlwZSBWb2lkZWZpbmVkPFQ+ID0gVCBleHRlbmRzIHZvaWQgPyBUICYgdW5kZWZpbmVkIDogVDtcblxuLyoqXG4gKiBBbiBleHRlbnNpb24gdG8gVFtdIGFuZCBJdGVyYWJsZTxUPiB0aGF0IGFsc28gY29ycmVjdGx5IGNhcHR1cmVzIHdlaXJkIHRoaW5ncyBsaWtlIE5vZGVMaXN0T2Y8VD5cbiAqL1xuZXhwb3J0IHR5cGUgSXRlcmFibGVPckFycmF5TGlrZTxUPiA9XG4gIHwgSXRlcmFibGU8VD5cbiAgfCB7IFtpdGVtOiBudW1iZXJdOiBUOyBsZW5ndGg6IG51bWJlciB9O1xuXG5leHBvcnQgY29uc3QgTlVMTCA9IDA7XG5leHBvcnQgY29uc3QgVU5ERUZJTkVEID0gMTtcbmV4cG9ydCBjb25zdCBCT09MRUFOID0gMjtcbmV4cG9ydCBjb25zdCBOVU1CRVIgPSAzO1xuZXhwb3J0IGNvbnN0IEJJR0lOVCA9IDQ7XG5leHBvcnQgY29uc3QgU1RSSU5HID0gNTtcbmV4cG9ydCBjb25zdCBBUlJBWSA9IDY7XG5leHBvcnQgY29uc3QgT0JKRUNUID0gNztcbmV4cG9ydCBjb25zdCBEQVRFID0gODtcbmV4cG9ydCBjb25zdCBTWU1CT0wgPSA5O1xuZXhwb3J0IGNvbnN0IEZVTkNUSU9OID0gMTA7XG5leHBvcnQgY29uc3QgSVRFUkFCTEUgPSAxMTtcbmV4cG9ydCBjb25zdCBNQVAgPSAxMjtcbmV4cG9ydCBjb25zdCBTRVQgPSAxMztcbmV4cG9ydCBjb25zdCBQUk9NSVNFID0gMTQ7XG5cbmNvbnN0IFQxID0ge1xuICBbXCJuXCJdOiBOVU1CRVIsXG4gIFtcImZcIl06IEZVTkNUSU9OLFxufTtcbmNvbnN0IFQyID0ge1xuICBbXCJvXCJdOiBCT09MRUFOLFxuICBbXCJpXCJdOiBCSUdJTlQsXG4gIFtcInRcIl06IFNUUklORyxcbiAgW1wieVwiXTogU1lNQk9MLFxufTtcblxuZXhwb3J0IHR5cGUgVHlwZVRlc3RlcjxUPiA9ICh2YWx1ZTogYW55KSA9PiB2YWx1ZSBpcyBUO1xuZXhwb3J0IHR5cGUgVHlwZUNvbnZlcnRlcjxUPiA9ICh2YWx1ZTogYW55LCBwYXJzZT86IGJvb2xlYW4pID0+IFQgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCB1bmRlZmluZWQgPSB2b2lkIDA7XG5leHBvcnQgY29uc3QgbmlsID0gbnVsbDtcblxuY29uc3QgY3JlYXRlUGFyc2VyID1cbiAgPFQ+KHR5cGVUZXN0ZXI6IFR5cGVUZXN0ZXI8VD4sIHBhcnNlcj86ICh2YWx1ZTogYW55KSA9PiBUIHwgdW5kZWZpbmVkKSA9PlxuICAodmFsdWU6IGFueSwgcGFyc2UgPSB0cnVlKSA9PlxuICAgIHR5cGVUZXN0ZXIodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IHBhcnNlciAmJiBwYXJzZSAmJiBpc0RlZmluZWQoKHZhbHVlID0gcGFyc2VyKHZhbHVlKSkpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IHRyeUNhdGNoID0gPFQsIEMgPSB1bmRlZmluZWQ+KFxuICBleHByZXNzaW9uOiAoKSA9PiBULFxuICBlcnJvckhhbmRsZXI/OiAoZXJyb3I6IGFueSkgPT4gQyxcbiAgYWx3YXlzPzogKCkgPT4gdm9pZFxuKTogVCB8IEMgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBleHByZXNzaW9uKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZXJyb3JIYW5kbGVyPy4oZSkgYXMgYW55O1xuICB9IGZpbmFsbHkge1xuICAgIGFsd2F5cz8uKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0cnlDYXRjaEFzeW5jID0gYXN5bmMgPFQsIEMgPSB1bmRlZmluZWQ+KFxuICBleHByZXNzaW9uOiAoKSA9PiBQcm9taXNlPFQ+IHwgVCxcbiAgZXJyb3JIYW5kbGVyPzogKGVycm9yOiBhbnkpID0+IFByb21pc2U8Qz4gfCBDLFxuICBhbHdheXM/OiAoKSA9PiB2b2lkXG4pOiBQcm9taXNlPFQgfCBDPiA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGV4cHJlc3Npb24oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAoYXdhaXQgZXJyb3JIYW5kbGVyPy4oZSkpIGFzIGFueTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhbHdheXM/LigpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaXNOdWxsID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBudWxsID0+IHZhbHVlID09PSBuaWw7XG5leHBvcnQgY29uc3QgaXNVbmRlZmluZWQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIHVuZGVmaW5lZCB8IHZvaWQgPT5cbiAgdmFsdWUgPT09IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBpc0RlZmluZWQgPSA8VD4odmFsdWU6IFQpOiB2YWx1ZSBpcyBFeGNsdWRlPFQsIHVuZGVmaW5lZCB8IHZvaWQ+ID0+XG4gICFpc1VuZGVmaW5lZCh2YWx1ZSk7XG5cbmV4cG9ydCBjb25zdCBoYXNWYWx1ZSA9IDxUPihcbiAgdmFsdWU6IFRcbik6IHZhbHVlIGlzIEV4Y2x1ZGU8VCwgdW5kZWZpbmVkIHwgdm9pZCB8IG51bGw+ID0+IHZhbHVlICE9IG5pbDtcblxuZXhwb3J0IGNvbnN0IGlzQm9vbGVhbiA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgYm9vbGVhbiA9PlxuICB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlQm9vbGVhbiA9IGNyZWF0ZVBhcnNlcihpc0Jvb2xlYW4sICh2YWx1ZSkgPT4gISF2YWx1ZSk7XG5cbmV4cG9ydCBjb25zdCBpc051bWJlciA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgbnVtYmVyID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbmV4cG9ydCBjb25zdCBwYXJzZU51bWJlciA9IGNyZWF0ZVBhcnNlcihpc051bWJlciwgKHZhbHVlKSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG5cbmV4cG9ydCBjb25zdCBpc0JpZ0ludCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgYmlnaW50ID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIjtcbmV4cG9ydCBjb25zdCBwYXJzZUJpZ0ludCA9IGNyZWF0ZVBhcnNlcihpc0JpZ0ludCwgKHZhbHVlKSA9PlxuICB0cnlDYXRjaCgoKSA9PiBCaWdJbnQodmFsdWUpKVxuKTtcblxuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBzdHJpbmcgPT5cbiAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlU3RyaW5nID0gY3JlYXRlUGFyc2VyKGlzU3RyaW5nLCAodmFsdWUpID0+XG4gIGhhc1ZhbHVlKHZhbHVlKSA/IFwiXCIgKyB2YWx1ZSA6IHZhbHVlXG4pO1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgY29uc3QgcGFyc2VBcnJheSA9IGNyZWF0ZVBhcnNlcihpc0FycmF5LCAodmFsdWUpID0+XG4gIGlzTnVsbCh2YWx1ZSkgPyBbXSA6IGlzSXRlcmFibGUodmFsdWUpID8gWy4uLnZhbHVlXSA6IHVuZGVmaW5lZFxuKTtcblxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBvYmplY3QgPT5cbiAgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlT2JqZWN0ID0gY3JlYXRlUGFyc2VyKGlzT2JqZWN0KTtcblxuLyoqIFRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBvYmplY3QgYnV0IG5vdCBhbiBhcnJheS4gKi9cbmV4cG9ydCBjb25zdCBpc1B1cmVPYmplY3QgPSAoXG4gIHZhbHVlOiBhbnlcbik6IHZhbHVlIGlzIG9iamVjdCAmIHsgW1N5bWJvbC5pdGVyYXRvcl0/OiBuZXZlciB9ID0+XG4gIGlzT2JqZWN0KHZhbHVlKSAmJiAhaXNJdGVyYWJsZSh2YWx1ZSk7XG5leHBvcnQgY29uc3QgcGFyc2VQdXJlT2JqZWN0ID0gY3JlYXRlUGFyc2VyKGlzUHVyZU9iamVjdCk7XG5cbmV4cG9ydCBjb25zdCBpc0RhdGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIERhdGUgPT4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlO1xuZXhwb3J0IGNvbnN0IHBhcnNlRGF0ZSA9IGNyZWF0ZVBhcnNlcihpc0RhdGUsICh2YWx1ZSkgPT5cbiAgaXNOYU4oKHZhbHVlID0gRGF0ZS5wYXJzZSh2YWx1ZSkpKSA/IHVuZGVmaW5lZCA6IHZhbHVlXG4pO1xuXG5leHBvcnQgY29uc3QgaXNTeW1ib2wgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIHN5bWJvbCA9PlxuICB0eXBlb2YgdmFsdWUgPT09IFwic3ltYm9sXCI7XG5leHBvcnQgY29uc3QgcGFyc2VTeW1ib2wgPSBjcmVhdGVQYXJzZXIoaXNTeW1ib2wpO1xuXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgKC4uLmFyZ3M6IGFueSkgPT4gYW55ID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgSXRlcmFibGU8YW55PiA9PlxuICB2YWx1ZT8uW1N5bWJvbC5pdGVyYXRvcl0gJiYgIWlzU3RyaW5nKHZhbHVlKTtcblxuZXhwb3J0IGNvbnN0IGlzTWFwID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBNYXA8YW55LCBhbnk+ID0+XG4gIHZhbHVlIGluc3RhbmNlb2YgTWFwO1xuXG5leHBvcnQgY29uc3QgaXNTZXQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFNldDxhbnk+ID0+IHZhbHVlIGluc3RhbmNlb2YgU2V0O1xuXG5leHBvcnQgY29uc3QgaXNBd2FpdGFibGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFByb21pc2U8YW55PiA9PiAhIXZhbHVlPy50aGVuO1xuXG5leHBvcnQgY29uc3QgdHlwZUNvZGUgPSAodmFsdWU6IGFueSwgdHlwZU5hbWUgPSB0eXBlb2YgdmFsdWUpID0+XG4gIHZhbHVlID09IG5pbFxuICAgID8gdmFsdWUgPT09IG5pbFxuICAgICAgPyBOVUxMXG4gICAgICA6IFVOREVGSU5FRFxuICAgIDogVDFbdHlwZU5hbWVbMF1dID8/XG4gICAgICBUMlt0eXBlTmFtZVsxXV0gPz9cbiAgICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSA/IEFSUkFZIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gREFURSA6IE9CSkVDVCk7XG5cbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9IDxUID0gYW55Pih2YWx1ZTogVCkgPT4gdmFsdWU7XG5cbmV4cG9ydCBjb25zdCBjbG9uZSA9IDxUPih2YWx1ZTogVCk6IFQgPT5cbiAgaXNBcnJheSh2YWx1ZSlcbiAgICA/IFsuLi52YWx1ZV1cbiAgICA6IGlzUHVyZU9iamVjdCh2YWx1ZSlcbiAgICA/IHsgLi4udmFsdWUgfVxuICAgIDogKHZhbHVlIGFzIGFueSk7XG4iLCJjb25zdCBjb2RlczogbnVtYmVyW10gPSBbXTtcbmNvbnN0IGNoYXJzOiBudW1iZXJbXSA9IFtdO1xuZXhwb3J0IGNvbnN0IGNoYXJDb2RlID0gKHM6IHN0cmluZywgaW5kZXggPSAwKSA9PiBzLmNoYXJDb2RlQXQoaW5kZXgpO1xuZXhwb3J0IGNvbnN0IGZyb21DaGFyQ29kZXMgPSAoY2hhcnM6IG51bWJlcltdKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmNoYXJzKTtcblxuWy4uLlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktX1wiXS5mb3JFYWNoKFxuICAocCwgaSkgPT4gKGNvZGVzWyhjaGFyc1tpXSA9IHAuY2hhckNvZGVBdCgwKSldID0gaSlcbik7XG5cbi8qKlxuICogRW5jb2RlcyBhbiBhcnJheSBvZiBieXRlcyB0byBCYXNlNjRVUkwgd2l0aG91dCBwYWRkaW5nIChVUkwgc2FmZSBCYXNlNjQgdXNpbmcgYC1gIGFuZCBgX2AgaW5zdGVhZCBvZiBgK2AgYW5kIGAvYCkuXG4gKlxuICogKHRoYW5rcyB0byBKb24gTGVpZ2h0b24gYXQgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vam9ubGVpZ2h0b24vOTU4ODQxKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRvNjR1ID0gKGJ5dGVzOiBVaW50OEFycmF5KSA9PiB7XG4gIGxldCBpID0gMDtcbiAgbGV0IGNodW5rOiBudW1iZXI7XG4gIGNvbnN0IG4gPSBieXRlcy5sZW5ndGg7XG5cbiAgY29uc3QgYmFzZTY0OiBudW1iZXJbXSA9IFtdO1xuICB3aGlsZSAoaSA8IG4pIHtcbiAgICBjaHVuayA9IChieXRlc1tpKytdIDw8IDE2KSB8IChieXRlc1tpKytdIDw8IDgpIHwgYnl0ZXNbaSsrXTtcbiAgICBiYXNlNjQucHVzaChcbiAgICAgIGNoYXJzWyhjaHVuayAmIDE2NTE1MDcyKSA+PiAxOF0sXG4gICAgICBjaGFyc1soY2h1bmsgJiAyNTgwNDgpID4+IDEyXSxcbiAgICAgIGNoYXJzWyhjaHVuayAmIDQwMzIpID4+IDZdLFxuICAgICAgY2hhcnNbY2h1bmsgJiA2M11cbiAgICApO1xuICB9XG4gIGJhc2U2NC5sZW5ndGggKz0gbiAtIGk7XG5cbiAgcmV0dXJuIGZyb21DaGFyQ29kZXMoYmFzZTY0KTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIEJhc2VVUkwgZW5jb2RlZCBzdHJpbmcgKHdpdGhvdXQgcGFkZGluZykuXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tNjR1ID0gKGVuY29kZWQ6IHN0cmluZykgPT4ge1xuICBsZXQgaSA9IDA7XG4gIGxldCBqID0gMDtcbiAgbGV0IHA6IG51bWJlcjtcbiAgY29uc3QgbiA9IGVuY29kZWQubGVuZ3RoO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDMgKiAoKG4gLyA0KSB8IDApICsgKCgobiArIDMpICYgMykgJSAzKSk7XG4gIHdoaWxlIChpIDwgbikge1xuICAgIGJ5dGVzW2orK10gPVxuICAgICAgKGNvZGVzW2NoYXJDb2RlKGVuY29kZWQsIGkrKyldIDw8IDIpIHxcbiAgICAgICgocCA9IGNvZGVzW2NoYXJDb2RlKGVuY29kZWQsIGkrKyldKSA+PiA0KTtcbiAgICBpZiAoaSA8IG4pIHtcbiAgICAgIGJ5dGVzW2orK10gPSAoKHAgJiAxNSkgPDwgNCkgfCAoKHAgPSBjb2Rlc1tjaGFyQ29kZShlbmNvZGVkLCBpKyspXSkgPj4gMik7XG4gICAgICBpZiAoaSA8IG4pIHtcbiAgICAgICAgYnl0ZXNbaisrXSA9ICgocCAmIDMpIDw8IDYpIHwgY29kZXNbY2hhckNvZGUoZW5jb2RlZCwgaSsrKV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlcztcbn07XG4iLCJpbXBvcnQgeyBjaGFyQ29kZSwgaGFzVmFsdWUsIGlzQm9vbGVhbiB9IGZyb20gXCIuXCI7XG5cbi8qKiBUaGUgbnVtYmVyIG9mIGxlYWRpbmcgZW50cm9weSBieXRlcy4gKi9cbmNvbnN0IEVOVFJPUFkgPSA0O1xuLyoqIFRoZSBwYWRkaW5nIGxlbmd0aC4gQ2lwaGVyIHRleHRzIHdpbGwgYWx3YXlzIGJlIGEgbXVsdGlwbGUgb2YgdGhpcy4gKi9cbmNvbnN0IE1BWF9QQURESU5HID0gMTY7XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zvd2xlciVFMiU4MCU5M05vbGwlRTIlODAlOTNWb19oYXNoX2Z1bmN0aW9uI0ZOVl9oYXNoX3BhcmFtZXRlcnNcbnR5cGUgRm52MWFDb25maWd1cmF0aW9uID0gW29mZnNldDogYmlnaW50LCBwcmltZTogYmlnaW50XTtcbmNvbnN0IEZOVnM6IFJlY29yZDxudW1iZXIsIEZudjFhQ29uZmlndXJhdGlvbj4gPSB7XG4gIDMyOiBbMHg4MTFjOWRjNW4sIDB4MDEwMDAxOTNuXSxcbiAgNjQ6IFsweGNiZjI5Y2U0ODQyMjIzMjVuLCAweDEwMDAwMDAwMWIzbl0sXG4gIDEyODogWzB4NmM2MjI3MmUwN2JiMDE0MjYyYjgyMTc1NjI5NWM1OGRuLCAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMTNibl0sXG59O1xuXG4vKiogQSByYW5kb20gYnl0ZS4gKi9cbmNvbnN0IGVudHJvcHkgPSAobWF4ID0gMjU2KSA9PiAobWF4ICogTWF0aC5yYW5kb20oKSkgfCAwO1xuXG5leHBvcnQgdHlwZSBIYXNoRnVuY3Rpb248VD4gPSB7XG4gIDxCIGV4dGVuZHMgYm9vbGVhbj4oc291cmNlOiBULCBudW1lcmljOiBCKTogQiBleHRlbmRzIHRydWUgPyBudW1iZXIgOiBzdHJpbmc7XG4gIChzb3VyY2U6IFQsIGJpdHM/OiAzMiB8IDY0IHwgMTI4KTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQ2lwaGVyRnVuY3Rpb24gPSAoZGF0YTogVWludDhBcnJheSkgPT4gVWludDhBcnJheTtcbmV4cG9ydCB0eXBlIENpcGhlckZ1bmN0aW9ucyA9IFtcbiAgQ2lwaGVyRnVuY3Rpb24sXG4gIENpcGhlckZ1bmN0aW9uLFxuICBIYXNoRnVuY3Rpb248VWludDhBcnJheT5cbl07XG5cbi8qKlxuICogTGluZWFyLWZlZWRiYWNrIHNoaWZ0IHJlZ2lzdGVyIGVuY3J5cHRpb24gd2l0aCBsZWFkaW5nIGVudHJvcHkgYW5kIGZpeGVkIHBhZGRpbmcuXG4gKlxuICogVXNlZCBmb3Igb24tdGhlLWZseSBlbmNyeXB0aW9uLiBJdCBpcyBub3QgdGhlIHN0cm9uZ2VzdCBlbmNyeXB0aW9uLCB5ZXQgaXQgaXMgYW5ub3lpbmdseSBjaGFsbGVuZ2luZyB0byBicmVhay5cbiAqIER1ZSB0byBlbnRyb3B5IHRoZSBzYW1lIHRleHQgd2l0aCB0aGUgc2FtZSBrZXkgd2lsbCByZXN1bHQgaW4gYSBkaWZmZXJlbnQgY2lwaGVyIHRleHQgZXZlcnkgdGltZS5cbiAqXG4gKlxuICogXCJJdCBpcyBmYXN0IGFuZCBzbWFsbC5cIiwgQm9iIHNhaWQgdG8gQWxpY2UuIFwiSXQgaXMgYWxsIHJpZ2h0LlwiLCBzaGUgcmVwbGllZC5cbiAqXG4gKiAoQWRhcHRlZCBmcm9tIGh0dHA6Ly9xdWlubmZ0dy5jb20veG9yLWNpcGhlcnMvKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxmc3IgPSAoa2V5ID0gXCJcIik6IENpcGhlckZ1bmN0aW9ucyA9PiB7XG4gIC8qKiBOdW1iZXIgb2Ygc291cmNlIGJ5dGVzIGZvciAoZW4vZGUpY3J5cHRpb24uICovXG4gIGxldCBuOiBudW1iZXI7XG4gIC8qKiBTb3VyY2UgYnl0ZSBpbmRleC4gKi9cbiAgbGV0IGk6IG51bWJlcjtcbiAgLyoqIFRhcmdldCBieXRlIGluZGV4LiAqL1xuICBsZXQgajogbnVtYmVyO1xuICAvKiogUGFkZGluZyBsZW5ndGguICovXG4gIGxldCBwYWQ6IG51bWJlcjtcblxuICAvKiogSG9sZHMgdGhlIChlbi9kZSljcnlwdGVkIGJ5dGVzLiAqL1xuICBsZXQgdGFyZ2V0OiBVaW50OEFycmF5O1xuXG4gIC8qKiBIYXNoIGNvZGUuICovXG4gIGxldCBoYXNoID0gMG47XG5cbiAgLyoqIEJpdHMgZm9yIEZOVi0xYSBoYXNoIGNvZGUuICovXG4gIGxldCBiaXRzID0gMDtcblxuICAvKiogUHJpbWUgZm9yIEZOVi0xYSBoYXNoIGNvZGUuICovXG4gIGxldCBwcmltZSA9IDBuO1xuXG4gIC8qKlxuICAgKiBUaGUgc2xpZGluZyB3aW5kb3cgd2l0aCB0aGUgcGFzdCBjaXBoZXJzIHVzZWQgdG8gdXBkYXRlIGZvciB0aGUgbWl4ZXIuXG4gICAqIEl0IHdvcmtzIGFzIGEgbGluZWFyIGZlZWRiYWNrIHNoZml0IHJlZ2lzdGVyIHRvIGJvbHN0ZXIgYWdhaW5zdCBmcmVxdWVuY3kgYW5hbHlzaXMuXG4gICAqXG4gICAqIGh0dHA6Ly9xdWlubmZ0dy5jb20veG9yLWNpcGhlcnMvLlxuICAgKi9cbiAgbGV0IHdpbmRvdzogbnVtYmVyW10gPSBbXTtcblxuICAvKiogVGhlIG1peGVyIHVzZWQgdG8gaXRlcmF0aXZlbHkgdXBkYXRlIHRoZSBrZXkgd2hpbGUgKGVuL2RlKWNyeXB0aW5nLiAqL1xuICBsZXQgbWl4ZXIgPSAwO1xuICAvKiogVGhlIG1peGVyIG1vZHVsbyAyNTYuICovXG4gIGxldCBtaXhlcjI1NSA9IDA7XG5cbiAgLyoqIEN1cnJlbnQgc3RhcnQgb2YgdGhlIG1peGVyIHdpbmRvdy4gKi9cbiAgbGV0IGl3ID0gMDtcbiAgLyoqIEluaXRpYWwgbWl4ZXIuICovXG4gIGxldCBtaXhlcjAgPSAwO1xuICAvKiogSW5pdGlhbCBieXRlcyBmb3IgdGhlIG1peGVyLiAqL1xuICBjb25zdCB3aW5kb3cwOiBudW1iZXJbXSA9IFtdO1xuXG4gIGZvciAoaXcgPSAwOyBpdyA8IGtleS5sZW5ndGg7IG1peGVyMCArPSB3aW5kb3cwW2l3XSA9IGNoYXJDb2RlKGtleSwgaXcrKykpO1xuXG4gIC8qKiBSZXNldHMgdGhlIG1peGVyIHdoZW4gKGVuL2RlKWNyeXB0aW9uIHN0YXJ0cy4gKi9cbiAgY29uc3QgcmVzZXRNaXhlciA9IGtleVxuICAgID8gKCkgPT4ge1xuICAgICAgICB3aW5kb3cgPSBbLi4ud2luZG93MF07XG4gICAgICAgIG1peGVyMjU1ID0gKG1peGVyID0gbWl4ZXIwKSAmIDI1NTtcbiAgICAgICAgaXcgPSAtMTtcbiAgICAgIH1cbiAgICA6ICgpID0+IHt9O1xuXG4gIC8qKiBVcGRhdGVzIHRoZSBtaXhlciB3aXRoIHRoZSAoZW4vZGUpY3J5cHRlZCBieXRlLiAqL1xuICBjb25zdCB1cGRhdGVNaXhlciA9IChjOiBudW1iZXIpID0+IChcbiAgICAobWl4ZXIyNTUgPVxuICAgICAgKG1peGVyICs9XG4gICAgICAgIC8vIFN1YnRyYWN0IHRoZSBieXRlIGxlYXZpbmcgdGhlIHdpbmRvdy5cbiAgICAgICAgLXdpbmRvd1soaXcgPSAoaXcgKyAxKSAlIHdpbmRvdy5sZW5ndGgpXSArXG4gICAgICAgIC8vIEFkZCB0aGUgYnl0ZSBlbnRlcmluZyB0aGUgd2luZG93LlxuICAgICAgICAod2luZG93W2l3XSA9IGMpKSAmIDI1NSksXG4gICAgY1xuICApO1xuXG4gIHJldHVybiBbXG4gICAgLy8gRW5jcnlwdFxuICAgIGtleVxuICAgICAgPyAoc291cmNlKSA9PiB7XG4gICAgICAgICAgcmVzZXRNaXhlcigpO1xuICAgICAgICAgIG4gPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgIHBhZCA9IE1BWF9QQURESU5HIC0gKChuICsgRU5UUk9QWSkgJSBNQVhfUEFERElORyk7XG4gICAgICAgICAgdGFyZ2V0ID0gbmV3IFVpbnQ4QXJyYXkoRU5UUk9QWSArIG4gKyBwYWQpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IEVOVFJPUFkgLSAxOyB0YXJnZXRbaisrXSA9IHVwZGF0ZU1peGVyKGVudHJvcHkoKSkpO1xuXG4gICAgICAgICAgLy8gQWxpZ24gbGFzdCBlbnRyb3B5IGJ5dGUgdG8gbWF4IHBhZGRpbmcgYW5kIGFkZCBwYWRkaW5nLlxuICAgICAgICAgIHRhcmdldFtqKytdID0gdXBkYXRlTWl4ZXIoXG4gICAgICAgICAgICBtaXhlcjI1NSBeIChNQVhfUEFERElORyAqIGVudHJvcHkoMjU2IC8gTUFYX1BBRERJTkcpICsgcGFkKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgdGFyZ2V0W2orK10gPSB1cGRhdGVNaXhlcihtaXhlcjI1NSBeIHNvdXJjZVtpKytdKSk7XG4gICAgICAgICAgd2hpbGUgKHBhZC0tKSB0YXJnZXRbaisrXSA9IGVudHJvcHkoKTtcblxuICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIDogKHNvdXJjZSkgPT4gc291cmNlLFxuXG4gICAgLy8gRGVjcnlwdFxuICAgIGtleVxuICAgICAgPyAoc291cmNlKSA9PiB7XG4gICAgICAgICAgcmVzZXRNaXhlcigpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBFTlRST1BZIC0gMTsgdXBkYXRlTWl4ZXIoc291cmNlW2krK10pKTtcbiAgICAgICAgICBuID1cbiAgICAgICAgICAgIHNvdXJjZS5sZW5ndGggLVxuICAgICAgICAgICAgRU5UUk9QWSAtXG4gICAgICAgICAgICAvLyBQYWRkaW5nLiBJZiBwYWRkaW5nIGlzIHplcm8gaXQgYWxsIGxhc3QgUEFERElORyBjaGFyYWN0ZXJzIGFyZSBwYWRkaW5nLlxuICAgICAgICAgICAgKChtaXhlcjI1NSBeIHVwZGF0ZU1peGVyKHNvdXJjZVtpKytdKSkgJSBNQVhfUEFERElORyB8fFxuICAgICAgICAgICAgICBNQVhfUEFERElORyk7XG4gICAgICAgICAgaWYgKG4gPD0gMCkgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuXG4gICAgICAgICAgdGFyZ2V0ID0gbmV3IFVpbnQ4QXJyYXkobik7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgdGFyZ2V0W2orK10gPSBtaXhlcjI1NSBeIHVwZGF0ZU1peGVyKHNvdXJjZVtpKytdKSk7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgOiAoY2lwaGVyKSA9PiBjaXBoZXIsXG5cbiAgICAvLyBGTlYxYSBoYXNoIGNvZGUuXG4gICAgKHNvdXJjZTogYW55LCBudW1lcmljT3JCaXRzOiBhbnkgPSA2NCkgPT4ge1xuICAgICAgaWYgKCFoYXNWYWx1ZShzb3VyY2UpKSByZXR1cm4gbnVsbDtcbiAgICAgIGxldCBiaXRzID0gaXNCb29sZWFuKG51bWVyaWNPckJpdHMpID8gNjQgOiBudW1lcmljT3JCaXRzO1xuXG4gICAgICByZXNldE1peGVyKCk7XG5cbiAgICAgIFtoYXNoLCBwcmltZV0gPSBGTlZzW2JpdHNdO1xuXG4gICAgICBmb3IgKFxuICAgICAgICBpID0gMDtcbiAgICAgICAgaSA8IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIGhhc2ggPSBCaWdJbnQuYXNVaW50TihcbiAgICAgICAgICBiaXRzLFxuICAgICAgICAgIChoYXNoIF4gQmlnSW50KG1peGVyMjU1IF4gdXBkYXRlTWl4ZXIoc291cmNlW2krK10pKSkgKiBwcmltZVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gbnVtZXJpY09yQml0cyA9PT0gdHJ1ZVxuICAgICAgICA/IE51bWJlcihcbiAgICAgICAgICAgIEJpZ0ludChOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikgK1xuICAgICAgICAgICAgICAoaGFzaCAlIEJpZ0ludChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAtIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSlcbiAgICAgICAgICApXG4gICAgICAgIDogKGhhc2gudG9TdHJpbmcoMzYpIGFzIGFueSk7XG4gICAgfSxcbiAgXTtcbn07XG4iLCLvu78oZnVuY3Rpb24gKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHQvLyBTZXJpYWxpemVzIGEgdmFsdWUgdG8gYSBNZXNzYWdlUGFjayBieXRlIGFycmF5LlxyXG5cdC8vXHJcblx0Ly8gZGF0YTogVGhlIHZhbHVlIHRvIHNlcmlhbGl6ZS4gVGhpcyBjYW4gYmUgYSBzY2FsYXIsIGFycmF5IG9yIG9iamVjdC5cclxuXHQvLyBvcHRpb25zOiBBbiBvYmplY3QgdGhhdCBkZWZpbmVkIGFkZGl0aW9uYWwgb3B0aW9ucy5cclxuXHQvLyAtIG11bHRpcGxlOiBJbmRpY2F0ZXMgd2hldGhlciBtdWx0aXBsZSB2YWx1ZXMgaW4gZGF0YSBhcmUgY29uY2F0ZW5hdGVkIHRvIG11bHRpcGxlIE1lc3NhZ2VQYWNrIGFycmF5cy5cclxuXHQvLyAtIGludmFsaWRUeXBlUmVwbGFjZW1lbnQ6IFRoZSB2YWx1ZSB0aGF0IGlzIHVzZWQgdG8gcmVwbGFjZSB2YWx1ZXMgb2YgdW5zdXBwb3J0ZWQgdHlwZXMsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHN1Y2ggYSB2YWx1ZSwgZ2l2ZW4gdGhlIG9yaWdpbmFsIHZhbHVlIGFzIHBhcmFtZXRlci5cclxuXHRmdW5jdGlvbiBzZXJpYWxpemUoZGF0YSwgb3B0aW9ucykge1xyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHR5cGU6IEV4cGVjdGVkIGFuIEFycmF5IHRvIHNlcmlhbGl6ZSBtdWx0aXBsZSB2YWx1ZXMuXCIpO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgcG93MzIgPSAweDEwMDAwMDAwMDsgICAvLyAyXjMyXHJcblx0XHRsZXQgZmxvYXRCdWZmZXIsIGZsb2F0VmlldztcclxuXHRcdGxldCBhcnJheSA9IG5ldyBVaW50OEFycmF5KDEyOCk7XHJcblx0XHRsZXQgbGVuZ3RoID0gMDtcclxuXHRcdGlmIChvcHRpb25zICYmIG9wdGlvbnMubXVsdGlwbGUpIHtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0YXBwZW5kKGRhdGFbaV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0YXBwZW5kKGRhdGEpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGFycmF5LnN1YmFycmF5KDAsIGxlbmd0aCk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gYXBwZW5kKGRhdGEsIGlzUmVwbGFjZW1lbnQpIHtcclxuXHRcdFx0c3dpdGNoICh0eXBlb2YgZGF0YSkge1xyXG5cdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcclxuXHRcdFx0XHRcdGFwcGVuZE51bGwoZGF0YSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxyXG5cdFx0XHRcdFx0YXBwZW5kQm9vbGVhbihkYXRhKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJudW1iZXJcIjpcclxuXHRcdFx0XHRcdGFwcGVuZE51bWJlcihkYXRhKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcclxuXHRcdFx0XHRcdGFwcGVuZFN0cmluZyhkYXRhKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcclxuXHRcdFx0XHRcdGlmIChkYXRhID09PSBudWxsKVxyXG5cdFx0XHRcdFx0XHRhcHBlbmROdWxsKGRhdGEpO1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGUpXHJcblx0XHRcdFx0XHRcdGFwcGVuZERhdGUoZGF0YSk7XHJcblx0XHRcdFx0XHRlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKVxyXG5cdFx0XHRcdFx0XHRhcHBlbmRBcnJheShkYXRhKTtcclxuXHRcdFx0XHRcdGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGRhdGEgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSlcclxuXHRcdFx0XHRcdFx0YXBwZW5kQmluQXJyYXkoZGF0YSk7XHJcblx0XHRcdFx0XHRlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgSW50OEFycmF5IHx8IGRhdGEgaW5zdGFuY2VvZiBJbnQxNkFycmF5IHx8IGRhdGEgaW5zdGFuY2VvZiBVaW50MTZBcnJheSB8fFxyXG5cdFx0XHRcdFx0XHRkYXRhIGluc3RhbmNlb2YgSW50MzJBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgVWludDMyQXJyYXkgfHxcclxuXHRcdFx0XHRcdFx0ZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5KVxyXG5cdFx0XHRcdFx0XHRhcHBlbmRBcnJheShkYXRhKTtcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0YXBwZW5kT2JqZWN0KGRhdGEpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdGlmICghaXNSZXBsYWNlbWVudCAmJiBvcHRpb25zICYmIG9wdGlvbnMuaW52YWxpZFR5cGVSZXBsYWNlbWVudCkge1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMuaW52YWxpZFR5cGVSZXBsYWNlbWVudCA9PT0gXCJmdW5jdGlvblwiKVxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChvcHRpb25zLmludmFsaWRUeXBlUmVwbGFjZW1lbnQoZGF0YSksIHRydWUpO1xyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kKG9wdGlvbnMuaW52YWxpZFR5cGVSZXBsYWNlbWVudCwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCB0eXBlOiBUaGUgdHlwZSAnXCIgKyAodHlwZW9mIGRhdGEpICsgXCInIGNhbm5vdCBiZSBzZXJpYWxpemVkLlwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFwcGVuZE51bGwoZGF0YSkge1xyXG5cdFx0XHRhcHBlbmRCeXRlKDB4YzApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFwcGVuZEJvb2xlYW4oZGF0YSkge1xyXG5cdFx0XHRhcHBlbmRCeXRlKGRhdGEgPyAweGMzIDogMHhjMik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gYXBwZW5kTnVtYmVyKGRhdGEpIHtcclxuXHRcdFx0aWYgKGlzRmluaXRlKGRhdGEpICYmIE1hdGguZmxvb3IoZGF0YSkgPT09IGRhdGEpIHtcclxuXHRcdFx0XHQvLyBJbnRlZ2VyXHJcblx0XHRcdFx0aWYgKGRhdGEgPj0gMCAmJiBkYXRhIDw9IDB4N2YpIHtcclxuXHRcdFx0XHRcdGFwcGVuZEJ5dGUoZGF0YSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKGRhdGEgPCAwICYmIGRhdGEgPj0gLTB4MjApIHtcclxuXHRcdFx0XHRcdGFwcGVuZEJ5dGUoZGF0YSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKGRhdGEgPiAwICYmIGRhdGEgPD0gMHhmZikgeyAgIC8vIHVpbnQ4XHJcblx0XHRcdFx0XHRhcHBlbmRCeXRlcyhbMHhjYywgZGF0YV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChkYXRhID49IC0weDgwICYmIGRhdGEgPD0gMHg3ZikgeyAgIC8vIGludDhcclxuXHRcdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGQwLCBkYXRhXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKGRhdGEgPiAwICYmIGRhdGEgPD0gMHhmZmZmKSB7ICAgLy8gdWludDE2XHJcblx0XHRcdFx0XHRhcHBlbmRCeXRlcyhbMHhjZCwgZGF0YSA+Pj4gOCwgZGF0YV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChkYXRhID49IC0weDgwMDAgJiYgZGF0YSA8PSAweDdmZmYpIHsgICAvLyBpbnQxNlxyXG5cdFx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZDEsIGRhdGEgPj4+IDgsIGRhdGFdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoZGF0YSA+IDAgJiYgZGF0YSA8PSAweGZmZmZmZmZmKSB7ICAgLy8gdWludDMyXHJcblx0XHRcdFx0XHRhcHBlbmRCeXRlcyhbMHhjZSwgZGF0YSA+Pj4gMjQsIGRhdGEgPj4+IDE2LCBkYXRhID4+PiA4LCBkYXRhXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKGRhdGEgPj0gLTB4ODAwMDAwMDAgJiYgZGF0YSA8PSAweDdmZmZmZmZmKSB7ICAgLy8gaW50MzJcclxuXHRcdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGQyLCBkYXRhID4+PiAyNCwgZGF0YSA+Pj4gMTYsIGRhdGEgPj4+IDgsIGRhdGFdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoZGF0YSA+IDAgJiYgZGF0YSA8PSAweGZmZmZmZmZmZmZmZmZmZmYpIHsgICAvLyB1aW50NjRcclxuXHRcdFx0XHRcdC8vIFNwbGl0IDY0IGJpdCBudW1iZXIgaW50byB0d28gMzIgYml0IG51bWJlcnMgYmVjYXVzZSBKYXZhU2NyaXB0IG9ubHkgcmVnYXJkc1xyXG5cdFx0XHRcdFx0Ly8gMzIgYml0cyBmb3IgYml0d2lzZSBvcGVyYXRpb25zLlxyXG5cdFx0XHRcdFx0bGV0IGhpID0gZGF0YSAvIHBvdzMyO1xyXG5cdFx0XHRcdFx0bGV0IGxvID0gZGF0YSAlIHBvdzMyO1xyXG5cdFx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZDMsIGhpID4+PiAyNCwgaGkgPj4+IDE2LCBoaSA+Pj4gOCwgaGksIGxvID4+PiAyNCwgbG8gPj4+IDE2LCBsbyA+Pj4gOCwgbG9dKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoZGF0YSA+PSAtMHg4MDAwMDAwMDAwMDAwMDAwICYmIGRhdGEgPD0gMHg3ZmZmZmZmZmZmZmZmZmZmKSB7ICAgLy8gaW50NjRcclxuXHRcdFx0XHRcdGFwcGVuZEJ5dGUoMHhkMyk7XHJcblx0XHRcdFx0XHRhcHBlbmRJbnQ2NChkYXRhKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoZGF0YSA8IDApIHsgICAvLyBiZWxvdyBpbnQ2NFxyXG5cdFx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZDMsIDB4ODAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7ICAgLy8gYWJvdmUgdWludDY0XHJcblx0XHRcdFx0XHRhcHBlbmRCeXRlcyhbMHhjZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZl0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBGbG9hdFxyXG5cdFx0XHRcdGlmICghZmxvYXRWaWV3KSB7XHJcblx0XHRcdFx0XHRmbG9hdEJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcclxuXHRcdFx0XHRcdGZsb2F0VmlldyA9IG5ldyBEYXRhVmlldyhmbG9hdEJ1ZmZlcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZsb2F0Vmlldy5zZXRGbG9hdDY0KDAsIGRhdGEpO1xyXG5cdFx0XHRcdGFwcGVuZEJ5dGUoMHhjYik7XHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMobmV3IFVpbnQ4QXJyYXkoZmxvYXRCdWZmZXIpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFwcGVuZFN0cmluZyhkYXRhKSB7XHJcblx0XHRcdGxldCBieXRlcyA9IGVuY29kZVV0ZjgoZGF0YSk7XHJcblx0XHRcdGxldCBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAobGVuZ3RoIDw9IDB4MWYpXHJcblx0XHRcdFx0YXBwZW5kQnl0ZSgweGEwICsgbGVuZ3RoKTtcclxuXHRcdFx0ZWxzZSBpZiAobGVuZ3RoIDw9IDB4ZmYpXHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZDksIGxlbmd0aF0pO1xyXG5cdFx0XHRlbHNlIGlmIChsZW5ndGggPD0gMHhmZmZmKVxyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGRhLCBsZW5ndGggPj4+IDgsIGxlbmd0aF0pO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZGIsIGxlbmd0aCA+Pj4gMjQsIGxlbmd0aCA+Pj4gMTYsIGxlbmd0aCA+Pj4gOCwgbGVuZ3RoXSk7XHJcblxyXG5cdFx0XHRhcHBlbmRCeXRlcyhieXRlcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gYXBwZW5kQXJyYXkoZGF0YSkge1xyXG5cdFx0XHRsZXQgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAobGVuZ3RoIDw9IDB4ZilcclxuXHRcdFx0XHRhcHBlbmRCeXRlKDB4OTAgKyBsZW5ndGgpO1xyXG5cdFx0XHRlbHNlIGlmIChsZW5ndGggPD0gMHhmZmZmKVxyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGRjLCBsZW5ndGggPj4+IDgsIGxlbmd0aF0pO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4ZGQsIGxlbmd0aCA+Pj4gMjQsIGxlbmd0aCA+Pj4gMTYsIGxlbmd0aCA+Pj4gOCwgbGVuZ3RoXSk7XHJcblxyXG5cdFx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcblx0XHRcdFx0YXBwZW5kKGRhdGFbaW5kZXhdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFwcGVuZEJpbkFycmF5KGRhdGEpIHtcclxuXHRcdFx0bGV0IGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKGxlbmd0aCA8PSAweGYpXHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4YzQsIGxlbmd0aF0pO1xyXG5cdFx0XHRlbHNlIGlmIChsZW5ndGggPD0gMHhmZmZmKVxyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGM1LCBsZW5ndGggPj4+IDgsIGxlbmd0aF0pO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YXBwZW5kQnl0ZXMoWzB4YzYsIGxlbmd0aCA+Pj4gMjQsIGxlbmd0aCA+Pj4gMTYsIGxlbmd0aCA+Pj4gOCwgbGVuZ3RoXSk7XHJcblxyXG5cdFx0XHRhcHBlbmRCeXRlcyhkYXRhKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBhcHBlbmRPYmplY3QoZGF0YSkge1xyXG5cdFx0XHRsZXQgbGVuZ3RoID0gMDtcclxuXHRcdFx0Zm9yIChsZXQga2V5IGluIGRhdGEpIHtcclxuXHRcdFx0XHRpZiAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdGxlbmd0aCsrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGxlbmd0aCA8PSAweGYpXHJcblx0XHRcdFx0YXBwZW5kQnl0ZSgweDgwICsgbGVuZ3RoKTtcclxuXHRcdFx0ZWxzZSBpZiAobGVuZ3RoIDw9IDB4ZmZmZilcclxuXHRcdFx0XHRhcHBlbmRCeXRlcyhbMHhkZSwgbGVuZ3RoID4+PiA4LCBsZW5ndGhdKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGRmLCBsZW5ndGggPj4+IDI0LCBsZW5ndGggPj4+IDE2LCBsZW5ndGggPj4+IDgsIGxlbmd0aF0pO1xyXG5cclxuXHRcdFx0Zm9yIChsZXQga2V5IGluIGRhdGEpIHtcclxuXHRcdFx0XHRsZXQgdmFsdWUgPSBkYXRhW2tleV07XHJcblx0XHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdGFwcGVuZChrZXkpO1xyXG5cdFx0XHRcdFx0YXBwZW5kKHZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBhcHBlbmREYXRlKGRhdGEpIHtcclxuXHRcdFx0bGV0IHNlYyA9IGRhdGEuZ2V0VGltZSgpIC8gMTAwMDtcclxuXHRcdFx0aWYgKGRhdGEuZ2V0TWlsbGlzZWNvbmRzKCkgPT09IDAgJiYgc2VjID49IDAgJiYgc2VjIDwgMHgxMDAwMDAwMDApIHsgICAvLyAzMiBiaXQgc2Vjb25kc1xyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGQ2LCAweGZmLCBzZWMgPj4+IDI0LCBzZWMgPj4+IDE2LCBzZWMgPj4+IDgsIHNlY10pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHNlYyA+PSAwICYmIHNlYyA8IDB4NDAwMDAwMDAwKSB7ICAgLy8gMzAgYml0IG5hbm9zZWNvbmRzLCAzNCBiaXQgc2Vjb25kc1xyXG5cdFx0XHRcdGxldCBucyA9IGRhdGEuZ2V0TWlsbGlzZWNvbmRzKCkgKiAxMDAwMDAwO1xyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGQ3LCAweGZmLCBucyA+Pj4gMjIsIG5zID4+PiAxNCwgbnMgPj4+IDYsICgobnMgPDwgMikgPj4+IDApIHwgKHNlYyAvIHBvdzMyKSwgc2VjID4+PiAyNCwgc2VjID4+PiAxNiwgc2VjID4+PiA4LCBzZWNdKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHsgICAvLyAzMiBiaXQgbmFub3NlY29uZHMsIDY0IGJpdCBzZWNvbmRzLCBuZWdhdGl2ZSB2YWx1ZXMgYWxsb3dlZFxyXG5cdFx0XHRcdGxldCBucyA9IGRhdGEuZ2V0TWlsbGlzZWNvbmRzKCkgKiAxMDAwMDAwO1xyXG5cdFx0XHRcdGFwcGVuZEJ5dGVzKFsweGM3LCAxMiwgMHhmZiwgbnMgPj4+IDI0LCBucyA+Pj4gMTYsIG5zID4+PiA4LCBuc10pO1xyXG5cdFx0XHRcdGFwcGVuZEludDY0KHNlYyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBhcHBlbmRCeXRlKGJ5dGUpIHtcclxuXHRcdFx0aWYgKGFycmF5Lmxlbmd0aCA8IGxlbmd0aCArIDEpIHtcclxuXHRcdFx0XHRsZXQgbmV3TGVuZ3RoID0gYXJyYXkubGVuZ3RoICogMjtcclxuXHRcdFx0XHR3aGlsZSAobmV3TGVuZ3RoIDwgbGVuZ3RoICsgMSlcclxuXHRcdFx0XHRcdG5ld0xlbmd0aCAqPSAyO1xyXG5cdFx0XHRcdGxldCBuZXdBcnJheSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XHJcblx0XHRcdFx0bmV3QXJyYXkuc2V0KGFycmF5KTtcclxuXHRcdFx0XHRhcnJheSA9IG5ld0FycmF5O1xyXG5cdFx0XHR9XHJcblx0XHRcdGFycmF5W2xlbmd0aF0gPSBieXRlO1xyXG5cdFx0XHRsZW5ndGgrKztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBhcHBlbmRCeXRlcyhieXRlcykge1xyXG5cdFx0XHRpZiAoYXJyYXkubGVuZ3RoIDwgbGVuZ3RoICsgYnl0ZXMubGVuZ3RoKSB7XHJcblx0XHRcdFx0bGV0IG5ld0xlbmd0aCA9IGFycmF5Lmxlbmd0aCAqIDI7XHJcblx0XHRcdFx0d2hpbGUgKG5ld0xlbmd0aCA8IGxlbmd0aCArIGJ5dGVzLmxlbmd0aClcclxuXHRcdFx0XHRcdG5ld0xlbmd0aCAqPSAyO1xyXG5cdFx0XHRcdGxldCBuZXdBcnJheSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XHJcblx0XHRcdFx0bmV3QXJyYXkuc2V0KGFycmF5KTtcclxuXHRcdFx0XHRhcnJheSA9IG5ld0FycmF5O1xyXG5cdFx0XHR9XHJcblx0XHRcdGFycmF5LnNldChieXRlcywgbGVuZ3RoKTtcclxuXHRcdFx0bGVuZ3RoICs9IGJ5dGVzLmxlbmd0aDtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBhcHBlbmRJbnQ2NCh2YWx1ZSkge1xyXG5cdFx0XHQvLyBTcGxpdCA2NCBiaXQgbnVtYmVyIGludG8gdHdvIDMyIGJpdCBudW1iZXJzIGJlY2F1c2UgSmF2YVNjcmlwdCBvbmx5IHJlZ2FyZHMgMzIgYml0cyBmb3JcclxuXHRcdFx0Ly8gYml0d2lzZSBvcGVyYXRpb25zLlxyXG5cdFx0XHRsZXQgaGksIGxvO1xyXG5cdFx0XHRpZiAodmFsdWUgPj0gMCkge1xyXG5cdFx0XHRcdC8vIFNhbWUgYXMgdWludDY0XHJcblx0XHRcdFx0aGkgPSB2YWx1ZSAvIHBvdzMyO1xyXG5cdFx0XHRcdGxvID0gdmFsdWUgJSBwb3czMjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQvLyBTcGxpdCBhYnNvbHV0ZSB2YWx1ZSB0byBoaWdoIGFuZCBsb3csIHRoZW4gTk9UIGFuZCBBREQoMSkgdG8gcmVzdG9yZSBuZWdhdGl2aXR5XHJcblx0XHRcdFx0dmFsdWUrKztcclxuXHRcdFx0XHRoaSA9IE1hdGguYWJzKHZhbHVlKSAvIHBvdzMyO1xyXG5cdFx0XHRcdGxvID0gTWF0aC5hYnModmFsdWUpICUgcG93MzI7XHJcblx0XHRcdFx0aGkgPSB+aGk7XHJcblx0XHRcdFx0bG8gPSB+bG87XHJcblx0XHRcdH1cclxuXHRcdFx0YXBwZW5kQnl0ZXMoW2hpID4+PiAyNCwgaGkgPj4+IDE2LCBoaSA+Pj4gOCwgaGksIGxvID4+PiAyNCwgbG8gPj4+IDE2LCBsbyA+Pj4gOCwgbG9dKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIERlc2VyaWFsaXplcyBhIE1lc3NhZ2VQYWNrIGJ5dGUgYXJyYXkgdG8gYSB2YWx1ZS5cclxuXHQvL1xyXG5cdC8vIGFycmF5OiBUaGUgTWVzc2FnZVBhY2sgYnl0ZSBhcnJheSB0byBkZXNlcmlhbGl6ZS4gVGhpcyBtdXN0IGJlIGFuIEFycmF5IG9yIFVpbnQ4QXJyYXkgY29udGFpbmluZyBieXRlcywgbm90IGEgc3RyaW5nLlxyXG5cdC8vIG9wdGlvbnM6IEFuIG9iamVjdCB0aGF0IGRlZmluZWQgYWRkaXRpb25hbCBvcHRpb25zLlxyXG5cdC8vIC0gbXVsdGlwbGU6IEluZGljYXRlcyB3aGV0aGVyIG11bHRpcGxlIGNvbmNhdGVuYXRlZCBNZXNzYWdlUGFjayBhcnJheXMgYXJlIHJldHVybmVkIGFzIGFuIGFycmF5LlxyXG5cdGZ1bmN0aW9uIGRlc2VyaWFsaXplKGFycmF5LCBvcHRpb25zKSB7XHJcblx0XHRjb25zdCBwb3czMiA9IDB4MTAwMDAwMDAwOyAgIC8vIDJeMzJcclxuXHRcdGxldCBwb3MgPSAwO1xyXG5cdFx0aWYgKGFycmF5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuXHRcdFx0YXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSk7XHJcblx0XHR9XHJcblx0XHRpZiAodHlwZW9mIGFycmF5ICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBhcnJheS5sZW5ndGggPT09IFwidW5kZWZpbmVkXCIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCB0eXBlOiBFeHBlY3RlZCBhIGJ5dGUgYXJyYXkgKEFycmF5IG9yIFVpbnQ4QXJyYXkpIHRvIGRlc2VyaWFsaXplLlwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghYXJyYXkubGVuZ3RoKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQ6IFRoZSBieXRlIGFycmF5IHRvIGRlc2VyaWFsaXplIGlzIGVtcHR5LlwiKTtcclxuXHRcdH1cclxuXHRcdGlmICghKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcclxuXHRcdFx0YXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSk7XHJcblx0XHR9XHJcblx0XHRsZXQgZGF0YTtcclxuXHRcdGlmIChvcHRpb25zICYmIG9wdGlvbnMubXVsdGlwbGUpIHtcclxuXHRcdFx0Ly8gUmVhZCBhcyBtYW55IG1lc3NhZ2VzIGFzIGFyZSBhdmFpbGFibGVcclxuXHRcdFx0ZGF0YSA9IFtdO1xyXG5cdFx0XHR3aGlsZSAocG9zIDwgYXJyYXkubGVuZ3RoKSB7XHJcblx0XHRcdFx0ZGF0YS5wdXNoKHJlYWQoKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHQvLyBSZWFkIG9ubHkgb25lIG1lc3NhZ2UgYW5kIGlnbm9yZSBhZGRpdGlvbmFsIGRhdGFcclxuXHRcdFx0ZGF0YSA9IHJlYWQoKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWQoKSB7XHJcblx0XHRcdGNvbnN0IGJ5dGUgPSBhcnJheVtwb3MrK107XHJcblx0XHRcdGlmIChieXRlID49IDB4MDAgJiYgYnl0ZSA8PSAweDdmKSByZXR1cm4gYnl0ZTsgICAvLyBwb3NpdGl2ZSBmaXhpbnRcclxuXHRcdFx0aWYgKGJ5dGUgPj0gMHg4MCAmJiBieXRlIDw9IDB4OGYpIHJldHVybiByZWFkTWFwKGJ5dGUgLSAweDgwKTsgICAvLyBmaXhtYXBcclxuXHRcdFx0aWYgKGJ5dGUgPj0gMHg5MCAmJiBieXRlIDw9IDB4OWYpIHJldHVybiByZWFkQXJyYXkoYnl0ZSAtIDB4OTApOyAgIC8vIGZpeGFycmF5XHJcblx0XHRcdGlmIChieXRlID49IDB4YTAgJiYgYnl0ZSA8PSAweGJmKSByZXR1cm4gcmVhZFN0cihieXRlIC0gMHhhMCk7ICAgLy8gZml4c3RyXHJcblx0XHRcdGlmIChieXRlID09PSAweGMwKSByZXR1cm4gbnVsbDsgICAvLyBuaWxcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4YzEpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYnl0ZSBjb2RlIDB4YzEgZm91bmQuXCIpOyAgIC8vIG5ldmVyIHVzZWRcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4YzIpIHJldHVybiBmYWxzZTsgICAvLyBmYWxzZVxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhjMykgcmV0dXJuIHRydWU7ICAgLy8gdHJ1ZVxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhjNCkgcmV0dXJuIHJlYWRCaW4oLTEsIDEpOyAgIC8vIGJpbiA4XHJcblx0XHRcdGlmIChieXRlID09PSAweGM1KSByZXR1cm4gcmVhZEJpbigtMSwgMik7ICAgLy8gYmluIDE2XHJcblx0XHRcdGlmIChieXRlID09PSAweGM2KSByZXR1cm4gcmVhZEJpbigtMSwgNCk7ICAgLy8gYmluIDMyXHJcblx0XHRcdGlmIChieXRlID09PSAweGM3KSByZXR1cm4gcmVhZEV4dCgtMSwgMSk7ICAgLy8gZXh0IDhcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4YzgpIHJldHVybiByZWFkRXh0KC0xLCAyKTsgICAvLyBleHQgMTZcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4YzkpIHJldHVybiByZWFkRXh0KC0xLCA0KTsgICAvLyBleHQgMzJcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4Y2EpIHJldHVybiByZWFkRmxvYXQoNCk7ICAgLy8gZmxvYXQgMzJcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4Y2IpIHJldHVybiByZWFkRmxvYXQoOCk7ICAgLy8gZmxvYXQgNjRcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4Y2MpIHJldHVybiByZWFkVUludCgxKTsgICAvLyB1aW50IDhcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4Y2QpIHJldHVybiByZWFkVUludCgyKTsgICAvLyB1aW50IDE2XHJcblx0XHRcdGlmIChieXRlID09PSAweGNlKSByZXR1cm4gcmVhZFVJbnQoNCk7ICAgLy8gdWludCAzMlxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhjZikgcmV0dXJuIHJlYWRVSW50KDgpOyAgIC8vIHVpbnQgNjRcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4ZDApIHJldHVybiByZWFkSW50KDEpOyAgIC8vIGludCA4XHJcblx0XHRcdGlmIChieXRlID09PSAweGQxKSByZXR1cm4gcmVhZEludCgyKTsgICAvLyBpbnQgMTZcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4ZDIpIHJldHVybiByZWFkSW50KDQpOyAgIC8vIGludCAzMlxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhkMykgcmV0dXJuIHJlYWRJbnQoOCk7ICAgLy8gaW50IDY0XHJcblx0XHRcdGlmIChieXRlID09PSAweGQ0KSByZXR1cm4gcmVhZEV4dCgxKTsgICAvLyBmaXhleHQgMVxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhkNSkgcmV0dXJuIHJlYWRFeHQoMik7ICAgLy8gZml4ZXh0IDJcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4ZDYpIHJldHVybiByZWFkRXh0KDQpOyAgIC8vIGZpeGV4dCA0XHJcblx0XHRcdGlmIChieXRlID09PSAweGQ3KSByZXR1cm4gcmVhZEV4dCg4KTsgICAvLyBmaXhleHQgOFxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhkOCkgcmV0dXJuIHJlYWRFeHQoMTYpOyAgIC8vIGZpeGV4dCAxNlxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhkOSkgcmV0dXJuIHJlYWRTdHIoLTEsIDEpOyAgIC8vIHN0ciA4XHJcblx0XHRcdGlmIChieXRlID09PSAweGRhKSByZXR1cm4gcmVhZFN0cigtMSwgMik7ICAgLy8gc3RyIDE2XHJcblx0XHRcdGlmIChieXRlID09PSAweGRiKSByZXR1cm4gcmVhZFN0cigtMSwgNCk7ICAgLy8gc3RyIDMyXHJcblx0XHRcdGlmIChieXRlID09PSAweGRjKSByZXR1cm4gcmVhZEFycmF5KC0xLCAyKTsgICAvLyBhcnJheSAxNlxyXG5cdFx0XHRpZiAoYnl0ZSA9PT0gMHhkZCkgcmV0dXJuIHJlYWRBcnJheSgtMSwgNCk7ICAgLy8gYXJyYXkgMzJcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4ZGUpIHJldHVybiByZWFkTWFwKC0xLCAyKTsgICAvLyBtYXAgMTZcclxuXHRcdFx0aWYgKGJ5dGUgPT09IDB4ZGYpIHJldHVybiByZWFkTWFwKC0xLCA0KTsgICAvLyBtYXAgMzJcclxuXHRcdFx0aWYgKGJ5dGUgPj0gMHhlMCAmJiBieXRlIDw9IDB4ZmYpIHJldHVybiBieXRlIC0gMjU2OyAgIC8vIG5lZ2F0aXZlIGZpeGludFxyXG5cdFx0XHRjb25zb2xlLmRlYnVnKFwibXNncGFjayBhcnJheTpcIiwgYXJyYXkpO1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJ5dGUgdmFsdWUgJ1wiICsgYnl0ZSArIFwiJyBhdCBpbmRleCBcIiArIChwb3MgLSAxKSArIFwiIGluIHRoZSBNZXNzYWdlUGFjayBiaW5hcnkgZGF0YSAobGVuZ3RoIFwiICsgYXJyYXkubGVuZ3RoICsgXCIpOiBFeHBlY3RpbmcgYSByYW5nZSBvZiAwIHRvIDI1NS4gVGhpcyBpcyBub3QgYSBieXRlIGFycmF5LlwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZWFkSW50KHNpemUpIHtcclxuXHRcdFx0bGV0IHZhbHVlID0gMDtcclxuXHRcdFx0bGV0IGZpcnN0ID0gdHJ1ZTtcclxuXHRcdFx0d2hpbGUgKHNpemUtLSA+IDApIHtcclxuXHRcdFx0XHRpZiAoZmlyc3QpIHtcclxuXHRcdFx0XHRcdGxldCBieXRlID0gYXJyYXlbcG9zKytdO1xyXG5cdFx0XHRcdFx0dmFsdWUgKz0gYnl0ZSAmIDB4N2Y7XHJcblx0XHRcdFx0XHRpZiAoYnl0ZSAmIDB4ODApIHtcclxuXHRcdFx0XHRcdFx0dmFsdWUgLT0gMHg4MDsgICAvLyBUcmVhdCBtb3N0LXNpZ25pZmljYW50IGJpdCBhcyAtMl5pIGluc3RlYWQgb2YgMl5pXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmaXJzdCA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHZhbHVlICo9IDI1NjtcclxuXHRcdFx0XHRcdHZhbHVlICs9IGFycmF5W3BvcysrXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWRVSW50KHNpemUpIHtcclxuXHRcdFx0bGV0IHZhbHVlID0gMDtcclxuXHRcdFx0d2hpbGUgKHNpemUtLSA+IDApIHtcclxuXHRcdFx0XHR2YWx1ZSAqPSAyNTY7XHJcblx0XHRcdFx0dmFsdWUgKz0gYXJyYXlbcG9zKytdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZWFkRmxvYXQoc2l6ZSkge1xyXG5cdFx0XHRsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIHBvcyArIGFycmF5LmJ5dGVPZmZzZXQsIHNpemUpO1xyXG5cdFx0XHRwb3MgKz0gc2l6ZTtcclxuXHRcdFx0aWYgKHNpemUgPT09IDQpXHJcblx0XHRcdFx0cmV0dXJuIHZpZXcuZ2V0RmxvYXQzMigwLCBmYWxzZSk7XHJcblx0XHRcdGlmIChzaXplID09PSA4KVxyXG5cdFx0XHRcdHJldHVybiB2aWV3LmdldEZsb2F0NjQoMCwgZmFsc2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWRCaW4oc2l6ZSwgbGVuZ3RoU2l6ZSkge1xyXG5cdFx0XHRpZiAoc2l6ZSA8IDApIHNpemUgPSByZWFkVUludChsZW5ndGhTaXplKTtcclxuXHRcdFx0bGV0IGRhdGEgPSBhcnJheS5zdWJhcnJheShwb3MsIHBvcyArIHNpemUpO1xyXG5cdFx0XHRwb3MgKz0gc2l6ZTtcclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmVhZE1hcChzaXplLCBsZW5ndGhTaXplKSB7XHJcblx0XHRcdGlmIChzaXplIDwgMCkgc2l6ZSA9IHJlYWRVSW50KGxlbmd0aFNpemUpO1xyXG5cdFx0XHRsZXQgZGF0YSA9IHt9O1xyXG5cdFx0XHR3aGlsZSAoc2l6ZS0tID4gMCkge1xyXG5cdFx0XHRcdGxldCBrZXkgPSByZWFkKCk7XHJcblx0XHRcdFx0ZGF0YVtrZXldID0gcmVhZCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWRBcnJheShzaXplLCBsZW5ndGhTaXplKSB7XHJcblx0XHRcdGlmIChzaXplIDwgMCkgc2l6ZSA9IHJlYWRVSW50KGxlbmd0aFNpemUpO1xyXG5cdFx0XHRsZXQgZGF0YSA9IFtdO1xyXG5cdFx0XHR3aGlsZSAoc2l6ZS0tID4gMCkge1xyXG5cdFx0XHRcdGRhdGEucHVzaChyZWFkKCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWRTdHIoc2l6ZSwgbGVuZ3RoU2l6ZSkge1xyXG5cdFx0XHRpZiAoc2l6ZSA8IDApIHNpemUgPSByZWFkVUludChsZW5ndGhTaXplKTtcclxuXHRcdFx0bGV0IHN0YXJ0ID0gcG9zO1xyXG5cdFx0XHRwb3MgKz0gc2l6ZTtcclxuXHRcdFx0cmV0dXJuIGRlY29kZVV0ZjgoYXJyYXksIHN0YXJ0LCBzaXplKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZWFkRXh0KHNpemUsIGxlbmd0aFNpemUpIHtcclxuXHRcdFx0aWYgKHNpemUgPCAwKSBzaXplID0gcmVhZFVJbnQobGVuZ3RoU2l6ZSk7XHJcblx0XHRcdGxldCB0eXBlID0gcmVhZFVJbnQoMSk7XHJcblx0XHRcdGxldCBkYXRhID0gcmVhZEJpbihzaXplKTtcclxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdFx0Y2FzZSAyNTU6XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVhZEV4dERhdGUoZGF0YSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlYWRFeHREYXRlKGRhdGEpIHtcclxuXHRcdFx0aWYgKGRhdGEubGVuZ3RoID09PSA0KSB7XHJcblx0XHRcdFx0bGV0IHNlYyA9ICgoZGF0YVswXSA8PCAyNCkgPj4+IDApICtcclxuXHRcdFx0XHRcdCgoZGF0YVsxXSA8PCAxNikgPj4+IDApICtcclxuXHRcdFx0XHRcdCgoZGF0YVsyXSA8PCA4KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0ZGF0YVszXTtcclxuXHRcdFx0XHRyZXR1cm4gbmV3IERhdGUoc2VjICogMTAwMCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGRhdGEubGVuZ3RoID09PSA4KSB7XHJcblx0XHRcdFx0bGV0IG5zID0gKChkYXRhWzBdIDw8IDIyKSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzFdIDw8IDE0KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzJdIDw8IDYpID4+PiAwKSArXHJcblx0XHRcdFx0XHQoZGF0YVszXSA+Pj4gMik7XHJcblx0XHRcdFx0bGV0IHNlYyA9ICgoZGF0YVszXSAmIDB4MykgKiBwb3czMikgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzRdIDw8IDI0KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzVdIDw8IDE2KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzZdIDw8IDgpID4+PiAwKSArXHJcblx0XHRcdFx0XHRkYXRhWzddO1xyXG5cdFx0XHRcdHJldHVybiBuZXcgRGF0ZShzZWMgKiAxMDAwICsgbnMgLyAxMDAwMDAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoZGF0YS5sZW5ndGggPT09IDEyKSB7XHJcblx0XHRcdFx0bGV0IG5zID0gKChkYXRhWzBdIDw8IDI0KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzFdIDw8IDE2KSA+Pj4gMCkgK1xyXG5cdFx0XHRcdFx0KChkYXRhWzJdIDw8IDgpID4+PiAwKSArXHJcblx0XHRcdFx0XHRkYXRhWzNdO1xyXG5cdFx0XHRcdHBvcyAtPSA4O1xyXG5cdFx0XHRcdGxldCBzZWMgPSByZWFkSW50KDgpO1xyXG5cdFx0XHRcdHJldHVybiBuZXcgRGF0ZShzZWMgKiAxMDAwICsgbnMgLyAxMDAwMDAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGEgbGVuZ3RoIGZvciBhIGRhdGUgdmFsdWUuXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gRW5jb2RlcyBhIHN0cmluZyB0byBVVEYtOCBieXRlcy5cclxuXHRmdW5jdGlvbiBlbmNvZGVVdGY4KHN0cikge1xyXG5cdFx0Ly8gUHJldmVudCBleGNlc3NpdmUgYXJyYXkgYWxsb2NhdGlvbiBhbmQgc2xpY2luZyBmb3IgYWxsIDctYml0IGNoYXJhY3RlcnNcclxuXHRcdGxldCBhc2NpaSA9IHRydWUsIGxlbmd0aCA9IHN0ci5sZW5ndGg7XHJcblx0XHRmb3IgKGxldCB4ID0gMDsgeCA8IGxlbmd0aDsgeCsrKSB7XHJcblx0XHRcdGlmIChzdHIuY2hhckNvZGVBdCh4KSA+IDEyNykge1xyXG5cdFx0XHRcdGFzY2lpID0gZmFsc2U7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBCYXNlZCBvbjogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGFzY2FsZGVrbG9lLzYyNTQ2MTAzYTE1NzY4MDNkYWRlOTI2OWNjZjc2MzMwXHJcblx0XHRsZXQgaSA9IDAsIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCAqIChhc2NpaSA/IDEgOiA0KSk7XHJcblx0XHRmb3IgKGxldCBjaSA9IDA7IGNpICE9PSBsZW5ndGg7IGNpKyspIHtcclxuXHRcdFx0bGV0IGMgPSBzdHIuY2hhckNvZGVBdChjaSk7XHJcblx0XHRcdGlmIChjIDwgMTI4KSB7XHJcblx0XHRcdFx0Ynl0ZXNbaSsrXSA9IGM7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGMgPCAyMDQ4KSB7XHJcblx0XHRcdFx0Ynl0ZXNbaSsrXSA9IGMgPj4gNiB8IDE5MjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRpZiAoYyA+IDB4ZDdmZiAmJiBjIDwgMHhkYzAwKSB7XHJcblx0XHRcdFx0XHRpZiAoKytjaSA+PSBsZW5ndGgpXHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVURi04IGVuY29kZTogaW5jb21wbGV0ZSBzdXJyb2dhdGUgcGFpclwiKTtcclxuXHRcdFx0XHRcdGxldCBjMiA9IHN0ci5jaGFyQ29kZUF0KGNpKTtcclxuXHRcdFx0XHRcdGlmIChjMiA8IDB4ZGMwMCB8fCBjMiA+IDB4ZGZmZilcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVVRGLTggZW5jb2RlOiBzZWNvbmQgc3Vycm9nYXRlIGNoYXJhY3RlciAweFwiICsgYzIudG9TdHJpbmcoMTYpICsgXCIgYXQgaW5kZXggXCIgKyBjaSArIFwiIG91dCBvZiByYW5nZVwiKTtcclxuXHRcdFx0XHRcdGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoYzIgJiAweDAzZmYpO1xyXG5cdFx0XHRcdFx0Ynl0ZXNbaSsrXSA9IGMgPj4gMTggfCAyNDA7XHJcblx0XHRcdFx0XHRieXRlc1tpKytdID0gYyA+PiAxMiAmIDYzIHwgMTI4O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGJ5dGVzW2krK10gPSBjID4+IDEyIHwgMjI0O1xyXG5cdFx0XHRcdGJ5dGVzW2krK10gPSBjID4+IDYgJiA2MyB8IDEyODtcclxuXHRcdFx0fVxyXG5cdFx0XHRieXRlc1tpKytdID0gYyAmIDYzIHwgMTI4O1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGFzY2lpID8gYnl0ZXMgOiBieXRlcy5zdWJhcnJheSgwLCBpKTtcclxuXHR9XHJcblxyXG5cdC8vIERlY29kZXMgYSBzdHJpbmcgZnJvbSBVVEYtOCBieXRlcy5cclxuXHRmdW5jdGlvbiBkZWNvZGVVdGY4KGJ5dGVzLCBzdGFydCwgbGVuZ3RoKSB7XHJcblx0XHQvLyBCYXNlZCBvbjogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGFzY2FsZGVrbG9lLzYyNTQ2MTAzYTE1NzY4MDNkYWRlOTI2OWNjZjc2MzMwXHJcblx0XHRsZXQgaSA9IHN0YXJ0LCBzdHIgPSBcIlwiO1xyXG5cdFx0bGVuZ3RoICs9IHN0YXJ0O1xyXG5cdFx0d2hpbGUgKGkgPCBsZW5ndGgpIHtcclxuXHRcdFx0bGV0IGMgPSBieXRlc1tpKytdO1xyXG5cdFx0XHRpZiAoYyA+IDEyNykge1xyXG5cdFx0XHRcdGlmIChjID4gMTkxICYmIGMgPCAyMjQpIHtcclxuXHRcdFx0XHRcdGlmIChpID49IGxlbmd0aClcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVVRGLTggZGVjb2RlOiBpbmNvbXBsZXRlIDItYnl0ZSBzZXF1ZW5jZVwiKTtcclxuXHRcdFx0XHRcdGMgPSAoYyAmIDMxKSA8PCA2IHwgYnl0ZXNbaSsrXSAmIDYzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChjID4gMjIzICYmIGMgPCAyNDApIHtcclxuXHRcdFx0XHRcdGlmIChpICsgMSA+PSBsZW5ndGgpXHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVURi04IGRlY29kZTogaW5jb21wbGV0ZSAzLWJ5dGUgc2VxdWVuY2VcIik7XHJcblx0XHRcdFx0XHRjID0gKGMgJiAxNSkgPDwgMTIgfCAoYnl0ZXNbaSsrXSAmIDYzKSA8PCA2IHwgYnl0ZXNbaSsrXSAmIDYzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChjID4gMjM5ICYmIGMgPCAyNDgpIHtcclxuXHRcdFx0XHRcdGlmIChpICsgMiA+PSBsZW5ndGgpXHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVURi04IGRlY29kZTogaW5jb21wbGV0ZSA0LWJ5dGUgc2VxdWVuY2VcIik7XHJcblx0XHRcdFx0XHRjID0gKGMgJiA3KSA8PCAxOCB8IChieXRlc1tpKytdICYgNjMpIDw8IDEyIHwgKGJ5dGVzW2krK10gJiA2MykgPDwgNiB8IGJ5dGVzW2krK10gJiA2MztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVVEYtOCBkZWNvZGU6IHVua25vd24gbXVsdGlieXRlIHN0YXJ0IDB4XCIgKyBjLnRvU3RyaW5nKDE2KSArIFwiIGF0IGluZGV4IFwiICsgKGkgLSAxKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGMgPD0gMHhmZmZmKSBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcclxuXHRcdFx0ZWxzZSBpZiAoYyA8PSAweDEwZmZmZikge1xyXG5cdFx0XHRcdGMgLT0gMHgxMDAwMDtcclxuXHRcdFx0XHRzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjID4+IDEwIHwgMHhkODAwKVxyXG5cdFx0XHRcdHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMgJiAweDNGRiB8IDB4ZGMwMClcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHRocm93IG5ldyBFcnJvcihcIlVURi04IGRlY29kZTogY29kZSBwb2ludCAweFwiICsgYy50b1N0cmluZygxNikgKyBcIiBleGNlZWRzIFVURi0xNiByZWFjaFwiKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdHI7XHJcblx0fVxyXG5cclxuXHQvLyBUaGUgZXhwb3J0ZWQgZnVuY3Rpb25zXHJcblx0bGV0IG1zZ3BhY2sgPSB7XHJcblx0XHRzZXJpYWxpemU6IHNlcmlhbGl6ZSxcclxuXHRcdGRlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZSxcclxuXHJcblx0XHQvLyBDb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgbGlicmFyaWVzXHJcblx0XHRlbmNvZGU6IHNlcmlhbGl6ZSxcclxuXHRcdGRlY29kZTogZGVzZXJpYWxpemVcclxuXHR9O1xyXG5cclxuXHQvLyBFbnZpcm9ubWVudCBkZXRlY3Rpb25cclxuXHRpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcblx0XHQvLyBOb2RlLmpzXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IG1zZ3BhY2s7XHJcblx0fVxyXG5cdGVsc2Uge1xyXG5cdFx0Ly8gR2xvYmFsIG9iamVjdFxyXG5cdFx0d2luZG93W3dpbmRvdy5tc2dwYWNrSnNOYW1lIHx8IFwibXNncGFja1wiXSA9IG1zZ3BhY2s7XHJcblx0fVxyXG5cclxufSkoKTtcclxuIiwiaW1wb3J0IHtcbiAgY2FzdCxcbiAgdHlwZSBEb21haW4sXG4gIHR5cGUgUG9zaXRpb24sXG4gIHR5cGUgUmVjdGFuZ2xlLFxuICB0eXBlIFNjcmVlblBvc2l0aW9uLFxuICB0eXBlIFNpemUsXG4gIHR5cGUgVmlld3BvcnQsXG59IGZyb20gXCJAdGFpbGpzL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIENvbnN0VG9UdXBsZXMsXG4gIE51bGxpc2gsXG4gIE51bGxzLFxuICBWYWx1ZU9yRGVmYXVsdCxcbn0gZnJvbSBcIkB0YWlsanMvdXRpbFwiO1xuaW1wb3J0IHtcbiAgYm9keSxcbiAgZG9jdW1lbnQsXG4gIGVudHJpZXMsXG4gIGVycixcbiAgRixcbiAgZmlsdGVyLFxuICBmdW4sXG4gIGxvd2VyQ2FzZSxcbiAgbWFwLFxuICBtYXRjaCxcbiAgTUFYX1NBRkVfSU5URUdFUixcbiAgbmlsLFxuICBwYXJzZUJvb2xlYW4sXG4gIHB1c2gsXG4gIHJlcGxhY2UsXG4gIHJvdW5kLFxuICBULFxuICB1bmRlZmluZWQsXG4gIHdpbmRvdyxcbn0gZnJvbSBcIi5cIjtcblxuZXhwb3J0IHR5cGUgTm9kZVdpdGhQYXJlbnRFbGVtZW50ID0gTm9kZSB8IEV2ZW50VGFyZ2V0IHwgTnVsbGlzaDtcblxuZXhwb3J0IGxldCBNQVhfQU5DRVNUT1JfRElTVEFOQ0UgPSBNQVhfU0FGRV9JTlRFR0VSO1xuXG5leHBvcnQgY29uc3QgZm9yQW5jZXN0b3JzT3JTZWxmID0gPFQgPSBhbnk+KFxuICBlbDogTm9kZVdpdGhQYXJlbnRFbGVtZW50LFxuICBhY3Rpb246IChcbiAgICBlbDogRWxlbWVudCxcbiAgICByZXR1cm5WYWx1ZTogKHZhbHVlOiBULCByZXBsYWNlPzogYm9vbGVhbikgPT4gdm9pZCxcbiAgICBkaXN0YW5jZTogbnVtYmVyXG4gICkgPT4gYW55LFxuICBzdG9wcGluZ0NyaXRlcmlvbjogKGVsOiBFbGVtZW50LCBkaXN0YW5jZTogbnVtYmVyKSA9PiBib29sZWFuID0gKFxuICAgIGVsLFxuICAgIGRpc3RhbmNlXG4gICkgPT4gZGlzdGFuY2UgPj0gTUFYX0FOQ0VTVE9SX0RJU1RBTkNFXG4pOiBUIHwgdW5kZWZpbmVkID0+IHtcbiAgbGV0IGkgPSAwLFxuICAgIHJldHVyblZhbHVlOiBhbnksXG4gICAgc3RvcCA9IEY7XG4gIHdoaWxlIChcbiAgICBlbD8uW1wibm9kZVR5cGVcIl0gPT09IDEgJiZcbiAgICAhc3RvcHBpbmdDcml0ZXJpb24oZWwgYXMgRWxlbWVudCwgaSsrKSAmJlxuICAgIGFjdGlvbihcbiAgICAgIGVsIGFzIEVsZW1lbnQsXG4gICAgICAodmFsdWUsIHJlcGxhY2UpID0+IChcbiAgICAgICAgdmFsdWUgIT0gbmlsICYmXG4gICAgICAgICAgKChyZXR1cm5WYWx1ZSA9IHZhbHVlKSwgKHN0b3AgPSByZXBsYWNlICE9PSBUICYmIHJldHVyblZhbHVlICE9IG5pbCkpLFxuICAgICAgICBUXG4gICAgICApLFxuICAgICAgaSAtIDFcbiAgICApICE9PSBGICYmXG4gICAgIXN0b3BcbiAgKSB7XG4gICAgY29uc3QgcHJldiA9IGVsO1xuICAgIGVsID0gKGVsIGFzIEVsZW1lbnQpLnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKGVsID09PSBuaWwgJiYgKHByZXYgYXMgRWxlbWVudCk/Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICBlbCA9IChwcmV2IGFzIEVsZW1lbnQpPy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Py5mcmFtZUVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGluRWxlbWVudFNjb3BlID0gKG5vZGU6IE5vZGVXaXRoUGFyZW50RWxlbWVudCwgbmFtZTogc3RyaW5nKSA9PlxuICBmb3JBbmNlc3RvcnNPclNlbGYobm9kZSwgKGVsLCB2YWx1ZSkgPT5cbiAgICB2YWx1ZSh0YWdOYW1lKGVsKSA9PT0gbmFtZSB8fCB1bmRlZmluZWQpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBzY29wZUF0dHIgPSAobm9kZTogTm9kZVdpdGhQYXJlbnRFbGVtZW50LCBuYW1lOiBzdHJpbmcpID0+XG4gIGZvckFuY2VzdG9yc09yU2VsZihub2RlLCAoZWwsIHZhbHVlKSA9PiB2YWx1ZShhdHRyKGVsLCBuYW1lKSkpO1xuXG5leHBvcnQgY29uc3QgYXR0cmwgPSAobm9kZTogTm9kZVdpdGhQYXJlbnRFbGVtZW50LCBuYW1lOiBzdHJpbmcpID0+XG4gIGxvd2VyQ2FzZShhdHRyKG5vZGUsIG5hbWUpKTtcblxubGV0IHZhbHVlOiBzdHJpbmcgfCBudWxsO1xuZXhwb3J0IGNvbnN0IGF0dHJiID0gKG5vZGU6IE5vZGVXaXRoUGFyZW50RWxlbWVudCwgbmFtZTogc3RyaW5nKSA9PlxuICAodmFsdWUgPSBhdHRyKG5vZGUsIG5hbWUpKSA9PT0gXCJcIiB8fCBwYXJzZUJvb2xlYW4odmFsdWUpO1xuXG5leHBvcnQgY29uc3QgYXR0cm4gPSAobm9kZTogTm9kZVdpdGhQYXJlbnRFbGVtZW50LCBuYW1lOiBzdHJpbmcpID0+XG4gIHBhcnNlRmxvYXQoXCJcIiArICh2YWx1ZSA9IGF0dHIobm9kZSwgbmFtZSkpKSA/PyB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBhdHRycyA9IDxUIGV4dGVuZHMgTm9kZVdpdGhQYXJlbnRFbGVtZW50IHwgTnVsbGlzaD4oXG4gIG5vZGU6IFRcbik6IHN0cmluZ1tdIHwgTnVsbHM8VCwgdW5kZWZpbmVkPiA9PiAobm9kZSBhcyBhbnkpPy5nZXRBdHRyaWJ1dGVOYW1lcygpO1xuXG5leHBvcnQgY29uc3QgYXR0ciA9IChcbiAgbm9kZTogTm9kZVdpdGhQYXJlbnRFbGVtZW50LFxuICBuYW1lOiBzdHJpbmcsXG4gIHZhbHVlPzogc3RyaW5nIHwgbnVsbFxuKTogc3RyaW5nIHwgbnVsbCA9PlxuICAhKG5vZGUgYXMgYW55KT8uZ2V0QXR0cmlidXRlXG4gICAgPyBuaWxcbiAgICA6IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICA/IChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZShuYW1lKVxuICAgIDogKHZhbHVlID09PSBuaWxcbiAgICAgICAgPyAobm9kZSBhcyBhbnkpLnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxuICAgICAgICA6IChub2RlIGFzIGFueSkuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSxcbiAgICAgIHZhbHVlKTtcblxuZXhwb3J0IGNvbnN0IGNzc1Byb3BlcnR5ID0gKGVsOiBFbGVtZW50LCBuYW1lOiBzdHJpbmcpID0+XG4gIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkgfHwgbmlsO1xuXG5sZXQgcGFyYW1ldGVyczoge307XG5leHBvcnQgY29uc3QgZGVmaW5lID0gPFxuICBULFxuICBQIGV4dGVuZHMgUmVjb3JkPGtleW9mIGFueSwgW2FueSwgYm9vbGVhbj9dIHwgdW5kZWZpbmVkPlxuPihcbiAgdGFyZ2V0OiBULFxuICBwcm9wczogUFxuKTogVCAmIFAgPT5cbiAgKChwYXJhbWV0ZXJzID0ge30pLFxuICAobWFwKFxuICAgIGZpbHRlcihlbnRyaWVzKHByb3BzKSwgKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9IG5pbCksXG4gICAgKFtuYW1lLCBbdmFsdWUsIHdyaXRhYmxlID0gRl0gPSBbXV0pID0+XG4gICAgICAocGFyYW1ldGVyc1tuYW1lXSA9IHtcbiAgICAgICAgd3JpdGFibGUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogd3JpdGFibGUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgfSlcbiAgKSxcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwYXJhbWV0ZXJzKSkpIGFzIGFueTtcblxuZXhwb3J0IGNvbnN0IHRhZ05hbWUgPSA8VCBleHRlbmRzIEVsZW1lbnQgfCBOdWxsaXNoPihcbiAgZWw6IFRcbik6IFQgZXh0ZW5kcyBOdWxsaXNoID8gbnVsbCA6IHN0cmluZyA9PiAoZWwgIT0gbmlsID8gKGVsLnRhZ05hbWUgYXMgYW55KSA6IG5pbCk7XG5cbmxldCBwb3M6IFBvc2l0aW9uO1xuZXhwb3J0IGNvbnN0IHJlbGF0aXZlU2Nyb2xsUG9zID0gKCk6IFBvc2l0aW9uID0+IChcbiAgKHBvcyA9IHNjcm9sbFBvcyhGKSksXG4gIHtcbiAgICB4OiBwb3MueCAvIChib2R5Lm9mZnNldFdpZHRoIC0gd2luZG93LmlubmVyV2lkdGgpIHx8IDAsXG4gICAgeTogcG9zLnkgLyAoYm9keS5vZmZzZXRIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQpIHx8IDAsXG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBzY3JvbGxQb3MgPSAoaW50PzogYm9vbGVhbik6IFBvc2l0aW9uID0+ICh7XG4gIHg6IHJvdW5kKHNjcm9sbFgsIGludCksXG4gIHk6IHJvdW5kKHNjcm9sbFksIGludCksXG59KTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoRXhIYXNoID0gKGhyZWYxOiBzdHJpbmcsIGhyZWYyOiBzdHJpbmcpID0+XG4gIHJlcGxhY2UoaHJlZjEsIC8jLiokLywgXCJcIikgPT09IHJlcGxhY2UoaHJlZjIsIC8jLiokLywgXCJcIik7XG5cbmxldCBzY3JlZW5Qb3M6IFBvc2l0aW9uIHwgdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IGdldFNjcmVlblBvcyA9IDxUIGV4dGVuZHMgRWxlbWVudCB8IE51bGxpc2g+KFxuICBlbDogVCxcbiAgbW91c2VFdmVudD86IE1vdXNlRXZlbnQsXG4gIGluY2x1ZGVGb2xkID0gVFxuKTogU2NyZWVuUG9zaXRpb24gfCBOdWxsczxUPiA9PlxuICAoc2NyZWVuUG9zID0gZ2V0UG9zKGVsLCBtb3VzZUV2ZW50KSkgJiZcbiAgKGNhc3Q8U2NyZWVuUG9zaXRpb24+KHtcbiAgICB4cHg6IHNjcmVlblBvcy54LFxuICAgIHlweDogc2NyZWVuUG9zLnksXG4gICAgeDogcm91bmQoc2NyZWVuUG9zLnggLyBib2R5Lm9mZnNldFdpZHRoLCA0KSxcbiAgICB5OiByb3VuZChzY3JlZW5Qb3MueSAvIGJvZHkub2Zmc2V0SGVpZ2h0LCA0KSxcbiAgICBwYWdlRm9sZHM6IGluY2x1ZGVGb2xkID8gc2NyZWVuUG9zLnkgLyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB1bmRlZmluZWQsXG4gIH0pIGFzIGFueSk7XG5cbmxldCB4OiBudW1iZXIsIHk6IG51bWJlcjtcbmV4cG9ydCBjb25zdCBnZXRQb3MgPSA8VCBleHRlbmRzIEVsZW1lbnQgfCBOdWxsaXNoPihcbiAgZWw6IFQsXG4gIG1vdXNlRXZlbnQ/OiBNb3VzZUV2ZW50XG4pOiBWYWx1ZU9yRGVmYXVsdDxULCBQb3NpdGlvbj4gPT5cbiAgISFtb3VzZUV2ZW50Py5bXCJwb2ludGVyVHlwZVwiXSAmJiBtb3VzZUV2ZW50Py5wYWdlWSAhPSBuaWxcbiAgICA/IHsgeDogbW91c2VFdmVudC5wYWdlWCwgeTogbW91c2VFdmVudC5wYWdlWSB9XG4gICAgOiBlbFxuICAgID8gKCh7IHgsIHkgfSA9IGdldFJlY3QoZWwpKSwgeyB4LCB5IH0pXG4gICAgOiAodW5kZWZpbmVkIGFzIGFueSk7XG5cbmxldCByZWN0OiBET01SZWN0O1xuZXhwb3J0IGNvbnN0IGdldFJlY3QgPSA8VCBleHRlbmRzIEVsZW1lbnQgfCBOdWxsaXNoPihcbiAgZWw6IFRcbik6IFZhbHVlT3JEZWZhdWx0PFQsIFJlY3RhbmdsZT4gPT5cbiAgZWxcbiAgICA/ICgocmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSxcbiAgICAgIChwb3MgPSBzY3JvbGxQb3MoRikpLFxuICAgICAge1xuICAgICAgICB4OiByb3VuZChyZWN0LmxlZnQgKyBwb3MueCksXG4gICAgICAgIHk6IHJvdW5kKHJlY3QudG9wICsgcG9zLnkpLFxuICAgICAgICB3aWR0aDogcm91bmQocmVjdC53aWR0aCksXG4gICAgICAgIGhlaWdodDogcm91bmQocmVjdC5oZWlnaHQpLFxuICAgICAgfSlcbiAgICA6ICh1bmRlZmluZWQgYXMgYW55KTtcblxudHlwZSBBbGxNYXBzID0gV2luZG93RXZlbnRNYXAgJlxuICBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAgJlxuICBEb2N1bWVudEV2ZW50TWFwICZcbiAgSFRNTEVsZW1lbnRFdmVudE1hcDtcblxuZXhwb3J0IGNvbnN0IGxpc3RlbiA9IDxLIGV4dGVuZHMga2V5b2YgQWxsTWFwcz4oXG4gIGVsOiBhbnksXG4gIG5hbWVzOiBLW10gfCBLLFxuICBjYjogKGV2OiBBbGxNYXBzW0tdLCB1bmJpbmQ6ICgpID0+IHZvaWQpID0+IHZvaWQsXG4gIGNhcHR1cmUgPSBULFxuICBwYXNzaXZlID0gVFxuKSA9PiB7XG4gIGxldCB1bmJpbmRlcnM6IGFueVtdID0gW107XG5cbiAgcmV0dXJuIChcbiAgICBtYXAobmFtZXMsIChuYW1lLCBpKSA9PiB7XG4gICAgICBjb25zdCBtYXBwZWQgPSAoZXY6IGFueSkgPT4ge1xuICAgICAgICBjYihldiwgdW5iaW5kZXJzW2ldKTtcbiAgICAgIH07XG4gICAgICBwdXNoKHVuYmluZGVycywgKCkgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBtYXBwZWQsIGNhcHR1cmUpKTtcbiAgICAgIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIG1hcHBlZCwgeyBjYXB0dXJlLCBwYXNzaXZlIH0pO1xuICAgIH0pLFxuICAgICgpID0+XG4gICAgICB1bmJpbmRlcnMubGVuZ3RoID4gMCAmJiBtYXAodW5iaW5kZXJzLCAodW5iaW5kKSA9PiB1bmJpbmQoKSlcbiAgICAgICAgPyAoKHVuYmluZGVycyA9IFtdKSwgVClcbiAgICAgICAgOiBGXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgbGlzdGVuT25jZSA9IDxLIGV4dGVuZHMga2V5b2YgQWxsTWFwcz4oXG4gIGVsOiBhbnksXG4gIG5hbWVzOiBLW10gfCBLLFxuICBjYjogKGV2ZW50OiBBbGxNYXBzW0tdLCB1bmJpbmQ6ICgpID0+IHZvaWQpID0+IHZvaWQsXG4gIHVzZUNhcHR1cmU/OiBib29sZWFuXG4pID0+XG4gIGxpc3RlbihcbiAgICBlbCxcbiAgICBuYW1lcyxcbiAgICAoZXZlbnQsIHVuYmluZCkgPT4gKGNiKGV2ZW50LCB1bmJpbmQpLCB1bmJpbmQoKSksXG4gICAgdXNlQ2FwdHVyZVxuICApO1xuXG5leHBvcnQgY29uc3QgcGFyc2VEb21haW4gPSA8VCBleHRlbmRzIHN0cmluZyB8IE51bGxpc2g+KFxuICBocmVmOiBUXG4pOiBUIGV4dGVuZHMgc3RyaW5nID8geyBkb21haW4/OiBEb21haW47IGhyZWY6IHN0cmluZyB9IDogdW5kZWZpbmVkID0+XG4gIGhyZWYgPT0gbmlsXG4gICAgPyAodW5kZWZpbmVkIGFzIGFueSlcbiAgICA6IG1hdGNoKFxuICAgICAgICBocmVmLFxuICAgICAgICAvXig/OihbYS16QS1aMC05XSspOik/KD86XFwvXFwvKT8oW15cXHNcXC9dKikvLFxuICAgICAgICAoYWxsLCBwcm90b2NvbCwgZG9tYWluTmFtZSkgPT5cbiAgICAgICAgICBkb21haW5OYW1lXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBocmVmOiBocmVmLnN1YnN0cmluZyhhbGwubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICBkb21haW46IHtcbiAgICAgICAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgICAgICAgZG9tYWluTmFtZSxcbiAgICAgICAgICAgICAgICB9IGFzIERvbWFpbixcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7IGhyZWYgfVxuICAgICAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFZpZXdwb3J0U2l6ZSA9ICgpOiBTaXplID0+ICh7XG4gIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldFZpZXdwb3J0ID0gKCk6IFZpZXdwb3J0ID0+IChcbiAgKHBvcyA9IHNjcm9sbFBvcyhUKSksXG4gIHtcbiAgICAuLi5wb3MsXG4gICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgIHRvdGFsV2lkdGg6IGJvZHkub2Zmc2V0V2lkdGgsXG4gICAgdG90YWxIZWlnaHQ6IGJvZHkub2Zmc2V0SGVpZ2h0LFxuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgdHJ5QXN5bmMgPSBhc3luYyA8VCwgRSA9IHZvaWQ+KFxuICBhY3Rpb246ICgoKSA9PiBQcm9taXNlPFQ+IHwgVCkgfCBQcm9taXNlPFQ+IHwgVCxcbiAgZXJyb3I/OiAoKGVycm9yOiBhbnkpID0+IFByb21pc2U8RT4gfCBFKSB8IFByb21pc2U8RT4gfCBFLFxuICBhbHdheXM/OiAoKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPlxuKTogUHJvbWlzZTxUIHwgRT4gPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCAoZnVuKGFjdGlvbikgPyBhY3Rpb24oKSA6IGFjdGlvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIHJldHVybiBhd2FpdCAoZnVuKGVycm9yKSA/IGVycm9yKGUpIDogZSk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgYWx3YXlzPy4oKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRyeUNhdGNoID0gPFQsIFIgPSB1bmRlZmluZWQ+KFxuICBhY3Rpb246ICgpID0+IFQsXG4gIGVycm9yOiAoKGU6IGFueSkgPT4gUikgfCBhbnlbXSB8IGZhbHNlID0gKGUpID0+IGVycihuaWwsIG5pbCwgZSkgYXMgUixcbiAgZmluYWxseUNhbGxiYWNrPzogKCkgPT4gdm9pZFxuKTogQ29uc3RUb1R1cGxlczxUIHwgUiB8IHVuZGVmaW5lZD4gPT4ge1xuICBjb25zdCB1bmJpbmQgPSBsaXN0ZW4od2luZG93LCBcImVycm9yXCIsIChldikgPT4gZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpO1xuICB0cnkge1xuICAgIHJldHVybiBhY3Rpb24oKSBhcyBhbnk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZXJyb3IgPT09IEZcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGZ1bihlcnJvcilcbiAgICAgID8gZXJyb3IoZSlcbiAgICAgIDogKChwdXNoKGVycm9yLCBlKSA/PyBlcnIobmlsLCBuaWwsIGUpLCB1bmRlZmluZWQgYXMgUikgYXMgYW55KTtcbiAgfSBmaW5hbGx5IHtcbiAgICB1bmJpbmQoKTtcbiAgICBmaW5hbGx5Q2FsbGJhY2s/LigpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgZGVzZXJpYWxpemUsIHNlcmlhbGl6ZSB9IGZyb20gXCJAeWdvZS9tc2dwYWNrXCI7XG5cbi8vIFVzZSBiZWxvdyB3aGVuIGFkLWhvYyB0ZXN0aW5nIHdpdGggbm9kbW9uLiBJdCBkb2Vzbid0IGxpa2UgdGhlIGltcG9ydCBhYm92ZSAocHJvYmFiYWx5IGJlY2F1c2Ugb2YgbWFuZ2xpbmcpLlxuLy9pbXBvcnQgbXNncGFjayBmcm9tIFwiQHlnb2UvbXNncGFja1wiO1xuLy9jb25zdCB7IHNlcmlhbGl6ZSwgZGVzZXJpYWxpemUgfSA9IG1zZ3BhY2s7XG5cbmltcG9ydCB7XG4gIEVuY29kYWJsZSxcbiAgRW5jb2RhYmxlQ29udHJhY3QsXG4gIEhhc2hGdW5jdGlvbixcbiAgTnVsbGlzaCxcbiAgZnJvbTY0dSxcbiAgaGFzVmFsdWUsXG4gIGlzQXJyYXksXG4gIGlzRGVmaW5lZCxcbiAgaXNGdW5jdGlvbixcbiAgaXNJdGVyYWJsZSxcbiAgaXNOdWxsLFxuICBpc051bWJlcixcbiAgaXNPYmplY3QsXG4gIGlzUHVyZU9iamVjdCxcbiAgaXNTeW1ib2wsXG4gIGlzVW5kZWZpbmVkLFxuICBsZnNyLFxuICBuaWwsXG4gIHRvNjR1LFxuICB0cnlDYXRjaCxcbn0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IGlzRmxvYXQ2NEFycmF5IH0gZnJvbSBcInV0aWwvdHlwZXNcIjtcblxuLyoqXG4gKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgdmFsdWUgdG8gYW4gSFRUUCBxdWVyeXN0cmluZy9oZWFkZXIgc2FmZSBzdHJpbmcsIHRoYXQgaXMsIGRvZXMgbm90IG5lZWQgdG8gYmUgVVJJIGVzY2FwZWQuXG4gKiBUaGUgZnVuY3Rpb24gaXMgYW5hbG9nb3VzIHRvIGBKU09OLnN0cmluZ2lmeWAsIGV4Y2VwdCB0aGlzIG9uZSBhbHNvIHN1cHBvcnRzIHJlZmVyZW5jZXMuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGVuY29kZS5cbiAqIEBwYXJhbSB2YWxpZGF0ZSBUaGlzIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgb3RoZXIgdGhhbiBsZXR0aW5nIFR5cGVTY3JpcHQgdmFsaWRhdGUgd2hldGhlciB0aGUgdmFsdWUgY2FuIGJlIGRlc2VyaWFsaXplZCBiYWNrIHRvIGl0cyBvcmlnaW5hbCBmb3JtIHdpdGhvdXQgbG9zaW5nIHByb3BlcnRpZXMuXG4gKlxuICogQHJldHVybnMgVGhlIEhUVFAgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWUuXG4gKi9cbmV4cG9ydCB0eXBlIEVuY29kZXIgPSB7XG4gICh2YWx1ZTogYW55LCB2YWxpZGF0ZT86IGZhbHNlKTogc3RyaW5nO1xuICA8VCA9IEVuY29kYWJsZT4odmFsdWU6IFQgJiBFbmNvZGFibGVDb250cmFjdDxUPiwgdmFsaWRhdGU6IHRydWUpOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSB2YWx1ZSBlbmNvZGVkIHdpdGggYW4ge0BsaW5rIEVuY29kZXJ9LlxuICovXG5leHBvcnQgdHlwZSBEZWNvZGVyID0gPFQgPSBhbnk+KGVuY29kZWQ6IHN0cmluZyB8IE51bGxpc2gpID0+IFQgfCB1bmRlZmluZWQ7XG5cbmNvbnN0IFJFRl9QUk9QID0gXCIkcmVmXCI7XG5cbmNvbnN0IGZsb2F0QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuY29uc3QgZmxvYXRWaWV3ID0gbmV3IERhdGFWaWV3KGZsb2F0QnVmZmVyKTtcblxuLyoqXG4gKiBNaXNjLiBmaXhlcyB0byB0aGUgbXNncGFjayBsaWJyYXJ5LiBGb3IgZXhhbXBsZSwgaXQgZG9lcyBub3QgaGFuZGxlIGV4cG9uZW50aWFsIG51bWJlcnMgd2VsbC5cbiAqL1xuY29uc3QgcGF0Y2hTZXJpYWxpemUgPSAodmFsdWU6IGFueSkgPT4ge1xuICBsZXQgY2xlYW5lcnM6ICgoKSA9PiB2b2lkKVtdIHwgdW5kZWZpbmVkO1xuICBsZXQgcmVmczogTWFwPGFueSwgbnVtYmVyPiB8IHVuZGVmaW5lZDtcbiAgbGV0IHJlZkluZGV4OiBudW1iZXI7XG4gIGNvbnN0IHBhdGNoUHJvcGVydHkgPSAoXG4gICAgdmFsdWU6IGFueSxcbiAgICBrZXk6IGFueSxcbiAgICB2YWwgPSB2YWx1ZVtrZXldLFxuICAgIHBhdGNoZWQgPSBpbm5lcih2YWwpXG4gICkgPT4gKFxuICAgICh2YWwgIT09IHBhdGNoZWQgfHwgaXNTeW1ib2woa2V5KSkgJiZcbiAgICAgICgodmFsdWVba2V5XSA9IHBhdGNoZWQpLCBhZGRDbGVhbmVyKCgpID0+ICh2YWx1ZVtrZXldID0gdmFsKSkpLFxuICAgIHZhbFxuICApO1xuICBjb25zdCBhZGRDbGVhbmVyID0gKGNsZWFuZXI6ICgpID0+IHZvaWQpID0+IChjbGVhbmVycyA/Pz0gW10pLnB1c2goY2xlYW5lcik7XG5cbiAgY29uc3QgaW5uZXIgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlmIChpc051bGwodmFsdWUpKSByZXR1cm4gbmlsO1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHZhbHVlKSAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIodmFsdWUpKSB7XG4gICAgICBmbG9hdFZpZXcuc2V0RmxvYXQ2NCgwLCB2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiB7IFwiXCI6IFsuLi5uZXcgVWludDMyQXJyYXkoZmxvYXRCdWZmZXIpXSB9O1xuICAgIH1cblxuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKCh2YWx1ZSBhcyBhbnkpLnRvSlNPTiAmJiB2YWx1ZSAhPT0gKHZhbHVlID0gKHZhbHVlIGFzIGFueSkudG9KU09OKCkpKSB7XG4gICAgICByZXR1cm4gaW5uZXIodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmluZWQoKHJlZkluZGV4ID0gKHJlZnMgPz89IG5ldyBNYXAoKSkuZ2V0KHZhbHVlKSkpKSB7XG4gICAgICBpZiAoIXZhbHVlW1JFRl9QUk9QXSkge1xuICAgICAgICAvLyBPbmx5IGFzc2lnbiBJRCBwYXJhbWV0ZXIgaWYgdXNlZC5cbiAgICAgICAgdmFsdWVbUkVGX1BST1BdID0gcmVmSW5kZXg7XG4gICAgICAgIGFkZENsZWFuZXIoKCkgPT4gZGVsZXRlIHZhbHVlW1JFRl9QUk9QXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBbUkVGX1BST1BdOiByZWZJbmRleCB9O1xuICAgIH1cblxuICAgIGlmIChpc1B1cmVPYmplY3QodmFsdWUpKSB7XG4gICAgICByZWZzLnNldCh2YWx1ZSwgcmVmcy5zaXplICsgMSk7XG4gICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChcbiAgICAgICAgKGspID0+XG4gICAgICAgICAgKGlzVW5kZWZpbmVkKHBhdGNoUHJvcGVydHkodmFsdWUsIGspKSB8fCBpc1N5bWJvbChrKSkgJiZcbiAgICAgICAgICBkZWxldGUgdmFsdWVba11cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKHZhbHVlKSkge1xuICAgICAgLy8gQXJyYXkgd2l0aCB1bmRlZmluZWQgdmFsdWVzIG9yIGl0ZXJhYmxlICh3aGljaCBpcyBtYWRlIGludG8gYXJyYXkuKS4gKFssMSwyLDNdIGRvZXMgbm90IHJldmVhbCBpdHMgZmlyc3QgZW50cnkpLlxuICAgICAgKCFpc0FycmF5KHZhbHVlKSB8fCBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoIDwgdmFsdWUubGVuZ3RoXG4gICAgICAgID8gWy4uLih2YWx1ZSBhcyBhbnkpXVxuICAgICAgICA6IHZhbHVlXG4gICAgICApLmZvckVhY2goKF8sIGkpID0+XG4gICAgICAgIGkgaW4gdmFsdWVcbiAgICAgICAgICA/IHBhdGNoUHJvcGVydHkodmFsdWUsIGkpXG4gICAgICAgICAgOiAoKHZhbHVlW2ldID0gbnVsbCksIGFkZENsZWFuZXIoKCkgPT4gZGVsZXRlIHZhbHVlW2ldKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSBzZXJpYWxpemUoaW5uZXIodmFsdWUpKTtcbiAgY2xlYW5lcnM/LmZvckVhY2goKGNsZWFuZXIpID0+IGNsZWFuZXIoKSk7XG4gIHJldHVybiBzZXJpYWxpemVkO1xufTtcblxuY29uc3QgcGF0Y2hEZXNlcmlhbGl6ZSA9ICh2YWx1ZTogVWludDhBcnJheSkgPT4ge1xuICBsZXQgcmVmczogYW55W10gfCB1bmRlZmluZWQ7XG4gIGxldCBtYXRjaGVkUmVmOiBhbnk7XG5cbiAgY29uc3QgaW5uZXIgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSByZXR1cm4gdmFsdWU7XG5cbiAgICBpZiAoaXNBcnJheSh2YWx1ZVtcIlwiXSkgJiYgKHZhbHVlID0gdmFsdWVbXCJcIl0pLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhuZXcgVWludDMyQXJyYXkodmFsdWUpLmJ1ZmZlcikuZ2V0RmxvYXQ2NCgwLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVbUkVGX1BST1BdICYmIChtYXRjaGVkUmVmID0gKHJlZnMgPz89IFtdKVt2YWx1ZVtSRUZfUFJPUF1dKSkge1xuICAgICAgcmV0dXJuIG1hdGNoZWRSZWY7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlW1JFRl9QUk9QXSkge1xuICAgICAgcmVmcyFbdmFsdWVbUkVGX1BST1BdXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHZhbHVlW1JFRl9QUk9QXTtcbiAgICB9XG5cbiAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaChcbiAgICAgIChbaywgdl0pID0+IHYgIT09ICh2ID0gaW5uZXIodikpICYmICh2YWx1ZVtrXSA9IHYpXG4gICAgKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gaGFzVmFsdWUodmFsdWUpXG4gICAgPyB0cnlDYXRjaChcbiAgICAgICAgKCkgPT4gaW5uZXIoZGVzZXJpYWxpemUodmFsdWUpKSxcbiAgICAgICAgKCkgPT4gdW5kZWZpbmVkXG4gICAgICApXG4gICAgOiB2YWx1ZTtcbn07XG5cbmV4cG9ydCB0eXBlIFRyYW5zcG9ydCA9IFtcbiAgZW5jb2RlOiBFbmNvZGVyLFxuICBkZWNvZGU6IERlY29kZXIsXG4gIGhhc2g6IEhhc2hGdW5jdGlvbjxzdHJpbmc+XG5dO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwYWlyIG9mIHtAbGluayBFbmNvZGVyfSBhbmQge0BsaW5rIERlY29kZXJ9cyBhcyB3ZWxsIGFzIGEge0BsaW5rIEhhc2hGdW5jdGlvbjxzdHJpbmc+fS5cbiAqIE1lc3NhZ2VQYWNrIGlzIHVzZWQgZm9yIHNlcmlhbGl6YXRpb24sIHtAbGluayBsc2ZyfSBlbmNyeXB0aW9uIGlzIG9wdGlvbmFsbHkgdXNlZCBpZiBhIGtleSBpcyBzcGVjaWZpZWQsIGFuZCB0aGUgaW5wdXQgYW5kIG91dHB1dHMgYXJlIEJhc2U2NFVSTCBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVHJhbnNwb3J0ID0gKGtleT86IG51bGwgfCBzdHJpbmcpOiBUcmFuc3BvcnQgPT4ge1xuICBjb25zdCBbZW5jcnlwdCwgZGVjcnlwdCwgaGFzaF0gPSBsZnNyKGtleSA/PyBcIlwiKTtcblxuICByZXR1cm4gW1xuICAgIChkYXRhOiBhbnkpID0+IHRvNjR1KGVuY3J5cHQocGF0Y2hTZXJpYWxpemUoZGF0YSkpKSxcbiAgICAoZW5jb2RlZDogYW55KSA9PlxuICAgICAgaGFzVmFsdWUoZW5jb2RlZCkgPyBwYXRjaERlc2VyaWFsaXplKGRlY3J5cHQoZnJvbTY0dShlbmNvZGVkKSkpIDogbnVsbCxcbiAgICAoZGF0YTogYW55LCBudW1lcmljT3JCaXRzPzogYW55KSA9PlxuICAgICAgaGFzaChzZXJpYWxpemUoZGF0YSksIG51bWVyaWNPckJpdHMpIGFzIGFueSxcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0VHJhbnNwb3J0ID0gY3JlYXRlVHJhbnNwb3J0KCk7XG5leHBvcnQgY29uc3QgW2h0dHBFbmNvZGUsIGh0dHBEZWNvZGUsIGhhc2hdID0gZGVmYXVsdFRyYW5zcG9ydDtcbiIsImltcG9ydCB7IHR5cGUgTnVsbGlzaCwgY3JlYXRlVHJhbnNwb3J0IH0gZnJvbSBcIkB0YWlsanMvdXRpbFwiO1xuXG5leHBvcnQgY29uc3QgW2h0dHBFbmNvZGUsIGh0dHBEZWNvZGVdID0gY3JlYXRlVHJhbnNwb3J0KCk7XG5cbmV4cG9ydCBsZXQgW2h0dHBFbmNyeXB0LCBodHRwRGVjcnlwdF0gPSBbbnVsbCwgbnVsbF0gYXMgYW55OyAvLyBbaHR0cEVuY29kZSwgaHR0cERlY29kZV07XG5cbmV4cG9ydCBjb25zdCBzZXRTdG9yYWdlS2V5ID0gKGtleTogc3RyaW5nIHwgTnVsbGlzaCkgPT5cbiAgKFtodHRwRW5jcnlwdCwgaHR0cERlY3J5cHRdID0gY3JlYXRlVHJhbnNwb3J0KGtleSkpO1xuIiwiaW1wb3J0IHsgVGltZXN0YW1wIH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7IEYsIFNTUiwgVCwgbmlsLCBwZXJmb3JtYW5jZSwgcHJvbWlzZSwgc2V0VGltZW91dCwgdW5kZWZpbmVkIH0gZnJvbSBcIi5cIjtcblxuZXhwb3J0IGNvbnN0IG5vdzogKHRydW5jYXRlPzogYm9vbGVhbikgPT4gbnVtYmVyID0gKFxuICByb3VuZCA9IFQsXG4gIF90bXA/OiBudW1iZXJcbikgPT4gKFxuICAoX3RtcCA9IFNTUiA/IERhdGUubm93KCkgOiBwZXJmb3JtYW5jZS50aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCkpLFxuICByb3VuZCA/IE1hdGgudHJ1bmMoX3RtcCkgOiBfdG1wXG4pO1xuXG5leHBvcnQgdHlwZSBUaW1lb3V0ID0ge1xuICAoKTogdm9pZDsgLy8gQ2xlYXJcbiAgKGNhbGxiYWNrOiAoKSA9PiB2b2lkLCBkZWxheT86IG51bWJlcik6IHZvaWQ7XG4gIGNsZWFyKGRlbGF5PzogbnVtYmVyLCBjbGVhbnVwPzogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gIHdhaXQoZGVsYXk/OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuICBpc0FjdGl2ZSgpOiBib29sZWFuO1xuICBmaW5pc2goKTogdm9pZDtcbiAgcHVsc2UoKTogVGltZW91dDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxheSA9IChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PlxuICBwcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREdXJhdGlvbiA9IChtczogbnVtYmVyKSA9PlxuICBtcyA+IDI1MCA/IGAkeyhtcyAvIDEwMDApLnRvRml4ZWQoMil9c2AgOiBgJHtNYXRoLnJvdW5kKG1zKX1tc2A7XG5cbmV4cG9ydCBjb25zdCB0aW1lb3V0ID0gKGNhbGxiYWNrPzogKCkgPT4gdm9pZCwgZGVsYXk/OiBudW1iZXIpOiBUaW1lb3V0ID0+IHtcbiAgbGV0IGlkID0gMDtcbiAgbGV0IGN1cnJlbnRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICBsZXQgY2FwdHVyZWRDYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3QgY2xlYXIgPSAoKSA9PiAoXG4gICAgKGN1cnJlbnRDYWxsYmFjayA9IHVuZGVmaW5lZCksXG4gICAgaWQgPCAwID8gY2xlYXJJbnRlcnZhbCgtaWQpIDogY2xlYXJUaW1lb3V0KGlkKSxcbiAgICAoaWQgPSAwKVxuICApO1xuXG4gIGNvbnN0IHRpbWVvdXQgPSAoY2FsbGJhY2s/OiAoKSA9PiB2b2lkLCBkZWxheT86IG51bWJlcikgPT4ge1xuICAgIGNsZWFyKCk7XG4gICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuO1xuXG4gICAgY3VycmVudENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgaWQgPVxuICAgICAgZGVsYXkhIDwgMFxuICAgICAgICA/IC1zZXRJbnRlcnZhbChjYWxsYmFjaywgLWRlbGF5ISlcbiAgICAgICAgOiBzZXRUaW1lb3V0KCgpID0+ICgoY3VycmVudENhbGxiYWNrID0gdW5kZWZpbmVkKSwgY2FsbGJhY2soKSksIGRlbGF5KTtcbiAgfTtcblxuICB0aW1lb3V0LmNsZWFyID0gKGRlbGF5PzogbnVtYmVyLCBjbGVhbnVwPzogKCkgPT4gdm9pZCwgY3VycmVudElkID0gaWQpID0+XG4gICAgaWQgJiZcbiAgICAoZGVsYXlcbiAgICAgID8gc2V0VGltZW91dCgoKSA9PiBpZCA9PT0gY3VycmVudElkICYmIChjbGVhcigpLCBjbGVhbnVwPy4oKSksIGRlbGF5KVxuICAgICAgOiAoY2xlYXIoKSwgY2xlYW51cD8uKCkpKTtcblxuICB0aW1lb3V0LndhaXQgPSAoZGVsYXk6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT5cbiAgICBwcm9taXNlKChyZXNvbHZlKSA9PiB0aW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG5cbiAgdGltZW91dC5wdWxzZSA9ICgpID0+IChjdXJyZW50Q2FsbGJhY2s/LigpLCB0aW1lb3V0KTtcblxuICB0aW1lb3V0LmlzQWN0aXZlID0gKCkgPT4gY3VycmVudENhbGxiYWNrICE9IG5pbDtcbiAgdGltZW91dC5maW5pc2ggPSAoKSA9PlxuICAgIChjYXB0dXJlZENhbGxiYWNrID0gY3VycmVudENhbGxiYWNrKSAmJiAoY2xlYXIoKSwgY2FwdHVyZWRDYWxsYmFjaygpKTtcblxuICByZXR1cm4gY2FsbGJhY2sgJiYgdGltZW91dChjYWxsYmFjaywgZGVsYXkpLCB0aW1lb3V0O1xufTtcblxuZXhwb3J0IGNvbnN0IHRpbWVyID0gKHRpbWUgPSAoKSA9PiBub3coKSwgc3RhcnRlZCA9IFQpID0+IHtcbiAgbGV0IGVsYXBzZWQgPSAwO1xuICBsZXQgb3JpZ2luID0gc3RhcnRlZCA/IHRpbWUoKSA6IDA7XG5cbiAgY29uc3QgdGltZXIgPSAoc3RhcnQ/OiBib29sZWFuKTogVGltZXN0YW1wID0+IHtcbiAgICBpZiAob3JpZ2luKSB7XG4gICAgICBlbGFwc2VkICs9IC1vcmlnaW4gKyAob3JpZ2luID0gdGltZSgpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ID09PSBUKSB7XG4gICAgICBvcmlnaW4gPSB0aW1lKCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID09PSBGKSB7XG4gICAgICBvcmlnaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZWxhcHNlZDtcbiAgfTtcbiAgdGltZXIucmVzZXQgPSAoKSA9PiAob3JpZ2luICYmIChvcmlnaW4gPSB0aW1lKCkpLCAoZWxhcHNlZCA9IDApKTtcbiAgcmV0dXJuIHRpbWVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmVyID0gKGY6IFZvaWRGdW5jdGlvbiwgbXMgPSAwKSA9PlxuICBtcyA/IHNldFRpbWVvdXQoZiwgbXMpIDogd2luZG93LnF1ZXVlTWljcm90YXNrKGYpO1xuIiwiaW1wb3J0IHR5cGUgeyBMb2NhbElELCBVVUlEIH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7IG5vdywgcmVkdWNlLCByZXBsYWNlLCBzcGxpdCB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCB0eXBlIFRhYklkID0gc3RyaW5nO1xuXG5jb25zdCBLRVlfUFJFRklYID0gXCIodH5cIjtcblxuZXhwb3J0IGNvbnN0IG1hcFNoYXJlZElkID0gKGlkOiBzdHJpbmcpID0+IGAke0tFWV9QUkVGSVh9JHtpZH1gO1xuXG5jb25zdCByYW5kb21WYWx1ZXMgPSAoYXJnOiBhbnkpID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJnKTtcbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKTogVVVJRCA9PlxuICByZXBsYWNlKFxuICAgIChbMWU3XSBhcyBhbnkpICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEsXG4gICAgL1swMThdL2csXG4gICAgKGM6IGFueSkgPT4gKFxuICAgICAgKGMgKj0gMSksXG4gICAgICAoYyBeIChyYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgKDE1ID4+IChjIC8gNCkpKSkudG9TdHJpbmcoMTYpXG4gICAgKVxuICApO1xuXG5leHBvcnQgY29uc3QgcmFuZG9tU2FmZUludCA9IChhcnI/OiBVaW50MzJBcnJheSkgPT4gKFxuICByYW5kb21WYWx1ZXMoKGFyciA9IG5ldyBVaW50MzJBcnJheSgyKSkpLFxuICAvLyBrZWVwIGFsbCAzMiBiaXRzIG9mIHRoZSB0aGUgZmlyc3QsIHRvcCAyMCBvZiB0aGUgc2Vjb25kIGZvciA1MiByYW5kb20gYml0c1xuICBhcnJbMF0gKiAoMSA8PCAyMCkgKyAoYXJyWzFdID4+PiAxMilcbik7XG5cbmNvbnN0IGxvY2FsSWRCdWZmZXIgPSBuZXcgVWludDMyQXJyYXkoMik7XG5leHBvcnQgY29uc3QgbmV4dElkID0gKCk6IExvY2FsSUQgPT4gcmFuZG9tU2FmZUludChsb2NhbElkQnVmZmVyKS50b1N0cmluZygzNik7XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlVGFiSWRzID0gKGlkOiBUYWJJZCwgb3RoZXI6IFRhYklkKSA9PlxuICBpZC5sb2NhbGVDb21wYXJlKG90aGVyLCBcImVuXCIpIDwgMCA/IGlkIDogb3RoZXI7XG5cbmV4cG9ydCBjb25zdCBnZXRNaW5UYWJJZCA9IChpZDogVGFiSWQsIC4uLm90aGVyOiBUYWJJZFtdKSA9PlxuICBvdGhlci5sZW5ndGggPT09IDBcbiAgICA/IGlkXG4gICAgOiBvdGhlci5sZW5ndGggPT09IDFcbiAgICA/IGNvbXBhcmVUYWJJZHMoaWQsIG90aGVyWzBdKVxuICAgIDogcmVkdWNlKG90aGVyLCAobWluLCBpZCkgPT4gY29tcGFyZVRhYklkcyhpZCwgbWluKSwgaWQpO1xuXG5leHBvcnQgY29uc3QgVEFCX0lEID0gYCR7bm93KCkudG9TdHJpbmcoMzYpfS0ke3JhbmRvbVNhZmVJbnQoKS50b1N0cmluZygzNil9YDtcblxubGV0IHRhYklkUGFydHM6IFtkYXRlOiBzdHJpbmcsIHJhbmRvbTogc3RyaW5nXTtcbmV4cG9ydCBjb25zdCBmb3JtYXRUYWJJZCA9ICh0YWJJZCA9IFRBQl9JRCkgPT4gKFxuICAodGFiSWRQYXJ0cyA9IHNwbGl0KHRhYklkLCBcIi1cIikgYXMgYW55KSxcbiAgYCR7bmV3IERhdGUocGFyc2VJbnQodGFiSWRQYXJ0c1swXSwgMzYpKS50b0lTT1N0cmluZygpfSAoJHt0YWJJZFBhcnRzWzFdfSlgXG4pO1xuIiwiaW1wb3J0IHR5cGUgeyBUcmFja2VyQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuLlwiO1xuXG5leHBvcnQgY29uc3QgaXNUcmFja2VyID0gXCJfX2lzVHJhY2tlclwiO1xuXG5leHBvcnQgY29uc3QgdHJhY2tlckNvbmZpZzogUmVxdWlyZWQ8VHJhY2tlckNvbmZpZ3VyYXRpb24+ID0ge1xuICBuYW1lOiBcInRhaWxcIixcbiAgc3JjOiBcIi9fdC5qc1wiLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHBvc3RFdmVudHM6IHRydWUsXG4gIHBvc3RGcmVxdWVuY3k6IDIwMDAsXG4gIHJlcXVlc3RUaW1lb3V0OiA1MDAwLFxuICBoZWFydGJlYXRGcmVxdWVuY3k6IDAsXG4gIGNsaWVudEtleTogbnVsbCxcbiAgYXBpS2V5OiBudWxsLFxuXG4gIC8qKlxuICAgKiBMb2cgZXZlbnRzIHRvIHRoZSBicm93c2VyJ3MgZGV2ZWxvcGVyIGNvbnNvbGUuXG4gICAqL1xuICBkZWJ1ZzogZmFsc2UsXG4gIGltcHJlc3Npb25UaHJlc2hvbGQ6IDEwMDAsXG4gIGNhcHR1cmVDb250ZXh0TWVudTogdHJ1ZSxcbiAgZGVmYXVsdEFjdGl2YXRpb25UcmFja2luZzogXCJhdXRvXCIsXG4gIHRhZ3M6IHsgZGVmYXVsdDogW1wiZGF0YS1pZFwiLCBcImRhdGEtbmFtZVwiXSB9LFxufTtcbiIsImltcG9ydCB7XG4gIENPTlRFWFRfTUVOVV9RVUVSWSxcbiAgRVZFTlRfSFVCX1FVRVJZLFxuICBWQVJJQUJMRVNfUVVFUlksXG59IGZyb20gXCJAY29uc3RhbnRzXCI7XG5pbXBvcnQgdHlwZSB7IE51bGxpc2ggfSBmcm9tIFwiQHRhaWxqcy91dGlsXCI7XG5pbXBvcnQgeyBULCBkb2N1bWVudCwgam9pbiwgcGFyc2VEb21haW4sIHJlcGxhY2UsIHNwbGl0IH0gZnJvbSBcIi5cIjtcblxuZXhwb3J0IGNvbnN0IEVSUl9CVUZGRVJfT1ZFUkZMT1cgPSBcImJ1ZmZlci1vdmVyZmxvd1wiO1xuZXhwb3J0IGNvbnN0IEVSUl9QT1NUX0ZBSUxFRCA9IFwicG9zdC1mYWlsZWRcIjtcbmV4cG9ydCBjb25zdCBFUlJfSU5WQUxJRF9DT01NQU5EID0gXCJpbnZhbGlkLWNvbW1hbmRcIjtcbmV4cG9ydCBjb25zdCBFUlJfSU5URVJOQUxfRVJST1IgPSBcImludGVybmFsLWVycm9yXCI7XG5leHBvcnQgY29uc3QgRVJSX0FSR1VNRU5UX0VSUk9SID0gXCJpbnZhbGlkLWFyZ3VtZW50XCI7XG5leHBvcnQgY29uc3QgRVJSX1JFU0VSVkVEID0gXCJyZXNlcnZlZFwiO1xuZXhwb3J0IGNvbnN0IEVSUl9DT05GSUdfTE9DS0VEID0gXCJjb25maWctbG9ja2VkXCI7XG5leHBvcnQgY29uc3QgRVJSX0RVUFBMSUNBVEVfS0VZID0gXCJrZXlcIjtcblxuY29uc3Qgc3JjID0gc3BsaXQoXCJcIiArIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQhW1wic3JjXCJdLCBcIiNcIik7XG5jb25zdCBhcmdzID0gc3BsaXQoXCJcIiArIChzcmNbMV0gfHwgXCJcIiksIFwiO1wiKTtcblxuZXhwb3J0IGNvbnN0IFNDUklQVF9TUkMgPSBzcmNbMF07XG5leHBvcnQgY29uc3QgVFJBQ0tFUl9ET01BSU4gPVxuICBhcmdzWzFdIHx8IHBhcnNlRG9tYWluKFNDUklQVF9TUkMpPy5kb21haW4/LmRvbWFpbk5hbWU7XG5cbmV4cG9ydCBjb25zdCBpc0ludGVybmFsVXJsID0gKHVybDogc3RyaW5nIHwgTnVsbGlzaCkgPT5cbiAgISEoXG4gICAgVFJBQ0tFUl9ET01BSU4gJiZcbiAgICBwYXJzZURvbWFpbih1cmwpPy5kb21haW4/LmRvbWFpbk5hbWUuZW5kc1dpdGgoVFJBQ0tFUl9ET01BSU4pID09PSBUXG4gICk7XG5cbmV4cG9ydCBjb25zdCBtYXBVcmwgPSAoLi4udXJsUGFydHM6IHN0cmluZ1tdKSA9PlxuICByZXBsYWNlKGpvaW4odXJsUGFydHMpLCAvKF4oPz1cXD8pKXwoXlxcLig/PVxcLykpLywgU0NSSVBUX1NSQy5zcGxpdChcIj9cIilbMF0pO1xuXG5leHBvcnQgY29uc3QgVkFSX1VSTCA9IG1hcFVybChcIj9cIiwgRVZFTlRfSFVCX1FVRVJZKTtcbmV4cG9ydCBjb25zdCBNTlRfVVJMID0gbWFwVXJsKFwiP1wiLCBDT05URVhUX01FTlVfUVVFUlkpO1xuZXhwb3J0IGNvbnN0IFVTUl9VUkwgPSBtYXBVcmwoXCI/XCIsIFZBUklBQkxFU19RVUVSWSk7XG4iLCJpbXBvcnQgeyBkZWwsIGZvckVhY2gsIGhhc2hTZXQsIG9wZW5Qcm9taXNlLCBzZXQgfSBmcm9tIFwiLlwiO1xuXG50eXBlIEhhbmRsZXJBcmdzPEFyZ3MgZXh0ZW5kcyBhbnlbXT4gPSBbLi4ucGFyYW1zOiBBcmdzLCB1bmJpbmQ6ICgpID0+IHZvaWRdO1xuZXhwb3J0IGNvbnN0IGV2ZW50U2V0ID0gPEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdPihcbiAgb25jZSA9IGZhbHNlXG4pOiBbXG4gIGFkZDogKGhhbmRsZXI6ICguLi5hcmdzOiBIYW5kbGVyQXJnczxBcmdzPikgPT4gdm9pZCkgPT4gKCkgPT4gdm9pZCxcbiAgaW52b2tlOiAoLi4uYXJnczogQXJncykgPT4gdm9pZFxuXSA9PiB7XG4gIGNvbnN0IGhhbmRsZXJzID0gaGFzaFNldDwoLi4uYXJnczogSGFuZGxlckFyZ3M8QXJncz4pID0+IHZvaWQ+KCk7XG4gIGNvbnN0IHVuYmluZGVyID0gKGhhbmRsZXI6IGFueSkgPT4gKCkgPT4gZGVsKGhhbmRsZXJzLCBoYW5kbGVyKTtcbiAgbGV0IGludm9rZUFyZ3M6IEFyZ3MgfCBudWxsID0gbnVsbDtcblxuICByZXR1cm4gW1xuICAgIChoYW5kbGVyOiAoLi4uYXJnczogSGFuZGxlckFyZ3M8QXJncz4pID0+IHZvaWQpOiAoKCkgPT4gdm9pZCkgPT4gKFxuICAgICAgLy8gSWYgdGhlIGV2ZW50IGhhcyBhbHJlYWR5IGZpcmVkIGNhbGwgdGhlIGhhbmRsZXIgd2l0aCB3aGF0ZXZlciBhcmdzIHdlcmUgdXNlZCB3aGVuIGl0IGhhcHBlbmVkLlxuICAgICAgb25jZSAmJiBpbnZva2VBcmdzXG4gICAgICAgID8gaGFuZGxlciguLi5pbnZva2VBcmdzLCAoKSA9PiB7fSlcbiAgICAgICAgOiBzZXQoaGFuZGxlcnMsIGhhbmRsZXIpLFxuICAgICAgdW5iaW5kZXIoaGFuZGxlcilcbiAgICApLFxuICAgICguLi5hcmdzOiBBcmdzKSA9PlxuICAgICAgZm9yRWFjaChoYW5kbGVycywgKGhhbmRsZXIpID0+IHtcbiAgICAgICAgaGFuZGxlciguLi4oaW52b2tlQXJncyA9IGFyZ3MpLCB1bmJpbmRlcihoYW5kbGVyKSk7XG4gICAgICB9KSxcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBzdGFydHVwTG9jayA9IG9wZW5Qcm9taXNlKCk7XG5cbmV4cG9ydCBjb25zdCBbcmVnaXN0ZXJTdGFydHVwSGFuZGxlciwgc3RhcnR1cENvbXBsZXRlXSA9IGV2ZW50U2V0KHRydWUpO1xuXG5yZWdpc3RlclN0YXJ0dXBIYW5kbGVyKCgpID0+IHN0YXJ0dXBMb2NrKHRydWUpKTtcbiIsImltcG9ydCB7IHBhcnNlVGFnU3RyaW5nLCB0eXBlIFRhZyB9IGZyb20gXCJAdGFpbGpzL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IE51bGxpc2ggfSBmcm9tIFwiQHRhaWxqcy91dGlsXCI7XG5pbXBvcnQge1xuICBhdHRyLFxuICBhdHRycyxcbiAgYm9vbCxcbiAgY29uY2F0MixcbiAgY3JlYXRlRWxlbWVudCxcbiAgY3NzUHJvcGVydHksXG4gIEYsXG4gIGZpbHRlcixcbiAgZmxhdE1hcCxcbiAgZm9yQW5jZXN0b3JzT3JTZWxmLFxuICBmb3JFYWNoLFxuICBmdW4sXG4gIGdldCxcbiAgaGFzaFNldCxcbiAgaXRlcmFibGUsXG4gIG1hcCxcbiAgbWF0Y2gsXG4gIG1hdGNoZXMsXG4gIG5pbCxcbiAgTm9kZVdpdGhQYXJlbnRFbGVtZW50LFxuICBvYmosXG4gIHJlZ2V4LFxuICByZXBsYWNlLFxuICBzaXplLFxuICBzdHIsXG4gIFQsXG4gIHRlc3QsXG4gIHRyYWNrZXJDb25maWcsXG4gIHZhbHVlcyxcbiAgd2Vha01hcCxcbn0gZnJvbSBcIi5cIjtcbmltcG9ydCB0eXBlIHsgQm91bmRhcnlEYXRhLCBUYWdNYXBwaW5ncyB9IGZyb20gXCIuLlwiO1xuXG5leHBvcnQgY29uc3QgYm91bmRhcnlEYXRhID0gd2Vha01hcDxOb2RlLCBCb3VuZGFyeURhdGE+KCk7XG5leHBvcnQgY29uc3QgZ2V0Qm91bmRhcnlEYXRhID0gKGVsOiBOb2RlKSA9PiBnZXQoYm91bmRhcnlEYXRhLCBlbCk7XG5cbmV4cG9ydCBjb25zdCB0cmFja2VyUHJvcGVydHlOYW1lID0gKG5hbWU6IHN0cmluZywgY3NzID0gRikgPT5cbiAgKGNzcyA/IFwiLS10cmFjay1cIiA6IFwidHJhY2stXCIpICsgbmFtZTtcblxuLy8gY29uc3QgdHJhY2tlclByb3BlcnR5ID0gKFxuLy8gICBlbDogRWxlbWVudCxcbi8vICAgbmFtZTogc3RyaW5nLFxuLy8gICB2YWx1ZSA9IGF0dHIoZWwsIHRyYWNrZXJQcm9wZXJ0eU5hbWUobmFtZSkpLFxuLy8gICBjc3MgPSBjc3NQcm9wZXJ0eShlbCBhcyBFbGVtZW50LCB0cmFja2VyUHJvcGVydHlOYW1lKG5hbWUsIFQpKVxuLy8gKSA9PiAodmFsdWUgPyAoY3NzID8gdmFsdWUgKyBcIiBcIiArIGNzcyA6IHZhbHVlKSA6IGNzcyk7XG5cbnR5cGUgTWF0Y2hBdHRyaWJ1dGVSdWxlID0gcmVhZG9ubHkgW1xuICBtYXRjaDogUmVnRXhwLFxuICBzZWxlY3Rvcj86IHN0cmluZyxcbiAgYmFzZVJhbms/OiBzdHJpbmdcbl07XG5cbnR5cGUgQ2FjaGVNYXRjaFJ1bGVzID0gW1xuICBlbGlnaWJsZUNhY2hlOiB7IFtuYW1lOiBzdHJpbmddOiBib29sZWFuIH0sXG4gIHJ1bGVzOiBNYXRjaEF0dHJpYnV0ZVJ1bGVbXSB8IE51bGxpc2hcbl07XG5cbi8qKlxuICogRXh0cmFjdHMgYW4gZWxlbWVudCdzIHRhZ3MgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUsIGFuZCBhIGxpc3Qgb2YgcnVsZXMgYWJvdXQgaG93IHRvIG1hdGNoLi5cbiAqIFNpbmNlIHRoaXMgZnVuY3Rpb24gaXMgZXh0ZXJuYWwsIGl0cyBsb2NhbCB2YXJpYWJsZXMgYXJlIGFkZGVkIGFzIGxvY2FsIHBhcmFtZXRlcnMuIERvbid0IHRhbXBlci5cbiAqXG4gKiBBbiBvcHRpb25hbCBgZWxpZ2libGVDYWNoZWAgY2FuIGJlIHBhc3NlZCBhbG9uZyB0byBzcGVlZCB1cCByZWplY3RpbmcgYXR0cmlidXRlIG5hbWVzIHRoYXQgZGVmaW5pdGVseSBkb24ndCBtYXRjaCBhbnl0aGluZy5cbiAqL1xuY29uc3QgbWF0Y2hBdHRyaWJ1dGVOYW1lcyA9IChcbiAgZWw6IEVsZW1lbnQgfCBOdWxsaXNoLFxuICBjYWNoZWQ6IENhY2hlTWF0Y2hSdWxlcyB8IE51bGxpc2gsXG4gIHRhZ3M6IFNldDxzdHJpbmc+LFxuICBwcmVmaXg/OiBzdHJpbmcgfCBib29sZWFuLFxuICB2YWx1ZT86IHN0cmluZyxcbiAgZWxpZ2libGU/OiBib29sZWFuXG4pID0+XG4gIGNhY2hlZD8uWzFdICYmXG4gIGZvckVhY2goXG4gICAgYXR0cnMoZWwpLFxuICAgIChuYW1lKSA9PlxuICAgICAgKGNhY2hlZFswXVtuYW1lXSA/Pz1cbiAgICAgICAgKChlbGlnaWJsZSA9IEYpLFxuICAgICAgICBzdHIoXG4gICAgICAgICAgKHByZWZpeCA9XG4gICAgICAgICAgICAvLyBHcnJyLi4gd2UgZGlkIG5vdC4gTGV0J3MgbG9vcCB0aHJvdWdoIHRoZW0gdGhlbi5cbiAgICAgICAgICAgIGZvckVhY2goXG4gICAgICAgICAgICAgIGNhY2hlZFsxXSxcbiAgICAgICAgICAgICAgKFttYXRjaCwgc2VsZWN0b3IsIHByZWZpeF0sIF8sIHN0b3ApID0+XG4gICAgICAgICAgICAgICAgdGVzdChuYW1lLCBtYXRjaCkgJiZcbiAgICAgICAgICAgICAgICAvLyBTbmVha2lseSB3ZSBcImRlbGV0ZVwiIHRoZSBlbGlnaWJsZSBmbGFnLCBzbyB0aGUgc2tpcE5hbWVDYWNoZSdzIGA/Pz1gIGFzc2lnbm1lbnQgd2lsbCBhbHdheXMgYmUgcmVldmFsdWF0ZWQuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBjb2RlIGJyYW5jaCBpcyBuZXZlciBoaXQsIHdlIHJldHVybiB0aGUgaW5pdGlhbCB2YWx1ZSBgZmFsc2VgLCBhbmQgdGhpcyBjaGVjayB3aWxsIG5ldmVyIGJlIHBlcmZvcm1lZCBhZ2Fpbi5cbiAgICAgICAgICAgICAgICAvLyBXZSBkbyB0aGlzIGNoZWNrIGJlZm9yZSB0aGUgc2VsZWN0b3IgY2hlY2ssIHNpbmNlIHRoaXMgcmVzdWx0IGlzIG5vdCBnZW5lcmFsbHkgY2FjaGVhYmxlLlxuICAgICAgICAgICAgICAgICgoZWxpZ2libGUgPSB1bmRlZmluZWQpLCAhc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSAmJlxuICAgICAgICAgICAgICAgIHN0b3AocHJlZml4ID8/IG5hbWUpXG4gICAgICAgICAgICApKVxuICAgICAgICApICYmIC8vIFRoZSBlbXB0eSBzdHJpbmcgaXMgYWxzbyBcInRydWVcIiBzaW5jZSBpdCBtZWFucyBwcmVjZW5zZSBvZiB0aGUgYXR0cmlidXRlIHdpdGhvdXQgYSB2YWx1ZSAoYXMgaW4gYDxkaXYgdGFnLXllcyAvPikuXG4gICAgICAgICAgKCEodmFsdWUgPSBlbCEuZ2V0QXR0cmlidXRlKG5hbWUpISkgfHwgYm9vbCh2YWx1ZSwgZmFsc2UpKSAmJlxuICAgICAgICAgIHBhcnNlVGFnU3RyaW5nKHZhbHVlLCByZXBsYWNlKHByZWZpeCwgL1xcLS9nLCBcIjpcIiksIHRhZ3MpLFxuICAgICAgICBlbGlnaWJsZSkpXG4gICk7XG5cbi8vIFdlIGNhY2hlIHRoZSB0cmFja2VyIGNvbmZpZ3VyYXRpb24ncyBydWxlcyBmb3IgdGFnIG1hcHBpbmdzLlxubGV0IGNhY2hlZFRhZ01hcHBlcjogKGVsOiBFbGVtZW50LCB0YWdzOiBTZXQ8c3RyaW5nPikgPT4gdm9pZCA9ICgpID0+IHt9O1xubGV0IGNhY2hlZE1hcHBpbmdzOiBUYWdNYXBwaW5ncyB8IHVuZGVmaW5lZDtcbmNvbnN0IHBhcnNlVGFnQXR0cmlidXRlcyA9IChlbDogRWxlbWVudCwgdGFnczogU2V0PHN0cmluZz4pID0+IHtcbiAgaWYgKGNhY2hlZE1hcHBpbmdzID09PSAoY2FjaGVkTWFwcGluZ3MgPSB0cmFja2VyQ29uZmlnLnRhZ3MpKSB7XG4gICAgcmV0dXJuIGNhY2hlZFRhZ01hcHBlcihlbCwgdGFncyk7XG4gIH1cblxuICBjb25zdCBwYXJzZSA9IChydWxlOiBUYWdNYXBwaW5nc1tzdHJpbmddKTogTWF0Y2hBdHRyaWJ1dGVSdWxlW10gPT5cbiAgICAgICFydWxlXG4gICAgICAgID8gW11cbiAgICAgICAgOiByZWdleChydWxlKVxuICAgICAgICA/IFtbcnVsZV1dXG4gICAgICAgIDogaXRlcmFibGUocnVsZSlcbiAgICAgICAgPyBmbGF0TWFwKHJ1bGUsIHBhcnNlKVxuICAgICAgICA6IFtcbiAgICAgICAgICAgIG9iaihydWxlKVxuICAgICAgICAgICAgICA/IFtyZWdleChydWxlLm1hdGNoLCBmYWxzZSksIHJ1bGUuc2VsZWN0b3IsIHJ1bGUucHJlZml4XVxuICAgICAgICAgICAgICA6IFtyZWdleChydWxlLCBmYWxzZSldLFxuICAgICAgICAgIF0sXG4gICAgY2FjaGU6IENhY2hlTWF0Y2hSdWxlcyA9IFtcbiAgICAgIHt9LFxuICAgICAgLy8gU3RhcnQgYnkgY2hlY2tpbmcgd2hldGhlciB3ZSBoYXZlIGFueSBvZiB0aGUgZ29vZCBvbCcsIGRvY3VtZW50ZWQsIFwidGFpbC5qcyBvZmZpY2lhbFwiIHRhZyBhdHRyaWJ1dGVzLlxuICAgICAgW1svXig/OnRyYWNrXFwtKT90YWdzPyg/OiR8XFwtKSguKikvXSwgLi4ucGFyc2UodmFsdWVzKGNhY2hlZE1hcHBpbmdzKSldLFxuICAgIF07XG5cbiAgKGNhY2hlZFRhZ01hcHBlciA9IChlbDogRWxlbWVudCwgdGFnczogU2V0PHN0cmluZz4pID0+XG4gICAgbWF0Y2hBdHRyaWJ1dGVOYW1lcyhlbCwgY2FjaGUsIHRhZ3MpKShlbCwgdGFncyk7XG59O1xuXG5jb25zdCBjc3NQcm9wZXJ0eVdpdGhCYXNlID0gKGVsOiBFbGVtZW50LCBuYW1lOiBzdHJpbmcpID0+XG4gIGNvbmNhdDIoXG4gICAgY3NzUHJvcGVydHkoZWwsIHRyYWNrZXJQcm9wZXJ0eU5hbWUobmFtZSwgVCkpLFxuICAgIGNzc1Byb3BlcnR5KGVsLCB0cmFja2VyUHJvcGVydHlOYW1lKFwiYmFzZS1cIiArIG5hbWUsIFQpKSxcbiAgICBcIlwiXG4gICk7XG5cbi8vIFdlIGNhbm5vdCBjYWNoZSBhcyBicm9hZGx5IGZvciBDU1MgYmFzZWQgcnVsZXMsIHNvIHdlIGNhY2hlIHBlciBzZWxlY3RvciBpbnN0ZWFkLlxuY29uc3QgcGFyc2VkQ3NzUnVsZXM6IHtcbiAgW3J1bGU6IHN0cmluZ106IENhY2hlTWF0Y2hSdWxlcztcbn0gPSB7fTtcblxuY29uc3QgcGFyc2VDc3NNYXBwaW5nUnVsZXMgPSAoXG4gIGVsOiBFbGVtZW50LFxuICB0YWdzOiBTZXQ8c3RyaW5nPixcbiAgcnVsZXNTdHJpbmcgPSBjc3NQcm9wZXJ0eVdpdGhCYXNlKGVsLCBcImF0dHJpYnV0ZXNcIilcbikgPT4ge1xuICBtYXRjaEF0dHJpYnV0ZU5hbWVzKFxuICAgIGVsLFxuICAgIChwYXJzZWRDc3NSdWxlc1tydWxlc1N0cmluZ10gPz89IFtcbiAgICAgIHt9LFxuICAgICAgZmlsdGVyKFxuICAgICAgICBtYXRjaChcbiAgICAgICAgICBydWxlc1N0cmluZyxcbiAgICAgICAgICAvKD86KFxcUyspXFw6XFxzKik/KD86XFwoKFxcUyspXFwpfChbXlxccyw6XSspKVxccyooPyFcXFMqXFw6KS9nLFxuICAgICAgICAgIChfLCBwcmVmaXgsIHJ1bGUxLCBydWxlMikgPT5cbiAgICAgICAgICAgIFtyZWdleChydWxlMSB8fCBydWxlMiwgZmFsc2UpLCAsIHByZWZpeF0gYXMgY29uc3QsXG4gICAgICAgICAgW11cbiAgICAgICAgKSxcbiAgICAgICAgVFxuICAgICAgKSxcbiAgICBdKSxcbiAgICB0YWdzXG4gICk7XG4gIHBhcnNlVGFnU3RyaW5nKGNzc1Byb3BlcnR5V2l0aEJhc2UoZWwsIFwidGFnc1wiKSwgdW5kZWZpbmVkLCB0YWdzKTtcbn07XG5cbmxldCBjdXJyZW50Qm91bmRhcnlEYXRhOiBCb3VuZGFyeURhdGEgfCBOdWxsaXNoO1xuZXhwb3J0IGNvbnN0IHRyYWNrZXJQcm9wZXJ0eSA9IChcbiAgZWw6IEVsZW1lbnQsXG4gIG5hbWU6IHN0cmluZyxcbiAgaW5oZXJpdDpcbiAgICB8IGJvb2xlYW5cbiAgICB8ICgoZWw6IE5vZGVXaXRoUGFyZW50RWxlbWVudCwgZGlzdGFuY2U6IG51bWJlcikgPT4gYm9vbGVhbikgPSBGLFxuICBib3VuZGFyeURhdGE/OiAoZWw6IEJvdW5kYXJ5RGF0YSkgPT4gc3RyaW5nIHwgTnVsbGlzaFxuKTogc3RyaW5nIHwgbnVsbCA9PlxuICAoaW5oZXJpdFxuICAgID8gZm9yQW5jZXN0b3JzT3JTZWxmKFxuICAgICAgICBlbCxcbiAgICAgICAgKGVsLCByKSA9PiByKHRyYWNrZXJQcm9wZXJ0eShlbCwgbmFtZSwgRikpLFxuICAgICAgICBmdW4oaW5oZXJpdCwgRilcbiAgICAgIClcbiAgICA6IGNvbmNhdDIoXG4gICAgICAgIGF0dHIoZWwsIHRyYWNrZXJQcm9wZXJ0eU5hbWUobmFtZSkpLFxuICAgICAgICBjc3NQcm9wZXJ0eShlbCwgdHJhY2tlclByb3BlcnR5TmFtZShuYW1lLCBUKSlcbiAgICAgICkpID8/XG4gIChib3VuZGFyeURhdGEgJiZcbiAgICAoY3VycmVudEJvdW5kYXJ5RGF0YSA9IGdldEJvdW5kYXJ5RGF0YShlbCkpICYmXG4gICAgYm91bmRhcnlEYXRhKGN1cnJlbnRCb3VuZGFyeURhdGEpKSA/P1xuICBuaWw7XG5cbmxldCBwcm9wZXJ0eVZhbHVlOiBzdHJpbmcgfCBOdWxsaXNoO1xuZXhwb3J0IGNvbnN0IHRyYWNrZXJGbGFnID0gKFxuICBlbDogRWxlbWVudCxcbiAgbmFtZTogc3RyaW5nLFxuICBpbmhlcml0OlxuICAgIHwgYm9vbGVhblxuICAgIHwgKChlbDogTm9kZVdpdGhQYXJlbnRFbGVtZW50LCBkaXN0YW5jZTogbnVtYmVyKSA9PiBib29sZWFuKSA9IEYsXG4gIGJvdW5kYXJ5RGF0YT86IChkYXRhOiBCb3VuZGFyeURhdGEpID0+IGJvb2xlYW4gfCBOdWxsaXNoXG4pID0+XG4gIChwcm9wZXJ0eVZhbHVlID0gdHJhY2tlclByb3BlcnR5KGVsLCBuYW1lLCBpbmhlcml0LCBib3VuZGFyeURhdGEgYXMgYW55KSkgPT09XG4gICAgXCJcIiB8fCAocHJvcGVydHlWYWx1ZSA9PSBuaWwgPyBwcm9wZXJ0eVZhbHVlIDogYm9vbChwcm9wZXJ0eVZhbHVlLCBUKSk7XG5cbmV4cG9ydCB0eXBlIFBhcnNlZFRhZ3MgPSB7IHRhZ3M/OiBUYWdbXSB9O1xuXG5leHBvcnQgY29uc3QgcGFyc2VUYWdzID0gKFxuICBzb3VyY2VFbDogRWxlbWVudCB8IE51bGxpc2gsXG4gIHN0b3BwaW5nQ3JpdGVyaW9uPzogKGVsOiBFbGVtZW50LCBkaXN0YW5jZTogbnVtYmVyKSA9PiBib29sZWFuLFxuICBlbGVtZW50VGFnRGF0YT86IChlbDogRWxlbWVudCkgPT4gSXRlcmFibGU8VGFnPiB8IE51bGxpc2gsXG4gIHRhZ3M/OiBTZXQ8c3RyaW5nPlxuKTogUGFyc2VkVGFncyA9PlxuICAhc291cmNlRWxcbiAgICA/IHt9XG4gICAgOiAoKHRhZ3MgPz89IGhhc2hTZXQ8c3RyaW5nPigpKSxcbiAgICAgIHBhcnNlQ3NzTWFwcGluZ1J1bGVzKHNvdXJjZUVsLCB0YWdzKSxcbiAgICAgIGZvckFuY2VzdG9yc09yU2VsZihcbiAgICAgICAgc291cmNlRWwsXG4gICAgICAgIChlbCkgPT4ge1xuICAgICAgICAgIHBhcnNlVGFnQXR0cmlidXRlcyhlbCwgdGFncyEpO1xuICAgICAgICAgIHBhcnNlVGFnU3RyaW5nKG1hcChlbGVtZW50VGFnRGF0YT8uKGVsKSksIHVuZGVmaW5lZCwgdGFncyEpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wcGluZ0NyaXRlcmlvblxuICAgICAgKSxcbiAgICAgIHNpemUodGFncykgPyB7IHRhZ3M6IFsuLi50YWdzXSB9IDoge30pO1xuXG5sZXQgc3R5bGVFbGVtZW50OiBOb2RlO1xuZXhwb3J0IGNvbnN0IGluamVjdENzc0RlZmF1bHRzID0gKGRvY3VtZW50OiBEb2N1bWVudCkgPT4ge1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKFxuICAgICgoKHN0eWxlRWxlbWVudCA9XG4gICAgICAvLyAtLXRyYWNrLWJhc2UtYXR0cmlidXRlcyBhbmQgLS10cmFjay1iYXNlLXRhZ3MgYXJlIG5vdCBzZXQsIHNpbmNlIHRoZXkgYXJlIHN1cHBvc2VkIHRvIGJlIGluaGVyaXRlZC5cbiAgICAgIGNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSkuaW5uZXJUZXh0ID0gYCogeyAke3RyYWNrZXJQcm9wZXJ0eU5hbWUoXG4gICAgICBcInRhZ3NcIixcbiAgICAgIFRcbiAgICApfTo7ICR7dHJhY2tlclByb3BlcnR5TmFtZShcImF0dHJpYnV0ZXNcIiwgVCl9Ojt9YCksXG4gICAgc3R5bGVFbGVtZW50KVxuICApO1xufTtcbiIsImltcG9ydCB7IEVuY29kYWJsZSB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIEYsXG4gIFQsXG4gIFRBQl9JRCxcbiAgYXJyYXksXG4gIGRlY29kZSxcbiAgZW5jb2RlLFxuICBmaWx0ZXIsXG4gIGZ1bixcbiAgaHR0cERlY29kZSxcbiAgaHR0cERlY3J5cHQsXG4gIGh0dHBFbmNvZGUsXG4gIGh0dHBFbmNyeXB0LFxuICBtYXAsXG4gIG1hcFNoYXJlZElkLFxuICBuaWwsXG4gIG5vdyxcbiAgcHVzaCxcbiAgc2hpZnQsXG4gIHRpbWVvdXQsXG4gIHVuZGVmaW5lZCxcbn0gZnJvbSBcIi5cIjtcblxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVTdG9yYWdlIHtcbiAgZ2V0SXRlbTogKGtleTogc3RyaW5nKSA9PiBzdHJpbmcgfCBudWxsO1xuICBzZXRJdGVtOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHRpbWVvdXQ/OiBudW1iZXIpID0+IHZvaWQ7XG4gIHJlbW92ZUl0ZW06IChrZXk6IHN0cmluZykgPT4gdm9pZDtcblxuICAvKipcbiAgICogQSBmbGFnIHdoZXRoZXIgdGhlIHN0b3JhZ2UgbmF0aXZlbHkgc3VwcG9ydHMgZXhwaXJ5IG9mIHN0YWxlIHZhbHVlLiBJbiB0aGF0IGNhc2UsIHRoZSB0aW1lc3RhbXAgZm9yIGV4cGlyeSB3aWxsIG5vdCBiZSBzZXJpYWxpemVkLlxuICAgKiBUaGlzIGlzIHRoZSBjYXNlIGZvciBjb29raWVzLCBzbyBubyBuZWVkIHRvIGJsb2F0IHRoZSBzY2FyY2UgZGF0YSBjYXBhY2l0eSBtb3JlIHRoYW4gbmVjZXNzYXJ5LlxuICAgKi9cbiAgc3VwcG9ydHNFeHBpcnk/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JhZ2VBY2Nlc3Mge1xuICA8VCBleHRlbmRzIEVuY29kYWJsZSA9IEVuY29kYWJsZT4oa2V5OiBzdHJpbmcpOiBUIHwgbnVsbDtcbiAgPFQgZXh0ZW5kcyBFbmNvZGFibGU+KGtleTogc3RyaW5nLCB2YWx1ZTogVCwgdGltZW91dD86IG51bWJlcik6IFQ7XG5cbiAgPFQgZXh0ZW5kcyBFbmNvZGFibGU+KFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiAoY3VycmVudDogVCkgPT4gVCxcbiAgICB0aW1lb3V0PzogbnVtYmVyXG4gICk6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwcGVkU3RvcmFnZUFjY2VzczxUIGV4dGVuZHMgRW5jb2RhYmxlPiB7XG4gICgpOiBUIHwgbnVsbDtcbiAgKHZhbHVlOiBULCB0aW1lb3V0PzogbnVtYmVyKTogVDtcbiAgKHZhbHVlOiAoY3VycmVudDogVCkgPT4gVCwgdGltZW91dD86IG51bWJlcik6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZVN0b3JhZ2VBY2Nlc3MgZXh0ZW5kcyBTdG9yYWdlQWNjZXNzIHtcbiAgPFQgZXh0ZW5kcyBFbmNvZGFibGUgfCBudWxsPihcbiAgICBoYW5kbGVyOiBTdG9yYWdlSXRlbUxpc3RlbmVyPFQ+LFxuICAgIHNlbGY6IGJvb2xlYW5cbiAgKTogKCkgPT4gYm9vbGVhbiB8IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIFN0b3JhZ2VJdGVtTGlzdGVuZXI8VCBleHRlbmRzIEVuY29kYWJsZSA9IEVuY29kYWJsZT4gPSAoXG4gIGtleTogc3RyaW5nLFxuICB2YWx1ZTogVCB8IG51bGwsXG4gIG9sZFZhbHVlOiBUIHwgbnVsbCxcbiAgc291cmNlSWQ6IHN0cmluZyB8IG51bGxcbikgPT4gYm9vbGVhbiB8IHZvaWQ7XG5cbmNvbnN0IG1lbW9yeVN0b3JhZ2UgPSAoKTogU2ltcGxlU3RvcmFnZSA9PiB7XG4gIGNvbnN0IHZhbHVlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICByZXR1cm4ge1xuICAgIGdldEl0ZW06IChrZXkpID0+IHZhbHVlc1trZXldIGFzIGFueSxcbiAgICBzZXRJdGVtOiAoa2V5LCB2YWx1ZSkgPT4gKHZhbHVlc1trZXldID0gdmFsdWUpLFxuICAgIHJlbW92ZUl0ZW06IChrZXkpID0+IGRlbGV0ZSB2YWx1ZXNba2V5XSxcbiAgfTtcbn07XG5cbnR5cGUgU3RvcmFnZUVudHJ5PFQgZXh0ZW5kcyBFbmNvZGFibGUgPSBFbmNvZGFibGU+ID0gW1xuICB2YWx1ZTogVCxcbiAgZXhwaXJlcz86IG51bWJlcixcbiAgc291cmNlPzogc3RyaW5nXG5dO1xuXG5jb25zdCBzZXJpYWxpemUgPSA8VCBleHRlbmRzIEVuY29kYWJsZSA9IEVuY29kYWJsZT4oXG4gIHZhbHVlOiBULFxuICBleHBpcmVzPzogbnVtYmVyLFxuICBzb3VyY2VJZD86IHN0cmluZyB8IG51bGwsXG4gIHNlY3VyZSA9IGZhbHNlXG4pOiBUIGV4dGVuZHMgbnVsbCA/IG51bGwgOiBzdHJpbmcgPT5cbiAgdmFsdWUgPT0gbmlsXG4gICAgPyBuaWxcbiAgICA6ICgoc2VjdXJlID8gaHR0cEVuY3J5cHQgOiBodHRwRW5jb2RlKShcbiAgICAgICAgc291cmNlSWQgfHwgZXhwaXJlc1xuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAkOiBbXG4gICAgICAgICAgICAgICAgdmFsdWUgYXMgYW55LFxuICAgICAgICAgICAgICAgIGV4cGlyZXMsIC8vIElmIHRoZXJlIGlzIGEgc291cmNlIElEIHdlIG5lZWQgYSB2YWx1ZSB0byBrZWVwIHRoZSBhcnJheSBsZW5ndGguXG4gICAgICAgICAgICAgICAgc291cmNlSWQsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB2YWx1ZVxuICAgICAgKSBhcyBhbnkpO1xuXG5sZXQgZGVjb2RlZDogYW55LCBleHBpcmVzOiBudW1iZXI7XG5jb25zdCBkZXNlcmlhbGl6ZSA9IDxUIGV4dGVuZHMgRW5jb2RhYmxlID0gRW5jb2RhYmxlPihcbiAgdmFsdWU6IHN0cmluZyB8IG51bGwsXG4gIHJlbW92ZUV4cGlyZWQ/OiAoKSA9PiB2b2lkLFxuICBzZWN1cmUgPSBmYWxzZVxuKTogU3RvcmFnZUVudHJ5PFQ+IHwgbnVsbCA9PlxuICAhdmFsdWUgLyogaW5jbHVkaW5nIGVtcHR5IHN0cmluZyAqL1xuICAgID8gbmlsXG4gICAgOiAoKGRlY29kZWQgPSAoc2VjdXJlID8gaHR0cERlY3J5cHQgOiBodHRwRGVjb2RlKSh2YWx1ZSkpLFxuICAgICAgZGVjb2RlZC4kXG4gICAgICAgID8gKCgoZXhwaXJlcyA9ICsoKGRlY29kZWQgPSBkZWNvZGVkLiQpWzFdID8/IDApKSxcbiAgICAgICAgICBleHBpcmVzID4gMCAmJiBleHBpcmVzIDwgbm93KEYpXG4gICAgICAgICAgICA/IChyZW1vdmVFeHBpcmVkPy4oKSwgbmlsKVxuICAgICAgICAgICAgOiBbZGVjb2RlZFswXSwgZXhwaXJlcywgZGVjb2RlZFsyXV0pIGFzIFN0b3JhZ2VFbnRyeTxhbnk+KVxuICAgICAgICA6IFtkZWNvZGVkXSk7XG5cbnR5cGUgU3RvcmFnZURlbHRhID0ge1xuICBrZXk6IHN0cmluZyB8IG51bGw7XG4gIG5ld1ZhbHVlOiBzdHJpbmcgfCBudWxsO1xuICBvbGRWYWx1ZTogc3RyaW5nIHwgbnVsbDtcbn07XG5cbnR5cGUgRGVsdGFFdmVudE1hcHBlciA9IChcbiAgbGlzdGVuZXI6IChkZWx0YTogU3RvcmFnZURlbHRhKSA9PiB2b2lkLFxuICByZW1vdmU/OiBib29sZWFuXG4pID0+IHZvaWQ7XG5cbmxldCBlbnRyeTogU3RvcmFnZUVudHJ5PEVuY29kYWJsZT4gfCBudWxsO1xubGV0IG9sZEVudHJ5OiBTdG9yYWdlRW50cnk8RW5jb2RhYmxlPiB8IG51bGw7XG5jb25zdCBzdG9yYWdlOiB7XG4gIChzdG9yYWdlOiBTaW1wbGVTdG9yYWdlKTogU3RvcmFnZUFjY2VzcztcbiAgKFxuICAgIHN0b3JhZ2U6IFNpbXBsZVN0b3JhZ2UsXG4gICAgcmVnaXN0ZXI/OiBEZWx0YUV2ZW50TWFwcGVyLFxuICAgIHNlY3VyZT86IGJvb2xlYW5cbiAgKTogT2JzZXJ2YWJsZVN0b3JhZ2VBY2Nlc3M7XG59ID0gKFxuICBzdG9yYWdlOiBTaW1wbGVTdG9yYWdlLFxuICByZWdpc3Rlcj86IERlbHRhRXZlbnRNYXBwZXIsXG4gIHNlY3VyZT86IGJvb2xlYW5cbik6IE9ic2VydmFibGVTdG9yYWdlQWNjZXNzID0+IHtcbiAgY29uc3Qgc291cmNlSWQgPSByZWdpc3RlciA/IFRBQl9JRCA6IHVuZGVmaW5lZDtcbiAgY29uc3QgcmVtb3ZlRXhwaXJlZCA9IChrZXk6IHN0cmluZyB8IG51bGwpID0+ICgpID0+XG4gICAga2V5ICYmIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXG4gIGNvbnN0IG93bkxpc3RlbmVycyA9IG5ldyBTZXQ8U3RvcmFnZUl0ZW1MaXN0ZW5lcj4oKTtcbiAgY29uc3QgYWNjZXNzb3IgPSBPYmplY3QuYXNzaWduKChhcmcwOiBhbnksIGFyZzE/OiBhbnksIGFyZzI/OiBhbnkpOiBhbnkgPT4ge1xuICAgIGlmIChmdW4oYXJnMCkpIHtcbiAgICAgIGlmICghcmVnaXN0ZXIpIHJldHVybjtcbiAgICAgIC8vIExpc3RlbmVyLlxuICAgICAgY29uc3QgW2lubmVySGFuZGxlciwgdHJpZ2dlclNlbGYgPSBGXSA9IFthcmcwLCBhcmcxXSBhcyBbXG4gICAgICAgIFN0b3JhZ2VJdGVtTGlzdGVuZXIsXG4gICAgICAgIGJvb2xlYW5cbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IGhhbmRsZXI6IFN0b3JhZ2VJdGVtTGlzdGVuZXIgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBsZXQgcmVzID0gaW5uZXJIYW5kbGVyKC4uLmFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzID09PSBGICYmIHVubGlzdGVuPy4oKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKHsga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUgfTogU3RvcmFnZUV2ZW50KTogYW55ID0+IChcbiAgICAgICAgKChlbnRyeSA9IGRlc2VyaWFsaXplKG5ld1ZhbHVlLCByZW1vdmVFeHBpcmVkKGtleSksIHNlY3VyZSkpLFxuICAgICAgICAob2xkRW50cnkgPSBkZXNlcmlhbGl6ZShvbGRWYWx1ZSwgdW5kZWZpbmVkLCBzZWN1cmUpKSksXG4gICAgICAgIGtleSAmJlxuICAgICAgICAgIGhhbmRsZXIoXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBlbnRyeT8uWzBdID8/IG5pbCxcbiAgICAgICAgICAgIG9sZEVudHJ5Py5bMF0gPz8gbmlsLFxuICAgICAgICAgICAgZW50cnk/LlsyXSA/PyBuaWxcbiAgICAgICAgICApXG4gICAgICApO1xuXG4gICAgICBsZXQgdW5saXN0ZW4gPSAoKSA9PiAoXG4gICAgICAgICh1bmxpc3RlbiA9IG5pbCEpLCByZWdpc3RlcihsaXN0ZW5lciwgVCksIG93bkxpc3RlbmVycy5kZWxldGUoaGFuZGxlcilcbiAgICAgICk7XG5cbiAgICAgIHJlZ2lzdGVyKGxpc3RlbmVyKTtcblxuICAgICAgdHJpZ2dlclNlbGYgJiYgb3duTGlzdGVuZXJzLmFkZChoYW5kbGVyKTtcbiAgICAgIHJldHVybiB1bmxpc3RlbjtcbiAgICB9XG4gICAgbGV0IFtrZXksIHZhbHVlLCB0aW1lb3V0ID0gMF0gPSBbYXJnMCwgYXJnMSwgYXJnMl0gYXMgW1xuICAgICAgc3RyaW5nLFxuICAgICAgRW5jb2RhYmxlIHwgKChjdXJyZW50OiBhbnkpID0+IGFueSkgfCB1bmRlZmluZWQsXG4gICAgICBudW1iZXJcbiAgICBdO1xuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGdldFxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVzZXJpYWxpemUoc3RvcmFnZS5nZXRJdGVtKGtleSksIHJlbW92ZUV4cGlyZWQoa2V5KSwgc2VjdXJlKT8uWzBdID8/XG4gICAgICAgIG5pbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZnVuKHZhbHVlKSkge1xuICAgICAgLy91cGRhdGVcbiAgICAgIHJldHVybiBhY2Nlc3NvcihrZXksIHZhbHVlKGFjY2Vzc29yKGtleSkpLCB0aW1lb3V0KTtcbiAgICB9XG5cbiAgICAvLyBzZXRcbiAgICBjb25zdCBkYXRhID1cbiAgICAgIHZhbHVlID09IG5pbCB8fCB0aW1lb3V0IDwgMFxuICAgICAgICA/IG5pbFxuICAgICAgICA6IHNlcmlhbGl6ZShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdGltZW91dCAmJiAhc3RvcmFnZS5zdXBwb3J0c0V4cGlyeSA/IG5vdyhUKSArIHRpbWVvdXQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzb3VyY2VJZCxcbiAgICAgICAgICAgIHNlY3VyZVxuICAgICAgICAgICk7XG5cbiAgICBkYXRhID09IG5pbFxuICAgICAgPyBzdG9yYWdlPy5yZW1vdmVJdGVtKGtleSlcbiAgICAgIDogc3RvcmFnZT8uc2V0SXRlbShrZXksIGRhdGEsIHRpbWVvdXQgPiAwID8gdGltZW91dCA6IHVuZGVmaW5lZCk7XG5cbiAgICBvd25MaXN0ZW5lcnMuc2l6ZSAmJlxuICAgICAgKCgoZW50cnkgPSBkZXNlcmlhbGl6ZShkYXRhLCB1bmRlZmluZWQsIHNlY3VyZSkpLFxuICAgICAgKG9sZEVudHJ5ID0gZGVzZXJpYWxpemUoc3RvcmFnZS5nZXRJdGVtKGtleSksIHVuZGVmaW5lZCwgc2VjdXJlKSkpLFxuICAgICAgb3duTGlzdGVuZXJzLmZvckVhY2goKGhhbmRsZXIpID0+XG4gICAgICAgIGhhbmRsZXIoa2V5LCBlbnRyeT8uWzBdID8/IG5pbCwgb2xkRW50cnk/LlswXSA/PyBuaWwsIGVudHJ5Py5bMl0gPz8gbmlsKVxuICAgICAgKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFjY2Vzc29yO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvb2tpZVN0b3JhZ2U6IFNpbXBsZVN0b3JhZ2UgPSB7XG4gIGdldEl0ZW06IChrZXkpID0+IChcbiAgICAoa2V5ID0gZW5jb2RlKGtleSkpLFxuICAgIGRlY29kZShcbiAgICAgIGRvY3VtZW50LmNvb2tpZVxuICAgICAgICAuc3BsaXQoXCI7XCIpXG4gICAgICAgIC5tYXAoKGt2KSA9PiBrdi5zcGxpdChcIj1cIikpXG4gICAgICAgIC5maW5kKChrdikgPT4ga3ZbMF0udHJpbSgpID09PSBrZXkpPy5bMV0gfHwgbmlsXG4gICAgKVxuICApLFxuICBzZXRJdGVtOiAoa2V5LCB2YWx1ZSwgbWF4QWdlKSA9PlxuICAgIChkb2N1bWVudC5jb29raWUgPSBgJHtlbmNvZGUoa2V5KX09JHtlbmNvZGUoXG4gICAgICB2YWx1ZSA/PyBcIlwiXG4gICAgKX07IFBhdGg9LzsgU2FtZVNpdGU9TGF4JHtcbiAgICAgICF2YWx1ZSB8fCBtYXhBZ2UgIT0gbmlsXG4gICAgICAgID8gYDsgTWF4LUFnZT0ke01hdGgucm91bmQoKG1heEFnZSA/PyAwKSAvIDEwMDApfWBcbiAgICAgICAgOiBcIlwiXG4gICAgfWApLFxuXG4gIHJlbW92ZUl0ZW06IChrZXkpID0+IGNvb2tpZVN0b3JhZ2Uuc2V0SXRlbShrZXksIFwiXCIsIDApLFxuXG4gIHN1cHBvcnRzRXhwaXJ5OiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IG1lbW9yeSA9IHN0b3JhZ2UobWVtb3J5U3RvcmFnZSgpKTtcbmV4cG9ydCBjb25zdCBjb29raWVzID0gc3RvcmFnZShjb29raWVTdG9yYWdlKTtcbmV4cG9ydCBjb25zdCBzZWN1cmVDb29raWVzID0gc3RvcmFnZShjb29raWVTdG9yYWdlLCB1bmRlZmluZWQsIHRydWUpO1xuZXhwb3J0IGNvbnN0IHNlc3Npb24gPSBzdG9yYWdlKHNlc3Npb25TdG9yYWdlKTtcbmV4cG9ydCBjb25zdCBzaGFyZWQgPSBzdG9yYWdlKFxuICBsb2NhbFN0b3JhZ2UsXG4gIChsaXN0ZW5lciwgcmVtb3ZlKSA9PlxuICAgIHJlbW92ZVxuICAgICAgPyB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgbGlzdGVuZXIpXG4gICAgICA6IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLCBsaXN0ZW5lciksXG4gIHRydWVcbik7XG5leHBvcnQgY29uc3QgYmluZCA9IDxUIGV4dGVuZHMgRW5jb2RhYmxlID0gRW5jb2RhYmxlPihcbiAgc3RvcmFnZTogU3RvcmFnZUFjY2VzcyxcbiAga2V5OiBzdHJpbmcsXG4gIHVzZVNoYXJlZElkID0gVFxuKTogTWFwcGVkU3RvcmFnZUFjY2VzczxUPiA9PiB7XG4gIHVzZVNoYXJlZElkICYmIChrZXkgPSBtYXBTaGFyZWRJZChrZXkpKTtcbiAgcmV0dXJuICguLi5hcmdzOiBhbnlbXSkgPT4gKHN0b3JhZ2UgYXMgYW55KShrZXksIC4uLmFyZ3MpO1xufTtcblxuZXhwb3J0IHR5cGUgU2hhcmVkUXVldWU8VCBleHRlbmRzIEVuY29kYWJsZSA9IEVuY29kYWJsZT4gPSB7XG4gIChpdGVtOiBULCByZXBsYWNlPzogYm9vbGVhbik6ICgpID0+IGJvb2xlYW47XG4gICgpOiBUIHwgbnVsbDtcbn07XG5leHBvcnQgY29uc3Qgc2hhcmVkUXVldWUgPSA8VCBleHRlbmRzIEVuY29kYWJsZT4oXG4gIGtleTogc3RyaW5nLFxuICBrZXlFeHBpcnkgPSAyMDAwLFxuICB1c2VTaGFyZWRJZCA9IFRcbik6IFNoYXJlZFF1ZXVlPFQ+ID0+IHtcbiAgY29uc3QgcXVldWUgPSBiaW5kPFtpdGVtOiBULCBleHBpcmVzOiBudW1iZXJdW10+KHNoYXJlZCwga2V5LCB1c2VTaGFyZWRJZCk7XG4gIHJldHVybiAoaXRlbT86IFQsIHJlcGxhY2UgPSBGKTogYW55ID0+IHtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBHZXRcbiAgICAgIGxldCBtYXRjaDogVCB8IG51bGwgPSBuaWw7XG4gICAgICBxdWV1ZSgoY3VycmVudCkgPT4ge1xuICAgICAgICBjdXJyZW50ID0gZmlsdGVyKGN1cnJlbnQsIChpdGVtKSA9PiBpdGVtWzFdID4gbm93KCkpO1xuICAgICAgICBtYXRjaCA9IHNoaWZ0KGN1cnJlbnQpPy5bMF0gPz8gbmlsO1xuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG4gICAgbGV0IGV4aXN0cyA9IFQ7XG5cbiAgICBjb25zdCB1cGRhdGVRdWV1ZSA9IChyZXBsYWNlOiBib29sZWFuKSA9PlxuICAgICAgcXVldWUoKGN1cnJlbnQpID0+XG4gICAgICAgIHJlcGxhY2VcbiAgICAgICAgICA/IG1hcChjdXJyZW50LCAob3RoZXIpID0+XG4gICAgICAgICAgICAgIG90aGVyWzBdID09PSBpdGVtXG4gICAgICAgICAgICAgICAgPyAoKGV4aXN0cyA9IFQpLCBbaXRlbSwgbm93KCkgKyBrZXlFeHBpcnldKVxuICAgICAgICAgICAgICAgIDogKG90aGVyIGFzIGFueSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHB1c2goY3VycmVudCA/PyBbXSwgW2l0ZW0sIG5vdygpICsga2V5RXhwaXJ5XSkhXG4gICAgICApO1xuXG4gICAgdXBkYXRlUXVldWUocmVwbGFjZSk7XG4gICAgaWYgKGtleUV4cGlyeSkge1xuICAgICAgbGV0IHBvbGwgPSB0aW1lb3V0KCk7XG4gICAgICBjb25zdCByZWZyZXNoS2V5ID0gKCkgPT4gKHVwZGF0ZVF1ZXVlKFQpLCAhZXhpc3RzICYmIHBvbGwoKSwgZXhpc3RzKTtcblxuICAgICAgcG9sbChyZWZyZXNoS2V5LCAta2V5RXhwaXJ5IC8gMik7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiBleGlzdHM7XG4gIH07XG59O1xuIiwiaW1wb3J0IHsgVHJhY2tlZEV2ZW50IH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIFQsXG4gIGFueSxcbiAgZGVsLFxuICBmaWx0ZXIsXG4gIGdldCxcbiAgZ2V0T3JTZXQsXG4gIGhhc2hNYXAsXG4gIGhhc2hTZXQsXG4gIG1hcCxcbiAgc2V0LFxufSBmcm9tIFwiLlwiO1xuXG5jb25zdCBkZXBlbmRlbmNpZXMgPSBTeW1ib2woKTtcblxuY29uc3QgY2xlYXJlZCA9IGhhc2hTZXQ8VHJhY2tlZEV2ZW50PigpO1xuXG4vLyBJZiBhbiBldmVudCByZWZlcnMgdG8gYW5vdGhlciBldmVudCBpdCB3aWxsIG5vdCBnZXQgcG9zdGVkIGJlZm9yZSB0aGF0IGlzIHBvc3RlZC5cbi8vIFRoYXQgYWxzbyBtZWFucyB0aGF0IGlmIHRoZSByZWZlcnJlZCBldmVudCBpcyBuZXZlciBwb3N0ZWQsIG5laXRoZXIgaXMgdGhlIGV2ZW50LlxuLy8gVE9ETzogRXZhbHVhdGUgaWYgdGhpcyBtYXkgY2F1c2UgYSBtZW1vcnkgbGVhay5cbmNvbnN0IHBlbmRpbmdEZXBlbmRlbmNpZXMgPSBoYXNoTWFwPFRyYWNrZWRFdmVudCwgU2V0PFRyYWNrZWRFdmVudD4+KCk7XG5jb25zdCBhcmVBbGxEZXBlbmRlbmNpZXNQb3N0ZWQgPSAoZXY6IFRyYWNrZWRFdmVudCkgPT5cbiAgIWFueShldltkZXBlbmRlbmNpZXNdLCAoZGVwKSA9PiAhZ2V0KGNsZWFyZWQsIGRlcCkpO1xuXG5leHBvcnQgY29uc3QgaGFzRGVwZW5kZW5jaWVzID0gKGV2ZW50OiBUcmFja2VkRXZlbnQpID0+XG4gICFhcmVBbGxEZXBlbmRlbmNpZXNQb3N0ZWQoZXZlbnQpICYmXG4gIChtYXAoZXZlbnRbZGVwZW5kZW5jaWVzXSwgKGRlcCkgPT5cbiAgICBzZXQoXG4gICAgICBnZXRPclNldChwZW5kaW5nRGVwZW5kZW5jaWVzLCBkZXAsICgpID0+IGhhc2hTZXQoKSksXG4gICAgICBldmVudFxuICAgIClcbiAgKSxcbiAgVCk7XG5cbmxldCBzdGFsbGVkOiBTZXQ8VHJhY2tlZEV2ZW50PiB8IE51bGxpc2g7XG5leHBvcnQgY29uc3QgY29tcGxldGVEZXBlbmRlbmN5ID0gKGV2ZW50OiBUcmFja2VkRXZlbnQpID0+IChcbiAgc2V0KGNsZWFyZWQsIGV2ZW50KSxcbiAgKHN0YWxsZWQgPSBwZW5kaW5nRGVwZW5kZW5jaWVzLmdldChldmVudCkpICYmIC8vIEZyZWUgbWVtb3J5IHdoZW4gYWxsIGRlcGVuZGFudCBldmVudHMgYXJlIGNsZWFyZWRcbiAgICAoIXN0YWxsZWQuc2l6ZSAmJiBkZWwocGVuZGluZ0RlcGVuZGVuY2llcywgZXZlbnQpLFxuICAgIGZpbHRlcihcbiAgICAgIHN0YWxsZWQsXG4gICAgICAoZGVwKSA9PiBhcmVBbGxEZXBlbmRlbmNpZXNQb3N0ZWQoZGVwKSAmJiAoZGVsKHN0YWxsZWQhLCBkZXApLCBUKVxuICAgICkpXG4pO1xuXG5leHBvcnQgY29uc3QgYWRkRGVwZW5kZW5jeSA9IChcbiAgZXZlbnQ6IFRyYWNrZWRFdmVudCxcbiAgZGVwZW5kZW5jeTogVHJhY2tlZEV2ZW50XG4pID0+IChcbiAgZXZlbnQgIT09IGRlcGVuZGVuY3kgJiZcbiAgICAoKGV2ZW50W2RlcGVuZGVuY2llc10gPz89IFtdKS5wdXNoKGRlcGVuZGVuY3kpIGFzIGFueSksXG4gIGV2ZW50XG4pO1xuIiwiaW1wb3J0IHR5cGUgeyBOdWxsaXNoIH0gZnJvbSBcIkB0YWlsanMvdXRpbFwiO1xuaW1wb3J0IHtcbiAgRixcbiAgSnNvbixcbiAgVCxcbiAgVEFCX0lELFxuICBkZWZlcixcbiAgZmlsdGVyLFxuICBmdW4sXG4gIG1hcCxcbiAgbWFwU2hhcmVkSWQsXG4gIG5pbCxcbiAgc2hhcmVkLFxuICBzaGlmdCxcbiAgc2l6ZSxcbn0gZnJvbSBcIi5cIjtcblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlSGFuZGxlcjxUIGV4dGVuZHMgSnNvbiA9IEpzb24+IHtcbiAgKHZhbHVlOiBFeGNsdWRlPFQsIG51bGw+LCBzb3VyY2VJZDogc3RyaW5nLCBkaXJlY3Q6IGJvb2xlYW4pOiBib29sZWFuIHwgdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgTWVzc2FnZVNvdXJjZSA9IFtzb3VyY2VJZDogc3RyaW5nLCBkaXJlY3Q6IGJvb2xlYW4sIHNlbGY6IHN0cmluZ107XG5cbnR5cGUgSGFuZGxlckFyZ3M8Rj4gPSBGIGV4dGVuZHMgKFxuICBzb3VyY2U6IE1lc3NhZ2VTb3VyY2UsXG4gIC4uLmFyZ3M6IGluZmVyIEFcbikgPT4gdm9pZFxuICA/IEFcbiAgOiBuZXZlcjtcblxudHlwZSBFeHRyYWN0TWVzc2FnZVR5cGVzPFQ+ID0gVCBleHRlbmRzIHtcbiAgW2tleSBpbiBpbmZlciBLXTogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xufVxuICA/IEsgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXJcbiAgICA/IFtLLCAuLi5IYW5kbGVyQXJnczxUW0tdPl1cbiAgICA6IG5ldmVyXG4gIDogbmV2ZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbm5lbDxEZWZhdWx0IGV4dGVuZHMgSnNvbiA9IEpzb24+IHtcbiAgPFQgZXh0ZW5kcyBEZWZhdWx0PihoYW5kbGVyOiBNZXNzYWdlSGFuZGxlcjxUPiwgc2VsZj86IGJvb2xlYW4pOiAoKSA9PlxuICAgIHwgdm9pZFxuICAgIHwgYm9vbGVhbjtcbiAgPFQgZXh0ZW5kcyBEZWZhdWx0PihkYXRhOiBULCAuLi50YXJnZXRJZHM6IChzdHJpbmcgfCBOdWxsaXNoKVtdKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNoYW5uZWw6IHtcbiAgPFQgZXh0ZW5kcyBKc29uID0gSnNvbj4oaWQ6IHN0cmluZyk6IENoYW5uZWw8VD47XG4gIDxcbiAgICBIYW5kbGVycyBleHRlbmRzIFJlY29yZDxcbiAgICAgIHN0cmluZyB8IG51bWJlcixcbiAgICAgIChzb3VyY2U6IE1lc3NhZ2VTb3VyY2UsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkXG4gICAgPlxuICA+KFxuICAgIGlkOiBzdHJpbmcsXG4gICAgaGFuZGxlcnM6IEhhbmRsZXJzLFxuICAgIHNlbGY/OiBib29sZWFuXG4gICk6IENoYW5uZWw8RXh0cmFjdE1lc3NhZ2VUeXBlczxIYW5kbGVycz4+O1xufSA9IChpZDogYW55LCBoYW5kbGVycz86IGFueSwgc2VsZj86IGFueSk6IGFueSA9PiB7XG4gIGlkID0gbWFwU2hhcmVkSWQoYGNfJHtpZH1gKTtcbiAgY29uc3QgY2hhbm5lbEtleSA9IGlkO1xuXG4gIGNvbnN0IGdldFRhcmdldEtleSA9ICh0YXJnZXRJZDogc3RyaW5nKSA9PiBgJHtpZH0hJHt0YXJnZXRJZH1gO1xuICBjb25zdCBvd25LZXkgPSBnZXRUYXJnZXRLZXkoVEFCX0lEKTtcblxuICBjb25zdCBjaGFubmVsID0gKGFyZzA6IGFueSwgLi4ucmVzdDogYW55W10pOiBhbnkgPT4ge1xuICAgIGxldCBjbGVhcmVkID0gVDtcbiAgICBpZiAoZnVuKGFyZzApKSB7XG4gICAgICAvLyBBZGQgbGlzdGVuZXIuXG4gICAgICByZXR1cm4gc2hhcmVkKChrZXksIHZhbHVlLCBfLCBzb3VyY2VJZCkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdmFsdWUgIT0gbmlsICYmXG4gICAgICAgICAgc291cmNlSWQgJiZcbiAgICAgICAgICAoa2V5ID09PSBjaGFubmVsS2V5IHx8IGtleSA9PT0gb3duS2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSAoYXJnMCBhcyBNZXNzYWdlSGFuZGxlcikoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHNvdXJjZUlkLFxuICAgICAgICAgICAga2V5ID09PSBvd25LZXlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gRjtcbiAgICAgICAgfVxuICAgICAgfSwgKHJlc3RbMF0gPz8gc2VsZikgPT09IFQpO1xuICAgIH1cbiAgICByZXN0ID0gZmlsdGVyKHJlc3QpO1xuXG4gICAgbWFwKHNpemUocmVzdCkgPyBtYXAocmVzdCwgZ2V0VGFyZ2V0S2V5KSA6IFtpZF0sIChkZXN0aW5hdGlvbktleSkgPT4ge1xuICAgICAgY2xlYXJlZCA9IEY7XG4gICAgICBzaGFyZWQoZGVzdGluYXRpb25LZXksIGFyZzApO1xuICAgICAgZGVmZXIoKCkgPT4gY2xlYXJlZCAhPT0gKGNsZWFyZWQgPSBUKSAmJiBzaGFyZWQoZGVzdGluYXRpb25LZXksIG5pbCkpO1xuICAgIH0pO1xuICB9O1xuXG4gIGlmIChoYW5kbGVycykge1xuICAgIGNoYW5uZWwoKHZhbHVlOiBhbnksIHNvdXJjZUlkOiBzdHJpbmcsIGRpcmVjdDogYm9vbGVhbikgPT5cbiAgICAgIGhhbmRsZXJzW3NoaWZ0KHZhbHVlKSBhcyBhbnldPy4oXG4gICAgICAgIFtzb3VyY2VJZCwgZGlyZWN0LCBzb3VyY2VJZCA9PT0gVEFCX0lEXSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiaW1wb3J0IHtcbiAgRVJSX0RVUFBMSUNBVEVfS0VZLFxuICBGLFxuICBULFxuICBjcmVhdGVDaGFubmVsLFxuICBlbnRyaWVzLFxuICBlcnIsXG4gIGV2ZW50U2V0LFxuICBmcm9tRW50cmllcyxcbiAgbGlzdGVuLFxuICByZWdpc3RlclN0YXJ0dXBIYW5kbGVyLFxuICB0aW1lb3V0LFxufSBmcm9tIFwiLlwiO1xuXG5jb25zdCBnbG9iYWxTdGF0ZUNoYW5uZWwgPSBjcmVhdGVDaGFubmVsPDEgfCAyIHwgMyB8IFJlY29yZDxzdHJpbmcsIGFueT4+KFwic3NcIik7XG5jb25zdCBnbG9iYWxTdGF0ZVJlc29sdmVyczogUmVjb3JkPHN0cmluZywgWygpID0+IGFueSwgKHZhbHVlOiBhbnkpID0+IHZvaWRdPiA9XG4gIHt9O1xuXG5jb25zdCBbbGlzdGVuZXJzLCBjYWxsTGlzdGVuZXJzXSA9IGV2ZW50U2V0KHRydWUpO1xuXG5leHBvcnQgeyBsaXN0ZW5lcnMgYXMgYWRkR2xvYmFsU3RhdGVSZXNvbHZlZExpc3RlbmVyIH07XG5cbmV4cG9ydCBsZXQgZ2xvYmFsU3RhdGVSZXNvbHZlZCA9IEY7XG5jb25zdCByZXNvbHZlVGltZW91dCA9IHRpbWVvdXQoKTtcblxuZXhwb3J0IGNvbnN0IGFib3J0R2xvYmFsU3RhdGVSZXNvbHZlID0gKCkgPT4gKHJlc29sdmVUaW1lb3V0LmZpbmlzaCgpLCBUKTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyU2hhcmVkU3RhdGUgPSA8VD4oXG4gIGtleTogc3RyaW5nLFxuICByZXNvbHZlOiAoKSA9PiBULFxuICBhcHBseTogKHZhbHVlOiBUIHwgdW5kZWZpbmVkKSA9PiB2b2lkXG4pOiAoKHVwZGF0ZWRWYWx1ZTogVCkgPT4gdm9pZCkgPT4gKFxuICBnbG9iYWxTdGF0ZVJlc29sdmVyc1trZXldXG4gICAgPyBlcnIoRVJSX0RVUFBMSUNBVEVfS0VZLCBrZXkpXG4gICAgOiAoZ2xvYmFsU3RhdGVSZXNvbHZlcnNba2V5XSA9IFtyZXNvbHZlLCBhcHBseV0pLFxuICAodmFsdWUpID0+IGdsb2JhbFN0YXRlQ2hhbm5lbCh7IFtrZXldOiB2YWx1ZSB9KVxuKTtcblxucmVnaXN0ZXJTdGFydHVwSGFuZGxlcigoKSA9PiB7XG4gIHJlc29sdmVUaW1lb3V0KCgpID0+ICgoZ2xvYmFsU3RhdGVSZXNvbHZlZCA9IFQpLCBjYWxsTGlzdGVuZXJzKCkpLCA3NSk7XG4gIGxldCBoYXNSZXNwb25zZSA9IEY7XG4gIGdsb2JhbFN0YXRlQ2hhbm5lbCgocGF5bG9hZCwgc291cmNlKSA9PlxuICAgIHBheWxvYWQgPT09IDEgLy8gQXNrIG91dFxuICAgICAgPyBnbG9iYWxTdGF0ZUNoYW5uZWwoMiwgc291cmNlKSAvLyBPZmZlciBzdGF0ZVxuICAgICAgOiBwYXlsb2FkID09PSAyXG4gICAgICA/IC8vIEFjY2VwdCBzdGF0ZSBvbmNlLlxuICAgICAgICAoaGFzUmVzcG9uc2UgIT09IChoYXNSZXNwb25zZSA9IFQpICYmIGdsb2JhbFN0YXRlQ2hhbm5lbCgzLCBzb3VyY2UpLCBUKVxuICAgICAgOiAvLyBXZSBnb3QgcGlja2VkIGZvciBzaGFyaW5nIHRoZSBzdGF0ZVxuICAgICAgcGF5bG9hZCA9PT0gM1xuICAgICAgPyBnbG9iYWxTdGF0ZUNoYW5uZWwoXG4gICAgICAgICAgZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBlbnRyaWVzKGdsb2JhbFN0YXRlUmVzb2x2ZXJzLCAoW2tleSwgW3Jlc29sdmVdXSkgPT4gW1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHJlc29sdmUoKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBzb3VyY2VcbiAgICAgICAgKVxuICAgICAgOiAvLyBBcHBseSBzdGF0ZVxuICAgICAgICAoZW50cmllcyhnbG9iYWxTdGF0ZVJlc29sdmVycywgKFtrZXksIFssIGFwcGx5XV0pID0+XG4gICAgICAgICAgYXBwbHkocGF5bG9hZFtrZXldKVxuICAgICAgICApLFxuICAgICAgICByZXNvbHZlVGltZW91dC5maW5pc2goKSlcbiAgKTtcbiAgLy8gUGluZyBvbiB3YWtldXBcbiAgZ2xvYmFsU3RhdGVDaGFubmVsKDEpO1xuXG4gIGxpc3Rlbih3aW5kb3csIFwicGFnZXNob3dcIiwgKCkgPT4gIWhhc1Jlc3BvbnNlICYmIGdsb2JhbFN0YXRlQ2hhbm5lbCgxKSk7XG4gIGxpc3Rlbih3aW5kb3csIFwicGFnZWhpZGVcIiwgKCkgPT4gKGhhc1Jlc3BvbnNlID0gRikpO1xufSk7XG4iLCJpbXBvcnQge1xuICBFeHBpcmVkLFxuICBGLFxuICBNQVhfU0FGRV9JTlRFR0VSLFxuICBPcGVuUHJvbWlzZSxcbiAgT3BlblByb21pc2VXaXRoVGltZW91dCxcbiAgUmVzZXQsXG4gIFQsXG4gIFRBQl9JRCxcbiAgVGFiSWQsXG4gIGFueSxcbiAgY2xlYXIsXG4gIGNyZWF0ZUNoYW5uZWwsXG4gIGRlYnVnLFxuICBkZWZlcixcbiAgZGVsLFxuICBkZWxheSxcbiAgZW50cmllcyxcbiAgZm9ybWF0RHVyYXRpb24sXG4gIGdldE1pblRhYklkLFxuICBrZXlzLFxuICBsaXN0ZW4sXG4gIG5pbCxcbiAgbm93LFxuICBvcGVuUHJvbWlzZSxcbiAgcHVzaCxcbiAgcmVnaXN0ZXJTdGFydHVwSGFuZGxlcixcbiAgc2l6ZSxcbiAgc3BsaWNlLFxuICB0aW1lb3V0LFxuICB0cmFja2VyQ29uZmlnLFxuICB0cnlBc3luYyxcbiAgdmFsdWVzLFxuICB3aW5kb3csXG59IGZyb20gXCIuXCI7XG5cbnR5cGUgRGF0YSA9IGFueTtcbnR5cGUgQWN0aW9uSWQgPSBzdHJpbmc7XG5cbi8vIEFmdGVyIHRoaXMgYW1vdW50IG9mIG1zIGl0IGlzIGFzc3VtZWQgc2FmZSB0aGF0IGFsbCB0YWJlIGhhdmUgcmVjZWl2ZWQgYSBtZXNzYWdlIHNlbnQgZnJvbSBhbnkgb3RoZXIgdGFiLlxuY29uc3QgTUFYX01FU1NBR0VfREVMQVkgPSAyNTtcbmNvbnN0IENMT1NFRF9UQUJfVElNRU9VVCA9IDUwMDsgLy8gQWZ0ZXIgdGhpcyBkdXJhdGlvbiBhIGNsb3NlZCB0YWIgaXMgY29uc2lkZXJlZCBnb25lLlxuXG5leHBvcnQgdHlwZSBDb21taXRBY3Rpb248RGF0YSA9IGFueT4gPSAoXG4gIGRhdGE6IERhdGFbXSxcbiAgY3JpdGljYWw6IGJvb2xlYW5cbikgPT4gUHJvbWlzZTxib29sZWFuIHwgdm9pZD47XG5cbmV4cG9ydCB0eXBlIEV4aXRBY3Rpb24gPSAodGVybWluYXRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbmNvbnN0IGVudW0gTWVzc2FnZVR5cGUge1xuICAvKipcbiAgICogSW5mb3JtcyBvdGhlciB0YWJzIHRoYXQgYSBuZXcgdGFiIGxvYWRlZCAoZWl0aGVyIGZyb20gYmYgY2FjaGUgb3IgZmlyc3QgbG9hZCkuXG4gICAqIFRoZSBvdGhlciB0YWJzIHdpbGwgcmVwbHkgd2l0aCB0aGUgc2FtZSBtZXNzYWdlIHRvIHRoZSBuZXcgdGFiIHNvIGl0IHdpbGwga25vdyBhYm91dCBhbGwgY3VycmVudCB0YWJzLlxuICAgKi9cbiAgTG9hZGVkID0gMSxcblxuICAvKipcbiAgICogSW5mb3JtcyBvdGhlciB0YWJzIHRoYXQgYSB0YWIgaXMgdW5sb2FkaW5nIChlaXRoZXIgdG8gYmYgY2FjaGUgb3IgZm9yIGdvb2QpLlxuICAgKiBXaGVuIGFsbCB0YWJzIGFyZSB1bmxvYWRpbmcgdGhlIGxhc3Qgb25lIHdpbGwgY29sbGVjdCBhbmQgY29tbWl0IHRoZWlyIHBlbmRpbmcgZGF0YS5cbiAgICpcbiAgICovXG4gIFVubG9hZGluZyA9IDIsXG5cbiAgLyoqXG4gICAqIEJyb2FkY2FzdHMgZXZlbnRzIHRoYXQgd2VyZSBjb2xsZWN0ZWQgaW4gdGhlIHRhYi5cbiAgICovXG4gIENvbGxlY3QgPSAzLFxuXG4gIC8qKlxuICAgKiBJbnN0cnVjdHMgYSB0YWIgdG8gY29vcmRpbmF0ZSBhIGNvbW1pdC4gSXQgd2lsbCBkbyBzbyBpZiBpdCBoYXMgdGhlIHNtYWxsZXN0IGtub3duIHRhYiBJRCwgb3RoZXJ3aXNlIGl0IHdpbGwgZm9yd2FyZCB0aGUgcmVxdWVzdFxuICAgKiB0byB0aGUgdGFiIGl0IHRoaW5rcyBoYXMgdGhlIHNtYWxsZXN0IElELlxuICAgKi9cbiAgQ29vcmRpbmF0ZSA9IDQsXG5cbiAgLyoqXG4gICAqIFRhYnMgd2lsbCBjbGVhciB0aGVpciBjb2xsZWN0ZWQgZGF0YSBvbiB0aGlzIG1lc3NhZ2UuIFRoZSB0YWIgdGhhdCBoYXMgdGhlIGNvb3JpZG5hdG9yIElEIHdpbGwgYWRkaXRpb25hbGx5IGNvbW1pdCBpdC5cbiAgICovXG4gIENvbW1pdCA9IDUsXG5cbiAgLyoqXG4gICAqIFRoZSB0YWIgcmVjZWl2ZWQgZm9jdXMuXG4gICAqL1xuICBBY3RpdmF0ZWQgPSA2LFxuXG4gIC8qKlxuICAgKiBUYWIgbG9zdCBmb2N1cy5cbiAgICovXG4gIERlYWN0aXZhdGVkID0gNyxcbn1cblxuZXhwb3J0IHR5cGUgQWN0aW9uSGFuZGxlciA9IFtjb21taXQ6IENvbW1pdEFjdGlvbiwgZXhpdD86IEV4aXRBY3Rpb25dO1xudHlwZSBBY3Rpb25TdGF0ZSA9IFtcbiAgY29sbGVjdGVkOiBEYXRhW10sXG4gIGNvbW1pdEhhbmRsZTogT3BlblByb21pc2VXaXRoVGltZW91dDxbc3VjY2VzczogYm9vbGVhbiwgaXRlbXM6IG51bWJlcl0+XG5dO1xuXG4vLyBUaGlzIGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBvcGVuIGFuZCBjbG9zaW5nIHRhYnMgc28gd2UgY2FuIGV2YWx1YXRlIHdoaWNoIHRhYnMgaGFzIHRoZSBzbWFsbGVzIElEICh3YXMgb3BlbmVkIGZpcnN0KS5cbi8vIFRoaXMgdGFiIG11c3QgYmUgdGhlIG9uZSBjb21pdHRpbmcgc2luY2UgaXQgaXMgdGhlIG9ubHkgb25lIHRoYXQgaXMgZ3VhcmFudGVlZCB0byBoYXZlIHNlZW4gYWxsIHByZXZpb3VzIHBvc3RzIGZvcm0gb3RoZXIgdGFicy5cbi8vIFRoaXMgYXBwcm9hY2ggY2FuIGFsc28gYmUgdGhvdWdodCBvZiBhcyBhbiBlZmZpY2llbnQgYWxnb3JpdGhtIGZvciBcImxlYWRlciBlbGVjdGlvblwiIHRvIHByZXZlbnQgbXVsdGlwbGUgdGFicyBtYWtpbmcgSFRUUCByZXF1ZXN0cyBhdCB0aGUgc2FtZSB0aW1lLlxuLy8gSW50ZXJsZWF2ZWQgSFRUUCByZXF1ZXN0cyBtdXN0IGJlIGF2b2lkZWQgc2luY2UgaXQgYnJlYWtzIHRoZSBzZXJ2ZXIgc3RhdGUgc3RvcmVkIGluIHRoZSBIVFRQIGNvb2tpZXMuXG4vL1xuLy8gSXQgY2Fubm90IGJlIHByZXZlbnRlZCB3aGVuIGFsbCB0YWJzIGFyZSBjbG9zaW5nIGFuZCBhbiBleGlzdGluZyByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gbWFkZSB0byBhIHNsb3cgc2VydmVyLlxuLy8gSW4gdGhpcyBjYXNlIHRoZSBjbGllbnQgZmxhZ3MgdGhlIHJlcXVlc3QgdG8gbGV0IHRoZSBzZXJ2ZXIga25vdyB0aGUgdGhlIHN0YXRlIHNob3VsZCBub3QgYmUgdXBkYXRlZCB3aXRoIHRoZSBmaW5hbCByZXF1ZXN0LlxuLy8gV2hlbiB0aGlzIGZpbmFsIHJhY2UtY29uZGl0aW9uIG9jY3VycyBpdCBpcyBhc3N1bWVkIF91bmxpa2VseV8gdGhhdCB0aGUgZmluYWwgcmVxdWVzdCB3aWxsIGNvbnRhaW4gb3RoZXIgZXZlbnRzIHRoYW4gXCJWSUVXX0VORFwiIGV2ZW50cyAobm8gXCJWSUVXXCIgZXZlbnRzIGluIHBhcnRpY3VsYXIpLFxuLy8gc28gdGhlIGJvb2sta2VlcGluZyBtYWRlIGZvciBzZXNzaW9uIGR1cmF0aW9uLCBudW1iZXIgb2Ygdmlld3MsICBwcmV2aW91cyBzZXNzaW9uIGV0Yy4gaXMgZXF1YWxseSBfdW5saWtlbHlfIHRvIGdldCBvdXQgb2Ygc3luYy5cbmNvbnN0IGtub3duVGFiczogUmVjb3JkPFxuICBUYWJJZCxcbiAgbnVtYmVyIHwgbnVsbCAvLyBJZiBjbG9zZWQsIGF0IHRpbWVzdGFtcCBmb3Igd2hlbiBpdCBoYXBwZW5lZC5cbj4gPSB7fTtcblxuY29uc3QgYWN0aW9uSGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIEFjdGlvbkhhbmRsZXI+ID0ge307XG5cbmxldCBsb2NhbERhdGE6IFJlY29yZDxBY3Rpb25JZCwgRGF0YVtdPiA9IHt9O1xuXG5jb25zdCBmbHVzaExvY2FsRGF0YSA9ICgpID0+IHtcbiAgY29uc3QgY3VycmVudERhdGEgPSBsb2NhbERhdGE7XG4gIGxvY2FsRGF0YSA9IHt9O1xuICByZXR1cm4gY3VycmVudERhdGE7XG59O1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyQWN0aW9uID0gPERhdGE+KFxuICBpZDogQWN0aW9uSWQsXG4gIC4uLmFjdGlvbkhhbmRsZXI6IEFjdGlvbkhhbmRsZXJcbik6IFtcbiAgcG9zdDogKC4uLmRhdGE6IERhdGFbXSkgPT4gdm9pZCxcbiAgY29tbWl0OiAoY3JpdGljYWw/OiBib29sZWFuKSA9PiBQcm9taXNlPG51bWJlcj5cbl0gPT4ge1xuICBhY3Rpb25IYW5kbGVyc1tpZF0gPSBhY3Rpb25IYW5kbGVyO1xuICByZXR1cm4gW1xuICAgICguLi5kYXRhKSA9PlxuICAgICAgc2l6ZShkYXRhKSAmJlxuICAgICAgKHB1c2goKGxvY2FsRGF0YVtpZF0gPz89IFtdKSwgLi4uZGF0YSksXG4gICAgICAhY2xvc2luZyAmJlxuICAgICAgICBkZWZlcihcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgc2l6ZShsb2NhbERhdGEpICYmIGNoYW5uZWwoW01lc3NhZ2VUeXBlLkNvbGxlY3QsIGZsdXNoTG9jYWxEYXRhKCldKVxuICAgICAgICApKSxcbiAgICAoKSA9PiBjb29yZGluYXRlQ29tbWl0KGlkKSxcbiAgXTtcbn07XG5cbmNvbnN0IGFjdGlvblN0YXRlczogUmVjb3JkPFRhYklkLCBBY3Rpb25TdGF0ZT4gPSB7fTtcbmNvbnN0IGdldEFjdGlvblN0YXRlID0gKGlkOiBBY3Rpb25JZCk6IEFjdGlvblN0YXRlID0+XG4gIChhY3Rpb25TdGF0ZXNbaWRdID8/PSBbXG4gICAgW10sXG4gICAgb3BlblByb21pc2U8W3N1Y2Nlc3M6IGJvb2xlYW4sIGl0ZW1zOiBudW1iZXJdPihcbiAgICAgIHRyYWNrZXJDb25maWcucmVxdWVzdFRpbWVvdXQgKiAyXG4gICAgKShbVCwgMF0pLFxuICBdKTtcblxuY29uc3QgcHVyZ2VDbG9zZWRUYWJzID0gKHRpbWVvdXQ6IG51bWJlcikgPT5cbiAgZW50cmllcyhcbiAgICBrbm93blRhYnMsXG4gICAgKFtrZXksIHZhbHVlXSkgPT5cbiAgICAgIHZhbHVlICYmIERhdGUubm93KCkgLSB2YWx1ZSA+IHRpbWVvdXQgJiYgZGVsKGtub3duVGFicywga2V5KVxuICApO1xuXG5jb25zdCBnZXRDb29yZGluYXRvcklkID0gKCkgPT4gZ2V0TWluVGFiSWQoVEFCX0lELCAuLi5rZXlzKGtub3duVGFicykpO1xuXG5jb25zdCBpc0xhc3RUYWIgPSAoKSA9PlxuICAhYW55KHZhbHVlcyhrbm93blRhYnMpLCAoY2xvc2luZykgPT4gIWNsb3NpbmcpICYmXG4gIGdldENvb3JkaW5hdG9ySWQoKSA9PT0gVEFCX0lEO1xuXG5jb25zdCBjaGFubmVsID0gY3JlYXRlQ2hhbm5lbChcbiAgXCJjc1wiLFxuICB7XG4gICAgW01lc3NhZ2VUeXBlLkxvYWRlZF06IChbc291cmNlSWQsIGRpcmVjdF0pID0+IHtcbiAgICAgIGtub3duVGFic1tzb3VyY2VJZF0gPz89IG5pbDtcbiAgICAgICFkaXJlY3QgJiZcbiAgICAgICAgc291cmNlSWQgIT09IFRBQl9JRCAmJlxuICAgICAgICAhY2xvc2luZyAmJlxuICAgICAgICBjaGFubmVsKFtNZXNzYWdlVHlwZS5Mb2FkZWRdLCBzb3VyY2VJZCk7XG4gICAgfSxcbiAgICBbTWVzc2FnZVR5cGUuVW5sb2FkaW5nXShcbiAgICAgIFtzb3VyY2VJZF0sXG4gICAgICBmcmVlemluZzogYm9vbGVhbixcbiAgICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgICApIHtcbiAgICAgIGtub3duVGFic1tzb3VyY2VJZF0gPSBEYXRlLm5vdygpO1xuICAgICAgZW50cmllcyhkYXRhLCAoW2tleSwgdmFsdWVdKSA9PiBjb2xsZWN0KGtleSwgdmFsdWUpKTtcbiAgICAgIGlmICghZnJlZXppbmcpIHtcbiAgICAgICAga2V5cyhcbiAgICAgICAgICBhY3Rpb25IYW5kbGVycyxcbiAgICAgICAgICAoa2V5KSA9PiBpc0xhc3RUYWIoKSAmJiBjaGFubmVsKFtNZXNzYWdlVHlwZS5Db21taXQsIGtleSwgVEFCX0lELCBUXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgW01lc3NhZ2VUeXBlLkNvbGxlY3RdKF8sIGRhdGE6IFJlY29yZDxBY3Rpb25JZCwgRGF0YVtdPikge1xuICAgICAgZW50cmllcyhkYXRhLCAoW2tleSwgdmFsdWVdKSA9PiBjb2xsZWN0KGtleSwgdmFsdWUpKTtcbiAgICB9LFxuICAgIFtNZXNzYWdlVHlwZS5Db29yZGluYXRlXShfLCBhY3Rpb25JZDogQWN0aW9uSWQpIHtcbiAgICAgIGNvb3JkaW5hdGVDb21taXQoYWN0aW9uSWQpO1xuICAgIH0sXG4gICAgW01lc3NhZ2VUeXBlLkNvbW1pdF0oXG4gICAgICBfLFxuICAgICAgYWN0aW9uSWQ6IEFjdGlvbklkLFxuICAgICAgY29vcmRpbmF0b3I6IFRhYklkLFxuICAgICAgY3JpdGljYWw6IGJvb2xlYW5cbiAgICApIHtcbiAgICAgIGNvbnN0IFtjb2xsZWN0ZWQsIGhhbmRsZV0gPSBnZXRBY3Rpb25TdGF0ZShhY3Rpb25JZCk7XG4gICAgICBjb25zdCBkYXRhID0gc3BsaWNlKGNvbGxlY3RlZCwgMCk7XG4gICAgICBUQUJfSUQgPT09IGNvb3JkaW5hdG9yICYmXG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9IHNpemUoZGF0YSk7XG4gICAgICAgICAgbGV0IHN1Y2Nlc3MgPVxuICAgICAgICAgICAgIW4gfHxcbiAgICAgICAgICAgICgoYXdhaXQgdHJ5QXN5bmMoYWN0aW9uSGFuZGxlcnNbYWN0aW9uSWRdPy5bMF0oZGF0YSwgY3JpdGljYWwpKSkgPz9cbiAgICAgICAgICAgICAgVCk7XG5cbiAgICAgICAgICBpZiAoIXN1Y2Nlc3MgfHwgbikge1xuICAgICAgICAgICAgZGVidWcoXG4gICAgICAgICAgICAgIGBUaGUgYWN0aW9uIGhhbmRsZXIgZm9yICcke2FjdGlvbklkfScgJHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzID8gXCJjb21wbGV0ZWQgc3VjZXNzZnVsbHlcIiA6IFwicmVqZWN0ZWRcIlxuICAgICAgICAgICAgICB9LmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIGFjdGlvbiBkaWQgbm90IHN1Y2NlZWQuXG4gICAgICAgICAgLy8gSXQgd2lsbCBvbmx5IHJldHVybiBmYWxzZSBpZiBpdCBnb3QgY2FuY2VsbGVkIG9yIHRoZSBzZXJ2ZXIgZGVmaW5pdGVseSBmYWlsZWQgaW4gYSB3YXkgd2hlcmUgdGhlIGV2ZW50cyB3aWxsIG5vdCBnZXQgZHVwbGljYXRlZCBpZiBwb3N0ZWQgYWdhaW4uXG4gICAgICAgICAgLy8gU2hhcmUgdGhlIGZhaWxlZCBkYXRhIHdpdGggYWxsIHRhYnMsIGluc3RlYWQgb2YganVzdCBrZWVwaW5nIGl0IGxvY2FsbHksIHNvIGl0IHdpbGwgZ2V0IHBvc3RlZCBhZ2FpbiBldmVuIGluIHRoZSByYXJlIGV2ZW50IHdoZXJlIHRoaXMgdGFiIGdvdCB1bmxvYWRlZCBiZWZvcmUgdGhlIGNvbW1pdCBmYWlsZWQuXG4gICAgICAgICAgIXN1Y2Nlc3MgJiZcbiAgICAgICAgICAgIChjaGFubmVsKFtNZXNzYWdlVHlwZS5Db2xsZWN0LCB7IFthY3Rpb25JZF06IGRhdGEgfV0pLFxuICAgICAgICAgICAgY3JpdGljYWwgJiYgZGVidWcoXCJBIGNyaXRpY2FsIHJlcXVlc3QgdG8gY29tbWl0IGdvdCByZWplY3RlZC5cIikpO1xuXG4gICAgICAgICAgaGFuZGxlKFtzdWNjZXNzLCBuXSk7XG4gICAgICAgIH0pKCk7XG4gICAgfSxcbiAgICBbTWVzc2FnZVR5cGUuQWN0aXZhdGVkXTogKFtzb3VyY2VJZF0pID0+IChcbiAgICAgIHB1cmdlQ2xvc2VkVGFicygwKSwgLy8gQXQgbGVhc3Qgb25lIHRhYiBpc24ndCBjbG9zaW5nLiBQdXJnZSB0aGUgY2xvc2VkIG9uZXMuXG4gICAgICB1cGRhdGVQb2xsaW5nVGFiKHNvdXJjZUlkKVxuICAgICksXG4gICAgW01lc3NhZ2VUeXBlLkRlYWN0aXZhdGVkXTogKCkgPT4gdXBkYXRlUG9sbGluZ1RhYihuaWwpLFxuICB9LFxuICBUXG4pO1xuXG5jb25zdCBjb2xsZWN0ID0gKGFjdGlvbklkOiBBY3Rpb25JZCwgZGF0YTogRGF0YVtdKSA9PiB7XG4gIHJldHVybiBwdXNoKGdldEFjdGlvblN0YXRlKGFjdGlvbklkKVswXSwgLi4uZGF0YSk7XG59O1xuXG5sZXQgY2xvc2luZyA9IFQ7XG5sZXQgaW5pdFByb21pc2U6IE9wZW5Qcm9taXNlIHwgbnVsbCA9IG5pbDtcbmNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGluaXRQcm9taXNlO1xuICBpZiAoY2xvc2luZyA9PT0gKGNsb3NpbmcgPSBGKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpbml0UHJvbWlzZSA9IG9wZW5Qcm9taXNlKCk7XG4gIHRyeSB7XG4gICAgY2xlYXIoa25vd25UYWJzKTtcbiAgICBjaGFubmVsKFtNZXNzYWdlVHlwZS5Mb2FkZWRdKTtcbiAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGRvbid0IGtub3cgaG93IG1hbnkgdGFicyB0aGVyZSBhcmUsIGlmIGFueS4gV2UgbmVlZCB0byB3YWl0IGEgYml0IGFuZCBzZWUuXG4gICAgYXdhaXQgZGVsYXkoNTApO1xuICB9IGZpbmFsbHkge1xuICAgIGluaXRQcm9taXNlKFQpO1xuICB9XG59O1xuXG5jb25zdCB0ZXJtaW5hdGUgPSBhc3luYyAoZnJlZXplOiBib29sZWFuKSA9PiB7XG4gIGlmIChjbG9zaW5nID09PSAoY2xvc2luZyA9IFQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhbHVlcyhhY3Rpb25IYW5kbGVycywgKGhhbmRsZXIpID0+IGhhbmRsZXJbMV0/LihUKSk7XG5cbiAgY2hhbm5lbChbTWVzc2FnZVR5cGUuVW5sb2FkaW5nLCBmcmVlemUsIGZsdXNoTG9jYWxEYXRhKCldKTtcbiAgLy8gV2UgdW5sb2FkZWQgb3IgZnJvemUuIElmIHdlIHdlcmUgdGhlIHRpbWVvdXQgbGVhZGVyIChlaXRoZXIgY29vcmRpbmF0b3Igb3IgYWN0aXZlKSB3ZSBuZWVkIHRvIHRlbGwgdGhlIG90aGVycyB0aGF0IHdlIGRlYWN0aXZhdGVkLlxuICB0b2dnbGVBY3RpdmUoRik7XG59O1xuXG5jb25zdCBjb29yZGluYXRlQ29tbWl0ID0gYXN5bmMgKGFjdGlvbklkOiBBY3Rpb25JZCk6IFByb21pc2U8bnVtYmVyPiA9PiB7XG4gIGF3YWl0IGluaXRQcm9taXNlO1xuICBpZiAoY2xvc2luZykgcmV0dXJuIDA7IC8vIERvbid0IGluaXRpYXRlIGNvbW1pdCB3aGVuIGNsb3NpbmcuXG5cbiAgLy8gSWYgd2UgYXJlIHNodXR0aW5nIGRvd24gd2Ugd2lsbCBhbGxvdyBhbm90aGVyIHRhYiBzaHV0dGluZyBkb3duIHRvIGJlIGVsZWN0ZWQgYXMgbWFzdGVyLiAoU2h1dGRvd24gbWVhbnMgYWxsIHRhYnMgYXJlIGNsb3NlZCkuXG4gIGNvbnN0IGNvb3JkaW5hdG9yID0gZ2V0Q29vcmRpbmF0b3JJZCgpO1xuICBpZiAoY29vcmRpbmF0b3IgIT09IFRBQl9JRCkge1xuICAgIGNoYW5uZWwoW01lc3NhZ2VUeXBlLkNvb3JkaW5hdGUsIGFjdGlvbklkXSwgY29vcmRpbmF0b3IpO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgY29uc3QgaGFuZGxlID0gZ2V0QWN0aW9uU3RhdGUoYWN0aW9uSWQpWzFdO1xuICBjb25zdCB0MCA9IG5vdyhGKTtcblxuICBsZXQgcmVzdWx0ID0gYXdhaXQgaGFuZGxlO1xuICBoYW5kbGUoUmVzZXQpO1xuXG4gIGNoYW5uZWwoW01lc3NhZ2VUeXBlLkNvbW1pdCwgYWN0aW9uSWQsIFRBQl9JRCwgRl0pO1xuICByZXN1bHQgPSBhd2FpdCBoYW5kbGU7XG4gIGRlYnVnKFxuICAgIHJlc3VsdCA9PT0gRXhwaXJlZFxuICAgICAgPyBgQ29tbWl0IHRpbWVkIG91dCBmb3IgJyR7YWN0aW9uSWR9LmBcbiAgICAgIDogIXJlc3VsdFswXSB8fFxuICAgICAgICAgIChyZXN1bHRbMV0gJiZcbiAgICAgICAgICAgIGAke3Jlc3VsdFswXSA/IFwiU3VjY2Vzc2Z1bGx5IGNvbWl0dGVkXCIgOiBcIkZhaWxlZCB0byBjb21taXRcIn0gJHtcbiAgICAgICAgICAgICAgcmVzdWx0WzFdXG4gICAgICAgICAgICB9IGl0ZW1zIGZvciAnJHthY3Rpb25JZH0nIGFmdGVyICR7Zm9ybWF0RHVyYXRpb24obm93KEYpIC0gdDApfWApXG4gICk7XG5cbiAgcmV0dXJuIHJlc3VsdFsxXTtcbn07XG5cbi8vIFRpbWVvdXQgbGVhZGVyIGNvb3JkaW5hdGlvblxuXG5sZXQgc2FmZVRpbWVvdXRUaW1lc3RhbXA6IG51bWJlciA9IE1BWF9TQUZFX0lOVEVHRVI7XG5sZXQgc2VsZWN0ZWRQb2xsaW5nVGFiOiBUYWJJZCB8IG51bGwgPSBuaWw7XG5cbmNvbnN0IHVwZGF0ZVBvbGxpbmdUYWIgPSAoYWN0aXZlSWQ6IFRhYklkIHwgbnVsbCkgPT5cbiAgKHNlbGVjdGVkUG9sbGluZ1RhYiA9IGFjdGl2ZUlkID8/PSBnZXRDb29yZGluYXRvcklkKCkpID09PSBUQUJfSURcbiAgICA/IChzYWZlVGltZW91dFRpbWVzdGFtcCA9IE1hdGgubWluKFxuICAgICAgICBzYWZlVGltZW91dFRpbWVzdGFtcCxcbiAgICAgICAgbm93KCkgKyBNQVhfTUVTU0FHRV9ERUxBWVxuICAgICAgKSlcbiAgICA6IChzYWZlVGltZW91dFRpbWVzdGFtcCA9IE1BWF9TQUZFX0lOVEVHRVIpO1xuXG4vLyBQb2xsaW5nIGZvciByZXNwb25zZXMgLyByZWd1bGFybHkgcG9zdGluZyBldmVudHMgZXRjLiAgbXVzdCBoYXBwZW4gZnJvbSBpbnRlcnZhbHMgL3RpbWVvdXRzIGluIGFsbCB0YWJzLFxuLy8gYnV0IG9ubHkgdGhlIG9uZSB0aGF0IGlzIHRoZSBcInRpbWVvdXQgbGVhZGVyXCIgbWF5IGV4ZWN1dGUgdGhlIGxvZ2ljIHRvIGF2b2lkIHJhY2UgY29uZGl0aW9ucy5cbi8vIFRoZSBjb29yZGluYXRvciBjYW4gYWx3YXlzIGJlIHJlYWNoZWQgdmlhIG1lc3NhZ2VzICh0aGV5IGFyZSBub3QgdGhyb3R0bGVkKSwgYnV0IHRoZSB0YWIgaW4gY29udHJvbCBvZiBwb2xsaW5nIHNob3VsZCBwcmVmZXJhYmx5IGJlIHRoZSBvbmUgdGhhdCBoYXMgZm9jdXNcbi8vIHNpbmNlIGJhY2tncm91bmQgdGFicyBhcmUgdGhyb3R0bGVkLlxuZXhwb3J0IGNvbnN0IGlzRm9yZWdyb3VuZFRhYiA9ICgpID0+XG4gIGluaXRQcm9taXNlPy4oKSA9PT0gVCAmJlxuICAocHVyZ2VDbG9zZWRUYWJzKENMT1NFRF9UQUJfVElNRU9VVCksIG5vdygpID4gc2FmZVRpbWVvdXRUaW1lc3RhbXApO1xuXG5sZXQgYWN0aXZlID0gRjtcbmNvbnN0IHRvZ2dsZUFjdGl2ZSA9ICh0b2dnbGU6IGJvb2xlYW4pID0+XG4gIGFjdGl2ZSAhPT0gKGFjdGl2ZSA9IHRvZ2dsZSkgJiYgdG9nZ2xlXG4gICAgPyBjaGFubmVsKFtNZXNzYWdlVHlwZS5BY3RpdmF0ZWRdKVxuICAgIDogIXRvZ2dsZSAmJlxuICAgICAgVEFCX0lEID09PSBzZWxlY3RlZFBvbGxpbmdUYWIgJiZcbiAgICAgIGNoYW5uZWwoW01lc3NhZ2VUeXBlLkRlYWN0aXZhdGVkXSk7XG5cbnJlZ2lzdGVyU3RhcnR1cEhhbmRsZXIoKCkgPT4ge1xuICBsaXN0ZW4od2luZG93LCBcInBhZ2VzaG93XCIsICgpID0+IGluaXQoKSk7XG4gIGxpc3Rlbihkb2N1bWVudCwgXCJyZXN1bWVcIiBhcyBhbnksICgpID0+IGluaXQoKSk7XG4gIGluaXQoKTtcblxuICBsaXN0ZW4od2luZG93LCBbXCJiZWZvcmV1bmxvYWRcIiwgXCJwYWdlaGlkZVwiXSwgKCkgPT4gdGVybWluYXRlKEYpKTtcbiAgbGlzdGVuKGRvY3VtZW50LCBcImZyZWV6ZVwiIGFzIGFueSwgKCkgPT4gdGVybWluYXRlKFQpKTtcblxuICAvLyBCYWNrZ3JvdW5kIGZsdXNoIGV2ZW50IGJ1ZmZlci5cbiAgdGltZW91dChcbiAgICAoKSA9PlxuICAgICAgaXNGb3JlZ3JvdW5kVGFiKCkgJiYga2V5cyhhY3Rpb25IYW5kbGVycywgKGtleSkgPT4gY29vcmRpbmF0ZUNvbW1pdChrZXkpKSxcbiAgICAtdHJhY2tlckNvbmZpZy5wb3N0RnJlcXVlbmN5XG4gICk7XG5cbiAgbGlzdGVuKGRvY3VtZW50LCBcInZpc2liaWxpdHljaGFuZ2VcIiwgKCkgPT5cbiAgICB0b2dnbGVBY3RpdmUoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIilcbiAgKTtcbiAgbGlzdGVuKHdpbmRvdywgXCJmb2N1c1wiLCAoKSA9PiB0b2dnbGVBY3RpdmUoVCkpO1xuICBsaXN0ZW4od2luZG93LCBcImJsdXJcIiwgKCkgPT4gdG9nZ2xlQWN0aXZlKEYpKTtcbiAgdG9nZ2xlQWN0aXZlKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpO1xufSk7XG4iLCJpbXBvcnQgeyBNVVRFWF9SRVFVRVNUX0NPT0tJRSwgTVVURVhfUkVTUE9OU0VfQ09PS0lFIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcbmltcG9ydCB7IEVuY29kYWJsZU9iamVjdCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIEYsXG4gIFQsXG4gIGNyZWF0ZUNoYW5uZWwsXG4gIGRlYnVnLFxuICBkZWNvbXBvc2UsXG4gIGV2ZW50U2V0LFxuICBmb3JtYXREdXJhdGlvbixcbiAgaXNGb3JlZ3JvdW5kVGFiLFxuICBuaWwsXG4gIG5vdyxcbiAgcHJvbWlzZSxcbiAgcmVnaXN0ZXJTdGFydHVwSGFuZGxlcixcbiAgLy8gY29va2llcyxcbiAgc2VjdXJlQ29va2llcyxcbiAgdGltZW91dCxcbiAgdHJhY2tlckNvbmZpZyxcbiAgdHJ5Q2F0Y2gsXG59IGZyb20gXCIuXCI7XG5cbmNvbnN0IGNvb2tpZXMgPSBzZWN1cmVDb29raWVzO1xuXG4vLyBJZiBhIHBvc3QgaGFzIG5vdCBjb21wbGV0ZWQgd2l0aGluIHRoaXMgdGhyZXNob2xkIGNvbmN1cnJlbnQgcG9zdGluZyBtYXkgaGFwcGVuLlxuY29uc3QgQUNUSVZFX1JFUVVFU1RfUE9MTCA9IDI1O1xuY29uc3QgUEFTU0lWRV9SRVFVRVNUX1BPTEwgPSA1MDA7XG5cbmNvbnN0IFthZGRSZXNwb25zZUxpc3RlbmVyLCBjYWxsUmVzcG9uc2VIYW5kbGVyc10gPVxuICBldmVudFNldDxbYWZmaW5pdHk6IHN0cmluZywgdmFyaWFibGVzOiBFbmNvZGFibGVPYmplY3RdPigpO1xuXG5leHBvcnQgeyBhZGRSZXNwb25zZUxpc3RlbmVyIH07XG5cbmNvbnN0IHJlc3BvbnNlQ2hhbm5lbCA9IGNyZWF0ZUNoYW5uZWw8dHJ1ZSB8IHsgZXJyb3I6IGFueSB9PihcInJlcVwiKTtcblxuY29uc3QgY2hlY2tSZXNwb25zZUNvb2tpZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0cnlDYXRjaCgoKSA9PlxuICAgICAgZGVjb21wb3NlKFxuICAgICAgICBjb29raWVzPFxuICAgICAgICAgIFtzdHJpbmcsIFtzdHJpbmcsIG51bWJlcl0sIHN0cmluZyB8IHVuZGVmaW5lZCwgRW5jb2RhYmxlT2JqZWN0XVxuICAgICAgICA+KE1VVEVYX1JFU1BPTlNFX0NPT0tJRSksXG4gICAgICAgIChhZmZpbml0eSwgc291cmNlLCBlcnJvciwgdmFyaWFibGVzKSA9PiAoXG4gICAgICAgICAgY29va2llcyhNVVRFWF9SRVNQT05TRV9DT09LSUUsIG5pbCksXG4gICAgICAgICAgZGVidWcoXG4gICAgICAgICAgICBgR290IHJlc3BvbnNlIGZvciAke3NvdXJjZT8uWzBdfSBhZnRlciAke1xuICAgICAgICAgICAgICBzb3VyY2U/LlsxXSA/IGZvcm1hdER1cmF0aW9uKG5vdygpIC0gc291cmNlWzFdKSA6IFwiKHVua25vd24pXCJcbiAgICAgICAgICAgIH0uYFxuICAgICAgICAgICksXG4gICAgICAgICAgY2FsbFJlc3BvbnNlSGFuZGxlcnMoYWZmaW5pdHksIHZhcmlhYmxlcyksXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgID8gKHJlc3BvbnNlQ2hhbm5lbCh7IGVycm9yIH0pLCBkZWJ1ZyhgUmVzcG9uc2UgZXJyb3I6ICR7ZXJyb3J9YCkpXG4gICAgICAgICAgICA6IHJlc3BvbnNlQ2hhbm5lbChUKSxcbiAgICAgICAgICBUXG4gICAgICAgIClcbiAgICAgIClcbiAgICApIHx8IEZcbiAgKTtcbn07XG5cbmNvbnN0IHJlc3BvbnNlVGltZW91dCA9IHRpbWVvdXQoKTtcblxuY29uc3QgcG9sbFJlc3BvbnNlQ29va2llID0gKCkgPT4gKFxuICBpc0ZvcmVncm91bmRUYWIoKSAmJiBjaGVja1Jlc3BvbnNlQ29va2llKCksXG4gIHJlc3BvbnNlVGltZW91dChcbiAgICBwb2xsUmVzcG9uc2VDb29raWUsXG4gICAgY29va2llcyhNVVRFWF9SRVFVRVNUX0NPT0tJRSkgPyBBQ1RJVkVfUkVRVUVTVF9QT0xMIDogUEFTU0lWRV9SRVFVRVNUX1BPTExcbiAgKVxuKTtcblxucmVnaXN0ZXJTdGFydHVwSGFuZGxlcigoKSA9PiBwb2xsUmVzcG9uc2VDb29raWUoKSk7XG5cbmV4cG9ydCBjb25zdCB0cnlBY3F1aXJlUmVxdWVzdExvY2sgPSBhc3luYyAoXG4gIGZvcmNlOiBib29sZWFuLFxuICBzb3VyY2U6IHN0cmluZyxcbiAgYWN0aW9uOiAoZm9yY2VkOiBib29sZWFuKSA9PiBib29sZWFuIHwgYW55XG4pOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3Qgc291cmNlTGFiZWwgPSBgKCR7c291cmNlID8/IFwiKHVua25vd24pXCJ9KWA7XG4gIGNoZWNrUmVzcG9uc2VDb29raWUoKTtcbiAgbGV0IGZvcmNlZCA9ICEhY29va2llcyhNVVRFWF9SRVFVRVNUX0NPT0tJRSk7XG4gIGlmICghZm9yY2UgJiYgZm9yY2VkKSB7XG4gICAgZGVidWcoYEFub3RoZXIgcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MgLSByZXF1ZXN0IGNhbmNlbGxlZC5gKTtcbiAgICByZXR1cm4gRjtcbiAgfVxuICBsZXQgdDAgPSBub3coKTtcbiAgY29uc3QgY29va2llVmFsdWUgPSBbc291cmNlTGFiZWwsIHQwXTtcbiAgY29va2llcyhNVVRFWF9SRVFVRVNUX0NPT0tJRSwgY29va2llVmFsdWUsIHRyYWNrZXJDb25maWcucmVxdWVzdFRpbWVvdXQpO1xuICBjb29raWVzKE1VVEVYX1JFU1BPTlNFX0NPT0tJRSwgbmlsKTtcbiAgaWYgKGFjdGlvbihmb3JjZWQpID09PSBGKSB7XG4gICAgY29va2llcyhNVVRFWF9SRVFVRVNUX0NPT0tJRSwgbmlsKTtcbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBwcm9taXNlPGJvb2xlYW4+KChyZXNvbHZlKSA9PlxuICAgIHJlc3BvbnNlQ2hhbm5lbCgocmVzcG9uc2UpID0+IChyZXNvbHZlKHJlc3BvbnNlID09PSBUKSwgRiksIFQpXG4gICk7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBUcmFja2VkRXZlbnQgfSBmcm9tIFwiQHRhaWxqcy90eXBlc1wiO1xuaW1wb3J0IHsgaHR0cEVuY29kZSB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIEVSUl9QT1NUX0ZBSUxFRCxcbiAgRixcbiAgVEFCX0lELFxuICBWQVJfVVJMLFxuICBhZGRSZXNwb25zZUxpc3RlbmVyLFxuICBjbGVhbixcbiAgY29tcGxldGVEZXBlbmRlbmN5LFxuICBkZWJ1ZyxcbiAgZXJyLFxuICBldmVudFNldCxcbiAgaGFzRGVwZW5kZW5jaWVzLFxuICBtYXAsXG4gIG5hdmlnYXRvcixcbiAgbmlsLFxuICBub3csXG4gIHB1c2gsXG4gIHJlZ2lzdGVyQWN0aW9uLFxuICByZWdpc3RlclNoYXJlZFN0YXRlLFxuICBzaGlmdCxcbiAgc2l6ZSxcbiAgc3BsaWNlLFxuICBzdGFydHVwTG9jayxcbiAgdHJ5QWNxdWlyZVJlcXVlc3RMb2NrLFxufSBmcm9tIFwiLlwiO1xuXG5jb25zdCBbYWRkUG9zdExpc3RlbmVyLCBjYWxsUG9zdExpc3RlbmVyc10gPVxuICBldmVudFNldDxbZXZlbnRzOiBUcmFja2VkRXZlbnRbXV0+KCk7XG5cbmNvbnN0IFthZGRTaHV0ZG93bkxpc3RlbmVyLCBjYWxsU2h1dGRvd25MaXN0ZW5lcnNdID0gZXZlbnRTZXQoKTtcblxuZXhwb3J0IHtcbiAgYWRkUG9zdExpc3RlbmVyIGFzIGFkZFF1ZXVlUG9zdExpc3RlbmVyLFxuICBhZGRTaHV0ZG93bkxpc3RlbmVyIGFzIGFkZFRlcm1pbmF0aW9uTGlzdGVuZXIsXG59O1xuZXhwb3J0IGNvbnN0IGVucXVldWVFdmVudCA9IChldmVudDogVHJhY2tlZEV2ZW50KSA9PiB7XG4gIGNvbnN0IHF1ZXVlID0gW2V2ZW50XTtcbiAgY29uc3QgYmF0Y2g6IFRyYWNrZWRFdmVudFtdID0gW107XG4gIGxldCByZWFkeTogVHJhY2tlZEV2ZW50W10gfCB1bmRlZmluZWQ7XG4gIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICBjb25zdCBldmVudCA9IHNoaWZ0KHF1ZXVlKSE7XG4gICAgaWYgKGhhc0RlcGVuZGVuY2llcyhldmVudCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAocmVhZHkgPSBjb21wbGV0ZURlcGVuZGVuY3koZXZlbnQpKSAmJiBzcGxpY2UocXVldWUsIDEsIDAsIC4uLnJlYWR5KTtcblxuICAgIHB1c2goYmF0Y2gsIGV2ZW50KTtcbiAgfVxuICBwb3N0KC4uLmJhdGNoKTtcbn07XG5cbmNvbnN0IFtwb3N0LCBjb21taXRdID0gcmVnaXN0ZXJBY3Rpb248VHJhY2tlZEV2ZW50PihcbiAgXCJldmVudHNcIixcbiAgYXN5bmMgKGV2ZW50cywgZm9yY2UpID0+IHtcbiAgICBpZiAoIXNpemUoZXZlbnRzKSkge1xuICAgICAgcmV0dXJuIEY7XG4gICAgfVxuICAgIGF3YWl0IHN0YXJ0dXBMb2NrO1xuXG4gICAgaWYgKGZvcmNlICYmICFhZmZpbml0eSkge1xuICAgICAgZGVidWcoXG4gICAgICAgIFwiV0FSTjogRm9yY2UgcG9zdCBkb3duZ3JhZGVkIHRvIG5vcm1hbCBwb3N0IGJlY2F1c2UgYWZmaW5pdHkgaGFzIG5vdCBiZWVuIHNldC5cIlxuICAgICAgKTtcbiAgICAgIGZvcmNlID0gRjtcbiAgICB9XG4gICAgZGVidWcoXCJQb3N0IHN0YXJ0ZWRcIik7XG5cbiAgICBjYWxsUG9zdExpc3RlbmVycyhldmVudHMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IHRyeUFjcXVpcmVSZXF1ZXN0TG9jayhmb3JjZSwgVEFCX0lELCAoZGlzY2FyZENvb2tpZXMpID0+IHtcbiAgICAgIGNvbnN0IHQwID0gbm93KCk7XG4gICAgICBjb25zdCBwb3N0RGF0YSA9IGh0dHBFbmNvZGUoW1xuICAgICAgICBtYXAoXG4gICAgICAgICAgZXZlbnRzLFxuICAgICAgICAgIChcbiAgICAgICAgICAgIGV2LFxuICAgICAgICAgICAgXyxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICAuLi5ldixcbiAgICAgICAgICAgICAgdGltZXN0YW1wOiBNYXRoLm1pbigwLCAoZXYudGltZXN0YW1wID8/PSB0MCkgLSB0MCksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSA9PiAoY2xlYW4oZXZlbnQpLCBkZWJ1ZyhldmVudCwgbmlsLCBldmVudC50eXBlKSwgZXZlbnQpXG4gICAgICAgICksXG4gICAgICAgIFthZmZpbml0eSwgZGlzY2FyZENvb2tpZXNdLFxuICAgICAgXSk7XG4gICAgICAhbmF2aWdhdG9yLnNlbmRCZWFjb24oXG4gICAgICAgIFZBUl9VUkwsXG4gICAgICAgIG5ldyBCbG9iKFtwb3N0RGF0YV0sIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbnRlbnQgdHlwZSBhdm9pZHMgdGhlIG92ZXJoZWFkIG9mIHRoZSBcInByZWZsaWdodFwiIHJlcXVlc3QgdGhhdCBpcyBvdGhlcndpc2UgbWFkZSBieSBicm93c2VycyBpbiBjcm9zcy1kb21haW4gc2NlbmFyaW9zLlxuICAgICAgICAgIC8vIChhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgY291bGQgYWxzbyB3b3JrKS5cbiAgICAgICAgICB0eXBlOiBcInRleHQvcGxhaW5cIixcbiAgICAgICAgfSlcbiAgICAgICkgJiYgZXJyKEVSUl9QT1NUX0ZBSUxFRCwgZXZlbnRzKTtcbiAgICB9KTtcbiAgfSxcbiAgKHRlcm1pbmF0aW5nKSA9PiAodGVybWluYXRpbmcgJiYgY2FsbFNodXRkb3duTGlzdGVuZXJzKCksIHVuZGVmaW5lZClcbik7XG5cbmV4cG9ydCB7IGNvbW1pdCB9O1xuXG4vLyBGb3JjZSBwb3N0cyB3aWxsIG5vdCBoYXBwZW4gYmVmb3JlIHRoaXMgaXMgc2V0LlxubGV0IGFmZmluaXR5OiBhbnkgfCB1bmRlZmluZWQ7XG5jb25zdCBicm9hZGNhc3RBZmZpbml0eSA9IHJlZ2lzdGVyU2hhcmVkU3RhdGUoXG4gIFwiYWZmaW5pdHlcIixcbiAgKCkgPT4gYWZmaW5pdHksXG4gICh2YWx1ZSkgPT4gKGFmZmluaXR5ID0gdmFsdWUpXG4pO1xuY29uc3Qgc2V0QWZmaW5pdHkgPSAodmFsdWU6IGFueSkgPT4gKFxuICAoYWZmaW5pdHkgPSB2YWx1ZSksIGJyb2FkY2FzdEFmZmluaXR5KHZhbHVlKVxuKTtcblxuYWRkUmVzcG9uc2VMaXN0ZW5lcihzZXRBZmZpbml0eSk7XG4iLCJpbXBvcnQgeyBGLCBULCBhZGRUZXJtaW5hdGlvbkxpc3RlbmVyLCBkZWwsIGhhc2hTZXQsIG1hcCB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCB0eXBlIFBlbmRpbmdBY3Rpb25IYW5kbGUgPSAoY29tbWl0PzogYm9vbGVhbikgPT4gdm9pZDtcblxuLy8gVGhlc2Ugd2lsbCBiZSBmbHVzaGVkIHdoZW4gLyBpZiB0aGUgdXNlciBsZWF2ZXMgdGhlIHBhZ2UuXG5jb25zdCBhY3RpdmVIYW5kbGVzID0gaGFzaFNldDxQZW5kaW5nQWN0aW9uSGFuZGxlPigpO1xuXG5sZXQgZmx1c2hpbmcgPSBGO1xuXG5leHBvcnQgY29uc3Qgbm9vcEFjdGlvbjogUGVuZGluZ0FjdGlvbkhhbmRsZSA9ICgpID0+IHt9O1xuXG5leHBvcnQgY29uc3QgZmx1c2hWaWV3RW5kQWN0aW9ucyA9ICgpID0+IHtcbiAgZmx1c2hpbmcgPSBUO1xuICBtYXAoYWN0aXZlSGFuZGxlcywgKGl0ZW0pID0+IGl0ZW0oVCkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyVmlld0VuZEFjdGlvbiA9IChcbiAgYWN0aW9uOiAoZmx1c2hlZDogYm9vbGVhbikgPT4gdm9pZFxuKTogUGVuZGluZ0FjdGlvbkhhbmRsZSA9PiB7XG4gIGNvbnN0IGhhbmRsZXIgPSAoY29tbWl0ID0gVCkgPT5cbiAgICBkZWwoYWN0aXZlSGFuZGxlcywgaGFuZGxlcikgJiYgY29tbWl0ICYmIGFjdGlvbihmbHVzaGluZyk7XG5cbiAgYWN0aXZlSGFuZGxlcy5hZGQoaGFuZGxlcik7XG5cbiAgcmV0dXJuIGhhbmRsZXI7XG59O1xuXG5hZGRUZXJtaW5hdGlvbkxpc3RlbmVyKCgpID0+IGZsdXNoVmlld0VuZEFjdGlvbnMoKSk7XG4iLCJpbXBvcnQgdHlwZSB7IFVzZXJBZ2VudEV2ZW50IH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7IHdpbmRvdyB9IGZyb20gXCIuLi9saWJcIjtcblxuZXhwb3J0IGNvbnN0IGRldGVjdERldmljZVR5cGUgPSAoKTogUGljazxcbiAgVXNlckFnZW50RXZlbnQsXG4gIFwiZGV2aWNlVHlwZVwiIHwgXCJzY3JlZW5cIlxuPiA9PiB7XG4gIC8vIENvbW1vbiB0aHJlc2hvbGRzIGJhc2VkIG9uIGh0dHBzOi8veWVzdml6LmNvbS92aWV3cG9ydC9cbiAgY29uc3Qgc2NyZWVuID0gd2luZG93Py5zY3JlZW47XG4gIGlmICghc2NyZWVuKSByZXR1cm4ge307XG5cbiAgbGV0IHsgd2lkdGg6IHcsIGhlaWdodDogaCwgb3JpZW50YXRpb246IG8gfSA9IHNjcmVlbjsgLy8gR2V0J3MgdGhlIHJlc29sdXRpb24gaW4gbG9naWNhbCAoQ1NTKSBwaXhlbHMuXG4gIGNvbnN0IGxhbmRzY2FwZSA9IHcgPCBoO1xuICBjb25zdCBhbmdsZSA9IG8/LmFuZ2xlID8/IHdpbmRvd1tcIm9yaWVudGF0aW9uXCJdID8/IDA7XG4gIChhbmdsZSA9PT0gLTkwIHx8IGFuZ2xlID09PSA5MCkgJiYgKFt3LCBoXSA9IFtoLCB3XSk7XG5cbiAgcmV0dXJuIHtcbiAgICBkZXZpY2VUeXBlOiB3IDwgNDgwID8gXCJtb2JpbGVcIiA6IHcgPD0gMTAyNCA/IFwidGFibGV0XCIgOiBcImRlc2t0b3BcIixcbiAgICBzY3JlZW46IHsgZHByOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgd2lkdGg6IHcsIGhlaWdodDogaCwgbGFuZHNjYXBlIH0sXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgUVVFUllfREVWSUNFIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIEhlYXJ0YmVhdEV2ZW50LFxuICBMb2NhbElELFxuICBUaW1lc3RhbXAsXG4gIFVzZXJBZ2VudEV2ZW50LFxuICBVc2VySW50ZXJhY3Rpb25FdmVudCxcbiAgVmlld0VuZGVkRXZlbnQsXG4gIFZpZXdFdmVudCxcbiAgVmlld1RpbWluZ0V2ZW50LFxuICBjYXN0LFxuICBpc1ZpZXdFdmVudCxcbn0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7XG4gIFRyYWNrZXJFeHRlbnNpb25GYWN0b3J5LFxuICBkZXRlY3REZXZpY2VUeXBlLFxuICBpc0NoYW5nZVVzZXJDb21tYW5kLFxufSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7XG4gIEYsXG4gIG5vb3BBY3Rpb24gYXMgTk9fT1AsXG4gIFQsXG4gIGFkZERlcGVuZGVuY3ksXG4gIGFzc2lnbixcbiAgZGVidWcsXG4gIGRlbCxcbiAgZG9jdW1lbnQsXG4gIGV2ZW50U2V0LFxuICBmb3JFYWNoLFxuICBnZXRWaWV3cG9ydFNpemUsXG4gIGlzRm9yZWdyb3VuZFRhYixcbiAgaXNJbnRlcm5hbFVybCxcbiAgbGlzdGVuLFxuICBsb2NhdGlvbixcbiAgbWFwLFxuICBtYXJrLFxuICBtYXRjaEV4SGFzaCxcbiAgbmF2aWdhdG9yLFxuICBuZXh0SWQsXG4gIG5pbCxcbiAgbm93LFxuICBwYXJzZURvbWFpbixcbiAgcGFyc2VQYXJhbWV0ZXJzLFxuICBwdXNoLFxuICByZWdpc3RlclNoYXJlZFN0YXRlLFxuICByZWdpc3RlclZpZXdFbmRBY3Rpb24sXG4gIHJlcGxhY2UsXG4gIHNlc3Npb24sXG4gIHNoYXJlZFF1ZXVlLFxuICBzcGxpdCxcbiAgdGltZW91dCxcbiAgdGltZXIsXG4gIHRyYWNrZXJDb25maWcsXG4gIHRyYW5zcG9zZSxcbiAgdW5kZWZpbmVkLFxuICB3aW5kb3csXG59IGZyb20gXCIuLi9saWJcIjtcblxudHlwZSBUYWJJbmZvID0gW1xuICBpZDogTG9jYWxJRCxcbiAgY3JlYXRlZDogVGltZXN0YW1wLFxuICBuYXZpZ2F0ZWQ6IFRpbWVzdGFtcCxcbiAgdmlld3M6IG51bWJlclxuXTtcblxubGV0IGN1cnJlbnRWaWV3RXZlbnQ6IFZpZXdFdmVudCB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRWaWV3SWQgPSAoKSA9PiBjdXJyZW50Vmlld0V2ZW50Py5pZDtcbmNvbnN0IFthZGRWaWV3Q2hhbmdlZExpc3RlbmVyLCB2aWV3Q2hhbmdlZF0gPSBldmVudFNldDxbdmlld0lkOiBzdHJpbmddPigpO1xuZXhwb3J0IHsgYWRkVmlld0NoYW5nZWRMaXN0ZW5lciB9O1xuXG5leHBvcnQgdHlwZSBWaWV3TWVzc2FnZSA9IHtcbiAgdmlldz86IHsgaWQ6IHN0cmluZzsgdGltaW5nOiBVc2VySW50ZXJhY3Rpb25FdmVudFtcInRpbWluZ1wiXSB9O1xuICB3aG8/OiBMb2NhbElEO1xuICB2YXJzPzogW2tleTogc3RyaW5nLCB2YWx1ZTogYW55LCBzb3VyY2U6IHN0cmluZ11bXTtcbn07XG5cbmxldCBwdXNoUG9wTmF2aWdhdGlvbjogVmlld0V2ZW50W1wibmF2aWdhdGlvblR5cGVcIl0gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIFJlZmVycmluZ1ZpZXdEYXRhID0gW1xuICB2aWV3SWQ6IExvY2FsSUQsXG4gIHJlbGF0ZWRFdmVudElkOiBMb2NhbElEIHwgdW5kZWZpbmVkXG5dO1xuXG5jb25zdCByZWZlcnJlcnMgPSBzaGFyZWRRdWV1ZTxSZWZlcnJpbmdWaWV3RGF0YT4oXCJyZWZcIiwgMTAwMDApO1xuZXhwb3J0IGNvbnN0IHB1c2hOYXZpZ2F0aW9uU291cmNlID0gKG5hdmlnYXRpb25FdmVudElkOiBMb2NhbElEKSA9PlxuICByZWZlcnJlcnMoW2N1cnJlbnRWaWV3RXZlbnQhLmlkLCBuYXZpZ2F0aW9uRXZlbnRJZF0pO1xuXG5jb25zdCB0b3RhbER1cmF0aW9uID0gdGltZXIoKTtcbmNvbnN0IHZpc2libGVEdXJhdGlvbiA9IHRpbWVyKCk7XG5jb25zdCBpbnRlcmFjdGl2ZUR1cmF0aW9uID0gdGltZXIoKTtcblxuZXhwb3J0IGNvbnN0IGdldFZpc2libGVEdXJhdGlvbiA9ICgpID0+IHZpc2libGVEdXJhdGlvbigpO1xuXG5jb25zdCBbb25GcmFtZSwgY2FsbE9uRnJhbWVdID0gZXZlbnRTZXQ8W2ZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudF0+KCk7XG5leHBvcnQgeyBvbkZyYW1lIH07XG5cbmNvbnN0IGtub3duRnJhbWVzID0gbmV3IFdlYWtTZXQ8YW55PigpO1xuY29uc3QgZnJhbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpZnJhbWVcIik7XG5cbmV4cG9ydCBjb25zdCBjb250ZXh0OiBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSA9IHtcbiAgaWQ6IFwiY29udGV4dFwiLFxuICBzZXR1cCh0cmFja2VyKSB7XG4gICAgdGltZW91dChcbiAgICAgICgpID0+XG4gICAgICAgIGZvckVhY2goXG4gICAgICAgICAgZnJhbWVzLFxuICAgICAgICAgIChmcmFtZSkgPT4gbWFyayhrbm93bkZyYW1lcywgZnJhbWUpICYmIGNhbGxPbkZyYW1lKGZyYW1lKVxuICAgICAgICApLFxuICAgICAgLTEwMDBcbiAgICApLnB1bHNlKCk7XG5cbiAgICBsZXQgaXNOZXdUYWIgPSBUO1xuXG4gICAgbGV0IGFjdGl2YXRpb25zID0gMTtcbiAgICBsZXQgdmlld1Bvc3RlZCA9IEY7IC8vIERvbid0IHBvc3QgaGVhcnRiZWF0cyBvbiBoaWRlIGJlZm9yZSB0aGUgdmlldyBoYXMgYmVlbiBwb3N0ZWQuXG5cbiAgICBjb25zdCB0YWIgPSBzZXNzaW9uPFRhYkluZm8+KFwidFwiLCAoY3VycmVudCkgPT4ge1xuICAgICAgaWYgKChpc05ld1RhYiA9ICFjdXJyZW50KSkge1xuICAgICAgICByZXR1cm4gW25leHRJZCgpLCBub3coKSwgbm93KCksIDBdO1xuICAgICAgfVxuICAgICAgY3VycmVudFsyXSA9IG5vdygpO1xuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfSk7XG4gICAgbGV0IGZpcnN0VGFiID0gVDtcbiAgICByZWdpc3RlclNoYXJlZFN0YXRlKFxuICAgICAgXCJmaXJzdFwiLFxuICAgICAgKCkgPT4gRixcbiAgICAgIChmaXJzdCkgPT4ge1xuICAgICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgICAgZmlyc3RUYWIgPSBGO1xuICAgICAgICAgIGN1cnJlbnRWaWV3RXZlbnQgJiZcbiAgICAgICAgICAgIGRlbChjdXJyZW50Vmlld0V2ZW50LCBbXCJmaXJzdFRhYlwiLCBcImxhbmRpbmdQYWdlXCJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG5cbiAgICBsZXQgcGVuZGluZ1ZpZXdFdmVudCA9IE5PX09QO1xuICAgIGxldCBwZW5kaW5nVmlld0VuZEV2ZW50ID0gTk9fT1A7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uOiBzdHJpbmcgfCBudWxsID0gbmlsO1xuICAgIGNvbnN0IHBvc3RWaWV3ID0gKGZvcmNlID0gRikgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBtYXRjaEV4SGFzaChcIlwiICsgY3VycmVudExvY2F0aW9uLCAoY3VycmVudExvY2F0aW9uID0gbG9jYXRpb24uaHJlZikpICYmXG4gICAgICAgICFmb3JjZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ1ZpZXdFdmVudCgpO1xuICAgICAgcGVuZGluZ1ZpZXdFbmRFdmVudCgpO1xuXG4gICAgICB0b3RhbER1cmF0aW9uLnJlc2V0KCk7XG4gICAgICB2aXNpYmxlRHVyYXRpb24ucmVzZXQoKTtcbiAgICAgIGludGVyYWN0aXZlRHVyYXRpb24ucmVzZXQoKTtcblxuICAgICAgc2Vzc2lvbjxUYWJJbmZvPihcInRcIiwgKCkgPT4ge1xuICAgICAgICB0YWJbMl0gPSBub3coKTtcbiAgICAgICAgKyt0YWJbM107XG4gICAgICAgIHJldHVybiB0YWI7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBocmVmLCBkb21haW4gfSA9IHBhcnNlRG9tYWluKGxvY2F0aW9uLmhyZWYpID8/IHt9O1xuICAgICAgY3VycmVudFZpZXdFdmVudCA9IHtcbiAgICAgICAgdHlwZTogXCJWSUVXXCIsXG4gICAgICAgIHRpbWVzdGFtcDogbm93KCksXG4gICAgICAgIGlkOiBuZXh0SWQoKSxcbiAgICAgICAgdGFiOiB0YWJbMF0sXG4gICAgICAgIGhyZWYsXG4gICAgICAgIHBhdGg6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBoYXNoOiBsb2NhdGlvbi5oYXNoIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgZG9tYWluLFxuICAgICAgICB0YWJJbmRleDogdGFiWzNdLFxuICAgICAgICB2aWV3cG9ydDogZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICB9O1xuICAgICAgdmlld0NoYW5nZWQoY3VycmVudFZpZXdFdmVudC5pZCk7XG5cbiAgICAgIGN1cnJlbnRWaWV3RXZlbnQuZmlyc3RUYWIgPSBmaXJzdFRhYjtcbiAgICAgIGZpcnN0VGFiICYmIHRhYlszXSA9PT0gMSAmJiAoY3VycmVudFZpZXdFdmVudC5sYW5kaW5nUGFnZSA9IFQpO1xuXG4gICAgICAvLyBRdWVyeSBzdHJpbmdcbiAgICAgIGNvbnN0IHRyeVNwbGl0ID0gKHM6IHN0cmluZywgc2VwOiBzdHJpbmcsIHBhcnRzID0gc3BsaXQocywgc2VwKSkgPT5cbiAgICAgICAgcGFydHMubGVuZ3RoID4gMSA/IHBhcnRzIDogbmlsO1xuXG4gICAgICBjb25zdCBwcyA9IHBhcnNlUGFyYW1ldGVycyhyZXBsYWNlKGxvY2F0aW9uLmhyZWYsIC9eW14/XSpcXD8/LywgXCJcIikpO1xuICAgICAgaWYgKHBzKSB7XG4gICAgICAgIGNvbnN0IHFzID0gKGN1cnJlbnRWaWV3RXZlbnQhLnF1ZXJ5U3RyaW5nID0gdHJhbnNwb3NlKHBzLCAoW2ssIHZdKSA9PiBbXG4gICAgICAgICAgay50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIHYubGVuZ3RoID4gMVxuICAgICAgICAgICAgPyB2XG4gICAgICAgICAgICA6IHRyeVNwbGl0KHZbMF0sIFwifFwiKSB8fFxuICAgICAgICAgICAgICB0cnlTcGxpdCh2WzBdLCBcIjtcIikgfHxcbiAgICAgICAgICAgICAgdHJ5U3BsaXQodlswXSwgXCIsXCIpIHx8XG4gICAgICAgICAgICAgIHYsXG4gICAgICAgIF0pKTtcbiAgICAgICAgbWFwKFxuICAgICAgICAgIFtcInNvdXJjZVwiLCBcIm1lZGl1bVwiLCBcImNhbXBhaWduXCIsIFwidGVybVwiLCBcImNvbnRlbnRcIl0sXG4gICAgICAgICAgKHAsIF8pID0+ICgoY3VycmVudFZpZXdFdmVudCEudXRtID8/PSB7fSlbcF0gPSBxc1tgdXRtXyR7cH1gXT8uWzBdKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAhKGN1cnJlbnRWaWV3RXZlbnQubmF2aWdhdGlvblR5cGUgPSBwdXNoUG9wTmF2aWdhdGlvbikgJiZcbiAgICAgICAgcGVyZm9ybWFuY2UgJiZcbiAgICAgICAgbWFwKFxuICAgICAgICAgIHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUoXCJuYXZpZ2F0aW9uXCIpLFxuICAgICAgICAgIChlbnRyeTogUGVyZm9ybWFuY2VOYXZpZ2F0aW9uVGltaW5nKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50Vmlld0V2ZW50IS5yZWRpcmVjdHMgPSBlbnRyeS5yZWRpcmVjdENvdW50O1xuICAgICAgICAgICAgY3VycmVudFZpZXdFdmVudCEubmF2aWdhdGlvblR5cGUgPSByZXBsYWNlKFxuICAgICAgICAgICAgICBlbnRyeS50eXBlLFxuICAgICAgICAgICAgICAvXFxfL2csXG4gICAgICAgICAgICAgIFwiLVwiXG4gICAgICAgICAgICApIGFzIGFueTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgIHB1c2hQb3BOYXZpZ2F0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoKGN1cnJlbnRWaWV3RXZlbnQubmF2aWdhdGlvblR5cGUgPz89IFwibmF2aWdhdGVcIikgPT09IFwibmF2aWdhdGVcIikge1xuICAgICAgICAvLyBUcnkgZmluZCByZWxhdGVkIGV2ZW50IGFuZCBwYXJlbnQgdGFiIGNvbnRleHQgaWYgYW55LlxuICAgICAgICAvLyBBbmQgb25seSBpZiBuYXZpZ2F0aW5nIChub3QgYmFjay9mb3J3YXJkL3JlZnJlc2gpXG5cbiAgICAgICAgaWYgKGlzTmV3VGFiICYmIGlzSW50ZXJuYWxVcmwoZG9jdW1lbnQucmVmZXJyZXIpKSB7XG4gICAgICAgICAgY29uc3QgcmVmZXJyZXIgPSByZWZlcnJlcnMoKTtcblxuICAgICAgICAgIGN1cnJlbnRWaWV3RXZlbnQudmlldyA9IHJlZmVycmVyPy5bMF07XG4gICAgICAgICAgY3VycmVudFZpZXdFdmVudC5yZWxhdGVkID0gcmVmZXJyZXI/LlsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZWZlcnJlclxuICAgICAgY29uc3QgcmVmZXJyZXIgPSBkb2N1bWVudC5yZWZlcnJlciB8fCBuaWw7XG4gICAgICByZWZlcnJlciAmJlxuICAgICAgICAhaXNJbnRlcm5hbFVybChyZWZlcnJlcikgJiZcbiAgICAgICAgKGN1cnJlbnRWaWV3RXZlbnQhLmV4dGVybmFsUmVmZXJyZXIgPSB7XG4gICAgICAgICAgaHJlZjogcmVmZXJyZXIsXG4gICAgICAgICAgZG9tYWluOiBwYXJzZURvbWFpbihyZWZlcnJlcik/LmRvbWFpbixcbiAgICAgICAgfSk7XG5cbiAgICAgIHZpZXdQb3N0ZWQgPSBGO1xuICAgICAgcGVuZGluZ1ZpZXdFdmVudCA9IHJlZ2lzdGVyVmlld0VuZEFjdGlvbihcbiAgICAgICAgKCkgPT4gKFxuICAgICAgICAgICh2aWV3UG9zdGVkID0gVCksXG4gICAgICAgICAgcHVzaCh0cmFja2VyLCBjdXJyZW50Vmlld0V2ZW50KSxcbiAgICAgICAgICBjdXJyZW50Vmlld0V2ZW50Py5maXJzdFRhYiAmJiBwdXNoKHRyYWNrZXIsIHsgZmx1c2g6IFQgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHBlbmRpbmdWaWV3RW5kRXZlbnQgPSByZWdpc3RlclZpZXdFbmRBY3Rpb24oKCkgPT4ge1xuICAgICAgICBwdXNoKFxuICAgICAgICAgIHRyYWNrZXIsXG5cbiAgICAgICAgICB7IHR5cGU6IFwiVklFV19FTkRFRFwiLCB0aW1pbmc6IHt9IH0gYXMgVmlld0VuZGVkRXZlbnQsXG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZXQ6IHsgdmlldzogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBpc05ld1RhYiA9IEY7XG4gICAgICB9KTtcblxuICAgICAgcHVzaCh0cmFja2VyLCB7XG4gICAgICAgIGdldDoge1xuICAgICAgICAgIHZpZXc6ICh2aWV3OiBhbnkpID0+IChjdXJyZW50Vmlld0V2ZW50IS5kZWZpbml0aW9uID0gdmlldyksXG4gICAgICAgICAgcmVuZGVyZWQ6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIEFsbG93IHNvbWUgZXh0cmEgdGltZSBmb3IgZ29zc2lwaW5nIHRvIGZpZ3VyZSBvdXQgaWYgd2UgYXJlIHRoZSBvbmx5IHRhYi5cbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZSB2aWV3IGlzIHNldCBvbiB0aGUgZXZlbnQgaWYgYm90aCBgdmlld2AgYW5kIGByZW5kZXJlZGAgYXJlIHNldCBpbiB0aGUgc2FtZSBgc2V0YCBjb21tYW5kLlxuICAgICAgICAgICAgdGltZW91dChwZW5kaW5nVmlld0V2ZW50LCAxMDApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgdHJhY2tlci5wdXNoKHtcbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgW1FVRVJZX0RFVklDRV06ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCAhaXNGb3JlZ3JvdW5kVGFiKCkpIHJldHVybjtcbiAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgIGNhc3Q8VXNlckFnZW50RXZlbnQ+KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIlVTRVJfQUdFTlRcIixcbiAgICAgICAgICAgICAgICBoYXNUb3VjaDogbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCxcbiAgICAgICAgICAgICAgICB1c2VyQWdlbnQ6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgdmlldzogY3VycmVudFZpZXdFdmVudD8uaWQsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VzOiBtYXAoXG4gICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IubGFuZ3VhZ2VzLFxuICAgICAgICAgICAgICAgICAgKGlkLCBpLCBwYXJ0cyA9IHNwbGl0KGlkLCBcIi1cIikpID0+XG4gICAgICAgICAgICAgICAgICAgIGNhc3Q8VXNlckFnZW50RXZlbnRbXCJsYW5ndWFnZXNcIl0+KHtcbiAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcGFydHNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiBwYXJ0c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5OiBpID09PSAwLFxuICAgICAgICAgICAgICAgICAgICAgIHByZWZlcmVuY2U6IGkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHtcbiAgICAgICAgICAgICAgICAgIGlhbmE6IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZSxcbiAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uZGV0ZWN0RGV2aWNlVHlwZSgpLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGludGVyYWN0aXZlVGltZW91dCA9IHRpbWVvdXQoKTtcbiAgICBsaXN0ZW4oXG4gICAgICBkb2N1bWVudCxcbiAgICAgIFtcInBvaW50ZXJtb3ZlXCIsIFwic2Nyb2xsXCIsIFwicG9pbnRlcmRvd25cIiwgXCJrZXlkb3duXCJdLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpbnRlcmFjdGl2ZUR1cmF0aW9uKFQpO1xuICAgICAgICBpbnRlcmFjdGl2ZVRpbWVvdXQoKCkgPT4gaW50ZXJhY3RpdmVEdXJhdGlvbihGKSwgMTAwMDApO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBsaXN0ZW4oZG9jdW1lbnQsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcImhpZGRlblwiKSB7XG4gICAgICAgIHZpc2libGVEdXJhdGlvbihGKTtcbiAgICAgICAgaW50ZXJhY3RpdmVEdXJhdGlvbihGKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpc2libGVEdXJhdGlvbihUKTtcbiAgICAgICAgKythY3RpdmF0aW9ucztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxpc3RlbihcbiAgICAgIHdpbmRvdyxcbiAgICAgIFwicG9wc3RhdGVcIixcbiAgICAgICgpID0+ICgocHVzaFBvcE5hdmlnYXRpb24gPSBcImJhY2stZm9yd2FyZFwiKSwgcG9zdFZpZXcoKSlcbiAgICApO1xuICAgIG1hcChbXCJwdXNoXCIsIFwicmVwbGFjZVwiXSwgKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IGlubmVyID0gaGlzdG9yeVsobmFtZSArPSBcIlN0YXRlXCIpXTtcbiAgICAgIGhpc3RvcnlbbmFtZV0gPSAoLi4uYXJnczogYW55KSA9PiB7XG4gICAgICAgIGlubmVyLmFwcGx5KGhpc3RvcnksIGFyZ3MpO1xuICAgICAgICBwdXNoUG9wTmF2aWdhdGlvbiA9IFwibmF2aWdhdGVcIjtcbiAgICAgICAgcG9zdFZpZXcoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBwb3N0VmlldygpO1xuXG4gICAgY29uc3QgaGVhcnRiZWF0ID0gdGltZW91dCgpO1xuICAgIGNvbnN0IHJlc2V0SGVhcnRiZWF0ID0gKCkgPT5cbiAgICAgIHZpZXdQb3N0ZWQgJiZcbiAgICAgIHRyYWNrZXJDb25maWcuaGVhcnRiZWF0RnJlcXVlbmN5ID4gMCAmJlxuICAgICAgaGVhcnRiZWF0KFxuICAgICAgICAoKSA9PlxuICAgICAgICAgIGlzRm9yZWdyb3VuZFRhYigpICYmXG4gICAgICAgICAgdHJhY2tlci5wdXNoKGNhc3Q8SGVhcnRiZWF0RXZlbnQ+KHsgdHlwZTogXCJIRUFSVEJFQVRcIiwgdGltaW5nOiB7fSB9KSksXG4gICAgICAgIC10cmFja2VyQ29uZmlnLmhlYXJ0YmVhdEZyZXF1ZW5jeVxuICAgICAgKTtcblxuICAgIHJlc2V0SGVhcnRiZWF0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc0NvbW1hbmQoY29tbWFuZCkge1xuICAgICAgICBpZiAoaXNDaGFuZ2VVc2VyQ29tbWFuZChjb21tYW5kKSkge1xuICAgICAgICAgIHRyYWNrZXIucHVzaChcbiAgICAgICAgICAgIGNvbW1hbmQudXNlcm5hbWVcbiAgICAgICAgICAgICAgPyB7IHR5cGU6IFwiTE9HSU5cIiwgdXNlcm5hbWU6IGNvbW1hbmQudXNlcm5hbWUgfVxuICAgICAgICAgICAgICA6IHsgdHlwZTogXCJMT0dPVVRcIiB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gVDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRjtcbiAgICAgIH0sXG4gICAgICBkZWNvcmF0ZShldmVudCkge1xuICAgICAgICByZXNldEhlYXJ0YmVhdCgpO1xuXG4gICAgICAgIGlmICghY3VycmVudFZpZXdFdmVudCB8fCBpc1ZpZXdFdmVudChldmVudCkpIHJldHVybjtcbiAgICAgICAgY29uc3QgdmlldyA9IGN1cnJlbnRWaWV3RXZlbnQ/LmlkLFxuICAgICAgICAgIGN0eCA9IHtcbiAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICB0aW1pbmc6IChldmVudCBhcyBWaWV3VGltaW5nRXZlbnQpPy50aW1pbmcgJiYge1xuICAgICAgICAgICAgICBhY3RpdmF0aW9ucyxcbiAgICAgICAgICAgICAgdG90YWxUaW1lOiB0b3RhbER1cmF0aW9uKCksXG4gICAgICAgICAgICAgIHZpc2libGVUaW1lOiB2aXNpYmxlRHVyYXRpb24oKSxcbiAgICAgICAgICAgICAgaW50ZXJhY3RpdmVUaW1lOiBpbnRlcmFjdGl2ZUR1cmF0aW9uKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG5cbiAgICAgICAgY3R4ICYmIChhc3NpZ24oZXZlbnQsIGN0eCksIGFkZERlcGVuZGVuY3koZXZlbnQsIGN1cnJlbnRWaWV3RXZlbnQpKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbn07XG4iLCJpbXBvcnQge1xuICBBbmNob3JOYXZpZ2F0aW9uRXZlbnQsXG4gIENhcnRVcGRhdGVkRXZlbnQsXG4gIENvbXBvbmVudENsaWNrRXZlbnQsXG4gIENvbmZpZ3VyZWRDb21wb25lbnQsXG4gIE5hdmlnYXRpb25FdmVudCxcbiAgVXNlckludGVyYWN0aW9uRXZlbnQsXG4gIGNhc3QsXG4gIGlzVmlld0VuZGVkRXZlbnQsXG59IGZyb20gXCJAdGFpbGpzL3R5cGVzXCI7XG5pbXBvcnQge1xuICBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSxcbiAgZ2V0Q29tcG9uZW50Q29udGV4dCxcbiAgb25GcmFtZSxcbiAgcHVzaE5hdmlnYXRpb25Tb3VyY2UsXG4gIHRyeUdldENhcnRFdmVudERhdGEsXG59IGZyb20gXCIuLlwiO1xuXG5pbXBvcnQgeyBDT05URVhUX01FTlVfQ09PS0lFIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcbmltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7IHBhcnNlQWN0aXZhdGlvblRhZ3MgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7XG4gIEYsXG4gIE1OVF9VUkwsXG4gIFQsXG4gIGFueSxcbiAgYXR0cixcbiAgYXR0cmwsXG4gIGNsZWFyLFxuICBjb29raWVzLFxuICBkZWwsXG4gIGRvY3VtZW50LFxuICBlbmNvZGUsXG4gIGVxdWFscyxcbiAgZm9yQW5jZXN0b3JzT3JTZWxmLFxuICBnZXRCb3VuZGFyeURhdGEsXG4gIGdldFNjcmVlblBvcyxcbiAgZ2V0Vmlld3BvcnQsXG4gIGlzSW50ZXJuYWxVcmwsXG4gIGtleXMsXG4gIGxpc3RlbixcbiAgbG9jYXRpb24sXG4gIG1hcCxcbiAgbWFwVXJsLFxuICBtYXRjaEV4SGFzaCxcbiAgbmF2aWdhdG9yLFxuICBuZXh0SWQsXG4gIG5pbCxcbiAgbm9vcEFjdGlvbixcbiAgb2JqLFxuICBwYXJzZURvbWFpbixcbiAgcHVzaCxcbiAgcmVnaXN0ZXJWaWV3RW5kQWN0aW9uLFxuICB0YWdOYW1lLFxuICB0aW1lb3V0LFxuICB0cmFja2VyQ29uZmlnLFxuICB0cmFja2VyRmxhZyxcbiAgdHJ5Q2F0Y2gsXG4gIHdpbmRvdyxcbn0gZnJvbSBcIi4uL2xpYlwiO1xuXG5jb25zdCBpc0xpbmtFbGVtZW50ID0gKFxuICBlbDogRWxlbWVudCxcbiAgaHJlZjogYW55ID0gdGFnTmFtZShlbCkgPT09IFwiQVwiICYmIGF0dHIoZWwsIFwiaHJlZlwiKVxuKTogZWwgaXMgSFRNTEFuY2hvckVsZW1lbnQgPT5cbiAgaHJlZiAmJiBocmVmICE9IFwiI1wiICYmICFocmVmLnN0YXJ0c1dpdGgoXCJqYXZhc2NyaXB0OlwiKTtcblxuY29uc3QgaXNDbGlja2FibGUgPSAoXG4gIGVsOiBFbGVtZW50LFxuICB0ID0gdGFnTmFtZShlbCksXG4gIGF0dHIgPSB0cmFja2VyRmxhZyhlbCwgXCJidXR0b25cIilcbik6IGVsIGlzIEhUTUxFbGVtZW50ID0+XG4gIGF0dHIgIT09IEYgJiZcbiAgKGVxdWFscyh0LCBcIkFcIiwgXCJCVVRUT05cIikgfHxcbiAgICAodCA9PT0gXCJJTlBVVFwiICYmIGVxdWFscyhhdHRybChlbCwgXCJ0eXBlXCIpLCBcImJ1dHRvblwiLCBcInN1Ym1pdFwiKSkgfHxcbiAgICBhdHRyID09PSBUKTtcblxuZnVuY3Rpb24gZ2V0RWxlbWVudExhYmVsKGVsOiBFbGVtZW50IHwgRXZlbnRUYXJnZXQgfCBudWxsLCBjb250YWluZXI6IEVsZW1lbnQpIHtcbiAgbGV0IGluZm86IFBpY2s8VXNlckludGVyYWN0aW9uRXZlbnQsIFwiZWxlbWVudFwiPiB8IHVuZGVmaW5lZDtcbiAgZm9yQW5jZXN0b3JzT3JTZWxmKGVsID8/IGNvbnRhaW5lciwgKGVsKSA9PlxuICAgIGVxdWFscyh0YWdOYW1lKGVsKSwgXCJJTUdcIikgfHwgZWwgPT09IGNvbnRhaW5lclxuICAgICAgPyAoKGluZm8gPSB7XG4gICAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgdGFnTmFtZTogZWwudGFnTmFtZSxcbiAgICAgICAgICAgIHRleHQ6XG4gICAgICAgICAgICAgIGF0dHIoZWwsIFwidGl0bGVcIikgfHxcbiAgICAgICAgICAgICAgYXR0cihlbCwgXCJhbHRcIikgfHxcbiAgICAgICAgICAgICAgKGVsIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQ/LnRyaW0oKS5zdWJzdHJpbmcoMCwgMTAwKSB8fFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIEYpXG4gICAgICA6IFRcbiAgKTtcbiAgcmV0dXJuIGluZm87XG59XG5leHBvcnQgY29uc3QgdXNlckludGVyYWN0aW9uOiBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSA9IHtcbiAgaWQ6IFwibmF2aWdhdGlvblwiLFxuXG4gIHNldHVwKHRyYWNrZXIpIHtcbiAgICBjb25zdCBwb2xsQ29udGV4dENvb2tpZSA9IHRpbWVvdXQoKTtcblxuICAgIC8vIFRoZXJlIGNhbiBiZSBhbGwga2luZHMgb2YgZmlzaHkgbmF2aWdhdGlvbiBsb2dpYyBoYXBwZW5pbmcsIHNvIGl0IGlzIG5vdCBlbm91Z2gganVzdCB0byBsb29rIGF0IGxpbmsgKDxBPikgY2xpY2tzLlxuICAgIC8vIEhlbmNlLCB3aGVuIG5hdmlnYXRpb24gb2NjdXJzIChpbiB0aGUgY3VycmVudCB0YWIpLCB3ZSBkbyBub3Qgc2VuZCB0aGUgZXZlbnQgYmVmb3JlIHdlIGhhdmUgYW4gVklFV19FTkQuXG4gICAgLy8gV2UgcmVseSBvbiB0aGF0IHRoZSBsb2dpYyBmb3IgVklFV19FTkQgdGFrZXMgY2FyZSBhbGwgdGhlIGRpZmZlcmVudCB3YXlzIHRvIG5hdmlnYXRlIChoaXN0b3J5LnB1c2ggZXRjLikgc28gdGhpcyBpcyB3aGVyZSB3ZSBrbm93IHRoYXQgbmF2aWdhdGlvbiBoYXBwZW5lZCBmb3Igc3VyZS5cbiAgICBsZXQgcGVuZGluZ05hdmlnYXRpb25FdmVudCA9IG5vb3BBY3Rpb247XG5cbiAgICBjb25zdCBzdHJpcFBvc2l0aW9ucyA9IDxUID0gYW55PihlbDogYW55LCBoaXRUZXN0OiBib29sZWFuKTogVCA9PlxuICAgICAgaGl0VGVzdFxuICAgICAgICA/IGVsXG4gICAgICAgIDogKG1hcChrZXlzKGVsKSwgKGtleSkgPT5cbiAgICAgICAgICAgIGtleSA9PT0gXCJyZWN0XCIgfHxcbiAgICAgICAgICAgIC8va2V5ID09PSBcInBvc1wiICBDaGFuZ2VkIHNvIHBvcyBpcyBhbHdheXMgaW5jbHVkZWQuXG4gICAgICAgICAgICBrZXkgPT09IFwidmlld3BvcnRcIlxuICAgICAgICAgICAgICA/IGRlbChlbCwga2V5KVxuICAgICAgICAgICAgICA6IG9iaihlbFtrZXldKSAmJlxuICAgICAgICAgICAgICAgIG1hcChlbFtrZXldLCAoaXRlbSkgPT4gc3RyaXBQb3NpdGlvbnMoaXRlbSwgaGl0VGVzdCkpXG4gICAgICAgICAgKSxcbiAgICAgICAgICBlbCk7XG4gICAgY29uc3QgdHJhY2tEb2N1bWVudCA9IChkb2N1bWVudDogRG9jdW1lbnQpID0+IHtcbiAgICAgIGxpc3RlbihcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIFtcImNsaWNrXCIsIFwiY29udGV4dG1lbnVcIiwgXCJhdXhjbGlja1wiXSxcbiAgICAgICAgKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgLy8gQ2FuY2VsIHdoYXRldmVyIHdlIG1pZ2h0IGJlIHdhaXRpbmcgZm9yLlxuICAgICAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uRXZlbnQ/LihGKTtcblxuICAgICAgICAgIGxldCB0cmFja0NsaWNrczogYm9vbGVhbiB8IE51bGxpc2g7XG4gICAgICAgICAgbGV0IHRyYWNrUmVnaW9uOiBib29sZWFuIHwgTnVsbGlzaDtcbiAgICAgICAgICBsZXQgY2xpY2thYmxlRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbmlsISBhcyBIVE1MRWxlbWVudDsgLy8gVHlwZXNjcmlwdCBpbnNpc3RzIHRoaXMgaXMgbmV2ZXI/XG5cbiAgICAgICAgICBsZXQgbmF2ID0gRjtcblxuICAgICAgICAgIGZvckFuY2VzdG9yc09yU2VsZjxib29sZWFuPihldi50YXJnZXQsIChlbCkgPT4ge1xuICAgICAgICAgICAgY2xpY2thYmxlRWxlbWVudCA/Pz0gaXNDbGlja2FibGUoZWwpID8gZWwgOiBuaWw7XG4gICAgICAgICAgICBuYXYgPSBuYXYgfHwgdGFnTmFtZShlbCkgPT09IFwiTkFWXCI7XG5cbiAgICAgICAgICAgIGxldCBjbXA6IENvbmZpZ3VyZWRDb21wb25lbnQgfCBDb25maWd1cmVkQ29tcG9uZW50W10gfCBOdWxsaXNoO1xuXG4gICAgICAgICAgICB0cmFja0NsaWNrcyA/Pz1cbiAgICAgICAgICAgICAgdHJhY2tlckZsYWcoZWwsIFwiY2xpY2tzXCIsIFQsIChkYXRhKSA9PiBkYXRhLnRyYWNrPy5jbGlja3MpID8/XG4gICAgICAgICAgICAgICgoY21wID0gZ2V0Qm91bmRhcnlEYXRhKGVsKT8uY29tcG9uZW50KSAmJlxuICAgICAgICAgICAgICAgIGFueShjbXAsIChjbXApID0+IGNtcC50cmFjaz8uY2xpY2tzICE9PSBGKSk7XG4gICAgICAgICAgICB0cmFja1JlZ2lvbiA/Pz1cbiAgICAgICAgICAgICAgdHJhY2tlckZsYWcoZWwsIFwicmVnaW9uXCIsIFQsIChkYXRhKSA9PiBkYXRhLnRyYWNrPy5yZWdpb24pID8/XG4gICAgICAgICAgICAgICgoY21wID0gZ2V0Qm91bmRhcnlEYXRhKGVsKT8uY29tcG9uZW50KSAmJlxuICAgICAgICAgICAgICAgIGFueShjbXAsIChjbXApID0+IGNtcC50cmFjaz8ucmVnaW9uKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoIWNsaWNrYWJsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY29tcG9uZW50Q29udGV4dCA9IGdldENvbXBvbmVudENvbnRleHQoY2xpY2thYmxlRWxlbWVudCk7XG4gICAgICAgICAgY29uc3QgdGFncyA9IHBhcnNlQWN0aXZhdGlvblRhZ3MoY2xpY2thYmxlRWxlbWVudCk7XG4gICAgICAgICAgdHJhY2tDbGlja3MgPz89ICFuYXY7XG4gICAgICAgICAgdHJhY2tSZWdpb24gPz89IFQ7XG5cbiAgICAgICAgICBjb25zdCBzaGFyZWRFdmVudFByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAuLi4odHJhY2tSZWdpb25cbiAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBwb3M6IGdldFNjcmVlblBvcyhjbGlja2FibGVFbGVtZW50LCBldiksXG4gICAgICAgICAgICAgICAgICB2aWV3cG9ydDogZ2V0Vmlld3BvcnQoKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogbmlsKSxcbiAgICAgICAgICAgIC4uLmdldEVsZW1lbnRMYWJlbChldi50YXJnZXQsIGNsaWNrYWJsZUVsZW1lbnQpLFxuICAgICAgICAgICAgLi4uY29tcG9uZW50Q29udGV4dCxcbiAgICAgICAgICAgIC4uLnRhZ3MsXG4gICAgICAgICAgICB0aW1pbmc6IHt9LFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaXNMaW5rRWxlbWVudChjbGlja2FibGVFbGVtZW50ISkpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsID0gY2xpY2thYmxlRWxlbWVudC5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWU7XG4gICAgICAgICAgICBjb25zdCB7IGRvbWFpbiwgaHJlZiB9ID0gcGFyc2VEb21haW4oY2xpY2thYmxlRWxlbWVudC5ocmVmKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgY2xpY2thYmxlRWxlbWVudC5ob3N0ID09PSBsb2NhdGlvbi5ob3N0ICYmXG4gICAgICAgICAgICAgIGNsaWNrYWJsZUVsZW1lbnQucGF0aG5hbWUgPT09IGxvY2F0aW9uLnBhdGhuYW1lICYmXG4gICAgICAgICAgICAgIGNsaWNrYWJsZUVsZW1lbnQuc2VhcmNoID09PSBsb2NhdGlvbi5zZWFyY2hcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAoY2xpY2thYmxlRWxlbWVudC5oYXNoID09PSBcIiNcIikge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGNhcmUgYWJvdXQgdGhhdCBvbmUuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjbGlja2FibGVFbGVtZW50Lmhhc2ggIT09IGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgICAgICAgIGNhc3Q8QW5jaG9yTmF2aWdhdGlvbkV2ZW50Pih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQU5DSE9SX05BVklHQVRJT05cIixcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yOiBjbGlja2FibGVFbGVtZW50Lmhhc2gsXG4gICAgICAgICAgICAgICAgICAgIC4uLnNoYXJlZEV2ZW50UHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5hdmlnYXRpb25FdmVudDogTmF2aWdhdGlvbkV2ZW50ID0gY2FzdDxOYXZpZ2F0aW9uRXZlbnQ+KHtcbiAgICAgICAgICAgICAgaWQ6IG5leHRJZCgpLFxuICAgICAgICAgICAgICB0eXBlOiBcIk5BVklHQVRJT05cIixcbiAgICAgICAgICAgICAgaHJlZjogZXh0ZXJuYWwgPyBjbGlja2FibGVFbGVtZW50LmhyZWYgOiBocmVmLFxuICAgICAgICAgICAgICBleHRlcm5hbCxcbiAgICAgICAgICAgICAgZG9tYWluLFxuICAgICAgICAgICAgICBzZWxmOiBULFxuICAgICAgICAgICAgICBhbmNob3I6IGNsaWNrYWJsZUVsZW1lbnQuaGFzaCxcbiAgICAgICAgICAgICAgLi4uc2hhcmVkRXZlbnRQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChldi50eXBlID09PSBcImNvbnRleHRtZW51XCIpIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVmZXJyZXJDb25zdW1lZCA9IHB1c2hOYXZpZ2F0aW9uU291cmNlKG5hdmlnYXRpb25FdmVudC5pZCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudFVybCA9IGNsaWNrYWJsZUVsZW1lbnQuaHJlZjtcbiAgICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxVcmwgPSBpc0ludGVybmFsVXJsKGN1cnJlbnRVcmwpO1xuXG4gICAgICAgICAgICAgIGlmICghaW50ZXJuYWxVcmwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRyYWNrZXJDb25maWcuY2FwdHVyZUNvbnRleHRNZW51KSByZXR1cm47XG4gICAgICAgICAgICAgICAgY2xpY2thYmxlRWxlbWVudC5ocmVmID0gbWFwVXJsKFxuICAgICAgICAgICAgICAgICAgTU5UX1VSTCxcbiAgICAgICAgICAgICAgICAgIFwiPVwiLFxuICAgICAgICAgICAgICAgICAgZW5jb2RlKGN1cnJlbnRVcmwpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0cnlDYXRjaChcbiAgICAgICAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWN0aXZhdGlvbj8uaXNBY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY3VycmVudFVybClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgIGNvb2tpZXMoQ09OVEVYVF9NRU5VX0NPT0tJRSwgZmxhZywgMTEwMDApO1xuICAgICAgICAgICAgICBwb2xsQ29udGV4dENvb2tpZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgKGNsaWNrYWJsZUVsZW1lbnQgYXMgSFRNTEFuY2hvckVsZW1lbnQpLmhyZWYgPSBjdXJyZW50VXJsO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICFyZWZlcnJlckNvbnN1bWVkKCkgfHxcbiAgICAgICAgICAgICAgICAgICtjb29raWVzKENPTlRFWFRfTUVOVV9DT09LSUUpISA9PT0gZmxhZyArIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGNvb2tpZXMoQ09OVEVYVF9NRU5VX0NPT0tJRSwgbmlsKTtcbiAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25FdmVudC5zZWxmID0gRjtcbiAgICAgICAgICAgICAgICAgIHB1c2godHJhY2tlciwgbmF2aWdhdGlvbkV2ZW50KTtcbiAgICAgICAgICAgICAgICAgIGNsZWFyKHBvbGxDb250ZXh0Q29va2llKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIC0xMDApO1xuXG4gICAgICAgICAgICAgIGxldCB1bmJpbmRBbGwgPSBsaXN0ZW4oXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgW1wia2V5ZG93blwiLCBcImtleXVwXCIsIFwidmlzaWJpbGl0eWNoYW5nZVwiLCBcInBvaW50ZXJtb3ZlXCJdLFxuICAgICAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgICB1bmJpbmRBbGwoKSAmJlxuICAgICAgICAgICAgICAgICAgY2xlYXIocG9sbENvbnRleHRDb29raWUsIDEwMDAwLCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICBjb29raWVzKENPTlRFWFRfTUVOVV9DT09LSUUsIFwiXCIpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2LmJ1dHRvbiA8PSAxKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBldi5idXR0b24gPT09IDEgfHwgLy9NaWRkbGUtY2xpY2s6IG5ldyB0YWIuXG4gICAgICAgICAgICAgICAgZXYuY3RybEtleSB8fCAvLyBOZXcgdGFiXG4gICAgICAgICAgICAgICAgZXYuc2hpZnRLZXkgfHwgLy8gTmV3IHdpbmRvd1xuICAgICAgICAgICAgICAgIGV2LmFsdEtleSB8fCAvLyBEb3dubG9hZFxuICAgICAgICAgICAgICAgIGF0dHIoY2xpY2thYmxlRWxlbWVudCwgXCJ0YXJnZXRcIikgIT09IHdpbmRvdy5uYW1lXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHB1c2hOYXZpZ2F0aW9uU291cmNlKG5hdmlnYXRpb25FdmVudC5pZCk7XG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbkV2ZW50LnNlbGYgPSBGO1xuICAgICAgICAgICAgICAgIC8vIEZpcmUgaW1tZWRpYXRlbHksIHdlIGFyZSBzdGF5aW5nIG9uIHRoZSBwYWdlLlxuICAgICAgICAgICAgICAgIHB1c2godHJhY2tlciwgbmF2aWdhdGlvbkV2ZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW1hdGNoRXhIYXNoKGxvY2F0aW9uLmhyZWYsIGNsaWNrYWJsZUVsZW1lbnQuaHJlZikpIHtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uRXZlbnQuZXhpdCA9IG5hdmlnYXRpb25FdmVudC5leHRlcm5hbDtcbiAgICAgICAgICAgICAgICAvLyBObyBcInJlYWxcIiBuYXZpZ2F0aW9uIHdpbGwgaGFwcGVuIGlmIGl0IGlzIG9ubHkgdGhlIGhhc2ggY2hhbmdpbmcuXG4gICAgICAgICAgICAgICAgcHVzaE5hdmlnYXRpb25Tb3VyY2UobmF2aWdhdGlvbkV2ZW50LmlkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIElmIGl0IHNvIGhhcHBlbmVkIHRoYXQgbmF2aWdhdGlvbiBoYXBwZW5lZCB3ZSB3aWxsIHNlbmQgaXQgb24gVklFV19FTkQuXG4gICAgICAgICAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uRXZlbnQgPSByZWdpc3RlclZpZXdFbmRBY3Rpb24oKCkgPT5cbiAgICAgICAgICAgICAgICBwdXNoKHRyYWNrZXIsIG5hdmlnYXRpb25FdmVudClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjYXJ0ID0gdHJ5R2V0Q2FydEV2ZW50RGF0YShldi50YXJnZXQgYXMgRWxlbWVudCk7XG4gICAgICAgICAgKGNhcnQgfHwgdHJhY2tDbGlja3MpICYmXG4gICAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgICB0cmFja2VyLFxuICAgICAgICAgICAgICBjYXJ0XG4gICAgICAgICAgICAgICAgPyBjYXN0PENhcnRVcGRhdGVkRXZlbnQ+KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJDQVJUX1VQREFURURcIixcbiAgICAgICAgICAgICAgICAgICAgLi4uc2hhcmVkRXZlbnRQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAgICAuLi5jYXJ0LFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IGNhc3Q8Q29tcG9uZW50Q2xpY2tFdmVudD4oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkNPTVBPTkVOVF9DTElDS1wiLFxuICAgICAgICAgICAgICAgICAgICAuLi5zaGFyZWRFdmVudFByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHRyYWNrRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIG9uRnJhbWUoXG4gICAgICAoZnJhbWUpID0+IGZyYW1lLmNvbnRlbnREb2N1bWVudCAmJiB0cmFja0RvY3VtZW50KGZyYW1lLmNvbnRlbnREb2N1bWVudClcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRlY29yYXRlKGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoaXNWaWV3RW5kZWRFdmVudChldmVudERhdGEpKSB7XG4gICAgICAgICAgcGVuZGluZ05hdmlnYXRpb25FdmVudChUKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcbiIsImltcG9ydCB7XG4gIHR5cGUgQ2FydEFjdGlvbixcbiAgdHlwZSBDYXJ0RXZlbnREYXRhLFxuICB0eXBlIENhcnRVcGRhdGVkRXZlbnQsXG4gIHR5cGUgT3JkZXJFdmVudCxcbn0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7IFRyYWNrZXJFeHRlbnNpb25GYWN0b3J5LCBpc0NhcnRDb21tYW5kLCBpc09yZGVyQ29tbWFuZCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHtcbiAgRixcbiAgVCxcbiAgZXF1YWxzLFxuICBmb3JBbmNlc3RvcnNPclNlbGYsXG4gIGdldEJvdW5kYXJ5RGF0YSxcbiAgaXRlbSxcbiAgbmlsLFxuICBvYmosXG4gIHB1c2gsXG4gIHN0cixcbiAgdHJhY2tlclByb3BlcnR5LFxuICB1bmRlZmluZWQsXG59IGZyb20gXCIuLi9saWJcIjtcblxuZXhwb3J0IGNvbnN0IHBhcnNlQ2FydEV2ZW50RGF0YSA9IChcbiAgZGF0YTogYm9vbGVhbiB8IHN0cmluZyB8IENhcnRFdmVudERhdGEgfCBOdWxsaXNoXG4pOiBDYXJ0RXZlbnREYXRhIHwgdW5kZWZpbmVkID0+IChcbiAgZGF0YSA9PSBuaWwgPyB1bmRlZmluZWQgOiAoZGF0YSA9PT0gVCB8fCBkYXRhID09PSBcIlwiKSAmJiAoZGF0YSA9IFwiYWRkXCIpLFxuICBzdHIoZGF0YSkgJiYgZXF1YWxzKGRhdGEsIFwiYWRkXCIsIFwicmVtb3ZlXCIsIFwidXBkYXRlXCIsIFwiY2xlYXJcIilcbiAgICA/IHsgYWN0aW9uOiBkYXRhIGFzIENhcnRBY3Rpb24gfVxuICAgIDogb2JqKGRhdGEpXG4gICAgPyBkYXRhXG4gICAgOiB1bmRlZmluZWRcbik7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNhcnRFdmVudERhdGEoZGF0YTogQ2FydEV2ZW50RGF0YSB8IE51bGxpc2gpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIGlmIChkYXRhLnVuaXRzICE9IG5pbCAmJiBlcXVhbHMoZGF0YS5hY3Rpb24sIG5pbCwgXCJhZGRcIiwgXCJyZW1vdmVcIikpIHtcbiAgICBpZiAoZGF0YS51bml0cyA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBkYXRhLmFjdGlvbiA9IGRhdGEudW5pdHMgPiAwID8gXCJhZGRcIiA6IFwicmVtb3ZlXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cnlHZXRDYXJ0RXZlbnREYXRhKHNvdXJjZUVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgLy8gRmluZCBjYXJ0LiBMb29rIGZvciBjYXJ0IGF0dHJpYnV0ZXMgYW5kL29yIGRhdGEgdW50aWwgdGhlIGZpcnN0IGNvbnRlbnQgaXMgbWV0LlxuICBsZXQgY29udGV4dENhcnQ6IENhcnRFdmVudERhdGEgfCBOdWxsaXNoO1xuICBmb3JBbmNlc3RvcnNPclNlbGYoXG4gICAgc291cmNlRWxlbWVudCxcbiAgICAoZWwsIHIpID0+XG4gICAgICAhIShjb250ZXh0Q2FydCA/Pz0gcGFyc2VDYXJ0RXZlbnREYXRhKFxuICAgICAgICBnZXRCb3VuZGFyeURhdGEoZWwpPy5jYXJ0ID8/IHRyYWNrZXJQcm9wZXJ0eShlbCwgXCJjYXJ0XCIpXG4gICAgICApKSAmJlxuICAgICAgIWNvbnRleHRDYXJ0Lml0ZW0gJiZcbiAgICAgIChjb250ZXh0Q2FydC5pdGVtID0gaXRlbShnZXRCb3VuZGFyeURhdGEoZWwpPy5jb250ZW50LCAtMSkpICYmXG4gICAgICByKGNvbnRleHRDYXJ0KVxuICApO1xuXG4gIHJldHVybiBub3JtYWxpemVDYXJ0RXZlbnREYXRhKGNvbnRleHRDYXJ0KTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbW1lcmNlOiBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSA9IHtcbiAgaWQ6IFwiY2FydFwiLFxuICBzZXR1cCh0cmFja2VyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2Nlc3NDb21tYW5kKGNvbW1hbmQpIHtcbiAgICAgICAgaWYgKGlzQ2FydENvbW1hbmQoY29tbWFuZCkpIHtcbiAgICAgICAgICBsZXQgY2FydCA9IGNvbW1hbmQuY2FydDtcbiAgICAgICAgICBjYXJ0ID09PSBcImNsZWFyXCJcbiAgICAgICAgICAgID8gcHVzaCh0cmFja2VyLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJDQVJUX1VQREFURURcIixcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiY2xlYXJcIixcbiAgICAgICAgICAgICAgfSBhcyBDYXJ0VXBkYXRlZEV2ZW50KVxuICAgICAgICAgICAgOiAoY2FydCA9IG5vcm1hbGl6ZUNhcnRFdmVudERhdGEoY2FydCkhKSAmJlxuICAgICAgICAgICAgICBwdXNoKHRyYWNrZXIsIHtcbiAgICAgICAgICAgICAgICAuLi5jYXJ0LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiQ0FSVF9VUERBVEVEXCIsXG4gICAgICAgICAgICAgIH0gYXMgQ2FydFVwZGF0ZWRFdmVudCk7XG5cbiAgICAgICAgICByZXR1cm4gVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPcmRlckNvbW1hbmQoY29tbWFuZCkpIHtcbiAgICAgICAgICBwdXNoKHRyYWNrZXIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwiT1JERVJcIixcbiAgICAgICAgICAgIC4uLmNvbW1hbmQub3JkZXIsXG4gICAgICAgICAgfSBhcyBPcmRlckV2ZW50KTtcblxuICAgICAgICAgIHJldHVybiBUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcbiIsImltcG9ydCB7XG4gIEltcHJlc3Npb25FdmVudCxcbiAgY2FzdCxcbiAgdHlwZSBBY3RpdmF0ZWRDb21wb25lbnQsXG4gIHR5cGUgQWN0aXZhdGVkQ29udGVudCxcbiAgdHlwZSBDb25maWd1cmVkQ29tcG9uZW50LFxuICB0eXBlIFJlY3RhbmdsZSxcbiAgdHlwZSBVc2VySW50ZXJhY3Rpb25FdmVudCxcbn0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7XG4gIEJvdW5kYXJ5Q29tbWFuZCxcbiAgQm91bmRhcnlEYXRhLFxuICBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSxcbiAgZ2V0VmlzaWJsZUR1cmF0aW9uLFxuICBpc0RhdGFCb3VuZGFyeUNvbW1hbmQsXG4gIGlzU2NhbkNvbXBvbmVudHNDb21tYW5kLFxufSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7XG4gIEYsXG4gIE5vZGVXaXRoUGFyZW50RWxlbWVudCxcbiAgUGVuZGluZ0FjdGlvbkhhbmRsZSxcbiAgVCxcbiAgYW55LFxuICBib3VuZGFyeURhdGEsXG4gIGNsZWFyLFxuICBjb25jYXQsXG4gIGRlbCxcbiAgZmlsdGVyLFxuICBmbGF0TWFwLFxuICBmb3JBbmNlc3RvcnNPclNlbGYsXG4gIGZvckVhY2gsXG4gIGdldCxcbiAgZ2V0UmVjdCxcbiAgZ2V0U2NyZWVuUG9zLFxuICBnZXRWaWV3cG9ydCxcbiAgam9pbixcbiAgbWFwLFxuICBtYXgsXG4gIG5pbCxcbiAgcGFyc2VUYWdzLFxuICBwdXNoLFxuICByZWdpc3RlclZpZXdFbmRBY3Rpb24sXG4gIHNjYW5BdHRyaWJ1dGVzLFxuICBzZXQsXG4gIHNpemUsXG4gIHN0cixcbiAgdGltZW91dCxcbiAgdGltZXIsXG4gIHRyYWNrZXJDb25maWcsXG4gIHRyYWNrZXJGbGFnLFxuICB0cmFja2VyUHJvcGVydHksXG4gIHVuZGVmaW5lZCxcbiAgdW5zaGlmdCxcbn0gZnJvbSBcIi4uL2xpYlwiO1xuZXhwb3J0IHR5cGUgQWN0aXZhdGVkRG9tQ29tcG9uZW50ID0gQ29uZmlndXJlZENvbXBvbmVudCAmIEFjdGl2YXRlZENvbXBvbmVudDtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudERvbUNvbmZpZ3VyYXRpb24gPSBTeW1ib2woXCJET00gY29uZmlndXJhdGlvblwiKTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlQWN0aXZhdGlvblRhZ3MgPSAoZWw6IEVsZW1lbnQpID0+XG4gIHBhcnNlVGFncyhlbCwgdW5kZWZpbmVkLCAoZWwpID0+IG1hcChnZXQoYm91bmRhcnlEYXRhLCBlbCk/LnRhZ3MpKTtcblxuY29uc3QgaGFzQ29tcG9uZW50T3JDb250ZW50ID0gKGJvdW5kYXJ5PzogQm91bmRhcnlEYXRhIHwgbnVsbCkgPT5cbiAgYm91bmRhcnk/LmNvbXBvbmVudCB8fCBib3VuZGFyeT8uY29udGVudDtcblxubGV0IGVudHJ5OiBCb3VuZGFyeURhdGEgfCB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgcGFyc2VCb3VuZGFyeVRhZ3MgPSAoZWw6IEVsZW1lbnQpID0+XG4gIHBhcnNlVGFncyhcbiAgICBlbCxcbiAgICAoYW5jZXN0b3IpID0+XG4gICAgICBhbmNlc3RvciAhPT0gZWwgJiYgISFoYXNDb21wb25lbnRPckNvbnRlbnQoZ2V0KGJvdW5kYXJ5RGF0YSwgYW5jZXN0b3IpKSxcbiAgICAoZWwpID0+XG4gICAgICAoZW50cnkgPSBnZXQoYm91bmRhcnlEYXRhLCBlbCkpICYmXG4gICAgICBjb25jYXQoXG4gICAgICAgIGZsYXRNYXAoW2VudHJ5LmNvbXBvbmVudCwgZW50cnkuY29udGVudF0sIChpdGVtKSA9PlxuICAgICAgICAgIGZsYXRNYXAoaXRlbSwgKGl0ZW0pID0+IG1hcChpdGVtLnRhZ3MsIEYpKVxuICAgICAgICApLFxuICAgICAgICBlbnRyeS50YWdzXG4gICAgICApXG4gICk7XG5cbmxldCBjb250ZW50OiBBY3RpdmF0ZWRDb250ZW50W10gfCB1bmRlZmluZWQ7XG5jb25zdCBzdHJpcFJlY3RzID0gKFxuICBjb21wb25lbnQ6IEFjdGl2YXRlZERvbUNvbXBvbmVudCxcbiAga2VlcD86IGJvb2xlYW5cbik6IEFjdGl2YXRlZERvbUNvbXBvbmVudCA9PlxuICBrZWVwXG4gICAgPyBjb21wb25lbnRcbiAgICA6IHtcbiAgICAgICAgLi4uY29tcG9uZW50LFxuICAgICAgICByZWN0OiB1bmRlZmluZWQsXG4gICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgKGNvbnRlbnQgPSBjb21wb25lbnQuY29udGVudCkgJiZcbiAgICAgICAgICBtYXAoY29udGVudCwgKGNvbnRlbnQpID0+ICh7IC4uLmNvbnRlbnQsIHJlY3Q6IHVuZGVmaW5lZCB9KSksXG4gICAgICB9O1xuXG5jb25zdCBlbnVtIEluY2x1ZGVTdGF0ZSB7XG4gIFNlY29uZGFyeSA9IDAsXG4gIFByaW1hcnkgPSAxLFxuICBQcm9tb3RlZCA9IDIsXG59XG5cbmNvbnN0IHNldENvbnRleHQgPSB0aW1lb3V0KCk7XG5cbmV4cG9ydCBjb25zdCBnZXRDb21wb25lbnRDb250ZXh0ID0gKFxuICBlbDogTm9kZVdpdGhQYXJlbnRFbGVtZW50LFxuICBkaXJlY3RPbmx5ID0gRlxuKSA9PiB7XG4gIGNsZWFyKHNldENvbnRleHQpO1xuXG4gIGxldCBjb2xsZWN0ZWRDb250ZW50OiBBY3RpdmF0ZWRDb250ZW50W10gPSBbXTtcblxuICB0eXBlIEFyZWEgPSB7fSAmIHN0cmluZzsgLy8gRm9yIGNsYXJpdHkuXG4gIGxldCBjb2xsZWN0ZWQ6IChBY3RpdmF0ZWREb21Db21wb25lbnQgfCBBcmVhKVtdID0gW107XG5cbiAgbGV0IGluY2x1ZGVTdGF0ZSA9IEluY2x1ZGVTdGF0ZS5TZWNvbmRhcnk7XG4gIGxldCByZWN0OiBSZWN0YW5nbGUgfCB1bmRlZmluZWQ7XG4gIGZvckFuY2VzdG9yc09yU2VsZihlbCwgKGVsKSA9PiB7XG4gICAgY29uc3QgZW50cnkgPSBnZXQoYm91bmRhcnlEYXRhLCBlbCk7XG4gICAgaWYgKCFlbnRyeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChoYXNDb21wb25lbnRPckNvbnRlbnQoZW50cnkpKSB7XG4gICAgICBjb25zdCBjb21wb25lbnRzID0gZmlsdGVyKFxuICAgICAgICBlbnRyeS5jb21wb25lbnQsXG4gICAgICAgIChlbnRyeSkgPT5cbiAgICAgICAgICBpbmNsdWRlU3RhdGUgPT09IEluY2x1ZGVTdGF0ZS5TZWNvbmRhcnkgfHxcbiAgICAgICAgICAoIWRpcmVjdE9ubHkgJiZcbiAgICAgICAgICAgICgoaW5jbHVkZVN0YXRlID09PSBJbmNsdWRlU3RhdGUuUHJpbWFyeSAmJlxuICAgICAgICAgICAgICBlbnRyeS50cmFjaz8uc2Vjb25kYXJ5ICE9PSBUKSB8fFxuICAgICAgICAgICAgICBlbnRyeS50cmFjaz8ucHJvbW90ZSkpXG4gICAgICApO1xuXG4gICAgICByZWN0ID1cbiAgICAgICAgKGFueShjb21wb25lbnRzLCAoaXRlbSkgPT4gaXRlbS50cmFjaz8ucmVnaW9uKSAmJiBnZXRSZWN0KGVsKSkgfHxcbiAgICAgICAgdW5kZWZpbmVkO1xuICAgICAgY29uc3QgdGFncyA9IHBhcnNlQm91bmRhcnlUYWdzKGVsKTtcbiAgICAgIGVudHJ5LmNvbnRlbnQgJiZcbiAgICAgICAgdW5zaGlmdChcbiAgICAgICAgICBjb2xsZWN0ZWRDb250ZW50LFxuICAgICAgICAgIC4uLm1hcChlbnRyeS5jb250ZW50LCAoaXRlbSkgPT4gKHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZWN0LFxuICAgICAgICAgICAgLi4udGFncyxcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcblxuICAgICAgY29tcG9uZW50cy5sZW5ndGggJiZcbiAgICAgICAgKHVuc2hpZnQoXG4gICAgICAgICAgY29sbGVjdGVkLFxuICAgICAgICAgIC4uLm1hcChcbiAgICAgICAgICAgIGNvbXBvbmVudHMsXG4gICAgICAgICAgICAoaXRlbSkgPT4gKFxuICAgICAgICAgICAgICAoaW5jbHVkZVN0YXRlID0gbWF4KFxuICAgICAgICAgICAgICAgIGluY2x1ZGVTdGF0ZSxcbiAgICAgICAgICAgICAgICBpdGVtLnRyYWNrPy5zZWNvbmRhcnkgLy8gSU5WOiBTZWNvbmRhcnkgY29tcG9uZW50cyBhcmUgb25seSBpbmNsdWRlZCBoZXJlIGlmIHdlIGRpZCBub3QgaGF2ZSBhbnkgY29tcG9uZW50cyBmcm9tIGEgY2hpbGQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgID8gSW5jbHVkZVN0YXRlLlByaW1hcnlcbiAgICAgICAgICAgICAgICAgIDogSW5jbHVkZVN0YXRlLlByb21vdGVkXG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICBzdHJpcFJlY3RzKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBjb2xsZWN0ZWRDb250ZW50LFxuICAgICAgICAgICAgICAgICAgcmVjdCxcbiAgICAgICAgICAgICAgICAgIC4uLnRhZ3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAhIXJlY3RcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgKGNvbGxlY3RlZENvbnRlbnQgPSBbXSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGFyZWEgPSBlbnRyeS5hcmVhIHx8IHRyYWNrZXJQcm9wZXJ0eShlbCwgXCJhcmVhXCIpO1xuICAgIGFyZWEgJiYgdW5zaGlmdChjb2xsZWN0ZWQsIC4uLm1hcChhcmVhKSk7XG4gIH0pO1xuXG4gIGxldCBhcmVhUGF0aDogc3RyaW5nW10gfCB1bmRlZmluZWQ7XG4gIGxldCBjb21wb25lbnRzOiBBY3RpdmF0ZWRDb21wb25lbnRbXSB8IHVuZGVmaW5lZDtcblxuICBpZiAoY29sbGVjdGVkQ29udGVudC5sZW5ndGgpIHtcbiAgICAvLyBDb250ZW50IHdpdGhvdXQgYSBjb250YW5pbmcgY29tcG9uZW50IGlzIGdhdGhlcmVkIGluIGFuIElELWxlc3MgY29tcG9uZW50LlxuICAgIHB1c2goY29sbGVjdGVkLCBzdHJpcFJlY3RzKHsgaWQ6IFwiXCIsIHJlY3QsIGNvbnRlbnQ6IGNvbGxlY3RlZENvbnRlbnQgfSkpO1xuICB9XG5cbiAgZm9yRWFjaChjb2xsZWN0ZWQsIChpdGVtKSA9PiB7XG4gICAgaWYgKHN0cihpdGVtKSkge1xuICAgICAgcHVzaCgoYXJlYVBhdGggPz89IFtdKSwgaXRlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0uYXJlYSA/Pz0gam9pbihhcmVhUGF0aCwgXCIvXCIpO1xuICAgICAgdW5zaGlmdCgoY29tcG9uZW50cyA/Pz0gW10pLCBpdGVtKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb21wb25lbnRzIHx8IGFyZWFQYXRoXG4gICAgPyB7IGNvbXBvbmVudHM6IGNvbXBvbmVudHMsIGFyZWE6IGpvaW4oYXJlYVBhdGgsIFwiL1wiKSB9XG4gICAgOiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBpbnRlcnNlY3Rpb25IYW5kbGVyID0gU3ltYm9sKCk7XG5leHBvcnQgY29uc3QgY29tcG9uZW50czogVHJhY2tlckV4dGVuc2lvbkZhY3RvcnkgPSB7XG4gIGlkOiBcImNvbXBvbmVudHNcIixcbiAgc2V0dXAodHJhY2tlcikge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgKGVscykgPT5cbiAgICAgICAgZm9yRWFjaChcbiAgICAgICAgICBlbHMsXG4gICAgICAgICAgKHsgdGFyZ2V0LCBpc0ludGVyc2VjdGluZywgYm91bmRpbmdDbGllbnRSZWN0LCBpbnRlcnNlY3Rpb25SYXRpbyB9KSA9PlxuICAgICAgICAgICAgdGFyZ2V0W2ludGVyc2VjdGlvbkhhbmRsZXJdPy4oXG4gICAgICAgICAgICAgIGlzSW50ZXJzZWN0aW5nLFxuICAgICAgICAgICAgICBib3VuZGluZ0NsaWVudFJlY3QsXG4gICAgICAgICAgICAgIGludGVyc2VjdGlvblJhdGlvXG4gICAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAvLyBMb3cgdGhyZXNob2xkcyB1c2VkIHRvIGJlIGFibGUgdG8gaGFuZGxlIGNvbXBvbmVudHMgbGFyZ2VyIHRoYW4gdmlld3BvcnRzXG4gICAgICB7IHRocmVzaG9sZDogWzAuMDUsIDAuMSwgMC4xNSwgMC4yLCAwLjMsIDAuNCwgMC41LCAwLjYsIDAuNzVdIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQoeyBib3VuZGFyeTogZWwsIC4uLmNvbW1hbmQgfTogQm91bmRhcnlDb21tYW5kKSB7XG4gICAgICBsZXQgdXBkYXRlID1cbiAgICAgICAgXCJhZGRcIiBpbiBjb21tYW5kXG4gICAgICAgICAgPyAoY3VycmVudDogQm91bmRhcnlEYXRhKSA9PlxuICAgICAgICAgICAgICBjYXN0PEJvdW5kYXJ5RGF0YT4oe1xuICAgICAgICAgICAgICAgIC4uLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBjb25jYXQoY3VycmVudD8uY29tcG9uZW50LCBjb21tYW5kLmNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgY29udGVudDogY29uY2F0KGN1cnJlbnQ/LmNvbnRlbnQsIGNvbW1hbmQuY29udGVudCksXG4gICAgICAgICAgICAgICAgYXJlYTogY29tbWFuZD8uYXJlYSA/PyBjdXJyZW50Py5hcmVhLFxuICAgICAgICAgICAgICAgIHRhZ3M6IGNvbmNhdChjdXJyZW50Py50YWdzLCBjb21tYW5kLnRhZ3MpLFxuICAgICAgICAgICAgICAgIGNhcnQ6IGNvbW1hbmQuY2FydCA/PyBjdXJyZW50Py5jYXJ0LFxuICAgICAgICAgICAgICAgIHRyYWNrOiBjb21tYW5kLnRyYWNrID8/IGN1cnJlbnQ/LnRyYWNrLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgIDogY29tbWFuZFtcInVwZGF0ZVwiXTtcblxuICAgICAgc2V0KGJvdW5kYXJ5RGF0YSwgZWwsIHVwZGF0ZSA/PyBjb21tYW5kKTtcblxuICAgICAgbGV0IGNvbXBvbmVudHM6IENvbmZpZ3VyZWRDb21wb25lbnRbXSB8IHVuZGVmaW5lZDtcbiAgICAgIGlmIChcbiAgICAgICAgKGNvbXBvbmVudHMgPSBmaWx0ZXIoXG4gICAgICAgICAgZ2V0KGJvdW5kYXJ5RGF0YSwgZWwpPy5jb21wb25lbnQsXG4gICAgICAgICAgKGNtcCkgPT5cbiAgICAgICAgICAgIC8vIEltcHJlc3Npb24gc2V0dGluZ3MgZnJvbSB0aGUgRE9NL0NTUyBhcmUgaWdub3JyZWQgZm9yIHNlY29uZGFyeSBhbmQgaW5mZXJyZWQgY29tcG9uZW50cyAocGVyZm9ybWFuY2UgdGhpbmcpXG4gICAgICAgICAgICBjbXAhLnRyYWNrPy5pbXByZXNzaW9ucyB8fFxuICAgICAgICAgICAgKGNtcC50cmFjaz8uc2Vjb25kYXJ5ID8/IGNtcC5pbmZlcnJlZCkgIT09IFRcbiAgICAgICAgKSlcbiAgICAgICkge1xuICAgICAgICBpZiAoIXNpemUoY29tcG9uZW50cykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmlzaWJsZSA9IEY7XG4gICAgICAgIGxldCBpbXByZXNzaW9ucyA9IDA7XG4gICAgICAgIGxldCBldmVudDogUGVuZGluZ0FjdGlvbkhhbmRsZSB8IG51bGwgPSBuaWw7XG4gICAgICAgIGxldCBmb2xkOiBudW1iZXI7XG4gICAgICAgIGNvbnN0IGNhcHR1cmVTdGF0ZSA9IHRpbWVvdXQoKTtcbiAgICAgICAgY29uc3QgdCA9IHRpbWVyKCgpID0+IGdldFZpc2libGVEdXJhdGlvbigpLCBGKTtcblxuICAgICAgICBlbFtpbnRlcnNlY3Rpb25IYW5kbGVyXSA9IChcbiAgICAgICAgICBpbnRlcnNlY3Rpbmc6IGJvb2xlYW4sXG4gICAgICAgICAgcmVjdDogRE9NUmVjdFJlYWRPbmx5LFxuICAgICAgICAgIHJhdGlvOiBudW1iZXJcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgaW50ZXJzZWN0aW5nID1cbiAgICAgICAgICAgIHJhdGlvID49IDAuNzUgfHxcbiAgICAgICAgICAgIChyZWN0LnRvcCA8IChmb2xkID0gd2luZG93LmlubmVySGVpZ2h0IC8gMikgJiYgcmVjdC5ib3R0b20gPiBmb2xkKTtcblxuICAgICAgICAgIHQoaW50ZXJzZWN0aW5nKTtcbiAgICAgICAgICBpZiAodmlzaWJsZSAhPT0gKHZpc2libGUgPSBpbnRlcnNlY3RpbmcpKSB7XG4gICAgICAgICAgICAvL2VsW1wic3R5bGVcIl0uYm9yZGVyID0gdmlzaWJsZSA/IFwiMnB4IHNvbGlkIGJsdWVcIiA6IFwiXCI7XG4gICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICBjYXB0dXJlU3RhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICsraW1wcmVzc2lvbnM7XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAoY21wKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgKChjbXAhLnRyYWNrPy5pbXByZXNzaW9ucyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyRmxhZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltcHJlc3Npb25zXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0YSkgPT4gZGF0YS50cmFjaz8uaW1wcmVzc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdDxJbXByZXNzaW9uRXZlbnQ+KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIklNUFJFU1NJT05cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IGdldFNjcmVlblBvcyhlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQ6IGdldFZpZXdwb3J0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZ2V0Q29tcG9uZW50Q29udGV4dChlbCwgVCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbmlsXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBldmVudCA9IHJlZ2lzdGVyVmlld0VuZEFjdGlvbigoKSA9PlxuICAgICAgICAgICAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgLi4ubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGV2KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoZXYuZHVyYXRpb24gPSB0KCkpLCAoZXYuaW1wcmVzc2lvbnMgPSBpbXByZXNzaW9ucykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBldlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIC10cmFja2VyQ29uZmlnLmltcHJlc3Npb25UaHJlc2hvbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2xlYXIoY2FwdHVyZVN0YXRlKTsgLy8gTm90IHZpc2libGUsIGNsZWFyIHRpbWVvdXQuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICFlbC5pc0Nvbm5lY3RlZCAmJiAoZXZlbnQ/LigpLCAoZXZlbnQgPSBuaWwpKTtcbiAgICAgICAgfTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRlY29yYXRlKGV2ZW50RGF0YSkge1xuICAgICAgICAvLyBTdHJpcCB0cmFja2luZyBjb25maWd1cmF0aW9uLlxuICAgICAgICBmb3JFYWNoKChldmVudERhdGEgYXMgVXNlckludGVyYWN0aW9uRXZlbnQpLmNvbXBvbmVudHMsIChjb21wb25lbnQpID0+XG4gICAgICAgICAgZGVsKGNvbXBvbmVudCBhcyBhbnksIFwidHJhY2tcIilcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBwcm9jZXNzQ29tbWFuZChjbWQpIHtcbiAgICAgICAgcmV0dXJuIGlzRGF0YUJvdW5kYXJ5Q29tbWFuZChjbWQpXG4gICAgICAgICAgPyAocmVnaXN0ZXJDb21wb25lbnQoY21kKSwgVClcbiAgICAgICAgICA6IGlzU2NhbkNvbXBvbmVudHNDb21tYW5kKGNtZClcbiAgICAgICAgICA/IChtYXAoXG4gICAgICAgICAgICAgIHNjYW5BdHRyaWJ1dGVzKGNtZC5zY2FuLmF0dHJpYnV0ZSwgY21kLnNjYW4uY29tcG9uZW50cyksXG4gICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgVClcbiAgICAgICAgICA6IEY7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgUVVFUllfREVWSUNFIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcbmltcG9ydCB7IFRyYWNrZWRFdmVudCwgaXNDb25zZW50RXZlbnQsIGlzVHJhY2tlZEV2ZW50IH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7XG4gIExpc3RlbmVyLFxuICBUcmFja2VyLFxuICBUcmFja2VyQ29tbWFuZCxcbiAgVHJhY2tlckNvbmZpZ3VyYXRpb24sXG4gIFRyYWNrZXJFeHRlbnNpb24sXG4gIGRlZmF1bHRFeHRlbnNpb25zLFxuICBpc0V4dGVuc2lvbkNvbW1hbmQsXG4gIGlzRmx1c2hDb21tYW5kLFxuICBpc0dldENvbW1hbmQsXG4gIGlzTGlzdGVuZXJDb21tYW5kLFxuICBpc1NldENvbW1hbmQsXG4gIGlzVGFnQXR0cmlidXRlc0NvbW1hbmQsXG4gIGlzVG9nZ2xlQ29tbWFuZCxcbiAgaXNUcmFja2VyQXZhaWxhYmxlQ29tbWFuZCxcbn0gZnJvbSBcIi5cIjtcbmltcG9ydCB7XG4gIEVSUl9JTlRFUk5BTF9FUlJPUixcbiAgRVJSX0lOVkFMSURfQ09NTUFORCxcbiAgRixcbiAgVCxcbiAgVVNSX1VSTCxcbiAgYWRkR2xvYmFsU3RhdGVSZXNvbHZlZExpc3RlbmVyLFxuICBhZGRRdWV1ZVBvc3RMaXN0ZW5lcixcbiAgYWRkUmVzcG9uc2VMaXN0ZW5lcixcbiAgYXJyYXksXG4gIGFzc2lnbixcbiAgY29tbWl0LFxuICBjcmVhdGVDaGFubmVsLFxuICBkZWZpbmUsXG4gIGRlbCxcbiAgZW5xdWV1ZUV2ZW50LFxuICBlbnRyaWVzLFxuICBlcnIsXG4gIGZpbHRlcixcbiAgZnVuLFxuICBnbG9iYWxTdGF0ZVJlc29sdmVkLFxuICBodHRwRGVjb2RlLFxuICBpc1RyYWNrZXIsXG4gIGxpc3RlbixcbiAgbWFwLFxuICBtYXBVcmwsXG4gIG5leHRJZCxcbiAgbmlsLFxuICBub3csXG4gIG9wZW5Qcm9taXNlLFxuICBwdXNoLFxuICByZWdpc3RlclNoYXJlZFN0YXRlLFxuICBzZXRTdG9yYWdlS2V5LFxuICBzaXplLFxuICBzb3J0LFxuICBzcGxpY2UsXG4gIHN0YXJ0dXBDb21wbGV0ZSxcbiAgc3RyLFxuICB0cmFja2VyQ29uZmlnLFxuICB0cnlDYXRjaCxcbiAgdmFyaWFibGVzLFxuICB3aW5kb3csXG59IGZyb20gXCIuL2xpYlwiO1xuXG5leHBvcnQgbGV0IHRyYWNrZXI6IFRyYWNrZXI7XG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVRyYWNrZXIgPSAoY29uZmlnOiBUcmFja2VyQ29uZmlndXJhdGlvbiB8IHN0cmluZykgPT4ge1xuICBpZiAodHJhY2tlcikgcmV0dXJuIHRyYWNrZXI7XG4gIHN0cihjb25maWcpICYmIChjb25maWcgPSBodHRwRGVjb2RlKGNvbmZpZykhKTtcblxuICAvLyBNYWtlIHN1cmUgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIGFsbCBwYXJhbWV0ZXJzIHNldCB0byB2YWxpZCB2YWx1ZXMuXG4gIG1hcChcbiAgICBbXCJ2YXJzXCIsIFwiaHViXCJdLFxuICAgIChwKSA9PiAhZnVuKGNvbmZpZ1twXSkgJiYgKGNvbmZpZ1twXSA9IG1hcFVybChjb25maWdbcF0pKVxuICApO1xuXG4gIGFzc2lnbih0cmFja2VyQ29uZmlnLCBjb25maWcpO1xuICBzZXRTdG9yYWdlS2V5KGRlbCh0cmFja2VyQ29uZmlnLCBcImNsaWVudEtleVwiKSk7XG4gIGNvbnN0IGFwaUtleSA9IGRlbCh0cmFja2VyQ29uZmlnLCBcImFwaUtleVwiKTtcblxuICBjb25zdCBxdWV1ZWRDb21tYW5kcyA9IHdpbmRvd1t0cmFja2VyQ29uZmlnLm5hbWVdID8/IFtdO1xuICBpZiAoIWFycmF5KHF1ZXVlZENvbW1hbmRzKSkge1xuICAgIGVycihcbiAgICAgIGBUaGUgZ2xvYmFsIHZhcmlhYmxlIGZvciB0aGUgdHJhY2tlciBcIiR7dHJhY2tlckNvbmZpZy5uYW1lfVwiIGlzIHVzZWQgZm9yIHNvbWV0aGluZyBlbHNlIHRoYW4gYW4gYXJyYXkgb2YgcXVldWVkIGNvbW1hbmRzLmBcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEV4dGVuc2lvbnMgLyBsaXN0ZW5lcnNcbiAgY29uc3QgZXh0ZW5zaW9uczogW251bWJlciwgVHJhY2tlckV4dGVuc2lvbl1bXSA9IFtdO1xuICBsZXQgbGlzdGVuZXJzOiBMaXN0ZW5lcltdID0gW107XG4gIC8vIEV4dGVuc2lvbnMgbWF5IHBvc3QgY29tbWFuZHMgd2hlbiBjb25zdHJ1Y3RlZCBhbmQgd2hpbGUgdGhlIHRyYWNrZXIgaXMgaW5pdGlhbGl6aW5nXG5cbiAgY29uc3QgY2FsbExpc3RlbmVycyA9IChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIGxldCBrZWVwID0gVDtcbiAgICBsaXN0ZW5lcnMgPSBmaWx0ZXIobGlzdGVuZXJzLCAobGlzdGVuZXIpID0+XG4gICAgICB0cnlDYXRjaChcbiAgICAgICAgKCkgPT4gKFxuICAgICAgICAgIGxpc3RlbmVyW2V2ZW50XT8uKC4uLmFyZ3MsIHtcbiAgICAgICAgICAgIHRyYWNrZXI6IHRyYWNrZXIsXG4gICAgICAgICAgICB1bnN1YnNjcmliZTogKCkgPT4gKGtlZXAgPSBGKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBrZWVwIC8vIFdpbGwgYmUgc2V0IHN5bmNocm9ub3VzbHkgaW4gdGhlIHVuc3Vic2NyaWJlIGhhbmRsZXIgYmVmb3JlIHRoaXMgdmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuICBhZGRRdWV1ZVBvc3RMaXN0ZW5lcigoZXZlbnRzKSA9PiBjYWxsTGlzdGVuZXJzKFwicG9zdFwiLCBldmVudHMpKTtcbiAgY29uc3QgcGVuZGluZ1N0YXRlQ29tbWFuZHM6IFRyYWNrZXJDb21tYW5kW10gPSBbXTtcbiAgYWRkR2xvYmFsU3RhdGVSZXNvbHZlZExpc3RlbmVyKFxuICAgICgpID0+IHBlbmRpbmdTdGF0ZUNvbW1hbmRzLmxlbmd0aCAmJiBwdXNoKHRyYWNrZXIsIC4uLnBlbmRpbmdTdGF0ZUNvbW1hbmRzKVxuICApO1xuXG4gIC8vIFZhcmlhYmxlc1xuXG4gIGNvbnN0IGxvY2FsVmFyaWFibGVzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIG1hcChcbiAgICAgIFtcInZpZXdcIiwgXCJ0YWdzXCIsIFwicmVuZGVyZWRcIiwgXCJsb2FkZWRcIiwgXCJzY3JpcHRzXCIsIFFVRVJZX0RFVklDRV0sXG4gICAgICAoa2V5KSA9PiBba2V5LCBUXVxuICAgIClcbiAgKTtcblxuICBsZXQgcHVibGljVmFyaWFibGVzOiBbc3RyaW5nLCBzdHJpbmddW107XG4gIGNvbnN0IFtnZXRWYXJzLCBzZXRWYXJzXSA9IHZhcmlhYmxlcyhcbiAgICB0cmFja2VyLFxuICAgIChrdnMpID0+XG4gICAgICBzaXplKChwdWJsaWNWYXJpYWJsZXMgPSBmaWx0ZXIoa3ZzLCAoW2tleV0pID0+ICFsb2NhbFZhcmlhYmxlc1trZXldKSkpICYmXG4gICAgICB1cGRhdGVWYXJpYWJsZXMocHVibGljVmFyaWFibGVzKVxuICApO1xuICBhZGRSZXNwb25zZUxpc3RlbmVyKChfLCB2YXJpYWJsZXMpID0+IHNldFZhcnModmFyaWFibGVzKSk7XG5cbiAgY29uc3QgdXBkYXRlVmFyaWFibGVzID0gcmVnaXN0ZXJTaGFyZWRTdGF0ZShcbiAgICBcInZhcnNcIixcbiAgICAoKSA9PlxuICAgICAgbWFwKFxuICAgICAgICBmaWx0ZXIoZW50cmllcyhnZXRWYXJzKCkpLCAoW2tleV0pID0+ICFsb2NhbFZhcmlhYmxlc1trZXldKSxcbiAgICAgICAgKFtrZXksIHZhbHVlXSkgPT4gW2tleSwgdmFsdWVdIGFzIGNvbnN0XG4gICAgICApLFxuICAgICh2YXJzKSA9PiB2YXJzICYmIHNldFZhcnModmFycywgVClcbiAgKTtcblxuICAvLyBNYWluXG5cbiAgbGV0IG1haW5BcmdzOiBUcmFja2VyQ29tbWFuZFtdIHwgbnVsbCA9IG5pbDtcbiAgbGV0IGN1cnJlbnRBcmcgPSAwO1xuICBsZXQgaW5zZXJ0QXJncyA9IEY7XG5cbiAgZGVmaW5lKHdpbmRvdywge1xuICAgIFt0cmFja2VyQ29uZmlnLm5hbWVdOiBbXG4gICAgICAodHJhY2tlciA9IGRlZmluZShcbiAgICAgICAge30sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogW25leHRJZCgpXSxcbiAgICAgICAgICBwdXNoOiBbXG4gICAgICAgICAgICAoLi4uY29tbWFuZHM6IFRyYWNrZXJDb21tYW5kW10pID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFtYWluQXJncyAmJiBhcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZHNbMF0gIT09IGFwaUtleSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBUEkga2V5LlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tbWFuZHMuc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFjb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb21tYW5kcyA9IGNvbW1hbmRzLmZsYXRNYXAoXG4gICAgICAgICAgICAgICAgKGNvbW1hbmQpID0+IChcbiAgICAgICAgICAgICAgICAgICFjb21tYW5kXG4gICAgICAgICAgICAgICAgICAgID8gY29tbWFuZFxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBjb21tYW5kID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGNvbW1hbmQgPSBodHRwRGVjb2RlPFRyYWNrZXJDb21tYW5kPihjb21tYW5kKSksXG4gICAgICAgICAgICAgICAgICBhcnJheShjb21tYW5kKSA/IGNvbW1hbmQgOiBbY29tbWFuZF1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgbGV0IGZsdXNoID0gRjsgLy8gLy8gRmx1c2ggYWZ0ZXIgdGhlc2UgY29tbWFuZHMsIG9wdGlvbmFsbHkgd2l0aG91dCB3YWl0aW5nIGZvciBvdGhlciByZXF1ZXN0cyB0byBmaW5pc2ggKGJlY2F1c2UgdGhlIHBhZ2UgaXMgdW5sb2FkaW5nIGFuZCB3ZSBoYXZlIG5vIGJldHRlciBvcHRpb24gZXZlbiB0aG91Z2ggaXQgbWF5IHNwbGl0IHNlc3Npb25zLilcblxuICAgICAgICAgICAgICBjb21tYW5kcyA9IGZpbHRlcihjb21tYW5kcywgKGNvbW1hbmQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybiBGO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVGFnQXR0cmlidXRlc0NvbW1hbmQoY29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICAgIHRyYWNrZXJDb25maWcudGFncyA9IGFzc2lnbihcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXJDb25maWcudGFncyxcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC50YWdBdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUb2dnbGVDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgICB0cmFja2VyQ29uZmlnLmRpc2FibGVkID0gY29tbWFuZC5kaXNhYmxlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0ZsdXNoQ29tbWFuZChjb21tYW5kKSkge1xuICAgICAgICAgICAgICAgICAgZmx1c2ggPSBUO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RyYWNrZXJBdmFpbGFibGVDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgICBjb21tYW5kKHRyYWNrZXIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICFnbG9iYWxTdGF0ZVJlc29sdmVkICYmXG4gICAgICAgICAgICAgICAgICAhaXNMaXN0ZW5lckNvbW1hbmQoY29tbWFuZCkgJiZcbiAgICAgICAgICAgICAgICAgICFpc0V4dGVuc2lvbkNvbW1hbmQoY29tbWFuZClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHBlbmRpbmdTdGF0ZUNvbW1hbmRzLnB1c2goY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gI2VuZHJlZ2lvblxuICAgICAgICAgICAgICAgIHJldHVybiBUO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAoIWNvbW1hbmRzLmxlbmd0aCAmJiAhZmx1c2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBnZXRDb21tYW5kUmFuayA9IChjbWQ6IFRyYWNrZXJDb21tYW5kKSA9PlxuICAgICAgICAgICAgICAgIGlzRXh0ZW5zaW9uQ29tbWFuZChjbWQpXG4gICAgICAgICAgICAgICAgICA/IC0xMDBcbiAgICAgICAgICAgICAgICAgIDogaXNMaXN0ZW5lckNvbW1hbmQoY21kKVxuICAgICAgICAgICAgICAgICAgPyAtNTBcbiAgICAgICAgICAgICAgICAgIDogaXNTZXRDb21tYW5kKGNtZClcbiAgICAgICAgICAgICAgICAgID8gLTEwXG4gICAgICAgICAgICAgICAgICA6IGlzVHJhY2tlZEV2ZW50KGNtZClcbiAgICAgICAgICAgICAgICAgID8gOTBcbiAgICAgICAgICAgICAgICAgIDogMDtcblxuICAgICAgICAgICAgICAvLyBQdXQgZXZlbnRzIGxhc3QgdG8gYWxsb3cgbGlzdGVuZXJzIGFuZCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc2FtZSBiYXRjaCB0byB3b3JrIG9uIHRoZW0uXG4gICAgICAgICAgICAgIC8vIFNldHMgY29tZSBiZWZvcmUgZ2V0cyB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YWl0aW5nXG4gICAgICAgICAgICAgIC8vIEV4dGVuc2lvbnMgdGhlbiBsaXN0ZW5lcnMgYXJlIGZpcnN0IHNvIHRoZXkgY2FuIGV2YWx1YXRlIHRoZSByZXN0LlxuICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZDogVHJhY2tlckNvbW1hbmRbXSA9IHNvcnQoY29tbWFuZHMsIGdldENvbW1hbmRSYW5rKTtcblxuICAgICAgICAgICAgICAvLyBBbGxvdyBuZXN0ZWQgY2FsbHMgdG8gdHJhY2tlci5wdXNoIGZyb20gbGlzdGVybmVycyBhbmQgaW50ZXJjZXB0b3JzLiBJbnNlcnQgY29tbWFuZHMgaW4gdGhlIGN1cnJlbnRseSBwcm9jZXNzZWQgbWFpbiBiYXRjaC5cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1haW5BcmdzICYmXG4gICAgICAgICAgICAgICAgc3BsaWNlKFxuICAgICAgICAgICAgICAgICAgbWFpbkFyZ3MsXG4gICAgICAgICAgICAgICAgICBpbnNlcnRBcmdzID8gY3VycmVudEFyZyArIDEgOiBtYWluQXJncy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgLi4uZXhwYW5kZWRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgbWFpbkFyZ3MgPSBleHBhbmRlZDtcblxuICAgICAgICAgICAgICBmb3IgKGN1cnJlbnRBcmcgPSAwOyBjdXJyZW50QXJnIDwgbWFpbkFyZ3MubGVuZ3RoOyBjdXJyZW50QXJnKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1haW5BcmdzW2N1cnJlbnRBcmddKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0cnlDYXRjaChcbiAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG1haW5BcmdzIVtjdXJyZW50QXJnXTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbExpc3RlbmVycyhcImNvbW1hbmRcIiwgY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydEFyZ3MgPSBGO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUcmFja2VkRXZlbnQoY29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kLnRpbWVzdGFtcCA/Pz0gbm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29uc2VudEV2ZW50KGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpY2UobWFpbkFyZ3MsIGN1cnJlbnRBcmcgKyAxLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogeyBjb25zZW50OiBjb21tYW5kLm5vbkVzc2VudGlhbFRyYWNraW5nIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRBcmdzID0gVDtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgc2tpcCA9IEY7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwKGV4dGVuc2lvbnMsIChbLCBleHRlbnNpb25dLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLmRlY29yYXRlPy4oY29tbWFuZCBhcyBUcmFja2VkRXZlbnQpID09PSBGXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcCA9IFQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBTa2lwIGV2ZW50IGFuZCBwcm9jZXNzIG5leHQgY29tbWFuZC5cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBlbnF1ZXVlRXZlbnQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNHZXRDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZ2V0VmFycyhjb21tYW5kLmdldCwgY29tbWFuZC50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NldENvbW1hbmQoY29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZXRWYXJzKGNvbW1hbmQuc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICBtYXAoZW50cmllcyhjb21tYW5kLnNldCksIChba2V5LCB2YWx1ZV0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsTGlzdGVuZXJzKFwic2V0XCIsIGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0xpc3RlbmVyQ29tbWFuZChjb21tYW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHB1c2gobGlzdGVuZXJzLCBjb21tYW5kLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0V4dGVuc2lvbkNvbW1hbmQoY29tbWFuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgZXh0ZW5zaW9uOiBUcmFja2VyRXh0ZW5zaW9uIHwgTnVsbGlzaDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZXh0ZW5zaW9uID0gdHJ5Q2F0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IGNvbW1hbmQuZXh0ZW5zaW9uLnNldHVwKHRyYWNrZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZSkgPT4gZXJyKG5pbCwgY29tbWFuZC5leHRlbnNpb24sIGUpXG4gICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaChleHRlbnNpb25zLCBbY29tbWFuZC5wcmlvcml0eSA/PyAxMDAsIGV4dGVuc2lvbl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydChleHRlbnNpb25zLCAoW3ByaW9yaXR5XSkgPT4gcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RyYWNrZXJBdmFpbGFibGVDb21tYW5kKGNvbW1hbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCh0cmFja2VyKTsgLy8gVmFyaWFibGVzIGhhdmUgYWxyZWFkeSBiZWVuIGxvYWRlZCBvbmNlLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWNjZXNzID0gRjtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFssIGV4dGVuc2lvbl0gb2YgZXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoc3VjY2VzcyA9IGV4dGVuc2lvbi5wcm9jZXNzQ29tbWFuZD8uKGNvbW1hbmQpID8/IEYpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICFzdWNjZXNzICYmIGVycihFUlJfSU5WQUxJRF9DT01NQU5ELCBjb21tYW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIChlKSA9PiBlcnIoRVJSX0lOVEVSTkFMX0VSUk9SLCBuaWwsIGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG1haW5BcmdzID0gbmlsO1xuICAgICAgICAgICAgICBpZiAoZmx1c2gpIHtcbiAgICAgICAgICAgICAgICBjb21taXQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFtpc1RyYWNrZXJdOiBbVF0sXG4gICAgICAgIH1cbiAgICAgICkgYXMgYW55KSxcbiAgICBdLFxuICB9KTtcblxuICBzdGFydHVwQ29tcGxldGUoKTtcblxuICBwdXNoKFxuICAgIHRyYWNrZXIsXG4gICAgeyBzZXQ6IHsgbG9hZGVkOiBUIH0gfSxcbiAgICAuLi5tYXAoZGVmYXVsdEV4dGVuc2lvbnMsIChleHRlbnNpb24pID0+ICh7IGV4dGVuc2lvbiB9KSksXG4gICAgLi4ucXVldWVkQ29tbWFuZHNcbiAgKTtcblxuICByZXR1cm4gdHJhY2tlcjtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudCwgRXh0ZXJuYWxSZWZlcmVuY2UgfSBmcm9tIFwiQHRhaWxqcy90eXBlc1wiO1xuaW1wb3J0IHtcbiAgRixcbiAgVCxcbiAgYXR0cixcbiAgZG9jdW1lbnQsXG4gIGdldCxcbiAgaGFzaFNldCxcbiAgbWFwLFxuICBuaWwsXG4gIHBhcnNlSW50LFxuICBwdXNoLFxuICBzZXQsXG4gIHNwbGl0LFxuICBzdHIsXG59IGZyb20gXCIuXCI7XG5pbXBvcnQgdHlwZSB7IEJvdW5kYXJ5Q29tbWFuZCB9IGZyb20gXCIuLlwiO1xuXG50eXBlIE1hcHBlZENvbXBvbmVudCA9IFtcbiAgY29tbWFuZDoge1xuICAgIGNvbXBvbmVudD86IENvbXBvbmVudDtcbiAgICBjb250ZW50PzogRXh0ZXJuYWxSZWZlcmVuY2U7XG4gICAgYXJlYT86IHN0cmluZztcbiAgfSxcbiAgZWxlbWVudHM6IEhUTUxFbGVtZW50W11cbl07XG5leHBvcnQgZnVuY3Rpb24gc2NhbkF0dHJpYnV0ZXMoXG4gIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyxcbiAgcmVmZXJlbmNlczogTWFwcGVkQ29tcG9uZW50WzBdW11cbik6IEJvdW5kYXJ5Q29tbWFuZFtdIHtcbiAgaWYgKCFyZWZlcmVuY2VzKSByZXR1cm4gW107XG4gIGNvbnN0IGNvbW1hbmRzOiBCb3VuZGFyeUNvbW1hbmRbXSA9IFtdO1xuXG4gIGNvbnN0IHNlZW4gPSBoYXNoU2V0PGFueT4oKTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7YXR0cmlidXRlTmFtZX1dYCkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBpZiAoZ2V0KHNlZW4sIGVsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YWNrOiBhbnlbXSA9IFtdO1xuXG4gICAgd2hpbGUgKGF0dHIoZWwsIGF0dHJpYnV0ZU5hbWUpICE9IG5pbCkge1xuICAgICAgc2V0KHNlZW4sIGVsKTtcbiAgICAgIGNvbnN0IGRlbHRhID0gc3BsaXQoYXR0cihlbCwgYXR0cmlidXRlTmFtZSkhLCBcInxcIik7XG4gICAgICBhdHRyKGVsLCBhdHRyaWJ1dGVOYW1lLCBuaWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWx0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaXRlbTogYW55ID0gZGVsdGFbaV07XG4gICAgICAgIGlmIChpdGVtID09PSBcIlwiKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIElmIHRoZSBhdHRyaWJ1dGUgc3RhcnRzIHdpdGggXCJ8XCIgaXQgbWVhbnMgXCJrZWVwIHN0YWNrXCIuIFNwbGl0dGluZyB0aGUgYXJyYXkgb24gXCJ8XCIgd2lsbCBnaXZlIGFuIGVtcHR5IGl0ZW0uXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtYmVyID0gaXRlbSA9PT0gXCItXCIgPyAtMSA6IHBhcnNlSW50KHN0cihpdGVtLCBGKSA/PyBcIlwiLCAzNik7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgc3RhY2subGVuZ3RoICs9IG51bWJlcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgc3RhY2subGVuZ3RoID0gMDsgLy8gVGhlIGZpcnN0IGl0ZW0gaGFzIGFuIHZhbHVlIHRvIHJlcGxhY2UgdGhlIHN0YWNrIHNpbmNlIG5vdCBwcmVjZWRlZCBieSBuZWl0aGVyIFwifFwiIG5vciBhbiBuZWdhdGl2ZSBudW1iZXIgKHBvcCkuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOYU4obnVtYmVyKSAmJiAvXltcIlxcW3tdLy50ZXN0KGl0ZW0pKSB7XG4gICAgICAgICAgLy8gUG9vciBtYW4ncyBwYXJzZXIuIElmIHRoZSBKU09OIGNvbnRhaW5zICd8J3Mga2VlcCBnb2luZyB1bnRpbCBpdCB3b3Jrcy5cbiAgICAgICAgICBsZXQganNvbiA9IFwiXCI7XG4gICAgICAgICAgZm9yICg7IGkgPCBkZWx0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaXRlbSA9IEpTT04ucGFyc2UoKGpzb24gKz0gZGVsdGFbaV0pKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChudW1iZXIgPj0gMCAmJiByZWZlcmVuY2VzW251bWJlcl0pIHtcbiAgICAgICAgICBpdGVtID0gcmVmZXJlbmNlc1tudW1iZXJdO1xuICAgICAgICB9XG4gICAgICAgIHN0YWNrLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgICBwdXNoKFxuICAgICAgICBjb21tYW5kcyxcbiAgICAgICAgLi4ubWFwKHN0YWNrLCAoZGF0YSkgPT4gKHsgYWRkOiBULCAuLi5kYXRhLCBib3VuZGFyeTogZWwgfSkpXG4gICAgICApO1xuICAgICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZyE7IC8vIElnbm9yZSBUUyBudWxsIGVycm9yLlxuICAgICAgaWYgKGVsLnRhZ05hbWUgPT09IFwiV0JSXCIpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfVxuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbW1hbmRzO1xufVxuIiwiaW1wb3J0IHsgU2Nyb2xsRXZlbnQsIGNhc3QgfSBmcm9tIFwiQHRhaWxqcy90eXBlc1wiO1xuaW1wb3J0IHsgYWRkVmlld0NoYW5nZWRMaXN0ZW5lciwgdHlwZSBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHtcbiAgVCxcbiAgZGVmZXIsXG4gIGxpc3RlbixcbiAgbWFwLFxuICBwdXNoLFxuICByZWxhdGl2ZVNjcm9sbFBvcyxcbiAgc2Nyb2xsUG9zLFxuICB3aW5kb3csXG59IGZyb20gXCIuLi9saWJcIjtcblxuZXhwb3J0IGNvbnN0IHNjcm9sbDogVHJhY2tlckV4dGVuc2lvbkZhY3RvcnkgPSB7XG4gIGlkOiBcInNjcm9sbFwiLFxuICBzZXR1cCh0cmFja2VyKSB7XG4gICAgbGV0IGVtaXR0ZWQ6IFBhcnRpYWw8UmVjb3JkPFJlcXVpcmVkPFNjcm9sbEV2ZW50PltcInNjcm9sbFR5cGVcIl0sIGJvb2xlYW4+PiA9XG4gICAgICB7fTtcbiAgICBsZXQgaW5pdGlhbFNjcm9sbCA9IHNjcm9sbFBvcyhUKTtcblxuICAgIGFkZFZpZXdDaGFuZ2VkTGlzdGVuZXIoKCkgPT5cbiAgICAgIGRlZmVyKCgpID0+ICgoZW1pdHRlZCA9IHt9KSwgKGluaXRpYWxTY3JvbGwgPSBzY3JvbGxQb3MoVCkpKSwgMjUwKVxuICAgICk7XG5cbiAgICBsaXN0ZW4od2luZG93LCBcInNjcm9sbFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzY3JvbGwgPSBzY3JvbGxQb3MoKTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHJlbGF0aXZlU2Nyb2xsUG9zKCk7XG5cbiAgICAgIGlmIChzY3JvbGwueSA+PSBpbml0aWFsU2Nyb2xsLnkpIHtcbiAgICAgICAgY29uc3QgdHlwZXM6IChrZXlvZiB0eXBlb2YgZW1pdHRlZClbXSA9IFtdO1xuXG4gICAgICAgICFlbWl0dGVkW1wiZm9sZFwiXSAmJlxuICAgICAgICAgIHNjcm9sbC55ID49IGluaXRpYWxTY3JvbGwueSArIDIwMCAmJlxuICAgICAgICAgICgoZW1pdHRlZFtcImZvbGRcIl0gPSBUKSwgdHlwZXMucHVzaChcImZvbGRcIikpO1xuXG4gICAgICAgICFlbWl0dGVkW1wicGFnZS1taWRkbGVcIl0gJiZcbiAgICAgICAgICBvZmZzZXQueSA+PSAwLjUgJiZcbiAgICAgICAgICAoKGVtaXR0ZWRbXCJwYWdlLW1pZGRsZVwiXSA9IFQpLCB0eXBlcy5wdXNoKFwicGFnZS1taWRkbGVcIikpO1xuXG4gICAgICAgICFlbWl0dGVkW1wicGFnZS1lbmRcIl0gJiZcbiAgICAgICAgICBvZmZzZXQueSA+PSAwLjk5ICYmXG4gICAgICAgICAgKChlbWl0dGVkW1wicGFnZS1lbmRcIl0gPSBUKSwgdHlwZXMucHVzaChcInBhZ2UtZW5kXCIpKTtcblxuICAgICAgICBjb25zdCBtYXBwZWQgPSBtYXAodHlwZXMsIChzY3JvbGxUeXBlKSA9PlxuICAgICAgICAgIGNhc3Q8U2Nyb2xsRXZlbnQ+KHtcbiAgICAgICAgICAgIHR5cGU6IFwiU0NST0xMXCIsXG4gICAgICAgICAgICBzY3JvbGxUeXBlLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgbWFwcGVkLmxlbmd0aCAmJiBwdXNoKHRyYWNrZXIsIG1hcHBlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgRm9ybUV2ZW50LCBGb3JtRmllbGQsIFRpbWVzdGFtcCwgY2FzdCB9IGZyb20gXCJAdGFpbGpzL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IE51bGxpc2ggfSBmcm9tIFwiQHRhaWxqcy91dGlsXCI7XG5pbXBvcnQge1xuICBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSxcbiAgYWRkVmlld0NoYW5nZWRMaXN0ZW5lcixcbiAgZ2V0Q29tcG9uZW50Q29udGV4dCxcbiAgZ2V0VmlzaWJsZUR1cmF0aW9uLFxuICBvbkZyYW1lLFxufSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7XG4gIE5vZGVXaXRoUGFyZW50RWxlbWVudCxcbiAgVCxcbiAgYWRkVGVybWluYXRpb25MaXN0ZW5lcixcbiAgYXR0cixcbiAgZG9jdW1lbnQsXG4gIGVudHJpZXMsXG4gIGdldCxcbiAgZ2V0T3JTZXQsXG4gIGdldFJlY3QsXG4gIGl0ZW0sXG4gIGxpc3RlbixcbiAgbWFwLFxuICBuaWwsXG4gIG5vdyxcbiAgcHVzaCxcbiAgcmVwbGFjZSxcbiAgc2NvcGVBdHRyLFxuICB0aW1lb3V0LFxuICB0cmFja2VyRmxhZyxcbiAgdHJhY2tlclByb3BlcnR5TmFtZSxcbiAgdW5kZWZpbmVkLFxuICB1dWlkdjQsXG59IGZyb20gXCIuLi9saWJcIjtcblxudHlwZSBGb3JtRWxlbWVudCA9IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG5cbmNvbnN0IGVudW0gRm9ybUZpbGxTdGF0ZSB7XG4gIE5vbmUgPSAwLFxuICBTdWJtaXR0ZWQgPSAxLFxuICBQZW5kaW5nID0gMixcbiAgU3VibWl0dGluZyA9IDMsXG59XG5cbnR5cGUgRm9ybVN0YXRlID0gW1xuICBldmVudDogRm9ybUV2ZW50LFxuICBmaWVsZHM6IFdlYWtNYXA8RWxlbWVudCwgRm9ybUZpZWxkU3RhdGU+LFxuICBlbGVtZW50OiBIVE1MRm9ybUVsZW1lbnQsXG4gIGZpbGxTdGF0ZTogRm9ybUZpbGxTdGF0ZSxcbiAgc3RhcnRlZDogVGltZXN0YW1wLFxuICBuZXh0RmlsbE9yZGVyOiBudW1iZXJcbl07XG5cbmNvbnN0IGN1cnJlbnRWYWx1ZSA9IFN5bWJvbCgpO1xudHlwZSBGb3JtRmllbGRTdGF0ZSA9IEZvcm1GaWVsZCAmIHtcbiAgW2N1cnJlbnRWYWx1ZV06IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtczogVHJhY2tlckV4dGVuc2lvbkZhY3RvcnkgPSB7XG4gIGlkOiBcImZvcm1zXCIsXG4gIHNldHVwKHRyYWNrZXIpIHtcbiAgICBjb25zdCBmb3JtRXZlbnRzID0gbmV3IE1hcDxIVE1MRm9ybUVsZW1lbnQsIEZvcm1TdGF0ZT4oKTtcblxuICAgIGNvbnN0IGdldEZvcm1GaWVsZFZhbHVlID0gKGVsZW1lbnQ6IGFueSk6IHN0cmluZyA9PlxuICAgICAgZWxlbWVudC5zZWxlY3RlZE9wdGlvbnNcbiAgICAgICAgPyBbLi4uZWxlbWVudC5zZWxlY3RlZE9wdGlvbnNdLm1hcCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUpLmpvaW4oXCIsXCIpXG4gICAgICAgIDogZWxlbWVudC50eXBlID09PSBcImNoZWNrYm94XCJcbiAgICAgICAgPyBlbGVtZW50LmNoZWNrZWRcbiAgICAgICAgICA/IFwieWVzXCJcbiAgICAgICAgICA6IFwibm9cIlxuICAgICAgICA6IGVsZW1lbnQudmFsdWU7XG5cbiAgICBjb25zdCBnZXRGb3JtU3RhdGUgPSAoXG4gICAgICBlbDogRm9ybUVsZW1lbnRcbiAgICApOiBbaW5wdXQ6IEZvcm1FbGVtZW50LCBzdGF0ZTogRm9ybVN0YXRlXSB8IHVuZGVmaW5lZCA9PiB7XG4gICAgICBjb25zdCBmb3JtRWxlbWVudCA9IGVsLmZvcm07XG4gICAgICBpZiAoIWZvcm1FbGVtZW50KSByZXR1cm47IC8vIERvbid0IGNhcmUgaWYgd2Ugc3RhcnRlZCB3aXRoIGFuIGVsZW1lbnQgdGhhdCBkaWRuJ3QgbWFwIHRvIGEgZmllbGQuXG5cbiAgICAgIGNvbnN0IHJlZk5hbWUgPVxuICAgICAgICBzY29wZUF0dHIoZm9ybUVsZW1lbnQsIHRyYWNrZXJQcm9wZXJ0eU5hbWUoXCJyZWZcIikpIHx8IFwidHJhY2tfcmVmXCI7XG5cbiAgICAgIGNvbnN0IHBhcnNlRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgICAgIG1hcChcbiAgICAgICAgICBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgXCJJTlBVVCxTRUxFQ1QsVEVYVEFSRUFcIlxuICAgICAgICAgICkgYXMgTm9kZUxpc3RPZjxGb3JtRWxlbWVudD4sXG4gICAgICAgICAgKGVsLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVsLm5hbWUgfHwgZWwudHlwZSA9PT0gXCJoaWRkZW5cIikge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZWwudHlwZSA9PT0gXCJoaWRkZW5cIiAmJlxuICAgICAgICAgICAgICAgIChlbC5uYW1lID09PSByZWZOYW1lIHx8IHRyYWNrZXJGbGFnKGVsLCBcInJlZlwiKSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgIWVsLnZhbHVlICYmIChlbC52YWx1ZSA9IHV1aWR2NCgpKTtcbiAgICAgICAgICAgICAgICBzdGF0ZVswXS5yZWYgPSBlbC52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBlbC5uYW1lO1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSAoc3RhdGVbMF0uZmllbGRzIVtuYW1lXSA/Pz0ge1xuICAgICAgICAgICAgICBpZDogZWwuaWQgfHwgbmFtZSxcbiAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgbGFiZWw6IHJlcGxhY2UoXG4gICAgICAgICAgICAgICAgaXRlbShlbC5sYWJlbHMsIDApPy5pbm5lclRleHQgPz8gZWwubmFtZSxcbiAgICAgICAgICAgICAgICAvXlxccyooLio/KVxccypcXCo/XFxzKiQvZyxcbiAgICAgICAgICAgICAgICBcIiQxXCJcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgYWN0aXZlVGltZTogMCxcbiAgICAgICAgICAgICAgdHlwZTogZWwudHlwZSA/PyBcInVua25vd25cIixcbiAgICAgICAgICAgICAgW2N1cnJlbnRWYWx1ZSBhcyBhbnldOiBnZXRGb3JtRmllbGRWYWx1ZShlbCksXG4gICAgICAgICAgICB9KSBhcyBGb3JtRmllbGRTdGF0ZTtcblxuICAgICAgICAgICAgc3RhdGVbMF0uZmllbGRzIVtmaWVsZC5uYW1lXSA9IGZpZWxkO1xuICAgICAgICAgICAgc3RhdGVbMV0uc2V0KGVsLCBmaWVsZCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgbGV0IGNhcHR1cmVkQ29udGV4dDogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0Q29tcG9uZW50Q29udGV4dD47XG5cbiAgICAgIGNvbnN0IGlzRm9ybVZpc2libGUgPSAoKSA9PlxuICAgICAgICBmb3JtRWxlbWVudC5pc0Nvbm5lY3RlZCAmJiBnZXRSZWN0KGZvcm1FbGVtZW50KS53aWR0aDtcblxuICAgICAgY29uc3Qgc3RhdGUgPSBnZXRPclNldChmb3JtRXZlbnRzLCBmb3JtRWxlbWVudCwgKCkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZE1hcCA9IG5ldyBNYXA8RWxlbWVudCwgRm9ybUZpZWxkU3RhdGU+KCk7XG4gICAgICAgIGNvbnN0IGV2OiBGb3JtRXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogXCJGT1JNXCIsXG4gICAgICAgICAgbmFtZTpcbiAgICAgICAgICAgIHNjb3BlQXR0cihmb3JtRWxlbWVudCwgdHJhY2tlclByb3BlcnR5TmFtZShcImZvcm0tbmFtZVwiKSkgfHxcbiAgICAgICAgICAgIGF0dHIoZm9ybUVsZW1lbnQsIFwibmFtZVwiKSB8fFxuICAgICAgICAgICAgZm9ybUVsZW1lbnQuaWQgfHxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBhY3RpdmVUaW1lOiAwLFxuICAgICAgICAgIHRvdGFsVGltZTogMCxcbiAgICAgICAgICBmaWVsZHM6IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBzdGF0ZTogRm9ybVN0YXRlO1xuICAgICAgICBjb25zdCBjb21taXRFdmVudCA9ICgpID0+IHtcbiAgICAgICAgICBoYW5kbGVMb3N0Rm9jdXMoKTsgLy8gZm9jdXNvdXQgb3IgY2hhbmdlIGV2ZW50cyBtYXkgbm90IGJlIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGUgcGFnZSB3aGlsZSBhIGZpZWxkIGhhcyBmb2N1cy5cblxuICAgICAgICAgIC8vIElmIHRoZSBmb3JtIGhhcyBkaXNhcHBlYXJlZCBpdCBpcyBoZXVyaXN0aWNhbGx5IGFzc3VtZWQgaXQgd2FzIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkuXG4gICAgICAgICAgc3RhdGVbM10gPj0gRm9ybUZpbGxTdGF0ZS5QZW5kaW5nICYmXG4gICAgICAgICAgICAoZXYuY29tcGxldGVkID1cbiAgICAgICAgICAgICAgc3RhdGVbM10gPT09IEZvcm1GaWxsU3RhdGUuU3VibWl0dGluZyB8fCAhaXNGb3JtVmlzaWJsZSgpKTtcbiAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgdHJhY2tlcixcbiAgICAgICAgICAgIGNhc3Q8Rm9ybUV2ZW50Pih7XG4gICAgICAgICAgICAgIC4uLmNhcHR1cmVkQ29udGV4dCxcbiAgICAgICAgICAgICAgLi4uZXYsXG4gICAgICAgICAgICAgIHRvdGFsVGltZTogbm93KFQpIC0gc3RhdGVbNF0sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RhdGVbM10gPSBGb3JtRmlsbFN0YXRlLlN1Ym1pdHRlZDtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGRWaWV3Q2hhbmdlZExpc3RlbmVyKGNvbW1pdEV2ZW50KTtcbiAgICAgICAgYWRkVGVybWluYXRpb25MaXN0ZW5lcihjb21taXRFdmVudCk7XG5cbiAgICAgICAgY29uc3QgY29tbWl0VGltZW91dCA9IHRpbWVvdXQoKTtcblxuICAgICAgICBsaXN0ZW4oZm9ybUVsZW1lbnQsIFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgICAgICBjYXB0dXJlZENvbnRleHQgPSBnZXRDb21wb25lbnRDb250ZXh0KGZvcm1FbGVtZW50KTtcbiAgICAgICAgICBzdGF0ZVszXSA9IEZvcm1GaWxsU3RhdGUuU3VibWl0dGluZztcblxuICAgICAgICAgIGNvbW1pdFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGZvcm0gZGlzYXBwZWFycyB3aXRoaW4gNzUwIG1zIGJ1dCBubyBuYXZpZ2F0aW9uIGhhcHBlbnMgaXQgaXMgYXNzdW1lZCB0aGF0IGl0IHdhcyBcInN1Ym1pdHRlZFwiIHNvbWVob3csIGUuZy4gdmlhIEFKQVguXG4gICAgICAgICAgICAvLyBUaGlzIGhldXJ0aXN0aWMgbWF5IHJlc3VsdCBpbiBmYWxzZSBwb3NpdGl2ZXMgaWYgdGhlIHVzZXIgY2xpY2tzIHN1Ym1pdCwgZ2V0cyB2YWlsZGF0aW9uIGVycm9ycyBhbmQgdGhlbiBsZWF2ZXMgdGhlIHNpdGUgaW5zdGFudGx5LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIElmIHRoZSBzZXJ2ZXIgaXMgYWdncmVzc2l2ZWx5IHNsb3cgdG8gcmVzcG9uZCB0byBhIHBvc3QgYW5kIHRoZSBmb3IgZ29lcyBiYWNrIGludG8gcGVuZGluZyBzdGF0ZSxcbiAgICAgICAgICAgIC8vIGl0IGlzIHVuZGVmaW5lZCB3aGV0aGVyIHRoZSBzdWJtaXQgaGFwcGVuZWQgb3Igbm90LCBpZiB0aGUgdXNlciBsZWF2ZXMgdGhlIHNpdGUgYmVmb3JlIHRoZSBzZXJ2ZXIgcmVzcG9uZHMuXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgaXQgd2lsbCBjb3VudCBhcyBhYmFuZG9uZG1lbnQuXG5cbiAgICAgICAgICAgIGlmIChmb3JtRWxlbWVudC5pc0Nvbm5lY3RlZCAmJiBnZXRSZWN0KGZvcm1FbGVtZW50KS53aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgc3RhdGVbM10gPSBGb3JtRmlsbFN0YXRlLlBlbmRpbmc7XG4gICAgICAgICAgICAgIGNvbW1pdFRpbWVvdXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbW1pdEV2ZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgNzUwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIChzdGF0ZSA9IFtcbiAgICAgICAgICBldixcbiAgICAgICAgICBmaWVsZE1hcCxcbiAgICAgICAgICBmb3JtRWxlbWVudCxcbiAgICAgICAgICBGb3JtRmlsbFN0YXRlLk5vbmUsXG4gICAgICAgICAgbm93KFQpLFxuICAgICAgICAgIDEsXG4gICAgICAgIF0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWdldChzdGF0ZVsxXSwgZWwpKSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBhbHNvIGJlIHRoZSBjYXNlIGlmIGEgbmV3IGZpZWxkIHdhcyBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgICBwYXJzZUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2VsISwgc3RhdGVdO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRGaWVsZEluZm8gPSAoXG4gICAgICBlbDogTm9kZVdpdGhQYXJlbnRFbGVtZW50LFxuICAgICAgW2Zvcm1FbGVtZW50LCBzdGF0ZV0gPSBnZXRGb3JtU3RhdGUoZWwgYXMgYW55KSA/PyBbXSxcbiAgICAgIGZpZWxkID0gc3RhdGU/LlsxXS5nZXQoZm9ybUVsZW1lbnQgYXMgRWxlbWVudClcbiAgICApID0+IGZpZWxkICYmIChbc3RhdGUhWzBdLCBmaWVsZCwgZm9ybUVsZW1lbnQhLCBzdGF0ZSFdIGFzIGNvbnN0KTtcblxuICAgIGxldCBjdXJyZW50RmllbGQ6IFJldHVyblR5cGU8dHlwZW9mIGdldEZpZWxkSW5mbz4gfCBudWxsID0gbmlsO1xuICAgIGNvbnN0IGhhbmRsZUxvc3RGb2N1cyA9ICgpID0+IHtcbiAgICAgIGlmICghY3VycmVudEZpZWxkKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IFtmb3JtLCBmaWVsZCwgZWwsIHN0YXRlXSA9IGN1cnJlbnRGaWVsZDtcbiAgICAgIGNvbnN0IGFjdGl2ZSA9IC0odHYwIC0gKHR2MCA9IGdldFZpc2libGVEdXJhdGlvbigpKSk7XG4gICAgICBjb25zdCB0b3RhbCA9IC0odDAgLSAodDAgPSBub3coVCkpKTtcblxuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IGZpZWxkW2N1cnJlbnRWYWx1ZV07XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IChmaWVsZFtjdXJyZW50VmFsdWVdID0gZ2V0Rm9ybUZpZWxkVmFsdWUoZWwpKTtcblxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBwcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIGZpZWxkLmZpbGxPcmRlciA/Pz0gc3RhdGVbNV0rKztcbiAgICAgICAgaWYgKGZpZWxkLmZpbGxlZCkge1xuICAgICAgICAgIGZpZWxkLmNvcnJlY3Rpb25zID0gKGZpZWxkLmNvcnJlY3Rpb25zID8/IDApICsgMTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZC5maWxsZWQgPSBUO1xuXG4gICAgICAgIHN0YXRlWzNdID0gRm9ybUZpbGxTdGF0ZS5QZW5kaW5nO1xuICAgICAgICBlbnRyaWVzKFxuICAgICAgICAgIGZvcm0uZmllbGRzISxcbiAgICAgICAgICAoW25hbWUsIHZhbHVlXSkgPT5cbiAgICAgICAgICAgICh2YWx1ZS5sYXN0RmllbGQgPSBuYW1lID09PSBmaWVsZC5uYW1lIHx8IHVuZGVmaW5lZClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZmllbGQuYWN0aXZlVGltZSEgKz0gYWN0aXZlO1xuICAgICAgZmllbGQudG90YWxUaW1lISArPSB0b3RhbDtcbiAgICAgIGZvcm0uYWN0aXZlVGltZSEgKz0gYWN0aXZlO1xuICAgICAgY3VycmVudEZpZWxkID0gbmlsO1xuICAgIH07XG5cbiAgICBsZXQgdHYwID0gMDtcbiAgICBsZXQgdDAgPSAwO1xuICAgIGNvbnN0IHdpcmVGb3JtRmllbGRzID0gKGRvY3VtZW50OiBEb2N1bWVudCB8IE51bGxpc2gpID0+IHtcbiAgICAgIGRvY3VtZW50ICYmXG4gICAgICAgIGxpc3RlbihcbiAgICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgICBbXCJmb2N1c2luXCIsIFwiZm9jdXNvdXRcIiwgXCJjaGFuZ2VcIl0sXG4gICAgICAgICAgKGV2LCBfLCBjdXJyZW50ID0gZ2V0RmllbGRJbmZvKGV2LnRhcmdldCkpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgKChjdXJyZW50RmllbGQgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgZXYudHlwZSA9PT0gXCJmb2N1c2luXCJcbiAgICAgICAgICAgICAgICA/ICgodDAgPSBub3coVCkpLCAodHYwID0gZ2V0VmlzaWJsZUR1cmF0aW9uKCkpKVxuICAgICAgICAgICAgICAgIDogaGFuZGxlTG9zdEZvY3VzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgd2lyZUZvcm1GaWVsZHMoZG9jdW1lbnQpO1xuICAgIG9uRnJhbWUoKGZyYW1lKSA9PiBmcmFtZS5jb250ZW50RG9jdW1lbnQgJiYgd2lyZUZvcm1GaWVsZHMpO1xuICB9LFxufTtcbiIsImltcG9ydCB7XG4gIFRyYWNrZXJFeHRlbnNpb25GYWN0b3J5LFxuICBjb21tZXJjZSxcbiAgY29tcG9uZW50cyxcbiAgY29udGV4dCxcbiAgZm9ybXMsXG4gIHNjcm9sbCxcbiAgdXNlckludGVyYWN0aW9uLFxufSBmcm9tIFwiLi5cIjtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRFeHRlbnNpb25zOiBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeVtdID0gW1xuICBjb250ZXh0LFxuICBjb21wb25lbnRzLFxuICB1c2VySW50ZXJhY3Rpb24sXG4gIHNjcm9sbCxcbiAgY29tbWVyY2UsXG4gIGZvcm1zLFxuXTtcbiIsImV4cG9ydCBjb25zdCBjb21tYW5kVGVzdCA9XG4gIDxUID0gYW55PiguLi5uYW1lOiBhbnlbXSkgPT5cbiAgKGNvbW1hbmQ6IGFueSk6IGNvbW1hbmQgaXMgVCA9PlxuICAgIGNvbW1hbmQgPT09IG5hbWVbMF0gfHxcbiAgICBuYW1lLnNvbWUoXG4gICAgICAobmFtZSkgPT4gdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgY29tbWFuZD8uW25hbWVdICE9PSB1bmRlZmluZWRcbiAgICApO1xuIiwiaW1wb3J0IHsgQ2FydEV2ZW50RGF0YSB9IGZyb20gXCJAdGFpbGpzL3R5cGVzXCI7XG5pbXBvcnQgeyBjb21tYW5kVGVzdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuXG4vKipcbiAqIFRyaWdnZXJzIGV2ZW50cyByZWxhdGVkIHRvIGEgc2hvcHBpbmcgY2FydC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYXJ0Q29tbWFuZCB7XG4gIGNhcnQ6IFwiY2xlYXJcIiB8IENhcnRFdmVudERhdGE7XG59XG5cbmV4cG9ydCBjb25zdCBpc0NhcnRDb21tYW5kID0gY29tbWFuZFRlc3Q8Q2FydENvbW1hbmQ+KFwiY2FydFwiKTtcbiIsImltcG9ydCB0eXBlIHsgTnVsbGlzaCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcbmltcG9ydCB7IGNvbW1hbmRUZXN0IH0gZnJvbSBcIi4vc2hhcmVkXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlVXNlckNvbW1hbmQge1xuICB1c2VybmFtZTogc3RyaW5nIHwgTnVsbGlzaDtcbn1cblxuZXhwb3J0IGNvbnN0IGlzQ2hhbmdlVXNlckNvbW1hbmQgPSBjb21tYW5kVGVzdDxDaGFuZ2VVc2VyQ29tbWFuZD4oXCJ1c2VybmFtZVwiKTtcbiIsImltcG9ydCB0eXBlIHsgVGFnTWFwcGluZ3MgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IGNvbW1hbmRUZXN0IH0gZnJvbSBcIi4vc2hhcmVkXCI7XG5cbmV4cG9ydCB0eXBlIFRhZ0F0dHJpYnV0ZXNDb21tYW5kID0ge1xuICB0YWdBdHRyaWJ1dGVzOiBUYWdNYXBwaW5ncztcbn07XG5leHBvcnQgY29uc3QgaXNUYWdBdHRyaWJ1dGVzQ29tbWFuZCA9XG4gIGNvbW1hbmRUZXN0PFRhZ0F0dHJpYnV0ZXNDb21tYW5kPihcInRhZ0F0dHJpYnV0ZXNcIik7XG4iLCJpbXBvcnQgeyBjb21tYW5kVGVzdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuXG4vKipcbiAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdHJhY2tpbmcuXG4gKi9cbmV4cG9ydCB0eXBlIFRvZ2dsZUNvbW1hbmQgPSB7XG4gIGRpc2FibGU6IGJvb2xlYW47XG59O1xuZXhwb3J0IGNvbnN0IGlzVG9nZ2xlQ29tbWFuZCA9IGNvbW1hbmRUZXN0PFRvZ2dsZUNvbW1hbmQ+KFwiZGlzYWJsZVwiKTtcbiIsImltcG9ydCB0eXBlIHtcbiAgQ2FydEFjdGlvbixcbiAgQ2FydEV2ZW50RGF0YSxcbiAgQ29uZmlndXJlZENvbXBvbmVudCxcbiAgQ29udGVudCxcbiAgVGFnLFxuICBUcmFja2luZ1NldHRpbmdzLFxufSBmcm9tIFwiQHRhaWxqcy90eXBlc1wiO1xuXG5pbXBvcnQgeyBjb21tYW5kVGVzdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kYXJ5RGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IGRlZmluaXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIHRoZSBib3VuZGFyeSBlbGVtZW50LlxuICAgKi9cbiAgY29tcG9uZW50PzogQ29uZmlndXJlZENvbXBvbmVudCB8IENvbmZpZ3VyZWRDb21wb25lbnRbXSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IGRlZmluaXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIHRoZSBib3VuZGFyeSBlbGVtZW50LlxuICAgKi9cbiAgY29udGVudD86IENvbnRlbnQgfCBDb250ZW50W10gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgY29udGVudCBhcmVhIGFzc29jaWF0ZWQgd2l0aCB0aGUgYm91bmRhcnkgZWxlbWVudC5cbiAgICpcbiAgICogQSBjb250ZW50IGFyZWEgaXMgdXNlZCB0byBpbmRpY2F0ZSB3aGVyZSBhY3RpdmF0ZWQgY29tcG9uZW50cyBhcmUgdXNlZC5cbiAgICovXG4gIGFyZWE/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiAgVGhlc2UgdGFncyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjb21wb25lbnRzIGFuZCBjb250ZW50IGluIHVzZXIgYWN0aXZhdGlvbnMgd2l0aCB0aGUgYm91bmRhcnkgZWxlbWVudCBvciBhbnkgb2YgaXRzIGRlc2NlbmRhbnRzLlxuICAgKi9cbiAgdGFncz86IFRhZyB8IFRhZ1tdIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgd2lsbCBpbmNsdWRlIGNhcnQgZGF0YSB3aGVuIGFjdGl2YXRlZC5cbiAgICovXG4gIGNhcnQ/OiBDYXJ0QWN0aW9uIHwgQ2FydEV2ZW50RGF0YTtcblxuICAvKipcbiAgICogU2V0dGluZ3MgdGhhdCB3aWxsIGFwcGx5IHRvIGNvbXBvbmVudHMgY29udGFpbmVkIGJ5IHRoZSBib3VuZGFyeSBlbGVtZW50IGluY2x1ZGluZyBpdHNlbGYsIHNpbWlsYXIgdG8gc3BlY2lmeWluZyBcInRyYWNrLSpcIiBITVRMIGF0dHJpYnV0ZXMgb24gdGhlIGVsZW1lbnQuXG4gICAqL1xuICB0cmFjaz86IFRyYWNraW5nU2V0dGluZ3M7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFuIGVsZW1lbnQgYXMgdGhlIGJvdW5kYXJ5IGZvciBhIGNvbXBvbmVudCBvciBzaW1pbGFyIHRyYWNraW5nIGRhdGEuIEFsbCBldmVudHMgdHJpZ2dlcmVkIGZyb20gdGhlIGVsZW1lbnQgb3IgaXRzIGRlc2NlbmRhbnRzIHdpbGwgaGF2ZSB0aGlzIGluZm9ybWF0aW9uIGF0dGFjaGVkLlxuICogSW4gY2FzZSBvZiBuZXN0ZWQgYm91bmRhcmllcyB0aGUgY2xvc2VzdCBvbmUgaXMgdXNlZC5cbiAqL1xuZXhwb3J0IHR5cGUgQm91bmRhcnlDb21tYW5kID0ge1xuICBib3VuZGFyeTogRWxlbWVudDtcbn0gJiAoXG4gIHwgKEJvdW5kYXJ5RGF0YSAmIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQsIHRhZ3MgYW5kIGNvbXBvbmVudHMgd2lsbCBiZSBhZGRlZCB0byB0aGUgZXhpc3RpbmcsIGlmIGFueS5cbiAgICAgICAqL1xuICAgICAgYWRkPzogYm9vbGVhbjtcbiAgICB9KVxuICB8IHsgdXBkYXRlOiAoY3VycmVudD86IEJvdW5kYXJ5RGF0YSkgPT4gQm91bmRhcnlEYXRhIHwgbnVsbCB9XG4pO1xuXG4vLyB7XG4vLyAgIC8qKlxuLy8gICAgKiBUaGUgY29tcG9uZW50IGRlZmluaXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIHRoZSBib3VuZGFyeSBlbGVtZW50LlxuLy8gICAgKi9cbi8vICAgY29tcG9uZW50PzogQ29uZmlndXJlZENvbXBvbmVudCB8IENvbmZpZ3VyZWRDb21wb25lbnRbXSB8IG51bGw7XG5cbi8vICAgLyoqXG4vLyAgICAqIFRoZSBjb250ZW50IGRlZmluaXRpb24ocykgYXNzb2NpYXRlZCB3aXRoIHRoZSBib3VuZGFyeSBlbGVtZW50LlxuLy8gICAgKi9cbi8vICAgY29udGVudD86IENvbnRlbnQgfCBDb250ZW50W10gfCBudWxsO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBUaGUgbmFtZSBvZiB0aGUgY29udGVudCBhcmVhIGFzc29jaWF0ZWQgd2l0aCB0aGUgYm91bmRhcnkgZWxlbWVudC5cbi8vICAgICpcbi8vICAgICogQSBjb250ZW50IGFyZWEgaXMgdXNlZCB0byBpbmRpY2F0ZSB3aGVyZSBhY3RpdmF0ZWQgY29tcG9uZW50cyBhcmUgdXNlZC5cbi8vICAgICovXG4vLyAgIGFyZWE/OiBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGw7XG5cbi8vICAgLyoqXG4vLyAgICAqICBUaGVzZSB0YWdzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNvbXBvbmVudHMgYW5kIGNvbnRlbnQgaW4gdXNlciBhY3RpdmF0aW9ucyB3aXRoIHRoZSBib3VuZGFyeSBlbGVtZW50IG9yIGFueSBvZiBpdHMgZGVzY2VuZGFudHMuXG4vLyAgICAqL1xuLy8gICB0YWdzPzogVGFnIHwgVGFnW10gfCBudWxsO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBUaGUgZWxlbWVudCB3aWxsIGluY2x1ZGUgY2FydCBkYXRhIHdoZW4gYWN0aXZhdGVkLlxuLy8gICAgKi9cbi8vICAgY2FydD86IENhcnRBY3Rpb24gfCBDYXJ0RXZlbnREYXRhO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBUaGUgZWxlbWVudCdzIGNvbXBvbmVudCB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBzdGFjayBldmVuIHdoZW4gdGhlIGFjdGl2YXRpb24gdHJhY2tpbmcgbGV2ZWwgaXMgYGRpcmVjdGAuXG4vLyAgICAqL1xuLy8gICBwcm9tb3RlPzogYm9vbGVhbjtcblxuLy8gICAvKipcbi8vICAgICogU3BlY2lmaWVzIGhvdyB0aGUgdGhpcyBjb21tYW5kIG1vZGlmaWVzIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgYm91bmRhcnkgZWxlbWVudC5cbi8vICAgICpcbi8vICAgICogT25seSBwcm9wZXJ0aWVzIHByZXNlbnQgaW4gdGhpcyBjb21tYW5kIGFyZSBhZmZlY3RlZCAoZS5nLiBgY29tcG9uZW50YCBvciBgY29udGVudGApIHVubGVzcyB0aGUgYWN0aW9uIGlzIGBjbGVhcmAuXG4vLyAgICAqXG4vLyAgICAqIEBkZWZhdWx0IFwiYWRkXCJcbi8vICAgICovXG4vLyAgIGFjdGlvbj86IFwiYWRkXCIgfCBcInJlbW92ZVwiIHwgXCJjbGVhclwiO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBUaGUgRE9NIGVsZW1lbnQgdGhhdCBnZXRzIHRoaXMgY29tbWFuZCdzIGRhdGEgYXNzb2NpYXRlZC5cbi8vICAgICovXG4vLyAgIGJvdW5kYXJ5OiBFbGVtZW50O1xuLy8gfVxuXG5leHBvcnQgY29uc3QgaXNEYXRhQm91bmRhcnlDb21tYW5kID0gY29tbWFuZFRlc3Q8Qm91bmRhcnlDb21tYW5kPihcImJvdW5kYXJ5XCIpO1xuIiwiaW1wb3J0IHR5cGUgeyBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgY29tbWFuZFRlc3QgfSBmcm9tIFwiLi9zaGFyZWRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25Db21tYW5kIHtcbiAgZXh0ZW5zaW9uOiBUcmFja2VyRXh0ZW5zaW9uRmFjdG9yeTtcbiAgcHJpb3JpdHk/OiBudW1iZXI7XG59XG5leHBvcnQgY29uc3QgaXNFeHRlbnNpb25Db21tYW5kID0gY29tbWFuZFRlc3Q8RXh0ZW5zaW9uQ29tbWFuZD4oXCJleHRlbnNpb25cIik7XG4iLCJpbXBvcnQgeyBUIH0gZnJvbSBcIi4uL2xpYi9hbGlhc1wiO1xuaW1wb3J0IHsgY29tbWFuZFRlc3QgfSBmcm9tIFwiLi9zaGFyZWRcIjtcblxuLyoqXG4gKiBDYXVzZXMgYWxsIHF1ZXVlZCBldmVudHMgdG8gYmUgcG9zdGVkIHRvIHRoZSBzZXJ2ZXIgaW1tZWRpYXRlbHkuXG4gKi9cbmV4cG9ydCB0eXBlIEZsdXNoQ29tbWFuZCA9IHsgZmx1c2g6IGJvb2xlYW47IGZvcmNlPzogYm9vbGVhbjsgZGVmZXI/OiBib29sZWFuIH07XG5leHBvcnQgY29uc3QgaXNGbHVzaENvbW1hbmQgPSBjb21tYW5kVGVzdDxGbHVzaENvbW1hbmQ+KFQsIFwiZmx1c2hcIik7XG4iLCJpbXBvcnQgdHlwZSB7IFJlc2VydmVkVmFyaWFibGVzLCBUcmFja2VyIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBjb21tYW5kVGVzdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuXG4vKiogVXNlZCB0byBnZXQgYSBjb250ZXh0IHZhcmlhYmxlIGZyb20gdGhlIHRyYWNrZXIuIFRoaXMgaXMgYXN5bmMsIHNvIGlmIGEga2V5IGlzIGFudGljaXBhdGVkIHRvIGV2ZW50dWFsbHkgYmUgc2V0LCB0aGUgY2FsbGJhY2sgd2lsbCB3YWl0IGZvciBpdCBpZiBkb2VzIG5vdCBhbHJlYWR5IGhhdmUgYSB2YWx1ZS5cbiAqIFRoaXMgY29tbWFuZCBjYW4gYWxzbyBiZSB1c2VkIGZvciBwb2xsaW5nIGJ5IHJldHVybmluZyBgdHJ1ZWAgZnJvbSB0aGUgY2FsbGJhY2sgaW4gd2hpY2ggY2FzZSBpdCB3aWxsIGJlIGNhbGxlZCBldmVyeXRpbWUgdGhlIHZhbHVlIGlzIHNldCAobm90IG5lY2Vzc2FyaWx5IHdpdGggYSBjaGFuZ2VkIHZhbHVlKS5cbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0Q29tbWFuZCB7XG4gIC8qKlxuICAgKiBJZiB0aGUgZnVuY3Rpb25zIHJldHVybnMgdHJ1ZSBpdCB3aWxsIGJlIHRyaWdnZXJlZCBhZ2FpbiBpZiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICovXG4gIGdldDogUmVjb3JkPHN0cmluZywgR2V0Q2FsbGJhY2s+ICYge1xuICAgIFtrZXkgaW4ga2V5b2YgUmVzZXJ2ZWRWYXJpYWJsZXNdPzogR2V0Q2FsbGJhY2s8UmVzZXJ2ZWRWYXJpYWJsZXNba2V5XT47XG4gIH07XG4gIC8qKlxuICAgKiBJZiBubyBvbmUgaGFzIHNldCB0aGUgdmFsdWUgYWZ0ZXIgdGhpcyBhbW91bnQgb2YgbXMsIHRoZSBjYWxsYmFjayB3aWxsIGJlIHRyaWdnZXJlZCB3aXRoIGB1bmRlZmluZWRgIGFzIHRoZSB2YWx1ZSBhbmQgYSBmbGFnIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCB0aW1lZCBvdXQuXG4gICAqIElmIHNldCB0byB6ZXJvIHRoZSBjYWxsYmFjayB3aWxsIGFsd2F5cyBiZSBjYWxsZWQgc3luY2hyb25vdXNseSB3aXRoIGVpdGhlciB0aGUgdmFsdWUgb3IgdW5kZWZpbmVkIGlmIGl0IGlzIG5vdCBkZWZpbmVkLlxuICAgKiBOZWdhdGl2ZSB2YWx1ZXMgbWVhbnMgXCJubyB0aW1lb3V0XCIuXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoZSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCBmb3Ige0BsaW5rIEdldENvbW1hbmR9cyB3aGVuIGEgdHJhY2tlciB2YXJpYWJsZSBpcyBzZXQgb3IgY2hhbmdlZC5cbiAqIFRvIGVuYWJsZS9zaW1wbGlmeSBwb2xsaW5nIHRoZSBjYWxsYmFjayBnZXRzIHRyaWdnZXJlZCBhZ2FpbiBuZXh0IHRpbWUgdGhlIHZhcmlhYmxlIGNoYW5nZXMgaWYgaXQgcmV0dXJucyBgdHJ1ZWAuXG4gKi9cbmV4cG9ydCB0eXBlIEdldENhbGxiYWNrPFQgPSBhbnk+ID0gKFxuICAvKiogVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHZhcmlhYmxlIGluIHRoZSB0cmFja2VyLiAqL1xuICB2YWx1ZTogVCB8IHVuZGVmaW5lZCxcblxuICAvKiogVGhlIGtleSBmb3Igd2hpY2ggdGhlIGNhbGxiYWNrIGlzIHJlZ2lzdGVyZWQuICAqL1xuICBrZXk6IHN0cmluZyxcblxuICAvKiogV2hldGhlciB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlIGJlY2F1c2UgdGhlIHRpbWVvdXQgZWxhcHNlZC4gKi9cbiAgdGltZW91dDogYm9vbGVhbixcblxuICAvKiogVGhlIHRyYWNrZXIgd2hlcmUgdGhlIHZhcmlhYmxlIHdhcyBzZXQuICovXG4gIHRyYWNrZXI6IFRyYWNrZXJcbikgPT4gYW55IHwgdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IGlzR2V0Q29tbWFuZCA9IGNvbW1hbmRUZXN0PEdldENvbW1hbmQ+KFwiZ2V0XCIpO1xuIiwiaW1wb3J0IHR5cGUgeyBMaXN0ZW5lciB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgY29tbWFuZFRlc3QgfSBmcm9tIFwiLi9zaGFyZWRcIjtcblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBiZWZvcmUgYW5kIGFmdGVyIGV2ZW50cyBhcmUgZmx1c2hlZC5cbiAqIFVzZWZ1bCBmb3IgZGVidWdnaW5nIG9yIGNsaWVudC1zaWRlIGludGVncmF0aW9uIHdpdGggb3RoZXIgdHJhY2tlciBsaWJyYXJpZXMgKGlmIG9uZSBhYnNvbHV0ZWx5IG11c3QpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RlbmVyQ29tbWFuZCB7XG4gIGxpc3RlbmVyOiBMaXN0ZW5lcjtcbn1cbmV4cG9ydCBjb25zdCBpc0xpc3RlbmVyQ29tbWFuZCA9IGNvbW1hbmRUZXN0PExpc3RlbmVyQ29tbWFuZD4oXCJsaXN0ZW5lclwiKTtcbiIsImltcG9ydCB7IE9yZGVyLCBPcmRlckV2ZW50IH0gZnJvbSBcIkB0YWlsanMvdHlwZXNcIjtcbmltcG9ydCB7IGNvbW1hbmRUZXN0IH0gZnJvbSBcIi4vc2hhcmVkXCI7XG5cbi8qKlxuICogU2hvcnRoYW5kIGNvbW1hbmQgdG8gdHJpZ2dlciBhbiB7QGxpbmsgT3JkZXJFdmVudH0gZXZlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3JkZXJDb21tYW5kIHtcbiAgLyoqXG4gICAqIFRoZSBvcmRlciB0aGF0IHdhcyBjb21wbGV0ZWQgb3IgY2FuY2VsbGVkLlxuICAgKi9cbiAgb3JkZXI6IE9yZGVyO1xufVxuXG5leHBvcnQgY29uc3QgaXNPcmRlckNvbW1hbmQgPSBjb21tYW5kVGVzdDxPcmRlckNvbW1hbmQ+KFwib3JkZXJcIik7XG4iLCJpbXBvcnQgdHlwZSB7IENvbXBvbmVudCwgRXh0ZXJuYWxSZWZlcmVuY2UgfSBmcm9tIFwiQHRhaWxqcy90eXBlc1wiO1xuaW1wb3J0IHsgY29tbWFuZFRlc3QgfSBmcm9tIFwiLi9zaGFyZWRcIjtcblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50T3JDb250ZW50ID1cbiAgfCB7IGNvbXBvbmVudDogQ29tcG9uZW50IH1cbiAgfCB7IGNvbnRlbnQ6IEV4dGVybmFsUmVmZXJlbmNlIH07XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFuIGVsZW1lbnQgYXMgdGhlIGJvdW5kYXJ5IGZvciBhIGNvbXBvbmVudC4gQWxsIGV2ZW50cyB0cmlnZ2VyZWQgZnJvbSB0aGUgZWxlbWVudCBvciBpdHMgZGVzY2VuZGFudHMgd2lsbCBoYXZlIHRoaXMgaW5mb3JtYXRpb24gYXR0YWNoZWQuXG4gKiBJbiBjYXNlIG9mIG5lc3RlZCBib3VuZGFyaWVzIHRoZSBjbG9zZXN0IG9uZSBpcyB1c2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjYW5Db21wb25lbnRzQ29tbWFuZCB7XG4gIHNjYW46IHtcbiAgICBhdHRyaWJ1dGU6IHN0cmluZztcbiAgICBjb21wb25lbnRzOiBDb21wb25lbnRPckNvbnRlbnRbXTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGlzU2NhbkNvbXBvbmVudHNDb21tYW5kID1cbiAgY29tbWFuZFRlc3Q8U2NhbkNvbXBvbmVudHNDb21tYW5kPihcInNjYW5cIik7XG4iLCJpbXBvcnQgdHlwZSB7IFJlc2VydmVkVmFyaWFibGVzIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBjb21tYW5kVGVzdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuXG4vKipcbiAqIFNldCB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMgaW4gdGhlIHRyYWNrZXIncyB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXRDb21tYW5kIHtcbiAgLyoqIEFuIG9iamVjdCB3aGVyZSB0aGUgbmFtZXMgb2YgdGhlIHByb3BlcnRpZXMgY29ycmVzcG9uZCB0byB0aGUgdmFyaWFibGVzIHNldCBpbiB0aGUgdHJhY2tlci4gKi9cbiAgc2V0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+ICYgUGFydGlhbDxSZXNlcnZlZFZhcmlhYmxlcz47XG59XG5cbmV4cG9ydCBjb25zdCBpc1NldENvbW1hbmQgPSBjb21tYW5kVGVzdDxTZXRDb21tYW5kPihcInNldFwiKTtcbiIsImltcG9ydCB0eXBlIHsgVHJhY2tlciwgVHJhY2tlckNvbW1hbmQgfSBmcm9tIFwiLi5cIjtcblxuZXhwb3J0IHR5cGUgVHJhY2tlckF2YWlsYWJsZUNvbW1hbmQgPSAodHJhY2tlcjogVHJhY2tlcikgPT4gdm9pZDtcbmV4cG9ydCBjb25zdCBpc1RyYWNrZXJBdmFpbGFibGVDb21tYW5kID0gKFxuICBjb21tYW5kOiBUcmFja2VyQ29tbWFuZFxuKTogY29tbWFuZCBpcyAodHJhY2tlcjogVHJhY2tlcikgPT4gdm9pZCA9PiB0eXBlb2YgY29tbWFuZCA9PT0gXCJmdW5jdGlvblwiO1xuIiwiaW1wb3J0IHtcbiAgYXJyYXksXG4gIGVudHJpZXMsXG4gIGVycixcbiAgRVJSX0FSR1VNRU5UX0VSUk9SLFxuICBGLFxuICBpdGVtLFxuICBtYXAsXG4gIG9iaixcbiAgcHVzaCxcbiAgVCxcbiAgdHJ5Q2F0Y2gsXG4gIHVuZGVmaW5lZCxcbn0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IEdldENhbGxiYWNrLCBUcmFja2VyIH0gZnJvbSBcIi4uXCI7XG5cbmV4cG9ydCB0eXBlIFZhcmlhYmxlcyA9IFtcbiAgZ2V0OiB7XG4gICAgKCk6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgKHZhbHVlczogUmVjb3JkPHN0cmluZywgR2V0Q2FsbGJhY2s+LCB0aW1lb3V0PzogbnVtYmVyKTogdm9pZDtcbiAgfSxcbiAgc2V0OiB7XG4gICAgKGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBwYXNzaXZlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgKHZhbHVlczogUmVjb3JkPHN0cmluZywgYW55PiwgcGFzc2l2ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgICh2YWx1ZXM6IFtzdHJpbmcsIGFueV1bXSwgcGFzc2l2ZTogYm9vbGVhbik6IHZvaWQ7XG4gIH1cbl07XG5cbmV4cG9ydCBjb25zdCB2YXJpYWJsZXMgPSAoXG4gIHRyYWNrZXI6IFRyYWNrZXIsXG4gIGxpc3Rlbj86ICh2YWx1ZXM6IFtrZXk6IHN0cmluZywgdmFsdWU6IGFueV1bXSkgPT4gdm9pZFxuKTogVmFyaWFibGVzID0+IHtcbiAgY29uc3QgZGF0YTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXG4gIGNvbnN0IGNhbGxiYWNrczogUmVjb3JkPHN0cmluZywgR2V0Q2FsbGJhY2tbXT4gPSB7fTtcblxuICBjb25zdCBnZXRDYWxsYmFja3MgPSAoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcmVzZXQ6IGJvb2xlYW5cbiAgKTogW3ByZXZpb3VzOiBHZXRDYWxsYmFja1tdLCBjdXJyZW50OiBHZXRDYWxsYmFja1tdXSA9PiBbXG4gICAgKGNhbGxiYWNrc1trZXldID8/PSBbXSksXG4gICAgcmVzZXQgPyAoY2FsbGJhY2tzW2tleV0gPSBbXSkgOiBjYWxsYmFja3Nba2V5XSxcbiAgXTtcblxuICBjb25zdCBzZXQgPSAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICBjb25zdCBwYXNzaXZlID0gaXRlbShhcmdzLCAtMSkgPT09IFQ7XG4gICAgY29uc3Qga3ZzID0gYXJyYXkoYXJnc1swXSlcbiAgICAgID8gYXJnc1swXVxuICAgICAgOiBvYmooYXJnc1swXSlcbiAgICAgID8gZW50cmllcyhhcmdzWzBdKVxuICAgICAgOiBbW2FyZ3NbMF0sIGFyZ3NbMV1dXTtcbiAgICBtYXAoa3ZzLCAoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBrZXkgPSBcIlwiICsga2V5O1xuICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICBjb25zdCBbY2FsbGJhY2tzLCBuZXh0XSA9IGdldENhbGxiYWNrcyhrZXksIFQpO1xuICAgICAgbWFwKFxuICAgICAgICBjYWxsYmFja3MsXG4gICAgICAgIChjYWxsYmFjaykgPT5cbiAgICAgICAgICBjYWxsYmFjayh2YWx1ZSwga2V5LCBGLCB0cmFja2VyKSA9PT0gVCAmJiBwdXNoKG5leHQsIGNhbGxiYWNrKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgICFwYXNzaXZlICYmIGxpc3Rlbj8uKGt2cyk7XG4gIH07XG5cbiAgY29uc3QgZ2V0OiBWYXJpYWJsZXNbMF0gPSAoXG4gICAgdmFsdWVzPzogUmVjb3JkPHN0cmluZywgR2V0Q2FsbGJhY2s+LFxuICAgIHRpbWVvdXQ/OiBudW1iZXJcbiAgKTogYW55ID0+IHtcbiAgICBpZiAoIXZhbHVlcykgcmV0dXJuIGRhdGE7XG5cbiAgICBtYXAoZW50cmllcyh2YWx1ZXMpLCAoW2tleSwgY2FsbGJhY2tdKSA9PiB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gZXJyKEVSUl9BUkdVTUVOVF9FUlJPUiwga2V5KTtcbiAgICAgIGxldCBpbm5lciA9IGNhbGxiYWNrO1xuXG4gICAgICBjb25zdCBbcXVldWVdID0gZ2V0Q2FsbGJhY2tzKGtleSwgRik7XG5cbiAgICAgIGxldCB0cmlnZ2VyZWQgPSBGO1xuICAgICAgY2FsbGJhY2sgPSAodmFsdWUsIGtleSwgY3VycmVudCkgPT4ge1xuICAgICAgICB0cmlnZ2VyZWQgPSBUO1xuICAgICAgICByZXR1cm4gdHJ5Q2F0Y2goKCkgPT4gaW5uZXIodmFsdWUsIGtleSwgY3VycmVudCwgdHJhY2tlcikpO1xuICAgICAgfTtcblxuICAgICAgaWYgKGRhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmIHRpbWVvdXQgIT09IDApIHtcbiAgICAgICAgcHVzaChxdWV1ZSwgY2FsbGJhY2spO1xuXG4gICAgICAgIHRpbWVvdXQgJiZcbiAgICAgICAgICB0aW1lb3V0ID4gMCAmJlxuICAgICAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAhdHJpZ2dlcmVkICYmIC8vIFRoZSBjYWxsYmFjayBoYXMgbm90IHlldCBiZWVuIHRyaWdnZXJlZCwgdGltZW91dCBoYXBwZW5lZC5cbiAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBrZXksIFQsIHRyYWNrZXIpICE9PSBUICYmXG4gICAgICAgICAgICAgIChpbm5lciA9ICgpID0+IHt9KSwgLy8gTmV1dHJhbGl6ZSB0aGUgaW5uZXIgY2FsbGJhY2sgc28gaXQgaXMgbm90IGludm9rZWQgYWdhaW4gaWYgYSB2YWx1ZSBhcnJpdmVzIGFmdGVyIHRoZSB0aW1lb3V0LlxuICAgICAgICAgICAgdGltZW91dFxuICAgICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhkYXRhW2tleV0sIGtleSwgVCwgdHJhY2tlcikgPT09IFQgJiYgcHVzaChxdWV1ZSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gW2dldCwgc2V0XTtcbn07XG4iLCJpbXBvcnQgeyBJTklUSUFMSVpFX1RSQUNLRVJfRlVOQ1RJT04gfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVRyYWNrZXIgfSBmcm9tIFwiLi9pbml0aWFsaXplVHJhY2tlclwiO1xuaW1wb3J0IHsgRiwgVCwgZGVmaW5lLCB3aW5kb3cgfSBmcm9tIFwiLi9saWJcIjtcblxuLy8gVGhpcyBhc3N1bWVzIHRoZSBzY3JpcHQgaXMgbG9hZGVkIGZyb20gdGhlIFJlcXVlc3RIYW5kbGVyJ3MgP2NmZyByb3V0ZS5cblxuLy8gVG8gcHJldmVudCBleHRlcm5hbCBzY3JpcHRzIGZyb20gZWF2ZXMtZHJvcHBpbmcgYW5kIGdldCBhIGhvbGQgb2YgdGhlIHN0b3JhZ2Uga2V5LCB0aGlzIGlzIGhvdyBpbml0aWFsaXphdGlvbiB3b3Jrczpcbi8vIDE6IFRoZSBjb25maWd1cmF0aW9uIHNjcmlwdHMgYXBwZW5kcyBhIDxzY3JpcHQ+IGVsZW1lbnQgd2l0aCB0aGlzIHNjcmlwdCwgYW5kIGFkZHMgYSBcImxvYWRlZFwiIGhhbmRsZXIuXG4vLyAyOiBUaGlzIHNjcmlwdCBkZWZpbmVzIGEgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2Qgb24gdGhlIHdpbmRvdy4gVGhpcyBwcmV2ZW50cyBpdCBmcm9tIGJlaW5nIG92ZXJyaWRlbiBpZiBzb21ldGhpbmcgaW50ZXJjZXB0cyB0aGUgXCJsb2FkZWRcIiBoYW5kbGVyIGJlZm9yZSB0aGUgY29uZmlndXJhdGlvbiBzY3JpcHQuXG4vLyAzOiBUaGUgY29uZmlndXJhdGlvbiBzY3JpcHQgY2FsbHMgdGhpcyBmdW5jdGlvbiB3aXRoIGEgY2FsbGJhY2sgdGhhdCBpbml0aWFsaXplcyB0aGUgdHJhY2tlciB3aXRoIHRoZSBjb25maWd1cmF0aW9uIGluY2x1ZGluZyB0aGUgc3RvcmFnZSBrZXkuXG5cbmxldCBsb2FkZWQgPSBGO1xuZGVmaW5lKHdpbmRvdywge1xuICBbSU5JVElBTElaRV9UUkFDS0VSX0ZVTkNUSU9OXTogW1xuICAgIChjYWxsYmFjazogKGluaXQ6IHR5cGVvZiBpbml0aWFsaXplVHJhY2tlcikgPT4gdm9pZCkgPT4ge1xuICAgICAgaWYgKGxvYWRlZCA9PT0gKGxvYWRlZCA9IFQpKSByZXR1cm47XG4gICAgICBjYWxsYmFjayhpbml0aWFsaXplVHJhY2tlcik7XG4gICAgfSxcbiAgXSxcbn0pO1xuIl0sIm5hbWVzIjpbImN1cnJlbnRWYWx1ZSIsIm1hdGNoU2VsZWN0ZWQiLCJNVVRFWF9SRVNQT05TRV9DT09LSUUiLCJ0eXBlVGVzdCIsInR5cGVzIiwiZXYiLCJ0eXBlIiwic29tZSIsImlzVHJhY2tlZEV2ZW50IiwiaXNWaWV3RXZlbnQiLCJpc1ZpZXdFbmRlZEV2ZW50IiwiaXNDb25zZW50RXZlbnQiLCJzcGxpdFJhbmtzIiwicmFua3MiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJzcGxpdCIsImZpbHRlciIsInJhbmsiLCJwYXJzZVRhZ1N0cmluZyIsImlucHV0IiwiYmFzZVJhbmsiLCJ0YXJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwidGVzdCIsImRlY29kZVVSSUNvbXBvbmVudCIsIl8iLCJuYW1lIiwidmFsdWUiLCJzZXAiLCJwYXJzZWRUYWciLCJ0YWdzIiwiYmFzZVJhbmtzIiwiXzAiLCJ0YWciLCJxdW90ZTEiLCJxdW90ZTIiLCJ1bnF1b3RlZCIsImxlbmd0aCIsInBvcCIsImNvbmNhdCIsInB1c2giLCJhZGQiLCJ1bmRlZmluZWQiLCJuaWwiLCJUIiwiRiIsImZyb21FbnRyaWVzIiwiT2JqZWN0IiwiYXNzaWduIiwic3QiLCJzZXRUaW1lb3V0IiwicGkiLCJwYXJzZUludCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJTU1IiLCJ3aW5kb3ciLCJ3aW4iLCJkb2MiLCJkb2N1bWVudCIsIm5hdiIsIm5hdmlnYXRvciIsImJvZHkiLCJsb2MiLCJsb2NhdGlvbiIsInBlcmYiLCJwZXJmb3JtYW5jZSIsImVyciIsImNvZGUiLCJhcmdzIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInJvdW5kIiwieCIsImRlY2ltYWxzIiwiYm9vbCIsIk1hdGgiLCJwb3ciLCJkZWNvZGUiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJhbWV0ZXJzIiwiZXF1YWxzIiwidmFsdWVzIiwibG93ZXJDYXNlIiwicyIsImNvbmNhdDIiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkZWZhdWx0VmFsdWUiLCJ0eXBlUHJlZml4ZXMiLCJpcyIsImV4ZWMiLCJ0ZXN0T3JDb252ZXJ0RnVuY3Rpb24iLCJjb252ZXJ0IiwicGFyc2UiLCJzdHIiLCJ0b1N0cmluZyIsImZ1biIsIm9iaiIsImFycmF5IiwiaXRlcmFibGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNvcnQiLCJpdGVtcyIsInNvcnRLZXkiLCJpdGVtIiwibGhzIiwicmhzIiwic3BsaWNlIiwic3RhcnQiLCJkZWxldGVDb3VudCIsInVuc2hpZnQiLCJzaGlmdCIsInNvdXJjZXMiLCJzaXplIiwibWFwIiwia2V5cyIsImVudHJpZXMiLCJtYXBPclJlY29yZCIsInByb2plY3QiLCJpbmRleCIsImZvckVhY2giLCJhY3Rpb24iLCJpbml0aWFsVmFsdWUiLCJicmVha1NpZ25hbCIsImNsb25lT3JQcm9qZWN0IiwiZmxhdE1hcCIsInByb2plY3Rpb24iLCJzb3VyY2UiLCJwcmVkaWNhdGUiLCJlbXB0eUlzTnVsbCIsImFueSIsImkiLCJzdG9wIiwiaGFzaFNldCIsIlNldCIsImNsZWFyIiwiY2xlYXJhYmxlIiwia2V5IiwiZGVsIiwiZ2V0IiwiaGFzIiwiZGVsZXRlIiwic2V0IiwiZ2V0T3JTZXQiLCJ0cmFuc3Bvc2UiLCJhZGRpdGlvbmFsRW50cmllcyIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIlJlc2V0IiwiRXhwaXJlZCIsIm9wZW5Qcm9taXNlIiwidGltZW91dCIsImN1cnJlbnRSZXNvbHZlIiwiY3VycmVudFByb21pc2UiLCJyZXNvbHZlZCIsInJlc2V0IiwiY2FwdHVyZWRSZXNvbHZlIiwiZGVsYXkiLCJ0aGVuIiwicCIsIm1hdGNoIiwicmVnZXgiLCJzZWxlY3RvciIsImVzY2FwZVJlZ0V4IiwiUkVHRVhfTkVWRVIiLCJ1bmlvbk9yTmV2ZXIiLCJwYXJ0cyIsImpvaW5lZCIsIlJlZ0V4cCIsInN0cmluZ1J1bGVDYWNoZSIsInNlcGFyYXRvcnMiLCJwYXJ0IiwidGV4dCIsInNlcGFyYXRvciIsInJlcGxhY2VWYWx1ZSIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc1N5bWJvbCIsImlzSXRlcmFibGUiLCJjb2RlcyIsImNoYXJzIiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0IiwiRk5WcyIsIjMyIiwiNjQiLCIxMjgiLCJlbnRyb3B5IiwibWF4IiwicmFuZG9tIiwic2VyaWFsaXplIiwiZGF0YSIsIm9wdGlvbnMiLCJtdWx0aXBsZSIsIkVycm9yIiwiZmxvYXRCdWZmZXIiLCJmbG9hdFZpZXciLCJwb3czMiIsIlVpbnQ4QXJyYXkiLCJhcHBlbmQiLCJzdWJhcnJheSIsImlzUmVwbGFjZW1lbnQiLCJhcHBlbmROdWxsIiwiYXBwZW5kQnl0ZSIsImlzRmluaXRlIiwiZmxvb3IiLCJhcHBlbmRCeXRlcyIsImhpIiwibG8iLCJhcHBlbmRJbnQ2NCIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJzZXRGbG9hdDY0IiwiYnl0ZXMiLCJhc2NpaSIsImNpIiwiYyIsImMyIiwiZW5jb2RlVXRmOCIsIkRhdGUiLCJzZWMiLCJnZXRUaW1lIiwiZ2V0TWlsbGlzZWNvbmRzIiwibnMiLCJhcHBlbmRBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiaW52YWxpZFR5cGVSZXBsYWNlbWVudCIsImJ5dGUiLCJuZXdMZW5ndGgiLCJuZXdBcnJheSIsImFicyIsImRlc2VyaWFsaXplIiwicG9zIiwicmVhZCIsInJlYWRNYXAiLCJyZWFkQXJyYXkiLCJyZWFkU3RyIiwicmVhZEJpbiIsInJlYWRFeHQiLCJyZWFkRmxvYXQiLCJyZWFkVUludCIsInJlYWRJbnQiLCJkZWJ1ZyIsImZpcnN0IiwidmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsImxlbmd0aFNpemUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJleHBvcnRzIiwic2NyZWVuUG9zIiwieSIsInJlY3QiLCJjcmVhdGVUcmFuc3BvcnQiLCJlbmNyeXB0IiwiZGVjcnlwdCIsImhhc2giLCJuIiwiaiIsInBhZCIsInByaW1lIiwibWl4ZXIiLCJtaXhlcjI1NSIsIml3IiwibWl4ZXIwIiwid2luZG93MCIsInJlc2V0TWl4ZXIiLCJ1cGRhdGVNaXhlciIsIkVOVFJPUFkiLCJjaXBoZXIiLCJudW1lcmljT3JCaXRzIiwiYml0cyIsIkJpZ0ludCIsImFzVWludE4iLCJNSU5fU0FGRV9JTlRFR0VSIiwiY2h1bmsiLCJjbGVhbmVycyIsInJlZnMiLCJyZWZJbmRleCIsInBhdGNoUHJvcGVydHkiLCJhZGRDbGVhbmVyIiwiaW5uZXIiLCJ2YWwiLCJwYXRjaGVkIiwiY2xlYW5lciIsImlzU2FmZUludGVnZXIiLCJ0b0pTT04iLCJNYXAiLCJpc0RlZmluZWQiLCJrIiwiUkVGX1BST1AiLCJzZXJpYWxpemVkIiwiYmFzZTY0IiwiZW5jb2RlZCIsImhhc1ZhbHVlIiwiZnJvbTY0dSIsIm1hdGNoZWRSZWYiLCJ2IiwiZSIsImh0dHBFbmNvZGUiLCJodHRwRGVjb2RlIiwiaHR0cEVuY3J5cHQiLCJodHRwRGVjcnlwdCIsIm5vdyIsIl90bXAiLCJ0aW1lT3JpZ2luIiwidHJ1bmMiLCJtcyIsImZvcm1hdER1cmF0aW9uIiwidG9GaXhlZCIsImNhbGxiYWNrIiwiaWQiLCJjdXJyZW50Q2FsbGJhY2siLCJjYXB0dXJlZENhbGxiYWNrIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsInNldEludGVydmFsIiwiY2xlYW51cCIsImN1cnJlbnRJZCIsIndhaXQiLCJwdWxzZSIsImlzQWN0aXZlIiwiZmluaXNoIiwidGltZXIiLCJ0aW1lIiwic3RhcnRlZCIsImVsYXBzZWQiLCJvcmlnaW4iLCJkZWZlciIsImYiLCJxdWV1ZU1pY3JvdGFzayIsInJhbmRvbVZhbHVlcyIsImFyZyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInJhbmRvbVNhZmVJbnQiLCJhcnIiLCJsb2NhbElkQnVmZmVyIiwibmV4dElkIiwiY29tcGFyZVRhYklkcyIsIm90aGVyIiwibG9jYWxlQ29tcGFyZSIsIlRBQl9JRCIsInRyYWNrZXJDb25maWciLCJzcmMiLCJkaXNhYmxlZCIsInBvc3RFdmVudHMiLCJwb3N0RnJlcXVlbmN5IiwicmVxdWVzdFRpbWVvdXQiLCJoZWFydGJlYXRGcmVxdWVuY3kiLCJjbGllbnRLZXkiLCJhcGlLZXkiLCJpbXByZXNzaW9uVGhyZXNob2xkIiwiY2FwdHVyZUNvbnRleHRNZW51IiwiZGVmYXVsdEFjdGl2YXRpb25UcmFja2luZyIsImRlZmF1bHQiLCJNQVhfQU5DRVNUT1JfRElTVEFOQ0UiLCJmb3JBbmNlc3RvcnNPclNlbGYiLCJlbCIsInN0b3BwaW5nQ3JpdGVyaW9uIiwiZGlzdGFuY2UiLCJyZXR1cm5WYWx1ZSIsIm5vZGVUeXBlIiwicHJldiIsInBhcmVudEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJmcmFtZUVsZW1lbnQiLCJzY29wZUF0dHIiLCJub2RlIiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImNzc1Byb3BlcnR5IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJkZWZpbmUiLCJwcm9wcyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsInRhZ05hbWUiLCJzY3JvbGxQb3MiLCJpbnQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsIm1hdGNoRXhIYXNoIiwiaHJlZjEiLCJocmVmMiIsImdldFNjcmVlblBvcyIsIm1vdXNlRXZlbnQiLCJpbmNsdWRlRm9sZCIsImdldFBvcyIsInhweCIsInlweCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicGFnZUZvbGRzIiwiaW5uZXJIZWlnaHQiLCJwb2ludGVyVHlwZSIsInBhZ2VZIiwicGFnZVgiLCJnZXRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwibGlzdGVuIiwibmFtZXMiLCJjYiIsImNhcHR1cmUiLCJwYXNzaXZlIiwidW5iaW5kZXJzIiwibWFwcGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhIiwidW5iaW5kIiwicGFyc2VEb21haW4iLCJocmVmIiwiYWxsIiwicHJvdG9jb2wiLCJkb21haW5OYW1lIiwic3Vic3RyaW5nIiwiZG9tYWluIiwiZ2V0Vmlld3BvcnQiLCJpbm5lcldpZHRoIiwidG90YWxXaWR0aCIsInRvdGFsSGVpZ2h0IiwidHJ5Q2F0Y2giLCJmaW5hbGx5Q2FsbGJhY2siLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjdXJyZW50U2NyaXB0IiwiU0NSSVBUX1NSQyIsIlRSQUNLRVJfRE9NQUlOIiwiaXNJbnRlcm5hbFVybCIsInVybCIsImVuZHNXaXRoIiwibWFwVXJsIiwidXJsUGFydHMiLCJWQVJfVVJMIiwiTU5UX1VSTCIsImV2ZW50U2V0Iiwib25jZSIsImhhbmRsZXJzIiwidW5iaW5kZXIiLCJoYW5kbGVyIiwiaW52b2tlQXJncyIsInN0YXJ0dXBMb2NrIiwicmVnaXN0ZXJTdGFydHVwSGFuZGxlciIsInN0YXJ0dXBDb21wbGV0ZSIsImNhY2hlZE1hcHBpbmdzIiwiY3VycmVudEJvdW5kYXJ5RGF0YSIsInByb3BlcnR5VmFsdWUiLCJkZWNvZGVkIiwiZXhwaXJlcyIsImVudHJ5Iiwib2xkRW50cnkiLCJib3VuZGFyeURhdGEiLCJXZWFrTWFwIiwiZ2V0Qm91bmRhcnlEYXRhIiwidHJhY2tlclByb3BlcnR5TmFtZSIsImNzcyIsIm1hdGNoQXR0cmlidXRlTmFtZXMiLCJjYWNoZWQiLCJwcmVmaXgiLCJlbGlnaWJsZSIsInIiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsIm1hdGNoZXMiLCJjYWNoZWRUYWdNYXBwZXIiLCJjc3NQcm9wZXJ0eVdpdGhCYXNlIiwicGFyc2VkQ3NzUnVsZXMiLCJ0cmFja2VyUHJvcGVydHkiLCJpbmhlcml0IiwidHJhY2tlckZsYWciLCJwYXJzZVRhZ3MiLCJzb3VyY2VFbCIsImVsZW1lbnRUYWdEYXRhIiwicnVsZXNTdHJpbmciLCJydWxlMSIsInJ1bGUyIiwiY2FjaGUiLCJydWxlIiwicmVtb3ZlRXhwaXJlZCIsInNlY3VyZSIsIiQiLCJzdG9yYWdlIiwicmVnaXN0ZXIiLCJzb3VyY2VJZCIsInJlbW92ZUl0ZW0iLCJvd25MaXN0ZW5lcnMiLCJhY2Nlc3NvciIsImFyZzAiLCJhcmcxIiwiYXJnMiIsImlubmVySGFuZGxlciIsImxpc3RlbmVyIiwidW5saXN0ZW4iLCJ0cmlnZ2VyU2VsZiIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJnZXRJdGVtIiwic3VwcG9ydHNFeHBpcnkiLCJzZXRJdGVtIiwiY29va2llU3RvcmFnZSIsImNvb2tpZSIsImt2IiwiZmluZCIsInRyaW0iLCJtYXhBZ2UiLCJzdGFsbGVkIiwiY29va2llcyIsInNlY3VyZUNvb2tpZXMiLCJzZXNzaW9uIiwic2Vzc2lvblN0b3JhZ2UiLCJzaGFyZWQiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmUiLCJjcmVhdGVDaGFubmVsIiwic2VsZiIsImNoYW5uZWxLZXkiLCJnZXRUYXJnZXRLZXkiLCJ0YXJnZXRJZCIsIm93bktleSIsImNoYW5uZWwiLCJyZXN0IiwiY2xlYXJlZCIsImRlc3RpbmF0aW9uS2V5IiwiZGlyZWN0IiwiZGVwZW5kZW5jaWVzIiwicGVuZGluZ0RlcGVuZGVuY2llcyIsImhhc2hNYXAiLCJhcmVBbGxEZXBlbmRlbmNpZXNQb3N0ZWQiLCJkZXAiLCJnbG9iYWxTdGF0ZUNoYW5uZWwiLCJnbG9iYWxTdGF0ZVJlc29sdmVycyIsImxpc3RlbmVycyIsImNhbGxMaXN0ZW5lcnMiLCJnbG9iYWxTdGF0ZVJlc29sdmVkIiwicmVzb2x2ZVRpbWVvdXQiLCJyZWdpc3RlclNoYXJlZFN0YXRlIiwiYXBwbHkiLCJrbm93blRhYnMiLCJoYXNSZXNwb25zZSIsInBheWxvYWQiLCJhY3Rpb25IYW5kbGVycyIsImxvY2FsRGF0YSIsImZsdXNoTG9jYWxEYXRhIiwiY3VycmVudERhdGEiLCJhY3Rpb25TdGF0ZXMiLCJnZXRBY3Rpb25TdGF0ZSIsInB1cmdlQ2xvc2VkVGFicyIsImdldENvb3JkaW5hdG9ySWQiLCJyZWR1Y2VyIiwibWluIiwicmVkdWNlIiwicHJldmlvdXMiLCJjdXJyZW50IiwiMSIsImNsb3NpbmciLCIyIiwiZnJlZXppbmciLCJjb2xsZWN0IiwiMyIsIjQiLCJhY3Rpb25JZCIsImNvb3JkaW5hdGVDb21taXQiLCI1IiwiY29vcmRpbmF0b3IiLCJjcml0aWNhbCIsImNvbGxlY3RlZCIsImhhbmRsZSIsInN1Y2Nlc3MiLCJhc3luYyIsImFsd2F5cyIsInRyeUFzeW5jIiwiNiIsInVwZGF0ZVBvbGxpbmdUYWIiLCI3IiwiaW5pdFByb21pc2UiLCJpbml0IiwiYXdhaXQiLCJ0ZXJtaW5hdGUiLCJmcmVlemUiLCJ0b2dnbGVBY3RpdmUiLCJ0MCIsInJlc3VsdCIsInNhZmVUaW1lb3V0VGltZXN0YW1wIiwic2VsZWN0ZWRQb2xsaW5nVGFiIiwiYWN0aXZlSWQiLCJpc0ZvcmVncm91bmRUYWIiLCJhY3RpdmUiLCJ0b2dnbGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhZGRSZXNwb25zZUxpc3RlbmVyIiwiY2FsbFJlc3BvbnNlSGFuZGxlcnMiLCJyZXNwb25zZUNoYW5uZWwiLCJjaGVja1Jlc3BvbnNlQ29va2llIiwiZGVjb21wb3NlIiwiYWZmaW5pdHkiLCJ2YXJpYWJsZXMiLCJ0dXBsZSIsInJlc3BvbnNlVGltZW91dCIsInBvbGxSZXNwb25zZUNvb2tpZSIsImFkZFBvc3RMaXN0ZW5lciIsImNhbGxQb3N0TGlzdGVuZXJzIiwiYWRkU2h1dGRvd25MaXN0ZW5lciIsImNhbGxTaHV0ZG93bkxpc3RlbmVycyIsImVucXVldWVFdmVudCIsInBvc3QiLCJjb21taXQiLCJldmVudHMiLCJmb3JjZSIsInNvdXJjZUxhYmVsIiwiZm9yY2VkIiwiZGlzY2FyZENvb2tpZXMiLCJwb3N0RGF0YSIsImV2ZW50IiwidGltZXN0YW1wIiwibyIsInNlbmRCZWFjb24iLCJCbG9iIiwicmVzcG9uc2UiLCJ0ZXJtaW5hdGluZyIsImJyb2FkY2FzdEFmZmluaXR5IiwiYWN0aXZlSGFuZGxlcyIsImZsdXNoaW5nIiwibm9vcEFjdGlvbiIsInJlZ2lzdGVyVmlld0VuZEFjdGlvbiIsImFkZFRlcm1pbmF0aW9uTGlzdGVuZXIiLCJjdXJyZW50Vmlld0V2ZW50IiwicHVzaFBvcE5hdmlnYXRpb24iLCJxdWV1ZSIsInVzZXJJbnRlcmFjdGlvbiIsInNldHVwIiwidHJhY2tlciIsInBvbGxDb250ZXh0Q29va2llIiwicGVuZGluZ05hdmlnYXRpb25FdmVudCIsInRyYWNrRG9jdW1lbnQiLCJ0cmFja0NsaWNrcyIsInRyYWNrUmVnaW9uIiwiY2xpY2thYmxlRWxlbWVudCIsImNtcCIsInQiLCJ0cmFjayIsImNsaWNrcyIsImNvbXBvbmVudCIsInJlZ2lvbiIsImNvbXBvbmVudENvbnRleHQiLCJnZXRDb21wb25lbnRDb250ZXh0IiwicGFyc2VBY3RpdmF0aW9uVGFncyIsImNvbnRhaW5lciIsImluZm8iLCJzaGFyZWRFdmVudFByb3BlcnRpZXMiLCJ2aWV3cG9ydCIsImVsZW1lbnQiLCJpbm5lclRleHQiLCJ0aW1pbmciLCJzdGFydHNXaXRoIiwiaXNMaW5rRWxlbWVudCIsImV4dGVybmFsIiwiaG9zdG5hbWUiLCJob3N0IiwicGF0aG5hbWUiLCJzZWFyY2giLCJhbmNob3IiLCJuYXZpZ2F0aW9uRXZlbnQiLCJyZWZlcnJlckNvbnN1bWVkIiwicHVzaE5hdmlnYXRpb25Tb3VyY2UiLCJjdXJyZW50VXJsIiwidXNlckFjdGl2YXRpb24iLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJmbGFnIiwidW5iaW5kQWxsIiwiYnV0dG9uIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiZXhpdCIsInNvdXJjZUVsZW1lbnQiLCJjb250ZXh0Q2FydCIsInBhcnNlQ2FydEV2ZW50RGF0YSIsImNhcnQiLCJjb250ZW50Iiwibm9ybWFsaXplQ2FydEV2ZW50RGF0YSIsIm9uRnJhbWUiLCJmcmFtZSIsImNvbnRlbnREb2N1bWVudCIsImRlY29yYXRlIiwiZXZlbnREYXRhIiwiYWRkVmlld0NoYW5nZWRMaXN0ZW5lciIsInZpZXdDaGFuZ2VkIiwicmVmZXJyZXJzIiwidXNlU2hhcmVkSWQiLCJiaW5kIiwiZXhpc3RzIiwidXBkYXRlUXVldWUiLCJwb2xsIiwia2V5RXhwaXJ5IiwibmF2aWdhdGlvbkV2ZW50SWQiLCJ0b3RhbER1cmF0aW9uIiwidmlzaWJsZUR1cmF0aW9uIiwiaW50ZXJhY3RpdmVEdXJhdGlvbiIsImdldFZpc2libGVEdXJhdGlvbiIsImNhbGxPbkZyYW1lIiwia25vd25GcmFtZXMiLCJXZWFrU2V0IiwiZnJhbWVzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjb250ZXh0IiwibWFyayIsImlzTmV3VGFiIiwiYWN0aXZhdGlvbnMiLCJ2aWV3UG9zdGVkIiwidGFiIiwiZmlyc3RUYWIiLCJwZW5kaW5nVmlld0V2ZW50IiwiTk9fT1AiLCJwZW5kaW5nVmlld0VuZEV2ZW50IiwiY3VycmVudExvY2F0aW9uIiwicG9zdFZpZXciLCJ0cnlTcGxpdCIsInFzIiwicmVmZXJyZXIiLCJwYXRoIiwidGFiSW5kZXgiLCJsYW5kaW5nUGFnZSIsInBzIiwicXVlcnkiLCJxdWVyeVN0cmluZyIsInV0bSIsIm5hdmlnYXRpb25UeXBlIiwiZ2V0RW50cmllc0J5VHlwZSIsInJlZGlyZWN0cyIsInJlZGlyZWN0Q291bnQiLCJyZWxhdGVkIiwiZXh0ZXJuYWxSZWZlcnJlciIsImZsdXNoIiwiZGVmaW5pdGlvbiIsInJlbmRlcmVkIiwicWQiLCJoIiwibGFuZHNjYXBlIiwiYW5nbGUiLCJoYXNUb3VjaCIsIm1heFRvdWNoUG9pbnRzIiwidXNlckFnZW50IiwibGFuZ3VhZ2VzIiwibGFuZ3VhZ2UiLCJwcmltYXJ5IiwicHJlZmVyZW5jZSIsInRpbWV6b25lIiwiaWFuYSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsInRpbWVab25lIiwib2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzY3JlZW4iLCJ3Iiwib3JpZW50YXRpb24iLCJkZXZpY2VUeXBlIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImludGVyYWN0aXZlVGltZW91dCIsImhlYXJ0YmVhdCIsImhpc3RvcnkiLCJyZXNldEhlYXJ0YmVhdCIsInByb2Nlc3NDb21tYW5kIiwiY29tbWFuZCIsImlzQ2hhbmdlVXNlckNvbW1hbmQiLCJ1c2VybmFtZSIsImRlcGVuZGVuY3kiLCJjdHgiLCJ0b3RhbFRpbWUiLCJ2aXNpYmxlVGltZSIsImludGVyYWN0aXZlVGltZSIsInVuaXRzIiwiY29tbWVyY2UiLCJpc0NhcnRDb21tYW5kIiwiaXNPcmRlckNvbW1hbmQiLCJvcmRlciIsImhhc0NvbXBvbmVudE9yQ29udGVudCIsImJvdW5kYXJ5Iiwic3RyaXBSZWN0cyIsImtlZXAiLCJzZXRDb250ZXh0IiwiZGlyZWN0T25seSIsImFyZWFQYXRoIiwiY29tcG9uZW50cyIsImNvbGxlY3RlZENvbnRlbnQiLCJpbmNsdWRlU3RhdGUiLCJhcmVhIiwic2Vjb25kYXJ5IiwicHJvbW90ZSIsImFuY2VzdG9yIiwiaW50ZXJzZWN0aW9uSGFuZGxlciIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbHMiLCJpc0ludGVyc2VjdGluZyIsImJvdW5kaW5nQ2xpZW50UmVjdCIsImludGVyc2VjdGlvblJhdGlvIiwidGhyZXNob2xkIiwicmVnaXN0ZXJDb21wb25lbnQiLCJmb2xkIiwidmlzaWJsZSIsImltcHJlc3Npb25zIiwiY2FwdHVyZVN0YXRlIiwidXBkYXRlIiwiaW5mZXJyZWQiLCJpbnRlcnNlY3RpbmciLCJyYXRpbyIsImJvdHRvbSIsImR1cmF0aW9uIiwiaXNDb25uZWN0ZWQiLCJvYnNlcnZlIiwiY21kIiwiaXNEYXRhQm91bmRhcnlDb21tYW5kIiwiaXNTY2FuQ29tcG9uZW50c0NvbW1hbmQiLCJhdHRyaWJ1dGVOYW1lIiwic2NhbiIsImF0dHJpYnV0ZSIsInJlZmVyZW5jZXMiLCJjb21tYW5kcyIsInNlZW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwic3RhY2siLCJkZWx0YSIsIm51bWJlciIsImlzTmFOIiwianNvbiIsIkpTT04iLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic2Nyb2xsIiwiZW1pdHRlZCIsImluaXRpYWxTY3JvbGwiLCJzY3JvbGxUeXBlIiwiZGVmYXVsdEV4dGVuc2lvbnMiLCJmb3JtRXZlbnRzIiwiZ2V0Rm9ybUZpZWxkVmFsdWUiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcHRpb24iLCJjaGVja2VkIiwiY3VycmVudEZpZWxkIiwiaGFuZGxlTG9zdEZvY3VzIiwiZm9ybSIsImZpZWxkIiwic3RhdGUiLCJ0b3RhbCIsInByZXZpb3VzVmFsdWUiLCJ0djAiLCJmaWxsT3JkZXIiLCJmaWxsZWQiLCJjb3JyZWN0aW9ucyIsImZpZWxkcyIsImxhc3RGaWVsZCIsImFjdGl2ZVRpbWUiLCJ3aXJlRm9ybUZpZWxkcyIsImZvcm1FbGVtZW50IiwiY2FwdHVyZWRDb250ZXh0IiwicmVmTmFtZSIsImZpZWxkTWFwIiwiY29tbWl0RXZlbnQiLCJjb21wbGV0ZWQiLCJjb21taXRUaW1lb3V0IiwibGFiZWwiLCJsYWJlbHMiLCJyZWYiLCJjb21tYW5kVGVzdCIsImlzVGFnQXR0cmlidXRlc0NvbW1hbmQiLCJpc1RvZ2dsZUNvbW1hbmQiLCJpc0V4dGVuc2lvbkNvbW1hbmQiLCJpc0ZsdXNoQ29tbWFuZCIsImlzR2V0Q29tbWFuZCIsImlzTGlzdGVuZXJDb21tYW5kIiwiaXNTZXRDb21tYW5kIiwiaXNUcmFja2VyQXZhaWxhYmxlQ29tbWFuZCIsImluaXRpYWxpemVUcmFja2VyIiwiY29uZmlnIiwicXVldWVkQ29tbWFuZHMiLCJleHRlbnNpb25zIiwicGVuZGluZ1N0YXRlQ29tbWFuZHMiLCJwdWJsaWNWYXJpYWJsZXMiLCJsb2NhbFZhcmlhYmxlcyIsImdldFZhcnMiLCJzZXRWYXJzIiwidXBkYXRlVmFyaWFibGVzIiwibWFpbkFyZ3MiLCJjdXJyZW50QXJnIiwiaW5zZXJ0QXJncyIsImNhbGxiYWNrcyIsImdldENhbGxiYWNrcyIsInVuc3Vic2NyaWJlIiwiYWRkUXVldWVQb3N0TGlzdGVuZXIiLCJhZGRHbG9iYWxTdGF0ZVJlc29sdmVkTGlzdGVuZXIiLCJ0cmlnZ2VyZWQiLCJrdnMiLCJ2YXJzIiwidGFnQXR0cmlidXRlcyIsImRpc2FibGUiLCJleHBhbmRlZCIsImNvbnNlbnQiLCJub25Fc3NlbnRpYWxUcmFja2luZyIsInNraXAiLCJleHRlbnNpb24iLCJyZWFkeSIsImJhdGNoIiwiaGFzRGVwZW5kZW5jaWVzIiwicHJpb3JpdHkiLCJfX2lzVHJhY2tlciIsImxvYWRlZCIsIi50YWlsLmpzLmluaXQiXSwibWFwcGluZ3MiOiJtQkFDTyxJQ3dJSEEsRUN6RkFDLEVGOUNTQyxFQUF3QixXR0F4QkMsRUFDWCxJQUE0QkMsSUFDM0JDLEdBQ0NBLEdBQUlDLE1BQVFGLEVBQU1HLEtBQU1ELEdBQVNBLElBQVNELEdBQUlDLElBQUFBLEVDK0VyQ0UsRUFBa0JILEdBQzdCQSxHQUF5QixVQUFaQSxPQUFBQSxFQUFHQyxLQ3NETEcsRUFBY04sRUFBb0IsTUFBQSxFQ25JbENPLEVBQW1CUCxFQUF5QixZQUFBLEVDb0I1Q1EsRUFBaUJSLEVBQXVCLFNDMUIvQ1MsRUFBQUEsRUFBY0MsR0FDbEJBLEdBQ0lDLGNBQ0RDLFFBQVEsbUJBQW9CLEdBQzVCQyxFQUFBQSxNQUFNLEdBQ05DLEVBQUFBLE9BQVFDLEdBQVNBLENBQUFBLEdBQVMsR0FLbEJDLEVBQWlCLENBQzVCQyxFQUNBQyxFQUNBQyxLQUVBLEdBQUEsQ0FBS0YsRUFBTyxNQUFPLEdBR2YsR0FGQUcsTUFBTUMsUUFBUUosQ0FBQUEsSUFBZ0JBLEVBQUFBLEVBQU1LLEtBQUssR0FFekMsR0FBQSw2QkFBNkJDLEtBQUtOLENBQ2hDLEVBQUEsSUFDTUEsRUFBQU8sbUJBQ05QLEVBQU1MLFFBR0osK0JBQ0EsQ0FBQ2EsRUFBR0MsRUFBTUMsRUFBT0MsSUFDZixDQUNFRixFQUNBQyxRQUFjQSxFQUFNZixRQUFRLHlCQUEwQixLQUFBLEtBQ3REZ0IsR0FBTyxLQUNQTixLQUFLLEVBQUEsQ0FBQSxDQUFBLENBSU4sQ0FBUCxPQUdKLElBQ0VPLEVBREVDLEVBQW9CLEdBRXRCQyxFQUFZdEIsRUFBV1MsQ0EyQ2xCLEVBQUEsT0F6Q0RELEVBQUFMLFFBaUJKLHdIQUFBLENBQ0NvQixFQUFJQyxFQUFLQyxFQUFRQyxFQUFRQyxLQUNwQlQsRUFBUU8sR0FBVUMsR0FBVUMsRUFDNUIxQixFQUFRRCxFQUFXd0IsQ0Fr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
