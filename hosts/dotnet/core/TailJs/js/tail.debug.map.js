(()=>{var e,t,r,n,i,a,l,o,u,s,d,v,c,f,p,h,g,m,y,w,k,S,T,x,A,I;function F(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var U=(e,t=e=>Error(e))=>{throw eo(e=e4(e))?t(e):e},M=(e,t,r=-1)=>{if(e===t||null==(null!=e?e:t))return!0;if(ef(e)&&ef(t)&&e.length===t.length){var i,n=0;for(i in e){if(e[i]!==t[i]&&!M(e[i],t[i],r-1))return!1;++n}return n===Object.keys(t).length}return!1},q=(e,t,...r)=>e===t||0<r.length&&r.some(t=>q(e,t)),z=(e,t)=>null!=e?e:U(null!=t?t:"A required value is missing",e=>TypeError(e.replace("..."," is required."))),R=(e,t=!0,r)=>{try{return e()}catch(e){return eg(t)?ed(e=t(e))?U(e):e:en(t)?console.error(t?U(e):e):t}finally{null!=r&&r()}};class P extends Promise{get initialized(){return null!=this._result}then(e,t){var r;return(null!=(r=this._result)?r:this._result=this._action()).then(e,t)}catch(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).catch(e)}finally(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).finally(e)}constructor(e){super(()=>{}),F(this,"_action",void 0),F(this,"_result",void 0),this._action=e}}var D=e=>new P(async()=>e4(e)),B=async(e,t=!0,r)=>{try{return await e4(e)}catch(e){if(!en(t))return await t(e);if(t)throw e;console.error(e)}finally{await(null==r?void 0:r())}},W=e=>e,J=e=>!!e,L=e=>e===G,V=void 0,H=Number.MAX_SAFE_INTEGER,K=!1,G=!0,X=()=>{},Z=e=>e,Y=e=>null!=e,Q=Symbol.iterator,ee=Symbol.asyncIterator,et=(e,t)=>(r,n=!0)=>e(r)||t&&n&&null!=r&&null!=(r=t(r))?r:V,er=(e,t)=>eg(t)?e!==V?t(e):V:(null==e?void 0:e[t])!==V?e:V,en=e=>"boolean"==typeof e,ei=et(en,e=>0!=e&&(1==e||"false"!==e&&("true"===e||V))),ea=e=>e!==K,el=e=>"number"==typeof e,eo=e=>"string"==typeof e,eu=et(eo,e=>null==e?void 0:e.toString()),es=Array.isArray,ed=e=>e instanceof Error,ev=(e,t=!1)=>null==e?V:!t&&es(e)?e:em(e)?[...e]:[e],ec=e=>e&&"object"==typeof e,ef=e=>(null==e?void 0:e.constructor)===Object,ep=(e,t)=>"function"==typeof(null==e?void 0:e[t]),eh=e=>"symbol"==typeof e,eg=e=>"function"==typeof e,em=(e,t=!1)=>!(null==e||!e[Q]||"string"==typeof e&&!t),ey=e=>e instanceof Map,eb=e=>e instanceof Set,ew=(e,t)=>null==e?V:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,ek=(e,t,r)=>e[0]===t&&e[e.length-1]===r,eS=e=>eo(e)&&(ek(e,"{","}")||ek(e,"[","]")),eT=!1,ex=e=>(eT=!0,e),eA=e=>null==e?V:eg(e)?e:t=>t[e],eI=(e,t,r)=>(null!=t?t:r)!==V?(e=eA(e),null==t&&(t=0),null==r&&(r=H),(n,i)=>t--?V:r--?e?e(n,i):n:r):e,eE=e=>null==e?void 0:e.filter(Y),eN=(e,t,r,n)=>null==e?[]:!t&&es(e)?eE(e):e[Q]?function*(e,t){if(null!=e)if(t){t=eA(t);var r=0;for(n of e)if(null!=(n=t(n,r++))&&(yield n),eT){eT=!1;break}}else for(var n of e)null!=n&&(yield n)}(e,r===V?t:eI(t,r,n)):ec(e)?function*(e,t){t=eA(t);var n,r=0;for(n in e){var i=[n,e[n]];if(null!=(i=t?t(i,r++):i)&&(yield i),eT){eT=!1;break}}}(e,eI(t,r,n)):eN(eg(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(null==t&&(t=-e-1);e++;)yield t--;else for(null==t&&(t=0);e--;)yield t++}(e,r),t),e$=(e,t,r,n)=>eN(e,t,r,n),eO=(e,t,r=1,n=!1,i,a)=>function*e(t,r,n,i){if(null!=t)if(t[Q]||n&&ec(t))for(var a of i?eN(t):t)1!==r?yield*e(a,r-1,n,!0):yield a;else yield t}(eN(e,t,i,a),r+1,n,!1),eC=(e,t,r,n)=>{if(t=eA(t),es(e)){var i=0,a=[];for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n&&!eT;r++){var l=e[r];null!=(t?l=t(l,i++):l)&&a.push(l)}return eT=!1,a}return null!=e?t0(e$(e,t,r,n)):V},e_=(e,t,r,n)=>null!=e?new Set([...e$(e,t,r,n)]):V,ej=(e,t,r=1,n=!1,i,a)=>t0(eO(e,t,r,n,i,a)),eF=(...e)=>{var t;return eR(1===e.length?e[0]:e,e=>null!=e&&(null!=t?t:t=[]).push(...t0(e))),t},eU=(e,t,r,n)=>{var i,a,l=0;for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n;r++)if(null!=e[r]&&(i=null!=(a=t(e[r],l++))?a:i,eT)){eT=!1;break}return i},eM=(e,t)=>{var r,n,a,i=0;for(a of e)if(null!=a&&(r=null!=(n=t(a,i++))?n:r,eT)){eT=!1;break}return r},eq=(e,t)=>{var r,n,a,i=0;for(a in e)if(r=null!=(n=t([a,e[a]],i++))?n:r,eT){eT=!1;break}return r},ez=(e,t,r,n)=>{var i;if(null!=e){if(es(e))return eU(e,t,r,n);if(r===V){if(e[Q])return eM(e,t);if("object"==typeof e)return eq(e,t)}for(var a of eN(e,t,r,n))null!=a&&(i=a);return i}},eR=ez,eP=async(e,t,r,n)=>{var i,a;if(null==e)return V;for(a of e$(e,t,r,n))if(null!=(a=await a)&&(i=a),eT){eT=!1;break}return i},eD=(e,t)=>{if(null==e)return V;var r={};if(t){var n,a,i=0;for(a in e)(n=t([a,e[a]],i++))&&(r[n[0]]=n[1])}else for(var l of e)l&&(r[l[0]]=l[1]);return r},eB=(e,t,r)=>{var n,i,a;return null==e?V:en(t)||r?(a={},eR(e,r?(e,n)=>null!=(e=t(e,n))&&null!=(e[1]=r(a[e[0]],e[1]))&&(a[e[0]]=e[1]):e=>eR(e,t?e=>{var t;return null!=(null==e?void 0:e[1])&&((null!=(t=(n=a)[i=e[0]])?t:n[i]=[]).push(e[1]),a)}:e=>null!=(null==e?void 0:e[1])&&(a[e[0]]=e[1],a))),a):eD(eC(e,t?(e,r)=>er(t(e,r),1):e=>er(e,1)))},eW=(e,t,r,n,i)=>{var l=()=>eg(r)?r():r;return null!=(e=ez(e,(e,n)=>r=null!=(e=t(r,e,n))?e:l(),n,i))?e:l()},eJ=(e,t,r,n)=>eC(e,(e,r)=>e&&null!=t&&t(e,r)?e:V,r,n),eL=(e,t)=>{var r,n;if(null==e)return V;if(!t){if(null!=(r=null!=(n=e.length)?n:e.size))return r;if(!e[Q])return Object.keys(e).length}return r=0,null!=(n=ez(e,t?(e,n)=>t(e,n)?++r:r:()=>++r))?n:0},eV=(e,...t)=>null==e?V:el(e)?Math.max(e,...t):eW(e,(e,r,n,i=t[1]?t[1](r,n):r)=>null==e||el(i)&&e<i?i:e,V,t[2],t[3]),eK=(e,t,r,n)=>{var i;return null==e?V:ef(e)&&!t?0<Object.keys(e).length:null!=(i=null!=(i=null==(i=e.some)?void 0:i.call(e,null!=t?t:J))?i:ez(e,t?(e,r)=>!!t(e,r)&&ex(!0):()=>ex(!0),r,n))&&i},eG=(e,t=e=>e)=>{var r;return null!=(r=ev(e))&&r.sort((e,r)=>t(e)-t(r)),e},eX=(e,t,r)=>(e.constructor===Object||es(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eZ=(e,t,r)=>{var n;if(e)return void 0===(n=e.get?e.get(t):e.has?e.has(t):e[t])&&null!=r&&null!=(n=eg(r)?r():r)&&eX(e,t,n),n},eY=(e,...t)=>(eR(t,t=>eR(t,([t,r])=>{null!=r&&(ef(e[t])&&ef(r)?eY(e[t],r):e[t]=r)})),e),eQ=(e,t,r,n)=>{if(e)return null!=r?eX(e,t,r,n):(eR(t,t=>es(t)?eX(e,t[0],t[1]):eR(t,([t,r])=>eX(e,t,r))),e)},e0=(e,t,r)=>{var n;return ep(e,"set")?void 0===(n=r(e.get(t)))?e.delete(t):e.set(t,n):ep(e,"add")?r(n=e.has(t))?e.add(t):e.delete(t):e&&void 0===(n=e[t]=r(e[t]))&&ef(e)&&delete e[t],e},e2=(e,t)=>{var r;if(null!=(null!=e?e:t))return r=eZ(e,t),ep(e,"delete")?e.delete(t):delete e[t],r},e6=(e,t)=>{if(e)return es(t)?(es(e)&&1<e.length?t.sort((e,t)=>t-e):t).map(t=>e6(e,t)):es(e)?t<e.length?e.splice(t,1)[0]:void 0:e2(e,t)},e4=e=>eg(e)?e():e,e5=(e,t=-1)=>es(e)?t?e.map(e=>e5(e,t-1)):[...e]:ef(e)?t?eB(e,([e,r])=>[e,e5(r,t-1)]):{...e}:eb(e)?new Set(t?eC(e,e=>e5(e,t-1)):e):ey(e)?new Map(t?eC(e,e=>[e[0],e5(e[1],t-1)]):e):e,e3=(e,...t)=>null==e?void 0:e.push(...t),e8=(e,...t)=>null==e?void 0:e.unshift(...t),e9=(e,t)=>{var r,i,a;if(e)return ef(t)?(a={},ef(e)&&(eR(e,([e,l])=>{if(!M(l,t[e],-1)){if(ef(r=l)){if(!(l=e9(l,t[e])))return;[l,r]=l}else el(l)&&el(void 0)&&(l=(r=l)-void 0);a[e]=l,(null!=i?i:i=e5(t))[e]=r}}),i)?[a,i]:void 0):[e,e]},e7="undefined"!=typeof performance?(e=G)=>e?Math.trunc(e7(K)):performance.timeOrigin+performance.now():Date.now,te=(e=!0,t=()=>e7())=>{var r,n=+e*t(),i=0;return(a=e,l)=>(r=e?i+=-n+(n=t()):i,l&&(i=0),(e=a)&&(n=t()),r)},tr=(e,t=0)=>{var e=eg(e)?{frequency:t,callback:e}:e,{queue:i=!0,paused:a=!1,trigger:l=!1,once:o=!1,callback:u=()=>{},raf:s}=e,d=(t=null!=(e=e.frequency)?e:0,0),v=tu(!0).resolve(),c=te(!a),f=c(),p=async e=>{if(!d||!i&&v.pending&&!0!==e)return!1;if((y.busy=!0)!==e)for(;v.pending;)await v;return e||v.reset(),(!1===await B(()=>u(c(),-f+(f=c())),!1,()=>!e&&v.resolve())||t<=0||o)&&m(!1),!(y.busy=!1)},h=()=>d=setTimeout(()=>s?requestAnimationFrame(g):g(),t<0?-t:t),g=()=>{y.active&&p(),y.active&&h()},m=(e,t=!e)=>(c(e,t),clearTimeout(d),y.active=!!(d=e?h():0),y),y={active:!1,busy:!1,restart:(e,r)=>(t=null!=e?e:t,u=null!=r?r:u,m(!0,!0)),toggle:(e,t)=>e!==y.active?e?t?(m(!0),y.trigger(),y):m(!0):m(!1):y,trigger:async e=>await p(e)&&(m(y.active),!0)};return y.toggle(!a,l)};function tn(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}class ti{get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new ta,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}constructor(){tn(this,"_promise",void 0),this.reset()}}class ta{then(e,t){return this._promise.then(e,t)}constructor(){var e;tn(this,"_promise",void 0),tn(this,"resolve",void 0),tn(this,"reject",void 0),tn(this,"value",void 0),tn(this,"error",void 0),tn(this,"pending",!0),this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(this.pending)return this.pending=!1,this[t?"error":"value"]=r===V||r,e(r),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}}var to=(e,t)=>null==e||isFinite(e)?!e||e<=0?e4(t):new Promise(r=>setTimeout(async()=>r(await e4(t)),e)):U(`Invalid delay ${e}.`),tu=e=>new(e?ti:ta),td=(e,t,r)=>{var n=!1,i=(...t)=>e(...t,a),a=()=>n!==(n=!1)&&(r(i),!0),l=()=>n!==(n=!0)&&(t(i),!0);return l(),[a,l]},et=()=>{var e,t=new Set;return[(r,n)=>{var i=td(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,i[0]),i},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tc=(e,t,r)=>null==e?V:es(t)?null==(t=t[0])?V:t+" "+tc(e,t,r):null==t?V:1===t?e:null!=r?r:"is"===e?"are":e+"s",tf=!0,tp=(e,t,r)=>r?(tf&&e3(r,"[",t,"m"),es(e)?e3(r,...e):e3(r,e),tf&&e3(r,"[m"),r):tp(e,t,[]).join(""),th=(e,t,r=!1)=>e&&(e.length>t?r?`${e.slice(0,t)}... [and ${e.length-t} more]`:e.slice(0,t-1)+"â€¦":e),tm=(e,t)=>{var l,r=[],n={},i={},a=0;for(l in t)l===t[l]&&(Object.defineProperty(i,l,{value:l,writable:!1,enumerable:!0,configurable:!1}),n[l]=a++,r.push(l));var o=(t,r=!0)=>null==t?V:null!=n[t]?t:r?U(`The ${e} "${t}" is not defined.`):V,u={writable:!1,enumerable:!1,configurable:!1};return Object.defineProperties(i,{parse:{value:o,...u},ranks:{value:n,...u},levels:{value:r,...u},compare:{value(e,t){e=n[o(e)],t=n[o(t)];return e<t?-1:t<e?1:0},...u}}),i},ty=Symbol(),tb=(e,{delimiters:t=["|",";",","],decode:r=!0,lowerCase:n}={})=>{var i,l;return e?(null==(l=e.split("=").map(e=>(e=r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim(),n?e.toLowerCase():e)))[1]&&(l[1]=""),l[2]=l[1]&&(eo(t)?t=[t]:es(t))&&tH(t,e=>1<(i=l[1].split(e)).length?tP(i):V)||(l[1]?[l[1]]:[]),l):V},tw=(e,{delimiters:t=!0,requireAuthority:r,...n}={})=>null==e?V:tA(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,i,a,l,o,u,s,d,v,c,f)=>{e={source:e,scheme:r,urn:r?!i:!i&&V,authority:a,user:l,password:o,host:null!=u?u:s,port:null!=d?parseInt(d):V,path:v,query:!1===t?c:c?tk(c,{...n,delimiters:t}):V,fragment:f};return e.path=e.path||(e.authority?e.urn?"":"/":V),e}),tk=(e,t)=>tS(e,"&",t),tS=(e,t,{delimiters:r=!0,...n}={})=>{e=tK(null==e||null==(e=e.match(/(?:^.*?\?|^)([^#]*)/))||null==(e=e[1])?void 0:e.split(t),e=>{var[e,a,l]=null!=(e=tb(e,{...n,delimiters:!1===r?[]:!0===r?V:r}))?e:[];return null!=(e=null==e?void 0:e.replace(/\[\]$/,""))?!1!==r?[e,1<l.length?l:a]:[e,a]:tR}),t=ri(tZ(e,!1),([e,t])=>[e,!1!==r?1<t.length?t2(t):t[0]:t.join(",")]);return t&&(t[ty]=e),t},tT=(e,t)=>t&&null!=e?t.test(e):V,tx=(e,t,r)=>tA(e,t,r,!0),tA=(e,t,i,a=!1)=>null==(null!=e?e:t)?V:i?(r=V,a?(n=[],tA(e,t,(...e)=>null!=(r=i(...e))&&n.push(r))):e.replace(t,(...e)=>r=i(...e)),r):null!=(a=e.match(t))?a:V,tI=e=>null==e?void 0:e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tE=/\z./g,tN=(e,t)=>(t=rs(e_(eJ(e,e=>null==e?void 0:e.length)),"|"))?RegExp(t,"gu"):tE,t$={},tO=e=>e instanceof RegExp,tC=(r,n=[","," "])=>{var i;return tO(r)?r:es(r)?tN(eC(r,e=>null==(e=tC(e,n))?void 0:e.source)):en(r)?r?/./g:tE:eo(r)?null!=(i=(e=t$)[t=r])?i:e[t]=tA(r||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,r)=>t?RegExp(t,"gu"):tN(eC(t_(r,RegExp(`(?<!(?<!\\\\)\\\\)[${rs(n,tI)}]`)),e=>e&&`^${rs(t_(e,RegExp("(?<!(?<!\\\\)\\\\)\\*")),e=>tI(tj(e,/\\(.)/g,"$1")),".*")}$`))):V},t_=(e,t,r=!0)=>null==e?V:r?t_(e,t,!1).filter(Z):e.split(t),tj=(e,t,r)=>null!=(t=null==e?void 0:e.replace(t,r))?t:e,tF=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return eQ(r,{push(n,i){for(var a=[n,i],l=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,o=0;o<r.length;o++){var u,s,d=r[o];if(e(a[1],d[0])<0)return l(r.splice(o,0,a));if(e(a[0],d[1])<=0){if(e(a[0],d[0])<0&&(u=d[0]=a[0]),0<e(a[1],d[1])&&(u=d[1]=a[1]),!((null==(s=r[o+1])?void 0:s[0])<d[1]))return l(null!=u);u=a=r.splice(o--,1)[0]}}return l(a&&(r[r.length]=a))},width:0})},tU=e=>{for(var t=e;t;)t=Object.getPrototypeOf(e=t);return e},tM=(e,t)=>{if(!e||tU(e)===t)return e;for(var r of e.document.getElementsByTagName("iframe"))try{if(e=tM(r.contentWindow,t))return e}catch(e){}},tq=e=>null==e?e:globalThis.window?tM(window,tU(e)):globalThis,tz=!1,tR=Symbol(),tP=e=>(tz=!0,e),tD=Symbol(),tB=Symbol(),tW=Symbol.iterator,tJ=(e,t,r)=>{if(null==e||e[tD])throw t;e=tq(e);if(!e)throw t;var l,i=()=>(e,t,r,n,i)=>{var a,o,l=0;for(o of e)if((a=t?t(o,l++,n,i):o)!==tR){if(a===tP)break;if(n=a,r&&r.push(a),tz){tz=!1;break}}return r||n},a=(e.Array.prototype[tD]=(e,t,r,n,i)=>{for(var l,o=0,u=e.length;o<u;o++)if(l=e[o],(l=t?t(l,o,n,i):l)!==tR){if(l===tP)break;if(n=l,r&&r.push(l),tz){tz=!1;break}}return r||n},i());for(l of(e.Object.prototype[tD]=(e,t,r,n,l)=>{if(e[tW])return(e.constructor===Object?a:Object.getPrototypeOf(e)[tD]=i())(e,t,r,n,l);var u,d,s=0;for(d in e)if(u=[d,e[d]],(u=t?t(u,s++,n,l):u)!==tR){if(u===tP)break;if(n=u,r&&r.push(u),tz){tz=!1;break}}return r||n},e.Object.prototype[tB]=function(){var t,e;return this[tW]||this[ee]?this.constructor===Object?null!=(e=this[ee]())?e:this[tW]():((e=Object.getPrototypeOf(this))[tB]=null!=(t=e[ee])?t:e[tW],this[tB]()):function*(e){for(var t in e)yield[t,e[t]]}(this)},[e.Map.prototype,e.WeakMap.prototype,e.Set.prototype,e.WeakSet.prototype,Object.getPrototypeOf(function*(){})]))l[tD]=i(),l[tB]=l[tW];return e.Number.prototype[tD]=(e,t,r,n,i)=>a(tL(e),t,r,n,i),e.Number.prototype[tB]=tL,e.Function.prototype[tD]=(e,t,r,n,i)=>a(tV(e),t,r,n,i),e.Function.prototype[tB]=tV,r()};function*tL(e=this){for(var t=0;t<e;t++)yield t}function*tV(e=this){for(var t=void 0;void 0!==(t=e(t));)yield t}var tH=(e,t,r,n)=>{try{return e?e[tD](e,t,void 0,r,n):null==e?e:void 0}catch(i){return tJ(e,i,()=>tH(e,t,r,n))}},tK=(e,t,r=[],n,i=e)=>{try{return e||0===e||""===e?e[tD](e,t,r,n,i):null==e?e:void 0}catch(a){return tJ(e,a,()=>tK(e,t,r,n,i))}},tG=(e,t=!0,r=!1)=>tK(e,!0===t?e=>null!=e?e:tR:t?t.has?e=>null==e||t.has(e)===r?tR:e:(e,n,i)=>!t(e,n,i)===r?e:tR:e=>e||tR),tX=(e,t,r=-1,n=[],i,a=e)=>tK(e,(e,i,a)=>null!=(t?e=t(e,i,a):e)&&e[Symbol.iterator]&&"string"!=typeof e&&r?(tX(e,void 0,r-1,n,e),tR):e,n,i,a),tZ=(e,t,r)=>{var n,i,a,l;return null!=t&&"function"!=typeof t&&([t,r]=[void 0,t]),tH(e,!1!==r?(a=new Map,(e,r,n)=>{void 0!==(l=t?t(e,r,n):e)[0]&&re(a,l[0],()=>[]).push(l[1])}):(a={},(e,r,o)=>(l=t?t(e,r,o):e)&&void 0!==l[0]&&(null!=(r=(n=a)[i=l[0]])?r:n[i]=[]).push(l[1]))),a},tQ=e=>void 0===e?[]:null!=e&&e[tW]&&"string"!=typeof e?e:[e],t0=e=>null==e||es(e)?e:e[tW]&&"string"!=typeof e?[...e]:[e],t2=(e,...t)=>{var r,n;for(n of e=!t.length&&em(e)?e:[e,...t])if(null!=n){if(em(n)){(null!=r?r:r=[]).push(...n);continue}(null!=r?r:r=[]).push(n)}return r},t6=(e,t,r)=>(r?-1:1)*(e===t?0:"string"==typeof e?"string"==typeof t?e.localeCompare(t):1:"string"==typeof t?-1:null==e?null==t?0:-1:null==t?1:e-t),t4=(e,t,r)=>t0(e).sort("function"==typeof t?(e,n)=>t6(t(e),t(n),r):es(t)?t.length?(e,n)=>{for(var i=0,a=0;a<t.length&&!i;a++)i=t6(t[a](e),t[a](n),r);return i}:(e,t)=>t6(e,t,r):(e,r)=>t6(e,r,t)),t5=Object.keys,t3=Symbol(),t8=Symbol(),t9=Symbol(),t7=(e,t,r)=>{if(null==e||e[t8])throw t;var i,e=tq(e);if(!e||e.Object.prototype[t3])throw t;for({prototype:i}of[e.Map,e.WeakMap])i[t3]=function(e,t){return void 0===t?this.delete(e):this.get(e)!==t&&!!this.set(e,t)},i[t8]=i.get;for({prototype:i}of[e.Set,e.WeakSet])i[t3]=function(e,t,r=!1){return t||r&&void 0===t?!this.has(e)&&!!this.add(e):this.delete(e)},i[t8]=i.has,i[t9]=function(e){for(var t of e)void 0!==t&&this.add(t);return this};for({prototype:i}of(e.Array.prototype[t9]=function(e){return this.push(...e),this},[e.Object,e.Array]))i[t3]=function(e,t){return void 0===t?void 0!==this[e]&&(delete this[e],!0):(this[e]=t)!==t},i[t8]=function(e){return this[e]};return r()},re=(e,t,r)=>{try{if(null==e)return e;var n=e[t8](t);if(void 0===n&&void 0!==(n="function"==typeof r?r():r)){if(null!=n&&n.then)return n.then(r=>void 0===r?r:e[t3](t,r));e[t3](t,n)}return n}catch(n){return t7(e,n,()=>re(e,t,r))}},rt=(e,t,r)=>{try{return!0===(null==e?void 0:e[t3](t,r,!0))}catch(n){return t7(e,n,()=>rt(e,t,r))}},rr=(e,t,r)=>{try{return e[t3](t,r),r}catch(n){return t7(e,n,()=>rr(e,t,r))}},rn=(e,...t)=>{try{return null==e?e:e[t9](t)}catch(r){return t7(e,r,()=>rn(e,...t))}},ri=(e,t)=>{var r={};return tH(e,t?(e,n,i)=>(e=t(e,n,i))&&("symbol"!=typeof e||e!==tR&&e!==tP)?r[e[0]]=e[1]:e:e=>e&&("symbol"!=typeof e||e!==tR&&e!==tP)?r[e[0]]=e[1]:e),r},ra=(e,...t)=>{try{return(null==e?void 0:e.constructor)===Object?tH(t,t=>tH(t,t=>t&&(e[t[0]]=t[1]))):tH(t,t=>tH(t,t=>t&&e[t3](t[0],t[1]))),e}catch(r){return t7(e,r,()=>ra(e,...t))}},rl=(e,t,r={})=>{if(null!=e){var l,{deep:n=!0,overwrite:i=!0,nulls:a=!1}=r;for(l of tQ(t))tH(l,t=>{var o,u;t&&([t,o]=t,u=e[t],(a?null==u:void 0===u)?e[t]=o:n&&(null==o?void 0:o.constructor)===Object&&(null==u?void 0:u.constructor)===Object?rl(u,o,r):i&&(e[t]=o))})}return e},ro=(e,t)=>null==e?e:ri(t,t=>null!=e[t]||t in e?[t,e[t]]:tR),ru=e=>null==e||"boolean"==typeof e||""===e.toString(),rs=(e,t,r)=>null==e?e:em(e)?tG("function"==typeof t?tK(e,t):(r=t,e),ru,!0).join(null!=r?r:""):ru(e)?"":e.toString(),rd=(e,t,r,n)=>{var i,o;return e||0===e?"function"==typeof t?rd(tK(e,t),r,n):(i=[],n=tH(e,(e,t,r)=>ru(e)?tR:(r&&i.push(r),e.toString())),[t,o]=es(t)?t:[,t],o=(null!=o?o:o="and")[0]===(t=null==t?",":t)?o+" ":" "+(o?o+" ":""),t=i.length?""+i.join(t+" ")+o+n:null!=n?n:"",r?r(t,i.length+ +(null!=n)):t):null==e?e:void 0},rv=tm("data classification",{never:"never",anonymous:"anonymous",indirect:"indirect",direct:"direct",sensitive:"sensitive"}),rc=["necessary","performance","functionality","marketing","personalization","security"],rf=ri(rc,e=>[e,e]),rp=(Object.freeze(eD(rc.map(e=>[e,!0]))),(e,t)=>"personalization"===e&&!0!==(null==t?void 0:t.personalization)?"functionality":"security"===e&&!0!==(null==t?void 0:t.security)?"necessary":e),rh=(e,t)=>{var r=e;return!0!==(null==t?void 0:t.personalization)&&null!=r.personalization&&(null!=(r=r===e?{...e}:r).functionality?r.personalization=r.functionality:r.functionality=r.personalization,delete r.personalization),!0!==(null==t?void 0:t.security)&&null!=r.security&&delete(r=r===e?{...e}:r).security,r},rg={names:rc,parse(e,{names:t=!1,validate:r=!0}={}){if(null==e)return e;if(e.purposes&&(e=e.purposes),eo(e)&&(e=e.split(",")),es(e)){var i,n={};for(i of e)rf[i]?"necessary"!==i&&(n[i]=!0):r&&U(`The purpose name '${i}' is not defined.`);e=n}return t?(t=t5(e)).length?t:["necessary"]:e},getNames:e=>tK(e,([e,t])=>t?e:tR),get all(){return{functionality:!0,marketing:!0,performance:!0,personalization:!0,security:!0}},test(e,t,{intersect:r,optionalPurposes:n,targetPurpose:i}){if("boolean"==typeof n&&(n={personalization:n,security:n}),i&&"necessary"!==(i=rp(i,n))&&!t[rp(i,n)])return!1;if(e=rh(e,n),t=rh(t,n),r){for(var a in t)if(rf[a]&&t[a]&&!e[a])return!1;if("all"===r)for(var a in e)if(rf[a]&&e[a]&&!t[a])return!1;return!0}var l=!1;for(a in e)if(rf[a]&&e[a]){if(t[a])return!0;l=!0}return!l}},rm=(tm("data restriction",{public:"public","trusted-write":"trusted-write","trusted-only":"trusted-only"}),e=>{var t;return`${null!=(t=null==e?void 0:e.classification)?t:"anonymous"} data for ${rd(rg.parse(null==e?void 0:e.purposes,{names:!0}))}  purposes.`}),ry={anonymous:{classification:"anonymous",purposes:{}},clone:e=>e&&{classification:e.classification,purposes:{...e.purposes}},equals:(e,t)=>e===t||e&&t&&e.classification===t.classification&&rg.test(e.purposes,t.purposes,{intersect:"all",optionalPurposes:!0}),serialize(e){var t=rg.parse(e.purposes,{names:!0});return e.classification&&"anonymous"!==e.classification||null!=t&&t.length?e.classification+":"+t:null},deserialize(e,t){var a;return e?([e,a]=e.split(":"),{classification:null!=(e=rv.parse(e,!1))?e:"anonymous",purposes:null!=(e=rg.parse(a,{validate:!1}))?e:{}}):t?ry.clone(t):{classification:"anonymous",purposes:{}}}},rb=(e,t)=>(!(i=null==e?void 0:e.metadata)||t&&(delete i.posted,delete i.queued,Object.entries(i).length)||delete e.metadata,e),rw=e=>!(null==e||!e.patchTargetId),rk=Symbol(),rS=e=>void 0===e?"undefined":th(JSON.stringify(e),40,!0),rT=/^\d{4}-\d{2}-\d{2}(?:T00:00:00(?:\.000)?)?Z$/,rx=/^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{1,7})?)?Z$/,rA=/^\{?([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\}?$/,rI=/^(?:(?:([\w+.-]+):)(\/\/)?)((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))(?::(\d*))?)(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/,rE=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:(\[(([0-9.]+)|([0-9a-f:]+))\])|(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9]))?$/,rN=(e,t,r)=>(e.push({path:"",type:null,source:t,message:rS(t)+` ${r}.`}),rk),r$=(e,t,r)=>"number"==typeof e&&(!t&&Number.isFinite(e)&&!Number.isNaN(e)||Number.isInteger(e))||r&&"string"==typeof e&&r$((t?parseInt:parseFloat)(e),t,!1),rO={},rc=((e=>{null==e.primitive&&(e.primitive=typeof(null!=(r=null==(r=e.enum)?void 0:r[0])?r:""));var r,u,o=null!=(o=rO[r=e.primitive+"-"+(null!=(r=e.format)?r:"")+"-"+!1])?o:rO[r]=(e=>{switch(e.primitive){case"boolean":return(e,t)=>"boolean"==typeof e?e:rN(t,e,"is not a Boolean");case"date":return(e,t)=>e&&rT.test(e)&&!isNaN(+new Date(e))?e:rN(t,e,"is not a valid ISO 8601 UTC date (time is not allowed, and the 'Z' postfix must be added to indicate Coordinated Universal Time)");case"timestamp":case"datetime":var r="format"in e?"unix"!==e.format:"datetime"===e.primitive;return(e,n)=>{if(!e||r$(e,!1,!1)){if(!r$(e,!0,!1))return rN(n,e,"is not a valid UNIX timestamp");e=+e}else if(!rx.test(e)||isNaN(+new Date(e)))return rN(n,e,"is not a valid ISO 8601 UTC date/time (the 'Z' postfix must be added to indicate Coordinated Universal Time)");return e=new Date(e),r?new Date(e).toISOString():+e};case"duration":return(e,r)=>r$(e,!0,!1)?+e:rN(r,e,"is not a valid duration (must be provided as milliseconds)");case"integer":return(e,r)=>r$(e,!0,!1)?+e:rN(r,e,"is not a valid integer");case"number":return(e,r)=>r$(e,!1,!1)?e:rN(r,e,"is not a number");case"string":switch(e.format){case"uri":return(e,t)=>"string"==typeof e&&rI.test(e)?e:rN(t,e,"is not a valid URI");case"url":return(e,t)=>{var r="string"==typeof e&&rI.exec(e);return r?r[2]?e:rN(t,e,"is not a valid URL (it is a URI, but a URL is required)"):rN(t,e,"is not a valid URL")};case"urn":return(e,t)=>{var r="string"==typeof e&&rI.exec(e);return r?"urn"!==r[1]||r[2]?rN(t,e,"is not a valid URN (it is a URI, but a URN is required)"):e:rN(t,e,"is not a valid URN")};case"email":return(e,t)=>"string"==typeof e&&rE.test(e)?e.toLowerCase():rN(t,e,"is not a valid email address")}return(e,t)=>"string"==typeof e?e:rN(t,e,"is not a string");case"uuid":return(e,t)=>{var r;return null!=(r="string"==typeof e?null==(r=rA.exec(e))?void 0:r[1].toLowerCase():null)?r:rN(t,e,"is not a valid UUID")};default:throw TypeError(`'${rS(e)}' is not a supported primitive type.`)}})(e),d=e.maxLength,c=(null!=d&&(v=o,o=(e,t)=>(e=v(e,t))!==rk&&e.length>d?rN(t,e,`exceeds the maximum allowed ${d} number of characters`):e),e.min),f=e.max;if(null==c&&null==f||(p=null!=c?null!=f?`between ${c} and `+f:"at least "+c:"at most "+f,v=o,o=(e,t)=>(e=v(e,t))===rk||(null==c||c<=e)&&(null==f||e<=f)?e:rN(t,e,p)),"enum"in e){var v=o;if(!(u=new Set((Array.isArray(e.enum)?e.enum:[e.enum]).map(e=>{var t=[];if((e=v(e,t))===rk)throw TypeError(t[0]);return e}))).size)throw TypeError("At least one enum value to test against is required.");var p="is not the constant value "+rd(e.enum.map(e=>JSON.stringify(e)),"or"),o=(e,t)=>(e=v(e,t))===rk||u.has(e)?e:rN(t,e,p)}(e=>null==e||e instanceof Set||new Set(e[tW]&&"string"!=typeof e?e:[e]))(u)})({primitive:"string",format:"uri"}),tm("variable scope",{global:"global",session:"session",device:"device",user:"user"})),r_=({key:e,scope:t="",entityId:r="",source:n=""},i="")=>["'"+e+"'",n&&"from '"+n+"'",i,t&&"in "+t+" scope",r&&"for '"+r+"'"].filter(e=>e).join(" "),rj=e=>null==e?e:{source:e.source,key:e.key,scope:e.scope,entityId:e.entityId},rF=((E=a=a||{})[E.Success=200]="Success",E[E.Created=201]="Created",E[E.NotModified=304]="NotModified",E[E.Forbidden=403]="Forbidden",E[E.NotFound=404]="NotFound",E[E.BadRequest=405]="BadRequest",E[E.Conflict=409]="Conflict",E[E.Error=500]="Error",(e,t=!0)=>null!=(null==e?void 0:e.value)||!t&&(!e||404===e.status)),rU=(e,t=!0)=>e&&(e.status<400||!t&&404===e.status);function rM(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var rq=e=>{var t=r_(e),r=e.error;return e.status<400?`${t} succeeded with status ${e.status} - ${a[e.status]}.`:`${t} failed with status ${e.status} - ${a[e.status]}${r?` (${r})`:""}.`};class rz extends Error{constructor(e,t){super(null!=t?t:"One or more operations failed."),rM(this,"succeeded",void 0),rM(this,"failed",void 0),this.succeeded=null!=(t=null==e?void 0:e.filter(e=>rU(e,!1)))?t:[],this.failed=null!=(t=null==e?void 0:e.filter(e=>!rU(e,!1)))?t:[]}}var rR=e=>!!e.callback,rP=e=>!!e.poll,rD=Symbol(),rB=(e,t,r,{poll:n,logCallbackError:i}={})=>{var l=es(t)?t:[t],o=[],u=(async()=>{var s,d,u,v,t=await r(l.filter(e=>e)),a=[];for(u of l)u&&null!=(d=t.get(u))&&(d[rD]=u,rR(u)&&a.push([u,e=>!0===u.callback(e)]),rP(u))&&a.push([u,e=>{var t;return!rF(e,!1)||(t=!rF(e,!1)||u.poll(e.value,e[rD]===u,s),s=e.value,t)}]);for([u,v]of a)try{var c="get"===e?async e=>!0===await v(e)&&(null==n?void 0:n(u,c)):v;await c(u)}catch(t){var f=`${e} callback for ${r_(u)} failed: ${t}.`;i?i(f,u,t):o.push(f)}return t})(),s=async(r,n)=>{var v,c,f,i=await u,s=[],d=[];for(v of l)v?null==(f=i.get(v))?d.push(`No result for ${r_(v)}.`):!r||rU(f,n||"set"===e)?s.push(r&&f.status===a.NotFound?void 0:1<r?null!=(c=f.value)?c:void 0:f):d.push(rq(f)):s.push(void 0);if(d.push(...o),d.length)throw 10<d.length&&d.push(`
(and ${d.splice(10).length} more...)`),new rz(s,d.join("\n"));return l===t?s:s[0]};return Object.assign(D(()=>s(1,!1)),{as:()=>s(1,!1),all:()=>s(0,!1),require:()=>s(1,!0),value:(e=!1)=>s(2,e),values:(e=!1)=>s(2,e)})},rW=e=>e&&"string"==typeof e.type,rJ=(e=>t=>(null==t?void 0:t.type)&&e.some(e=>e===(null==t?void 0:t.type)))(["view"]),rL=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rV=(e,t)=>{var r;return t&&(!(o=e.get(l=t.tag+(null!=(r=t.value)?r:"")))||(null!=(r=o.score)?r:1)<(null!=(r=t.score)?r:1))&&e.set(l,t)},rH=(e,t="",r=new Map)=>{if(e)return em(e)?tH(e,e=>rH(e,t,r)):eo(e)?tA(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,i,a,l,o,u)=>{i={tag:(n?rL(n)+"::":"")+t+rL(i),value:rL(null!=(n=null!=a?a:l)?n:o)};u&&10!==parseFloat(u)&&(i.score=parseFloat(u)/10),rV(r,i)}):rV(r,e),r},rK=tm("local variable scope",{view:"view",tab:"tab",shared:"shared"}),rG=tm("variable scope",{...rK,...rc}),rX=e=>("global"!==e.scope&&e.entityId&&(e.entityId=void 0),e),rZ=e=>null!=e&&!!e.scope&&null!=rK.ranks[e.scope],rY=e=>null==e?e:[e.scope,e.key,e.targetId].join("\0"),rQ=e=>{e=e.split("\0");return{scope:e[0],key:e[1],targetId:e[2]}},r1=()=>()=>U("Not initialized."),r2=window,r6=document,r4=r6.body,r5=(e,t)=>!(null==e||!e.matches(t)),r3=((e=>tf=e)(!!r2.chrome),H),r8=(e,t,r=(e,t)=>r3<=t)=>{for(var n=0,i=K;1===(null==e?void 0:e.nodeType)&&!r(e,n++)&&t(e,(e,t)=>(null!=e&&(a=e,i=t!==G&&null!=a),G),n-1)!==K&&!i;){var a,o=e;null===(e=e.parentElement)&&(null==o?void 0:o.ownerDocument)!==r6&&(e=null==o||null==(o=o.ownerDocument.defaultView)?void 0:o.frameElement)}return a},r9=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":var r;return null==(r=(""+e).trim())?void 0:r.toLowerCase();case!1:case"r":case"b":return""===e||ei(e);case"n":return parseFloat(e);case"j":return R(()=>JSON.parse(e),X);case"h":return R(()=>n5(e),X);case"e":return R(()=>null==n8?void 0:n8(e),X);default:return es(t)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:r9(e,t[0])):void 0}},r7=(e,t,r)=>r9(null==e?void 0:e.getAttribute(t),r),ne=(e,t,r)=>r8(e,(e,n)=>n(r7(e,t,r))),nt=(e,t)=>null==(e=r7(e,t))||null==(t=e.trim())?void 0:t.toLowerCase(),nr=e=>null==e?void 0:e.getAttributeNames(),nn=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,ni=e=>null!=e?e.tagName:null,nl=e=>({x:ew(scrollX,e),y:ew(scrollY,e)}),no=(e,t)=>tj(e,/#.*$/,"")===tj(t,/#.*$/,""),nu=(e,t,r=G)=>(s=ns(e,t))&&W({xpx:s.x,ypx:s.y,x:ew(s.x/r4.offsetWidth,4),y:ew(s.y/r4.offsetHeight,4),pageFolds:r?s.y/window.innerHeight:void 0}),ns=(e,t)=>null!=t&&t.pointerType&&null!=(null==t?void 0:t.pageY)?{x:t.pageX,y:t.pageY}:e?({x:d,y:v}=nv(e),{x:d,y:v}):void 0,nv=(e,t=!0)=>e?(c=e.getBoundingClientRect(),u=t?nl(K):{x:0,y:0},{x:ew(c.left+u.x),y:ew(c.top+u.y),width:ew(c.width),height:ew(c.height)}):void 0,nc=(e,t,r,n={capture:!0,passive:!0})=>(t=t0(t),td(r,r=>tH(t,t=>e.addEventListener(t,r,n)),r=>tH(t,t=>e.removeEventListener(t,r,n)))),np=()=>({...u=nl(G),width:window.innerWidth,height:window.innerHeight,totalWidth:r4.offsetWidth,totalHeight:r4.offsetHeight}),nh=new WeakMap,ng=e=>nh.get(e),nm=(e,t=K)=>(t?"--track-":"track-")+e,ny=(e,t,r,n,i,a)=>(null==t?void 0:t[1])&&tH(nr(e),l=>{var o;return null!=(o=(f=t[0])[p=l])?o:f[p]=(a=K,!eo(n=tH(t[1],([t,r,n],i)=>tT(l,t)&&(a=void 0,!r||r5(e,r))&&ex(null!=n?n:l)))||(i=e.getAttribute(l))&&!ei(i)||rH(i,tj(n,/\-/g,":"),r),a)}),nb=()=>{},nw=(e,t)=>{if(h===(h=nE.tags))return nb(e,t);var r=e=>e?tO(e)?[[e]]:em(e)?ej(e,r):[ef(e)?[tC(e.match),e.selector,e.prefix]:[tC(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(tX(h,([,e])=>e,1))]];(nb=(e,t)=>ny(e,n,t))(e,t)},nk=(e,t)=>rs(eF(nn(e,nm(t,G)),nn(e,nm("base-"+t,G)))," "),nS={},nT=(e,t,r=nk(e,"attributes"))=>{var n;r&&ny(e,null!=(n=nS[r])?n:nS[r]=[{},tx(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tC(r||n),,t])],t),rH(nk(e,"tags"),void 0,t)},nx=(e,t,r=K,n)=>null!=(r=null!=(r=r?r8(e,(e,r)=>r(nx(e,t,K)),eg(r)?r:void 0):rs(eF(r7(e,nm(t)),nn(e,nm(t,G)))," "))?r:n&&(g=ng(e))&&n(g))?r:null,nA=(e,t,r=K,n)=>""===(m=nx(e,t,r,n))||(null==m?m:ei(m)),nI=(e,t,r,n)=>e&&(null==n&&(n=new Map),nT(e,n),r8(e,e=>{nw(e,n),rH(null==r?void 0:r(e),void 0,n)},t),n.size)?{tags:[...n.values()]}:{},nE={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,json:!1,impressionThreshold:1e3,captureContextMenu:!0,tags:{default:["data-id","data-name"]}},nN=[],n$=[],nO=(e,t=0)=>e.charCodeAt(t),n_=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>nN[n$[t]=e.charCodeAt(0)]=t),e=>{for(var t,r=0,n=e.length,i=[];r<n;)t=e[r++]<<16|e[r++]<<8|e[r++],i.push(n$[(16515072&t)>>18],n$[(258048&t)>>12],n$[(4032&t)>>6],n$[63&t]);return i.length+=n-r,(e=>String.fromCharCode(...e))(i)}),nj=e=>{for(var t,r=0,n=0,i=e.length,a=new Uint8Array(3*(i/4|0)+(i+3&3)%3);r<i;)a[n++]=nN[nO(e,r++)]<<2|(t=nN[nO(e,r++)])>>4,r<i&&(a[n++]=(15&t)<<4|(t=nN[nO(e,r++)])>>2,r<i)&&(a[n++]=(3&t)<<6|nN[nO(e,r++)]);return a},nF={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},nU=(e=256)=>e*Math.random()|0,nq={exports:{}},{deserialize:nz,serialize:nR}=((()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,i=new Uint8Array(128),a=0;if(t&&t.multiple)for(var l=0;l<e.length;l++)o(e[l]);else o(e);return i.subarray(0,a);function o(e,i){var c,l;switch(typeof e){case"undefined":s(192);break;case"boolean":s(e?195:194);break;case"number":(e=>{var t;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?s(e):0<e&&e<=255?d([204,e]):-128<=e&&e<=127?d([208,e]):0<e&&e<=65535?d([205,e>>>8,e]):-32768<=e&&e<=32767?d([209,e>>>8,e]):0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?d([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?d([211,(t=e/4294967296)>>>24,t>>>16,t>>>8,t,(t=e%4294967296)>>>24,t>>>16,t>>>8,t]):-0x8000000000000000<=e&&e<=0x8000000000000000?(s(211),v(e)):d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(r=new ArrayBuffer(8))).setFloat64(0,e),s(203),d(new Uint8Array(r)))})(e);break;case"string":(c=(l=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var i=0,a=new Uint8Array(e.length*(t?1:4)),l=0;l!==r;l++){var o=e.charCodeAt(l);if(o<128)a[i++]=o;else{if(o<2048)a[i++]=o>>6|192;else{if(55295<o&&o<56320){if(++l>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(l);if(u<56320||57343<u)throw Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+l+" out of range");a[i++]=(o=65536+((1023&o)<<10)+(1023&u))>>18|240,a[i++]=o>>12&63|128}else a[i++]=o>>12|224;a[i++]=o>>6&63|128}a[i++]=63&o|128}}return t?a:a.subarray(0,i)})(e)).length)<=31?s(160+c):d(c<=255?[217,c]:c<=65535?[218,c>>>8,c]:[219,c>>>24,c>>>16,c>>>8,c]),d(l);break;case"object":null===e?s(192):e instanceof Date?(e=>{var r,t=e.getTime()/1e3;0===e.getMilliseconds()&&0<=t&&t<4294967296?d([214,255,t>>>24,t>>>16,t>>>8,t]):0<=t&&t<17179869184?d([215,255,(r=1e6*e.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t]):(d([199,12,255,(r=1e6*e.getMilliseconds())>>>24,r>>>16,r>>>8,r]),v(t))})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((l=(c=e).length)<=255?d([196,l]):d(l<=65535?[197,l>>>8,l]:[198,l>>>24,l>>>16,l>>>8,l]),d(c)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u:e=>{var r,t=0;for(r in e)void 0!==e[r]&&t++;for(r in t<=15?s(128+t):d(t<=65535?[222,t>>>8,t]:[223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(o(r),o(n))}})(e);break;default:if(i||!t||!t.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof t.invalidTypeReplacement?o(t.invalidTypeReplacement(e),!0):o(t.invalidTypeReplacement,!0)}}function u(e){var t=e.length;t<=15?s(144+t):d(t<=65535?[220,t>>>8,t]:[221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;r<t;r++)o(e[r])}function s(e){if(i.length<a+1){for(var t=2*i.length;t<a+1;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i[a]=e,a++}function d(e){if(i.length<a+e.length){for(var t=2*i.length;t<a+e.length;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i.set(e,a),a+=e.length}function v(e){var t,e=0<=e?(t=e/4294967296,e%4294967296):(t=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));d([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function r(e,t){var r,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(i());else r=i();return r;function i(){var t=e[n++];if(0<=t&&t<=127)return t;if(128<=t&&t<=143)return s(t-128);if(144<=t&&t<=159)return d(t-144);if(160<=t&&t<=191)return v(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return u(-1,1);if(197===t)return u(-1,2);if(198===t)return u(-1,4);if(199===t)return c(-1,1);if(200===t)return c(-1,2);if(201===t)return c(-1,4);if(202===t)return o(4);if(203===t)return o(8);if(204===t)return l(1);if(205===t)return l(2);if(206===t)return l(4);if(207===t)return l(8);if(208===t)return a(1);if(209===t)return a(2);if(210===t)return a(4);if(211===t)return a(8);if(212===t)return c(1);if(213===t)return c(2);if(214===t)return c(4);if(215===t)return c(8);if(216===t)return c(16);if(217===t)return v(-1,1);if(218===t)return v(-1,2);if(219===t)return v(-1,4);if(220===t)return d(-1,2);if(221===t)return d(-1,4);if(222===t)return s(-1,2);if(223===t)return s(-1,4);if(224<=t&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function a(t){for(var a,r=0,i=!0;0<t--;)i?(r+=127&(a=e[n++]),128&a&&(r-=128),i=!1):r=(r*=256)+e[n++];return r}function l(t){for(var r=0;0<t--;)r=256*r+e[n++];return r}function o(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return n+=t,4===t?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function u(t,r){t<0&&(t=l(r));r=e.subarray(n,n+t);return n+=t,r}function s(e,t){e<0&&(e=l(t));for(var r={};0<e--;)r[i()]=i();return r}function d(e,t){e<0&&(e=l(t));for(var r=[];0<e--;)r.push(i());return r}function v(t,r){t<0&&(t=l(r));r=n;return n+=t,((e,t,r)=>{var n=t,i="";for(r+=t;n<r;){var a=e[n++];if(127<a)if(191<a&&a<224){if(r<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");a=(31&a)<<6|63&e[n++]}else if(223<a&&a<240){if(r<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");a=(15&a)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<a&&a<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+a.toString(16)+" at index "+(n-1));if(r<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");a=(7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(a<=65535)i+=String.fromCharCode(a);else{if(!(a<=1114111))throw Error("UTF-8 decode: code point 0x"+a.toString(16)+" exceeds UTF-16 reach");a-=65536,i+=String.fromCharCode(a>>10|55296)+String.fromCharCode(1023&a|56320)}}return i})(e,r,t)}function c(e,t){e<0&&(e=l(t));t=l(1),e=u(e);return 255===t?(e=>{var r,t;if(4===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*t);if(8===e.length)return r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*t+r/1e6);if(12===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,t=a(8),new Date(1e3*t+r/1e6);throw Error("Invalid data length for a date value.")})(e):{type:t,data:e}}}var n={serialize:t,deserialize:r,encode:t,decode:r};nq.exports=n})(),(E=nq.exports)&&E.__esModule&&Object.prototype.hasOwnProperty.call(E,"default")?E.default:E),nP="$ref",nD=(e,t,r)=>eh(e)?V:r?t!==V:null===t||t,nB=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var i,a,l,o=(e,t,n=e[t],i=nD(t,n,r)?s(n):V)=>(n!==i&&(i!==V||es(e)?e[t]=i:delete e[t],u(()=>e[t]=n)),i),u=e=>(null!=i?i:i=[]).push(e),s=e=>{if(null==e||eg(e)||eh(e))return V;if(ec(e)){if(e.toJSON&&e!==(e=e.toJSON()))return s(e);if(null!=(l=null==a?void 0:a.get(e)))return e[nP]||(e[nP]=l,u(()=>delete e[nP])),{[nP]:l};if(ef(e))for(var t in(null!=a?a:a=new Map).set(e,a.size+1),e)o(e,t);else!em(e)||e instanceof Uint8Array||(!es(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?o(e,r):(e[r]=null,u(()=>delete e[r])))}return e};return R(()=>{var r;return t?nR(null!=(r=s(e))?r:null):R(()=>JSON.stringify(e,V,n?2:0),()=>JSON.stringify(s(e),V,n?2:0))},!0,()=>null==i?void 0:i.forEach(e=>e()))},nW=e=>{var t,r,n=e=>ec(e)?e[nP]&&(r=(null!=t?t:t=[])[e[nP]])?r:(e[nP]&&delete(t[e[nP]]=e)[nP],Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(eo(e)?R(()=>JSON.parse(e),()=>(console.error("Invalid JSON received.",e,Error().stack),V)):null!=e?R(()=>nz(e),()=>(console.error("Invalid message received.",e,Error().stack),V)):e)},nJ=(e,t={})=>{var r=(e,{json:t=!1,decodeJson:r=!1,...n})=>{var l,o,u,i=(e,r)=>el(e)&&!0===r?e:u(e=eo(e)?new Uint8Array(tK(e.length,t=>255&e.charCodeAt(t))):t?R(()=>JSON.stringify(e),()=>JSON.stringify(nB(e,!1,n))):nB(e,!0,n),r),a=e=>null==e?V:R(()=>nW(e),V);return t?[e=>nB(e,!1,n),a,(e,t)=>i(e,t)]:([l,o,u]=(e=>{for(var t,r,n,i,a,o,l=0n,u=0n,s=[],d=0,v=0,c=0,f=0,p=[],c=0;c<(null==e?void 0:e.length);f+=p[c]=e.charCodeAt(c++));var h=e?()=>{s=[...p],v=255&(d=f),c=-1}:()=>{},g=e=>(v=255&(d+=-s[c=(c+1)%s.length]+(s[c]=e)),e);return[e?e=>{for(h(),i=16-((t=e.length)+4)%16,a=new Uint8Array(4+t+i),n=0;n<3;a[n++]=g(nU()));for(r=0,a[n++]=g(v^16*nU(16)+i);r<t;a[n++]=g(v^e[r++]));for(;i--;)a[n++]=nU();return a}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((v^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,a=new Uint8Array(t);n<t;a[n++]=v^g(e[r++]));return a}:e=>e,(e,t=64)=>{if(null==e)return null;for(o=en(t)?64:t,h(),[l,u]=nF[o],r=0;r<e.length;l=BigInt.asUintN(o,(l^BigInt(v^g(e[r++])))*u));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+l%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):l.toString(36)}]})(e),[(e,t)=>(t?Z:n_)(l(nB(e,!0,n))),e=>null!=e?nW(o(e instanceof Uint8Array?e:(r&&eS(e)?a:nj)(e))):null,(e,t)=>i(e,t)])};if(!e){var n=+(null!=(n=t.json)?n:0);if(n&&!1!==t.prettify)return(null!=y?y:y=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[n]}return r(e,t)},[nL,,]=(nJ(),nJ(null,{json:!0,decodeJson:!0}),nJ(null,{json:!0,prettify:!0})),tm=t_(""+r6.currentScript.src,"#"),rc=t_(""+(tm[1]||""),";"),nG=tm[0],nX=rc[1]||(null==(E=tw(nG,{delimiters:!1}))?void 0:E.host),nZ=e=>!(!nX||(null==(e=tw(e,{delimiters:!1}))||null==(e=e.host)?void 0:e.endsWith(nX))!==G),tm=(...e)=>tj(rs(e),/(^(?=\?))|(^\.(?=\/))/,nG.split("?")[0]),nQ=tm("?","var"),n0=tm("?","mnt"),n1=(tm("?","usr"),Symbol()),n2=Symbol(),n6=(e,t,r=G,n=K)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tp("tail.js: ","90;3"))+t);r=null==e?void 0:e[n2];null!=(e=r?e[n1]:e)&&console.log(ec(e)?tp(nL(e),"94"):eg(e)?""+e:e),r&&r.forEach(([e,t,r])=>n6(e,t,r,!0)),t&&console.groupEnd()},[n4,n5]=nJ(),[n3,n8]=[r1,r1],n9=!0,[rc,ie]=et(),ii=(...e)=>{var r,a=e.shift();console.error(e[1]instanceof Error?e[1].message:eo(e[1])?e.shift():null!=(r=null==(r=e[1])?void 0:r.message)?r:"An error occurred",null!=(r=a.id)?r:a,...e)},[ia,il]=et(),[io,iu]=et(),is=e=>iv!==(iv=e)&&il(iv,ih(!0,!0)),id=e=>ic!==(ic=!!e&&"visible"===document.visibilityState)&&iu(ic,!e,ip(!0,!0)),iv=(ia(id),!0),ic=!1,ip=te(!1),ih=te(!1),ig=(nc(window,["pagehide","freeze","beforeunload"],()=>is(!1)),nc(window,["pageshow","resume"],()=>is(!0)),nc(document,"visibilitychange",()=>(id(!0),ic&&is(!0))),il(iv,ih(!0,!0)),!1),im=te(!1),[,ib]=et(),iw=tr({callback:()=>ig&&ib(ig=!1,im(!1)),frequency:2e4,once:!0,paused:!0}),E=()=>!ig&&(ib(ig=!0,im(!0)),iw.restart()),iS=(nc(window,["focus","scroll"],E),nc(window,"blur",()=>iw.trigger()),nc(document.body,["keydown","pointerdown","pointermove","scroll"],E),E(),()=>im()),iT=0,ix=void 0,iA=()=>(null!=ix?ix:r1())+"_"+iI(),iI=()=>(e7(!0)-(parseInt(ix.slice(0,-2),36)||0)).toString(36)+"_"+(++iT).toString(36),i$=new Map,iO={id:ix,heartbeat:e7()},iC={knownTabs:new Map([[ix,iO]]),variables:new Map},[i_,ij]=et(),[iF,iU]=et(),iM=r1,iq=(e,t=e7())=>{e=i$.get(eo(e)?e:rY(e));return null!=e&&e.cache&&e.cache[0]+e.cache[1]<=t?void 0:e},iz=(...e)=>{var t=e7();return iP(tK(e,e=>(e.cache=[t],[rj(e),{...e,created:t,modified:t,version:"0"}])))},iR=e=>null!=(e=tK(e,e=>{var t,r;return e&&(t=rY(e[0]),(r=i$.get(t))!==e[1])?[t,e[1],r,e[0]]:tR}))?e:[],iP=e=>{var r,n,e=iR(e);null!=e&&e.length&&(r=e7(),tH(e,([,e,t])=>{e&&!e.cache&&(e.cache=null!=(e=null==t?void 0:t.cache)?e:[r,3e3])}),ra(i$,e),(n=tG(e,([,,,e])=>0<rG.compare(e.scope,"tab"))).length&&iM({type:"patch",payload:ri(n)}),iU(tK(e,([,e,t,r])=>[r,e,t]),i$,!0))},[,iB]=(rc((e,t)=>{ia(r=>{var n;r?(r=t(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),ix=null!=(n=null==r?void 0:r[0])?n:e7(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),i$=new Map(t2(tG(i$,([,e])=>"view"===(null==e?void 0:e.scope)),tK(null==r?void 0:r[1],e=>[rY(e),e])))):sessionStorage.setItem("_tail:state",e([ix,tK(i$,([,e])=>e&&"view"!==e.scope?e:tR)]))},!0),iM=(t,r)=>{e&&(localStorage.setItem("_tail:state",e([ix,t,r])),localStorage.removeItem("_tail:state"))},nc(window,"storage",e=>{var a,l,o;"_tail:state"!==e.key||!(e=null==t?void 0:t(e.newValue))||e[2]&&e[2]!==ix||([e,{type:a,payload:l}]=e,"query"===a?r.active||iM({type:"set",payload:[tK(iC.knownTabs),tK(iC.variables)]},e):"set"===a&&r.active?(iC.knownTabs=new Map(l[0]),iC.variables=new Map(l[1]),i$=new Map(l[1]),r.trigger()):"patch"===a?(o=iR(tK(l,([e,t])=>[rQ(e),t])),ra(iC.variables,l),ra(i$,l),iU(tK(o,([,e,t,r])=>[r,e,t]),i$,!1)):"tab"===a&&(rr(iC.knownTabs,e,l),l)&&ij("tab",l,!1))});var r=tr(()=>ij("ready",iC,!0),-25),n=tr({callback(){var e=e7()-1e4;tH(iC.knownTabs,([t,r])=>r[0]<e&&rr(iC.knownTabs,t,void 0)),iO.heartbeat=e7(),iM({type:"tab",payload:iO})},frequency:5e3,paused:!0});ia(e=>(e=>{iM({type:"tab",payload:e?iO:void 0}),e?(r.restart(),iM({type:"query"})):r.toggle(!1),n.toggle(e)})(e),!0)},!0),et()),[iW,iJ]=et(),iL=(({timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var i=()=>(r?n8:n5)(localStorage.getItem("_tail:rq")),a=0,l=()=>localStorage.setItem("_tail:rq",(r?n3:n4)([ix,e7()+t]));return async(r,o,u=null!=o?1:n)=>{for(;u--;){var d=i();if((!d||d[1]<e7())&&(l(),(null==(d=i())?void 0:d[0])===ix))return 0<t&&(a=setInterval(()=>l(),t/2)),B(r,!0,()=>{clearInterval(a),localStorage.removeItem("_tail:rq")});var v=tu(),[d]=nc(window,"storage",t=>{"_tail:rq"!==t.key||t.newValue||v.resolve()});e=[to(null!=o?o:t),v],await Promise.race(e.map(e=>eg(e)?e():e)),d()}var e;null==o&&U("_tail:rq could not be acquired.")}})(),iV=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{n=n&&n9;var i,a,l=!1,o=r=>{var o=eg(t)?null==t?void 0:t(i,r):t;return!1!==o&&(iB(e,i=null!=o&&!0!==o?o:i,r,e=>(l=i===V,i=e)),!l)&&(a=n?n3(i,!0):JSON.stringify(i))};if(!r)return iL(()=>eP(1,async t=>{var l;return o(t)?400<=(l=await fetch(e,{method:null!=i?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain; charset=iso-8859-1"},body:a})).status?0===t?ex(U("Invalid response: "+await l.text())):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await to(200*(1+t))):(null!=(l=null!=(t=n?new Uint8Array(await l.arrayBuffer()):await l.text())&&t.length?null==(l=n?n8:JSON.parse)?void 0:l(t):V)&&iJ(l),ex(l)):ex()}));o(0)&&!navigator.sendBeacon(e,new Blob(null!=i?[a]:[],{type:"text/plain; charset=iso-8859-1"}))&&U("Beacon send failed.")},tm=["scope","key","entityId","source"],iK=[...tm,"purpose","ifModifiedSince","ifNoneMatch"],iG=[...tm,"value","force","ttl","version"],iX=new Map,iZ=(e,t)=>{var r=tr(async()=>{var e=tK(iX,([e,t])=>({...rQ(e),result:[...t]}));e.length&&await l.get(e)},3e3),n=(e,t)=>t&&re(iX,e,()=>new Set).add(t),l=(ia((e,t)=>r.toggle(e,e&&3e3<=t),!0),iF(e=>tH(e,([e,t])=>(e=>{var t,r;e&&(t=rY(e),null!=(r=e6(iX,t)))&&r.size&&tH(r,r=>!0===r(e)&&n(t,r))})(t?{status:a.Success,...t}:{status:a.NotFound,...e}))),{get:r=>rB("get",r,async r=>{r[0]&&!eo(r[0])||(o=r[0],r=r.slice(1)),null!=t&&t.validateKey(o);var u=new Map,s=[],d=tK(r,e=>{var t=iq(rY(e)),r=e.purpose;if(r&&!0!==(null==t||null==(i=t.schema)?void 0:i.usage.purposes[r]))u.set(e,{...e,status:a.Forbidden,error:`No consent for '${r}'.`});else if(e.refresh&&t)u.set(e,{status:a.Success,...t});else{if(!rZ(e))return[ro(e,iK),e];var i,r=null==(i=e.init)?void 0:i.call(e);r?(r={...rj(e),version:"1",created:v,modified:v,value:r,cache:[v,null!=(i=e.ttl)?i:null==t?void 0:t.ttl]},rn(s,[rj(r),r]),u.set(e,{status:a.Success,...r})):u.set(e,{status:a.NotFound,...rj(e)})}return tR}),v=e7(),o=d.length&&(null==(o=await iV(e,{variables:{get:tK(d,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId}))||null==(r=o.variables)?void 0:r.get)||[],f=[];return tH(o,(e,t)=>{var n,r;(null==e?void 0:e.status)===a.NotFound?null!=(r=null==(r=(n=d[t][1]).init)?void 0:r.call(n))&&f.push([n,{...rj(n),value:r}]):u.set(d[t][1],rX(e))}),f.length&&tH(await l.set(tK(f,([,e])=>e)).all(),(e,t)=>u.set(f[t][0],rX(e.status===a.Conflict?{...e,status:a.Success}:e))),s.length&&iP(s),u},{poll:(e,t)=>n(rY(e),t),logCallbackError:(e,t,r)=>ii("Variables.get",e,{operation:t,error:r})}),set:r=>rB("set",r,async r=>{r[0]&&!eo(r[0])||(n=r[0],r=r.slice(1)),null!=t&&t.validateKey(n);for(var n,i,o=[],u=new Map,s=e7(),d=[],v=tK(r,e=>{var i,r,t=iq(rY(e));return rZ(e)?((r=null==(i=e.patch?e.patch(null==t?void 0:t.value):e.value)?void 0:{...rj(e),created:null!=(r=null==t?void 0:t.created)?r:s,modified:s,version:null!=t&&t.version?""+(parseInt(t.version)+1):"1",scope:e.scope,key:e.key,value:i,cache:[s,e.ttl]})&&(r.cache=[s,null!=(i=e.ttl)?i:3e3]),u.set(e,r?{status:t?a.Success:a.Created,...r}:{status:a.Success,...rj(e)}),rn(o,[rj(e),r]),tR):e.patch?(d.push(e),tR):(void 0===(null==e?void 0:e.version)&&(e.version=null==t?void 0:t.version),[ro(e,iG),e])}),c=0;!c++||d.length;)tH(await l.get(tK(d,e=>rj(e))).all(),(e,t)=>{var r=d[t];rU(e,!1)?rn(v,[{...r,patch:void 0,value:d[t].patch(null==e?void 0:e.value),version:e.version},r]):u.set(r,e)}),d=[],tH(v.length?z(null==(i=(await iV(e,{variables:{set:tK(v,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId})).variables)?void 0:i.set,"No result."):[],(e,t)=>{var[,t]=v[t];c<=3&&t.patch&&((null==e?void 0:e.status)===a.Conflict||(null==e?void 0:e.status)===a.NotFound)?rn(d,t):u.set(t,rX(e))});return o.length&&iP(o),u},{logCallbackError:(e,t,r)=>ii("Variables.set",e,{operation:t,error:r})})});return iW(({variables:e})=>{e&&null!=(e=t2(tK(e.get,e=>rF(e)?e:tR),tK(e.set,e=>rU(e)?e:tR)))&&e.length&&iP(tK(e,e=>[rj(e),rU(e)?e:void 0]))}),l},iY=Symbol(),i1=Symbol(),i2=[.75,.33],i6=[.25,.33],i5=e=>tK(t4(e,[e=>e.scope,e=>e.key]),e=>e?[e,`${r_(e)}, ${rZ(e)?"client-side memory only":rm(null==(e=e.schema)?void 0:e.usage)})`,K]:tR),i7=(e,t="A"===ni(e)&&r7(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),ae=(e,t=ni(e),r=nA(e,"button"))=>r!==K&&(q(t,"A","BUTTON")||"INPUT"===t&&q(nt(e,"type"),"button","submit")||r===G),at=(e,t=!1)=>{var r;return{tagName:e.tagName,text:th((null==(r=r7(e,"title"))?void 0:r.trim())||(null==(r=r7(e,"alt"))?void 0:r.trim())||(null==(r=e.innerText)?void 0:r.trim()),100),href:null==(r=e.href)?void 0:r.toString(),rect:t?nv(e):void 0}},an=e=>{if(S)return S;eo(e)&&([r,e]=n5(e),e=nJ(r,{decodeJson:!0})[1](e)),eQ(nE,e),(e=>{n8===r1&&([n3,n8]=nJ(e,{json:!e,prettify:!1}),n9=!!e,ie(n3,n8))})(e6(nE,"encryptionKey"));var r,l,o,u,s,d,v,c,f,p,h,g,m,i=e6(nE,"key"),a=null!=(e=null==(r=r2[nE.name])?void 0:r._)?e:[];if(es(a))return l=[],o=[],u=(e,...t)=>{var r=G;o=eJ(o,n=>R(()=>{var i;return null!=(i=n[e])&&i.call(n,...t,{tracker:S,unsubscribe:()=>r=K}),r},(e=>t=>ii(e,t))(n)))},s=[],v=iZ(nQ,d={applyEventExtensions(e){return null==e.clientId&&(e.clientId=iA()),null==e.timestamp&&(e.timestamp=e7()),h=G,tH(l,([,t])=>{var r;return(null==(r=t.decorate)?void 0:r.call(t,e))===K&&tP(!0)})?void 0:e},validateKey:(e,t=!0)=>!i&&!e||e===i||!!t&&U(`'${e}' is not a valid key.`)}),c=((e,t)=>{var n=[],i=new WeakMap,a=new Map,l=(e,t)=>{var r;return null!=(r=e.metadata)&&r.queued?eY(t,{type:e.type+"_patch",patchTargetId:e.clientId}):U("Source event not queued.")},o=e=>{i.set(e,e5(e))},u=async(r,n=!0,i)=>{var a;return r[0]&&!eo(r[0])||(a=r[0],r=r.slice(1)),r=tK(r,e=>{if(null!=t&&t.validateKey(null!=a?a:e.key),eY(e,{metadata:{posted:!0}}),e[iY]){if(tH(e[iY],(t,r,n)=>!1===t(e)||n,!1))return;delete e[iY]}return eY(rb(e5(e),!0),{timestamp:e.timestamp-e7()})}),n6({[n2]:tK(r,e=>[e,e.type,K])},"Posting "+rd([tc("new event",[eL(r,e=>!rw(e))||void 0]),tc("event patch",[eL(r,e=>rw(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),iV(e,{events:r,variables:i,deviceSessionId:null==t?void 0:t.deviceSessionId},{beacon:n})},s=async(e,{flush:r=!1,async:i=!0,variables:a}={})=>{var l=[];if(e=tK(t0(e),e=>{var r;return null!=(r=e.metadata)&&r.queued||e3(l,e),null!=(r=rl(t.applyEventExtensions(e),{metadata:{queued:!0}}))?r:tR}),tH(l,e=>n6(e,e.type)),!i)return u(e,!1,a);r?(n.length&&e8(e,...n.splice(0)),e.length&&await u(e,!0,a)):e.length&&e3(n,...e)};return tr(()=>s([],{flush:!0}),5e3),io((e,t,r)=>{!e&&(n.length||t||1500<r)&&(e=tK(a,([e,t])=>{var[t,n]=t();return n&&(a.delete(e),i.delete(e)),null!=t?t:tR}),n.length||e.length)&&s(eF(n.splice(0),e),{flush:!0})}),{post:s,postPatch:(e,t,r)=>s(l(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var u=!1,d=()=>{u=!0};return o(e),((e,t)=>{var r;(null!=(r=(w=e)[k=iY])?r:w[k]=new Set).add(t)})(e,o),a.set(e,()=>{if(!1===(null==n?void 0:n.isConnected))d();else{var a=i.get(e),o=t(a,d),[o,v]=(n6({diff:{snapshot:a,patched:o},stack:Error().stack},"Patch "+a.type),null!=(o=e9(o,a))?o:[]);if(o&&!M(v,a))return i.set(e,e5(v)),[l(e,o),u]}return[void 0,u]}),r&&s(e),d}}})(nQ,d),f=null,p=0,g=h=K,m=!1,S=(...e)=>{if(m){if(e.length){1<e.length&&(!e[0]||eo(e[0]))&&(t=e[0],e=e.slice(1)),eo(e[0])&&(r=e[0],e=eS(r)?JSON.parse(r):n5(r));var t,n=K;if((e=eJ(tX(e,e=>eo(e)?n5(e):e),e=>{if(!e)return K;if(aj(e))nE.tags=eQ({},nE.tags,e.tagAttributes);else{if(aF(e))return nE.disabled=e.disable,K;if(aq(e))return n=G,K;if(aW(e))return e(S),K}return g||aR(e)||aM(e)?G:(s.push(e),K)})).length||n){var r=eG(e,e=>aM(e)?-100:aR(e)?-50:aB(e)?-10:rW(e)?90:0);if(!f||!f.splice(h?p+1:f.length,0,...r)){for(p=0,f=r;p<f.length;p++){var y=f[p];y&&(d.validateKey(null!=t?t:y.key),R(()=>{var e=f[p];if(u("command",e),h=K,rW(e))c.post(e);else if(az(e))v.get(t0(e.get));else if(aB(e))v.set(t0(e.set));else if(aR(e))e3(o,e.listener);else if(aM(e))(t=R(()=>e.extension.setup(S),t=>ii(e.extension.id,t)))&&(e3(l,[null!=(r=e.priority)?r:100,t,e.extension]),eG(l,([e])=>e));else if(aW(e))e(S);else{var r,n,t,a=K;for([,t]of l)if(a=null!=(n=null==(n=t.processCommand)?void 0:n.call(t,e))?n:K)break;a||ii("invalid-command",e,"Loaded extensions:",tK(l,e=>e[2].id))}},e=>ii(S,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}}else a.push(...e)},Object.defineProperty(r2,nE.name,{value:Object.freeze(Object.assign(S,{id:"tracker_"+iA(),events:c,variables:v,__isTracker:G})),configurable:!1,writable:!1}),iF((e,t,r)=>{var n=eF(i5(tK(e,([,e])=>e||tR)),[[{[n2]:i5(tK(t,([,e])=>e||tR))},"All variables",G]]);n6({[n2]:n},tp(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eL(t)} in total).`,"2;3"))}),i_(async(e,t,r,n)=>{var l;"ready"===e&&([e,l]=await v.get([{scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:H}]).values(!0),d.deviceSessionId=e.deviceSessionId,e.hasUserAgent||((()=>{S(W({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:null==T?void 0:T.clientId,languages:tK(navigator.languages,(e,t)=>{var[r,n]=e.split("-");return W({id:e,language:r,region:n,primary:0===t,preference:t+1})}),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...(r=null==r2?void 0:r2.screen,r?({width:r,height:i,orientation:a}=r,l=r<i,-90!==(a=null!=(a=null!=(a=null==a?void 0:a.angle)?a:r2.orientation)?a:0)&&90!==a||([r,i]=[i,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:r2.devicePixelRatio,width:r,height:i,landscape:l}}):{})}));var i,l,a,r})(),e.hasUserAgent=!0),g=!0,s.length&&S(s),n(),m=!0,S(...tK(a$,e=>({extension:e})),...a),S({set:{scope:"view",key:"loaded",value:!0}}))},!0),S;U(`The global variable for the tracker "${nE.name}" is used for something else than an array of queued commands.`)},ai=()=>null==T?void 0:T.clientId,aa={scope:"shared",key:"referrer"},al=(e,t)=>{S.variables.set({...aa,value:[ai(),e]}),t&&S.variables.get({scope:aa.scope,key:aa.key,poll:(r,n,i)=>!!r||(null==i?void 0:i[1])===e&&t()&&!1})},ao=te(),au=te(),as=1,[av,ac]=et(),af=e=>{var t=te(e,ao),r=te(e,au),n=te(e,iS),i=te(e,()=>as);return(e,a)=>({totalTime:t(e,a),visibleTime:r(e,a),activeTime:n(e,a),activations:i(e,a)})},ap=af(),[ag,am]=et(),ay=(e,t)=>(t&&tH(aw,t=>e(t,()=>!1)),ag(e)),ab=new WeakSet,aw=document.getElementsByTagName("iframe");function aS(e){if(e){if(null!=e.units&&q(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var ax=e=>(null==e?void 0:e.component)||(null==e?void 0:e.content),aA=e=>nI(e,t=>t!==e&&!!ax(nh.get(t)),e=>(A=nh.get(e),(A=nh.get(e))&&ej(eF(A.component,A.content,A),"tags"))),aI=(e,t)=>t?e:{...e,rect:void 0,content:(I=e.content)&&tK(I,e=>({...e,rect:void 0}))},aE=(e,t=K,r)=>{var n,i,a,l=[],o=[],u=0;return r8(e,e=>{var s,a,i=nh.get(e);i&&(ax(i)&&(a=eJ(t0(i.component),e=>{var r;return 0===u||!t&&(1===u&&(null==(r=e.track)?void 0:r.secondary)!==G||(null==(r=e.track)?void 0:r.promote))}),n=(null!=r?r:eK(a,e=>null==(e=e.track)?void 0:e.region))&&nv(e)||void 0,s=aA(e),i.content&&e8(l,...tK(i.content,e=>({...e,rect:n,...s}))),null!=a)&&a.length&&(e8(o,...tK(a,e=>{var t;return u=eV(u,null!=(t=e.track)&&t.secondary?1:2),aI({...e,content:l.length?l:void 0,rect:n,...s},!!n)})),l=[]),a=i.area||nx(e,"area"))&&e8(o,a)}),l.length&&e3(o,aI({id:"",rect:n,content:l})),tH(o,e=>{eo(e)?e3(null!=i?i:i=[],e):(null==e.area&&(e.area=rs(i,"/")),e8(null!=a?a:a=[],e))}),a||i?{components:a,area:rs(i,"/")}:void 0},aN=Symbol(),a$=[{id:"context",setup(e){tr(()=>tH(aw,e=>rt(ab,e)&&am(e)),500).trigger(),e.variables.get({scope:"view",key:"view",poll(t){return null==T||!t||null!=T&&T.definition?null!=(n=t)&&t.navigation&&f(!0):(T.definition=t,null!=(t=T.metadata)&&t.posted?e.events.postPatch(T,{definition:n}):n6(T,T.type+" (definition updated)")),!0}});var n,t,d=null!=(t=null==(t=iq({scope:"tab",key:"viewIndex"}))?void 0:t.value)?t:0,v=null==(t=iq({scope:"tab",key:"tabIndex"}))?void 0:t.value,c=(null==v&&iz({scope:"tab",key:"tabIndex",value:v=null!=(t=null!=(t=null==(t=iq({scope:"shared",key:"tabIndex"}))?void 0:t.value)?t:null==(t=iq({scope:"session",key:"@info"}))||null==(t=t.value)?void 0:t.tabs)?t:0},{scope:"shared",key:"tabIndex",value:v+1}),null),f=(t=K)=>{var a,l,o,i,p;no(""+c,c=location.href)&&!t||({source:t,scheme:i,host:a}=tw(location.href+"",{requireAuthority:!0}),T={type:"view",timestamp:e7(),clientId:iA(),tab:ix,href:t,path:location.pathname,hash:location.hash||void 0,domain:{scheme:i,host:a},tabNumber:v+1,tabViewNumber:d+1,viewport:np(),duration:ap(void 0,!0)},0===v&&(T.firstTab=G),0===v&&0===d&&(T.landingPage=G),iz({scope:"tab",key:"viewIndex",value:++d}),l=tk(location.href),tK(["source","medium","campaign","term","content"],(e,t)=>{var n;return null!=(e=(null!=(n=(o=T).utm)?n:o.utm={})[e]=null==(n=t0(l["utm_"+e]))?void 0:n[0])?e:tR}),!(T.navigationType=x)&&performance&&tH(performance.getEntriesByType("navigation"),e=>{T.redirects=e.redirectCount,T.navigationType=tj(e.type,/\_/g,"-")}),x=void 0,"navigate"===(null!=(t=T.navigationType)?t:T.navigationType="navigate")&&(p=null==(i=iq(aa))?void 0:i.value)&&nZ(document.referrer)&&(T.view=null==p?void 0:p[0],T.relatedEventId=null==p?void 0:p[1],e.variables.set({...aa,value:void 0})),(p=document.referrer||null)&&!nZ(p)&&(T.externalReferrer={href:p,domain:(()=>{var{host:t,scheme:r,port:n}=tw(p,{delimiters:!1,requireAuthority:!0});return{host:t+(n?":"+n:""),scheme:r}})()}),T.definition=n,n=void 0,e.events.post(T),e.events.registerEventPatchSource(T,()=>({duration:ap()})),ac(T))};return io(e=>{e?(au(G),++as):au(K)}),nc(window,"popstate",()=>(x="back-forward",f())),tH(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),x="navigate",f()}}),f(),{processCommand:t=>a_(t)&&(e(t.username?{type:"login",username:t.username}:{type:"logout"}),G),decorate(e){!T||rJ(e)||rw(e)||(e.view=T.clientId)}}}},{id:"components",setup(e){var t=(e=>{var t=new IntersectionObserver(e=>tH(e,e=>{var t,r;return null==(t=(r=e.target)[i1])?void 0:t.call(r,e)})),r=new Set,n=(tr({callback:()=>tH(r,e=>e()),frequency:250,raf:!0}),(e,t,r=0)=>e<r?r:t<e?t:e),i=r6.createRange();return(a,l)=>{var o,u,s,d,v,c,f,p,h,g,m,y,b,w,k,S;l&&(o=eJ(null==l?void 0:l.component,e=>{var t;return(null==(t=e.track)?void 0:t.impressions)||(null!=(t=null==(t=e.track)?void 0:t.secondary)?t:e.inferred)!==G}))&&eL(o)&&(p=f=K,g=h=0,m=(e,t,r,n)=>{var i,a=null!=(a=(i=null!=u?u:u=[])[e])?a:i[e]=[{duration:0,impressions:0},te(!1,iS),!1,!1,0,0,0,tF()];a[4]=t,a[5]=r,a[6]=n},y=[tF(),tF()],b=af(!1),w=te(!1,iS),k=-1,S=()=>{var $,t=a.getBoundingClientRect(),r=window.innerWidth,l=window.innerHeight,S=[n(t.top,l),n(t.right,r),n(t.bottom,l),n(t.left,r)],T=S[2]-S[0],S=S[1]-S[3],E=f?i6:i2,r=(E[0]*l<T||E[0]<(T/t.height||0))&&(E[0]*r<S||E[0]<(S/t.width||0));if(p!==r&&w(p=r,!0),f!==(f=p&&w()>=nE.impressionThreshold-250)&&(++h,b(f),s||e(s=tK(o,e=>((null==(e=e.track)?void 0:e.impressions)||nA(a,"impressions",G,e=>null==(e=e.track)?void 0:e.impressions))&&W({type:"impression",pos:nu(a),viewport:np(),timeOffset:ap(),impressions:h,...aE(a,G)})||tR)),null!=s)&&s.length&&($=b(),d=tK(s,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:$,impressions:h,regions:u&&{top:u[0][0],middle:u[1][0],bottom:u[2][0]},seen:g,text:c,read:$.activeTime&&c&&n($.activeTime/c.readTime,g)})))),t.height!==k){k=t.height;E=a.textContent;if({boundaries:v,...c}=(e=>{for(var r,n,i=RegExp("[\\p{L}\\p{N}][\\p{L}\\p{N}'â€™]*|([.!?]+)","gu"),a=0,l=0,o=0,u=0,s=!1;r=i.exec(e);)r[1]?(s&&++u,s=!1):(s=!0,a+=r[0].length,6<r[0].length&&++o,++l);s&&++u;var i=RegExp("[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)","gu"),d=[0,.25,.75,1].map(e=>e*a|0),v=[],f=0,p=!1;do{if(null!=(r=i.exec(e))&&r[1])p&&++f;else{for(var c=null==r?void 0:r.index,h=!1,g=0;g<d.length;g++)d[g]--||(v[g]={offset:null!=n?n:c,wordsBefore:f,readTime:ew(f/238*6e4)},h=!0);(p=!h)||(f=0),n=c+1}}while(r);return{text:e,length:e.length,characters:a,words:l,sentences:u,lix:ew(l/u+100*o/l),readTime:ew(l/238*6e4),boundaries:v}})(null!=E?E:""),u||t.height>=1.25*l){var C=r6.createTreeWalker(a,NodeFilter.SHOW_TEXT),_=0,j=0;for(null==u&&(u=[]);j<v.length&&(F=C.nextNode());){var F,U,M,P,D,z=null!=(U=null==(U=F.textContent)?void 0:U.length)?U:0;for(_+=z;_>=(null==(M=v[j])?void 0:M.offset);)i[j%2?"setEnd":"setStart"](F,v[j].offset-_+z),j++%2&&({top:M,bottom:P}=i.getBoundingClientRect(),D=t.top,j<3?m(0,M-D,P-D,v[1].readTime):(m(1,u[0][4],M-D,v[2].readTime),m(2,M-D,P-D,v[3].readTime)))}}}var r=t.left<0?-t.left:0,E=t.top<0?-t.top:0,L=t.width*t.height;f&&(g=y[0].push(E,E+T)*y[1].push(r,r+S)/L),u&&tH(u,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),i=n(t.bottom>l?l:t.bottom,e[5],e[4]),a=f&&0<i-r,o=e[0];o.duration=e[1](a),a&&(e[3]!==(e[3]=a)&&++e[0].impressions,o.seen=e[7].push(r,i)/(e[5]-e[4]),o.read=n(o.duration/e[6],o.seen))})},a[i1]=({isIntersecting:e})=>{eQ(r,S,e),e||(tH(d,e=>e()),S())},t.observe(a))}})(e),n=({boundary:e,...n})=>{e0(nh,e,e=>{var t;return(e=>null==e?void 0:{...e,component:t0(e.component),content:t0(e.content),tags:t0(e.tags)})("add"in n?{...e,component:eF(null==e?void 0:e.component,n.component),content:eF(null==e?void 0:e.content,n.content),area:null!=(t=null==n?void 0:n.area)?t:null==e?void 0:e.area,tags:eF(null==e?void 0:e.tags,n.tags),cart:null!=(t=n.cart)?t:null==e?void 0:e.cart,track:null!=(t=n.track)?t:null==e?void 0:e.track}:"update"in n?n.update(e):n)}),t(e,nh.get(e))};return{decorate(e){tH(e.components,t=>{rr(t,"track",void 0),tH(e.clickables,e=>rr(e,"track",void 0))})},processCommand:e=>aU(e)?(n(e),G):aD(e)?(tH(((e,t)=>{var r,n;return t?(r=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(i=>{if(!n.has(i))for(var a=[];null!=r7(i,e);){((e,t)=>e instanceof Set||e instanceof WeakSet?e.has(t)||e.add(t):eZ(e,t)||eX(e,t,!0))(n,i);var l,o=t_(r7(i,e),"|");r7(i,e,null);for(var u=0;u<o.length;u++){var d=o[u];if(""!==d){var s="-"===d?-1:parseInt(null!=(s=eu(d))?s:"",36);if(s<0)a.length+=s;else{if(0===u&&(a.length=0),isNaN(s)&&/^["\[{]/.test(d))for(var c="";u<o.length;u++)try{d=JSON.parse(c+=o[u]);break}catch(e){}0<=s&&t[s]&&(d=t[s]),e3(a,d)}}}e3(r,...tK(a,e=>({add:G,...e,boundary:i})));var f=i.nextElementSibling;"WBR"===i.tagName&&null!=(l=i.parentNode)&&l.removeChild(i),i=f}}),r):[]})(e.scan.attribute,e.scan.components),n),G):K}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{nc(r,["click","contextmenu","auxclick"],n=>{var i,a,l,o,u,s=K;if(r8(n.target,e=>{ae(e)&&null==l&&(l=e),s=s||"NAV"===ni(e);var t,d=ng(e),d=null==d?void 0:d.component;!n.button&&null!=d&&d.length&&!u&&(tH(e.querySelectorAll("a,button"),t=>ae(t)&&(3<(null!=u?u:u=[]).length?ex():u.push({...at(t,!0),component:r8(t,(e,t,r,n=null==(i=ng(e))?void 0:i.component)=>n&&t(n[0]),t=>t===e)}))),u)&&null==o&&(o=e),null==i&&(i=null!=(t=nA(e,"clicks",G,e=>null==(e=e.track)?void 0:e.clicks))?t:d&&eK(d,e=>(null==(e=e.track)?void 0:e.clicks)!==K)),null==a&&(a=null!=(t=nA(e,"region",G,e=>null==(e=e.track)?void 0:e.region))?t:d&&eK(d,e=>null==(e=e.track)?void 0:e.region))}),null!=o?o:o=l){var d,v=u&&!l&&i,c=aE(null!=l?l:o,!1,v),f=nI(null!=l?l:o,void 0,e=>tG(t0(null==(e=nh.get(e))?void 0:e.tags))),p=(null==i&&(i=!s),{...(a=null==a?G:a)?{pos:nu(l,n),viewport:np()}:null,...((e,t)=>{var n;return r8(null!=e?e:t,e=>"IMG"===ni(e)||e===t?(n={element:at(e,!1)},K):G),n})(n.target,null!=l?l:o),...c,timeOffset:ap(),...f});if(l)if(i7(l)){var h=l,c=h.hostname!==location.hostname,{host:f,scheme:y,source:b}=tw(h.href,{delimiters:!1,requireAuthority:!0});if(h.host===location.host&&h.pathname===location.pathname&&h.search===location.search)return"#"===h.hash?void 0:void(h.hash!==location.hash&&0===n.button&&e(W({type:"anchor_navigation",anchor:h.hash,...p})));var k,T,w=W({clientId:iA(),type:"navigation",href:c?h.href:b,external:c,domain:{host:f,scheme:y},self:G,anchor:h.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||r7(h,"target")!==window.name?(al(w.clientId),w.self=K,e(w)):no(location.href,h.href)||(w.exit=w.external,al(w.clientId))):(k=h.href,(b=nZ(k))?al(w.clientId,()=>e(w)):(T=(""+Math.random()).replace(".","").substring(1,8),b||nE.captureContextMenu&&(h.href=n0+"="+T+encodeURIComponent(k),nc(window,"storage",(t,r)=>"_tail:push"===t.key&&(t.newValue&&(null==(t=JSON.parse(t.newValue))?void 0:t.requestId)===T&&e(w),r())),nc(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),h.href=k}))))}else{r8(n.target,(e,t)=>{var r;return!!(null!=d?d:d=(e=>eo(e=null==e||e!==G&&""!==e?e:"add")&&q(e,"add","remove","update","clear")?{action:e}:ec(e)?e:void 0)(null!=(r=null==(r=ng(e))?void 0:r.cart)?r:nx(e,"cart")))&&!d.item&&(d.item=(e=>null==e?V:es(e)||eo(e)?e[e.length-1]:ez(e,(e,r)=>e,void 0,void 0))(null==(r=ng(e))?void 0:r.content))&&t(d)});c=aS(d);(c||i)&&e(W(c?{type:"cart_updated",...p,...c}:{type:"component_click",...p}))}else v&&e0(t,o,r=>{var i=ns(o,n);return r?e3(r,i):(i=W({type:"component_click_intent",...p,clicks:r=[i],clickables:u}),e.events.registerEventPatchSource(i,()=>({clicks:t.get(o)}),!0,o)),r})}})};r(document),ay(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=nl(G);av(()=>{return e=()=>(t={},r=nl(G)),setTimeout(e,250);var e}),nc(window,"scroll",()=>{var a,n=nl(),i={x:(u=nl(K)).x/(r4.offsetWidth-window.innerWidth)||0,y:u.y/(r4.offsetHeight-window.innerHeight)||0};n.y>=r.y&&(a=[],!t.fold&&n.y>=r.y+200&&(t.fold=G,e3(a,"fold")),!t["page-middle"]&&.5<=i.y&&(t["page-middle"]=G,e3(a,"page-middle")),!t["page-end"]&&.99<=i.y&&(t["page-end"]=G,e3(a,"page-end")),(n=tK(a,e=>W({type:"scroll",scrollType:e,offset:i}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(t){var r;return aC(t)?("clear"===(r=t.cart)?e({type:"cart_updated",action:"clear"}):(r=aS(r))&&e({...r,type:"cart_updated"}),G):aP(t)?(e({type:"order",...t.order}),G):K}})},{id:"forms",setup(e){var t,r=new Map,n=(e,t=!1)=>{var r=!t||ne(e,nm("form-value")),e=(t&&(r=r?ei(r):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return t&&(e=e&&th(e,200)),r?e:void 0},i=t=>{var i,l,s,a=t.form;if(a)return l=ne(a,nm("ref"))||"track_ref",(s=re(r,a,()=>{var t,r=new Map,n={type:"form",name:ne(a,nm("form-name"))||r7(a,"name")||a.id||void 0,activeTime:0,totalTime:0,fields:{}},l=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:ap()})),()=>{1!==t[3]&&(o(),2<=t[3]&&(n.completed=3===t[3]||!(a.isConnected&&nv(a).width)),e.events.postPatch(n,{...i,completed:n.completed,totalTime:e7(G)-t[4]}),t[3]=1)}),s=((e=0)=>{var t,r,n=(i,a=e)=>{if(void 0===i)return!!r;clearTimeout(t),en(i)?i&&(a<0?ea:L)(null==r?void 0:r())?n(r,a):r=void 0:(r=i,t=setTimeout(()=>n(!0,a),a<0?-a:a))};return n})();return nc(a.ownerDocument.body,"submit",e=>{var r,n;i=aE(a),t[3]=3,e.defaultPrevented?([r]=ia(e=>{e||(n?n6("The browser is navigating to another page after submit leaving a reCAPTCHA challenge. "+tp("Form not submitted",1)):3===t[3]?(n6("The browser is navigating to another page after submit. "+tp("Form submitted",1)),l()):n6("The browser is navigating to another page after submit, but submit was earlier cancelled because of validation errors. "+tp("Form not submitted.",1)),r())}),n=!1,s(()=>{if((()=>{for(var e=a.ownerDocument;e;){if(((e,t)=>!0===tH(e,(r,n,i)=>t(r)?tz=!0:r))(e.querySelectorAll("iframe"),e=>e.src.match(RegExp("https:\\/\\/www.google.com\\/.*(?<=\\/)recaptcha\\/.*(?<=\\/)bframe","gi"))&&(e=>{if(!e||!e.isConnected||nv(e,!1).width<=0)return!1;for(;e;){var t=null==(t=e.ownerDocument.defaultView)?void 0:t.getComputedStyle(e);if("hidden"===t.visibility||"0"===t.opacity)return!1;e=e.parentElement}return!0})(e)))return!0;e=R(()=>{var r;return null==(r=e.defaultView)||null==(r=r.frameElement)?void 0:r.ownerDocument},()=>{})}return!1})())return t[3]=2,n6("reCAPTCHA challenge is active."),n=!0;n&&(n=!1,n6("reCAPTCHA challenge ended (for better or worse)."),t[3]=3),a.isConnected&&0<nv(a).width?(t[3]=2,n6("Form is still visible after 1750 ms, validation errors assumed. "+tp("Form not submitted",1))):(n6("Form is no longer visible 1750 ms after submit. "+tp("Form submitted",1)),l()),r()},1750)):(n6("Submit event triggered and default not prevented. "+tp("Form submitted",1)),l())},{capture:!1}),t=[n,r,a,0,e7(G),1]}))[1].get(t)||tH(a.querySelectorAll("INPUT,SELECT,TEXTAREA,BUTTON"),(e,t)=>{var d,v,a;"BUTTON"===e.tagName&&"submit"!==e.type||(e.name&&"hidden"!==e.type?(a=null!=(d=(a=s[0].fields)[v=e.name])?d:a[v]={id:e.id||v,name:v,label:tj(null!=(v=null==(d=e.labels)||null==(a=d[0])?void 0:a.innerText)?v:e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:null!=(d=e.type)?d:"unknown",[aN]:n(e),value:n(e,!0)},s[0].fields[a.name]=a,s[1].set(e,a)):"hidden"!==e.type||e.name!==l&&!nA(e,"ref")||(e.value||(e.value=tj("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),s[0].ref=e.value))}),[t,s]},a=(e,[r,n]=null!=(t=i(e))?t:[],a=null==n?void 0:n[1].get(r))=>a&&[n[0],a,r,n],l=null,o=()=>{var r,i,a,o,d,v,c;l&&([r,i,a,o]=l,d=-(u-(u=au())),v=-(s-(s=e7(G))),c=i[aN],(i[aN]=n(a))!==c&&(null==i.fillOrder&&(i.fillOrder=o[5]++),i.filled&&(i.corrections=(null!=(c=i.corrections)?c:0)+1),i.filled=G,o[3]=2,tH(r.fields,([e,t])=>t.lastField=e===i.name)),i.value=n(a,!0),i.activeTime+=d,i.totalTime+=v,r.activeTime+=d,r.totalTime+=v,l=null)},u=0,s=0,d=e=>e&&nc(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(l=r,"focusin"===e.type?(s=e7(G),u=au()):o()));d(document),ay(e=>e.contentDocument&&d(e.contentDocument),!0)}},{id:"consent",setup(e){var t,n=async t=>e.variables.get({scope:"session",key:"@consent",poll:t,refresh:!0}).value(),i=async t=>{var r;if(t)return!(r=await n())||ry.equals(r,t)?[!1,r]:(await e.events.post(W({type:"consent",consent:t}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,t])},r={analytics_storage:"performance",functionality_storage:"functionality",personalization_storage:"personalization",ad_storage:"marketing",security_storage:"security"},a=(e({consent:{externalSource:{key:"Google Consent Mode v2",frequency:250,poll(){var e,n=r2.dataLayer,i=t,a=null==n?void 0:n.length;if(a&&(t!==(t=n[a-1])||!t))for(;a--&&((e=n[a])!==i||!i);){var l={},o=!0;if("consent"===(null==e?void 0:e[0])&&"update"===e[1])return tK(r,([t,r])=>"granted"===e[2][t]&&(l[r]=!0,o=o&&("security"===r||"necessary"===r))),{classification:o?"anonymous":"direct",purposes:l}}}}}}),{});return{processCommand(e){var r,l,t,s,d;return aJ(e)?((t=e.consent.get)&&n(t),(r=e.consent.set)&&(async()=>{var e;return(null!=(e=r.callback)?e:()=>{})(...await i(r))})(),(l=e.consent.externalSource)&&(d=l.key,(null!=(t=a[d])?t:a[d]=tr({frequency:null!=(e=l.frequency)?e:1e3})).restart(l.frequency,async()=>{var e,t,r;r6.hasFocus()&&(e=l.poll(s))&&!ry.equals(s,e)&&([t,r]=await i(e),t&&n6(r,"Consent was updated from "+d),s=e)}).trigger()),G):K}}}}],E=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==(null==t?void 0:t[e])),aC=E("cart"),a_=E("username"),aj=E("tagAttributes"),aF=E("disable"),aU=E("boundary"),aM=E("extension"),aq=E(G,"flush"),az=E("get"),aR=E("listener"),aP=E("order"),aD=E("scan"),aB=E("set"),aW=e=>"function"==typeof e,aJ=E("consent");Object.defineProperty(r2,".tail.js.init",{writable:!1,configurable:!1,value(e){e(an)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
