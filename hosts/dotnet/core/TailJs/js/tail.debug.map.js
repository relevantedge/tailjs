(()=>{"use strict";var e,t,r,n,a,i,o,s,l,u,c,f,d,v,p,h,g,m,y,b,w,k,S,I,A,E,T,x,N,O,C,$,j,M="@info",_="@consent",U="_tail:",F=U+"state",q=U+"push",P=(e,t=e=>Error(e))=>{throw ef(e=ts(e))?t(e):e},z=(e,t,r=-1)=>{if(e===t||(e??t)==null)return!0;if(eg(e)&&eg(t)&&e.length===t.length){var n=0;for(var a in e){if(e[a]!==t[a]&&!z(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},R=(e,t,...r)=>e===t||r.length>0&&r.some(t=>R(e,t)),D=(e,t)=>null!=e?e:P(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),W=(e,t=!0,r)=>{try{return e()}catch(e){return eS(t)?ep(e=t(e))?P(e):e:ea(t)?console.error(t?P(e):e):t}finally{r?.()}},B=e=>{var t,r=()=>r.initialized||t?t:(t=ts(e)).then?t=t.then(e=>(r.initialized=!0,r.resolved=t=e)):(r.initialized=!0,r.resolved=t);return r},V=e=>{var t={initialized:!0,then:J(()=>(t.initialized=!0,ts(e)))};return t},J=e=>{var t=B(e);return(e,r)=>K(t,[e,r])},K=async(e,t=!0,r)=>{try{var n=await ts(e);return ev(t)?t[0]?.(n):n}catch(e){if(ea(t)){if(t)throw e;console.error(e)}else{if(ev(t)){if(!t[1])throw e;return t[1](e)}var a=await t?.(e);if(a instanceof Error)throw a;return a}}finally{await r?.()}},G=e=>e,L=void 0,H=Number.MAX_SAFE_INTEGER,X=!1,Y=!0,Z=()=>{},Q=e=>e,ee=e=>null!=e,et=Symbol.iterator,er=(e,t)=>(r,n=!0)=>e(r)?r:t&&n&&null!=r&&null!=(r=t(r))?r:L,en=(e,t)=>eS(t)?e!==L?t(e):L:e?.[t]!==L?e:L,ea=e=>"boolean"==typeof e,ei=er(ea,e=>0!=e&&(1==e||"false"!==e&&("true"===e||L))),eo=e=>!!e,es=e=>e===Y,el=e=>e!==X,eu=Number.isSafeInteger,ec=e=>"number"==typeof e,ef=e=>"string"==typeof e,ed=er(ef,e=>e?.toString()),ev=Array.isArray,ep=e=>e instanceof Error,eh=(e,t=!1)=>null==e?L:!t&&ev(e)?e:eI(e)?[...e]:[e],eg=e=>null!==e&&"object"==typeof e,em=Object.prototype,ey=Object.getPrototypeOf,eb=e=>null!=e&&ey(e)===em,ew=(e,t)=>"function"==typeof e?.[t],ek=e=>"symbol"==typeof e,eS=e=>"function"==typeof e,eI=(e,t=!1)=>!!(e?.[et]&&("object"==typeof e||t)),eA=e=>e instanceof Map,eE=e=>e instanceof Set,eT=(e,t)=>null==e?L:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,ex=!1,eN=e=>(ex=!0,e),eO=e=>null==e?L:eS(e)?e:t=>t[e],eC=(e,t,r)=>(t??r)!==L?(e=eO(e),t??=0,r??=H,(n,a)=>t--?L:r--?e?e(n,a):n:r):e,e$=e=>e?.filter(ee),ej=(e,t,r,n)=>null==e?[]:!t&&ev(e)?e$(e):e[et]?function*(e,t){if(null!=e){if(t){t=eO(t);var r=0;for(var n of e)if(null!=(n=t(n,r++))&&(yield n),ex){ex=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,r===L?t:eC(t,r,n)):eg(e)?function*(e,t){t=eO(t);var r=0;for(var n in e){var a=[n,e[n]];if(t&&(a=t(a,r++)),null!=a&&(yield a),ex){ex=!1;break}}}(e,eC(t,r,n)):ej(eS(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eM=(e,t)=>t&&!ev(e)?[...e]:e,e_=(e,t,r,n)=>ej(e,t,r,n),eU=(e,t,r=1,n=!1,a,i)=>(function* e(t,r,n,a){if(null!=t){if(t[et]||n&&eg(t))for(var i of a?ej(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}})(ej(e,t,a,i),r+1,n,!1),eF=(e,t,r,n)=>{if(t=eO(t),ev(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!ex;r++){var o=e[r];(t?o=t(o,a++):o)!=null&&i.push(o)}return ex=!1,i}return null!=e?eh(e_(e,t,r,n)):L},eq=(e,t,r,n)=>null!=e?new Set([...e_(e,t,r,n)]):L,eP=(e,t,r=1,n=!1,a,i)=>eh(eU(e,t,r,n,a,i)),ez=(...e)=>{var t;return eJ(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...eh(e))),t},eR=(e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,ex)){ex=!1;break}return a},eD=(e,t)=>{var r,n=0;for(var a of e)if(null!=a&&(r=t(a,n++)??r,ex)){ex=!1;break}return r},eW=(e,t)=>{var r,n=0;for(var a in e)if(r=t([a,e[a]],n++)??r,ex){ex=!1;break}return r},eB=(e,t,...r)=>null==e?L:eI(e)?eF(e,e=>t(e,...r)):t(e,...r),eV=(e,t,r,n)=>{var a;if(null!=e){if(ev(e))return eR(e,t,r,n);if(r===L){if(e[et])return eD(e,t);if("object"==typeof e)return eW(e,t)}for(var i of ej(e,t,r,n))null!=i&&(a=i);return a}},eJ=eV,eK=async(e,t,r,n)=>{var a;if(null==e)return L;for(var i of e_(e,t,r,n))if(null!=(i=await i)&&(a=i),ex){ex=!1;break}return a},eG=Object.fromEntries,eL=(e,t,r)=>{if(null==e)return L;if(ea(t)||r){var n={};return eJ(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eJ(e,t?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eG(eF(e,t?(e,r)=>en(t(e,r),1):e=>en(e,1)))},eH=(e,t,r,n,a)=>{var i=()=>eS(r)?r():r;return eV(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()},eX=(e,t=e=>null!=e,r=ev(e),n,a)=>eM(ej(e,(e,r)=>t(e,r)?e:L,n,a),r),eY=(e,t,r,n)=>{var a;if(null==e)return L;if(t)e=eX(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[et])return Object.keys(e).length}return a=0,eV(e,()=>++a)??0},eZ=(e,...t)=>null==e?L:ec(e)?Math.max(e,...t):eH(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||ec(a)&&a>e?a:e,L,t[2],t[3]),eQ=(e,t,r)=>eF(e,eb(e)?e=>e[1]:e=>e,t,r),e0=e=>!ev(e)&&eI(e)?eF(e,eA(e)?e=>e:eE(e)?e=>[e,!0]:(e,t)=>[t,e]):eg(e)?Object.entries(e):L,e1=(e,t,r,n)=>null==e?L:(t=eO(t),eV(e,(e,r)=>!t||(e=t(e,r))?eN(e):L,r,n)),e2=(e,t,r,n)=>null==e?L:ev(e)||ef(e)?e[e.length-1]:eV(e,(e,r)=>!t||t(e,r)?e:L,r,n),e4=(e,t,r,n)=>null==e?L:eb(e)&&!t?Object.keys(e).length>0:e.some?.(t??eo)??eV(e,t?(e,r)=>!!t(e,r)&&eN(!0):()=>eN(!0),r,n)??!1,e6=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),e3=(e,t,r)=>(e.constructor===Object||ev(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),e5=(e,t,r)=>{if(e){if(e.constructor===Object&&null==r)return e[t];var n=e.get?e.get(t):e.has?e.has(t):e[t];return void 0===n&&null!=r&&null!=(n=eS(r)?r():r)&&e3(e,t,n),n}},e8=(e,...t)=>(eJ(t,t=>eJ(t,([t,r])=>{null!=r&&(eb(e[t])&&eb(r)?e8(e[t],r):e[t]=r)})),e),e9=e=>(t,r,n,a)=>{if(t)return void 0!=n?e(t,r,n,a):(eJ(r,r=>ev(r)?e(t,r[0],r[1]):eJ(r,([r,n])=>e(t,r,n))),t)},e7=e9(e3),te=e9((e,t,r)=>e3(e,t,eS(r)?r(e5(e,t)):r)),tt=(e,t)=>e instanceof Set||e instanceof WeakSet?!e.has(t)&&(e.add(t),!0):e5(e,t)!==e7(e,t,!0),tr=(e,t)=>{if((e??t)!=null){var r=e5(e,t);return ew(e,"delete")?e.delete(t):delete e[t],r}},tn=(e,...t)=>{var r=[],n=!1,a=(e,i,o,s)=>{if(e){var l=t[i];i===t.length-1?ev(l)?(n=!0,l.forEach(t=>r.push(tr(e,t)))):r.push(tr(e,l)):(ev(l)?(n=!0,l.forEach(t=>a(e5(e,t),i+1,e,t))):a(e5(e,l),i+1,e,l),!eY(e)&&o&&ta(o,s))}};return a(e,0),n?r:r[0]},ta=(e,t)=>{if(e)return ev(t)?(ev(e)&&e.length>1?t.sort((e,t)=>t-e):t).map(t=>ta(e,t)):ev(e)?t<e.length?e.splice(t,1)[0]:void 0:tr(e,t)},ti=(e,...t)=>{var r=(t,n)=>{var a;if(t){if(ev(t)){if(eb(t[0])){t.splice(1).forEach(e=>r(e,t[0]));return}a=t}else a=eF(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...eb(r)&&("get"in r||"value"in r)?r:eS(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e},to=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>eg(r)?ev(r)?r.map(t=>ev(t)?1===t.length?[t[0],e[t[0]]]:to(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:to(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},ts=e=>eS(e)?e():e,tl=(e,t=-1)=>ev(e)?t?e.map(e=>tl(e,t-1)):[...e]:eb(e)?t?eL(e,([e,r])=>[e,tl(r,t-1)]):{...e}:eE(e)?new Set(t?eF(e,e=>tl(e,t-1)):e):eA(e)?new Map(t?eF(e,e=>[e[0],tl(e[1],t-1)]):e):e,tu=(e,...t)=>e?.push(...t),tc=(e,...t)=>e?.unshift(...t),tf=(e,t)=>{if(e){if(!eb(t))return[e,e];var r,n,a,i={};if(eb(e))return eJ(e,([e,o])=>{if(o!==t[e]){if(eb(r=o)){if(!(o=tf(o,t[e])))return;[o,r]=o}else ec(o)&&ec(n)&&(o=(r=o)-n);i[e]=o,(a??=tl(t))[e]=r}}),a?[i,a]:void 0}},td="undefined"!=typeof performance?(e=Y)=>e?Math.trunc(td(X)):performance.timeOrigin+performance.now():Date.now,tv=(e=!0,t=()=>td())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},tp=(e=0)=>{var t,r,n=(a,i=e)=>{if(void 0===a)return!!r;clearTimeout(t),ea(a)?a&&(i<0?el:es)(r?.())?n(r):r=void 0:(r=a,t=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},th=(e,t=0)=>{var r=eS(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{},raf:l}=r;t=r.frequency??0;var u=0,c=tw(!0).resolve(),f=tv(!a),d=f(),v=async e=>{if(!u||!n&&c.pending&&!0!==e)return!1;if(m.busy=!0,!0!==e)for(;c.pending;)await c;return e||c.reset(),(await K(()=>s(f(),-d+(d=f())),!1,()=>!e&&c.resolve())===!1||t<=0||o)&&g(!1),m.busy=!1,!0},p=()=>u=setTimeout(()=>l?requestAnimationFrame(h):h(),t<0?-t:t),h=()=>{m.active&&v(),m.active&&p()},g=(e,t=!e)=>(f(e,t),clearTimeout(u),m.active=!!(u=e?p():0),m),m={active:!1,busy:!1,restart:(e,r)=>(t=e??t,s=r??s,g(!0,!0)),toggle:(e,t)=>e!==m.active?e?t?(g(!0),m.trigger(),m):g(!0):g(!1):m,trigger:async e=>await v(e)&&(g(m.active),!0)};return m.toggle(!a,i)};class tg{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tm,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class tm{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[t?"error":"value"]=r===L||r,e(r),this})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var ty=(e,t=0)=>t>0?setTimeout(e,t):window.queueMicrotask(e),tb=(e,t)=>null==e||isFinite(e)?!e||e<=0?ts(t):new Promise(r=>setTimeout(async()=>r(await ts(t)),e)):P(`Invalid delay ${e}.`),tw=e=>e?new tg:new tm,tk=(...e)=>Promise.race(e.map(e=>eS(e)?e():e)),tS=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},tI=()=>{var e,t=new Set;return[(r,n)=>{var a=tS(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tA=(e,t=["and",", "])=>e?1===(e=eF(e)).length?e[0]:ev(t)?[e.slice(0,-1).join(t[1]??", ")," ",t[0]," ",e[e.length-1]].join(""):e.join(t??", "):L,tE=(e,t,r)=>null==e?L:ev(t)?null==(t=t[0])?L:t+" "+tE(e,t,r):null==t?L:1===t?e:r??e+"s",tT=(e,t,r)=>r?(tu(r,"\x1b[",t,"m"),ev(e)?tu(r,...e):tu(r,e),tu(r,"\x1b[m"),r):tT(e,t,[]).join(""),tx=(e,t="'")=>null==e?L:t+e+t,tN=(e,t)=>e&&(e.length>t?e.slice(0,-1)+"…":e),tO=(e,t,r)=>null==e?L:eS(t)?tA(eF(ef(e)?[e]:e,t),r??""):ef(e)?e:tA(eF(e,e=>!1===e?L:e),t??""),tC=e=>(e=Math.log2(e))===(0|e),t$=(e,t,r,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,t])=>ef(e)&&ec(t)).map(([e,t])=>[e.toLowerCase(),t])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,t)=>e|t,0),f=t?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,t])=>[t,e])),v=(e,r)=>eu(e)?!t&&r?null!=d[e]?e:L:Number.isSafeInteger(e)?e:L:ef(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),r):L,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,L):(e??0)|r,(p=!1,L)):v(e),(e,t)=>null==(e=h(e,!1))?L:t&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,t])=>t&&e&t&&tC(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:L],m=(e,t)=>null==e?L:null==(e=h(o=e,t))?P(TypeError(`${JSON.stringify(o)} is not a valid ${r} value.`)):e,y=l.filter(([,e])=>!n||(n&e)===e&&tC(e));return ti(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} ${tA(eF(eh(e),e=>tx(e)),[t])}`},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}])},tj=(...e)=>{var t=e0(eL(e,!0)),r=e=>(eg(e)&&(ev(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=L;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tM=Symbol(),t_=(e,t=["|",";",","],r=!0)=>{if(!e)return L;var n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&t?.length&&e1(t,(e,t,r=n[1].split(e))=>r.length>1?r:L)||(n[1]?[n[1]]:[]),n},tU=(e,t=!0,r)=>null==e?L:tR(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:r,urn:r?!n:!n&&L,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):L,path:c,query:!1===t?f:tF(f,t),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":L),v}),tF=(e,t,r=!0)=>tq(e,"&",t,r),tq=(e,t,r,n=!0)=>{var a=[],i=null==e?L:eL(e?.match(/(?:^.*?\?|^)([^#]*)/)?.[1]?.split(t),(e,t,[i,o,s]=t_(e,!1===r?[]:!0===r?L:r,n)??[],l)=>(l=null!=(i=i?.replace(/\[\]$/,""))?!1!==r?[i,s.length>1?s:o]:[i,o]:L,a.push(l),l),(e,t)=>e?!1!==r?ez(e,t):(e?e+",":"")+t:t);return i&&(i[tM]=a),i},tP=(e,t)=>t&&null!=e?t.test(e):L,tz=(e,t,r)=>tR(e,t,r,!0),tR=(r,n,a,i=!1)=>(r??n)==null?L:a?(e=L,i?(t=[],tR(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),tD=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tW=/\z./g,tB=(e,t)=>(t=tO(eq(eX(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tW,tV={},tJ=e=>e instanceof RegExp,tK=(e,t=[","," "])=>tJ(e)?e:ev(e)?tB(eF(e,e=>tK(e,t)?.source)):ea(e)?e?/./g:tW:ef(e)?tV[e]??=tR(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tB(eF(tG(n,RegExp(`(?<!(?<!\\\\)\\\\)[${tO(t,tD)}]`)),e=>e&&`^${tO(tG(e,/(?<!(?<!\\)\\)\*/),e=>tD(tL(e,/\\(.)/g,"$1")),".*")}$`))):L,tG=(e,t)=>e?.split(t)??e,tL=(e,t,r)=>e?.replace(t,r)??e,tH=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return e7(r,{push(n,a){for(var i,o=[n,a],s=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,l=0;l<r.length;l++){var u=r[l];if(0>e(o[1],u[0]))return s(r.splice(l,0,o));if(0>=e(o[0],u[1])){if(0>e(o[0],u[0])&&(i=u[0]=o[0]),e(o[1],u[1])>0&&(i=u[1]=o[1]),!(r[l+1]?.[0]<u[1]))return s(null!=i);i=o=r.splice(l--,1)[0]}}return s(o&&(r[r.length]=o))},width:0})},tX=5e3,tY=()=>()=>P("Not initialized."),tZ=window,tQ=document,t0=tQ.body,t1=(e,t)=>!!e?.matches(t),t2=H,t4=(e,t,r=(e,t)=>t>=t2)=>{for(var n,a=0,i=X;e?.nodeType===1&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==Y&&null!=n),Y),a-1)!==X&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},t6=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||ei(e);case"n":return parseFloat(e);case"j":return W(()=>JSON.parse(e),Z);case"h":return W(()=>nd(e),Z);case"e":return W(()=>np?.(e),Z);default:return ev(t)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:t6(e,t[0])):void 0}},t3=(e,t,r)=>t6(e?.getAttribute(t),r),t5=(e,t,r)=>t4(e,(e,n)=>n(t3(e,t,r))),t8=(e,t)=>t3(e,t)?.trim()?.toLowerCase(),t9=e=>e?.getAttributeNames(),t7=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,re=e=>null!=e?e.tagName:null,rt=()=>({x:(r=rr(X)).x/(t0.offsetWidth-window.innerWidth)||0,y:r.y/(t0.offsetHeight-window.innerHeight)||0}),rr=e=>({x:eT(scrollX,e),y:eT(scrollY,e)}),rn=(e,t)=>tL(e,/#.*$/,"")===tL(t,/#.*$/,""),ra=(e,t,r=Y)=>(n=ri(e,t))&&G({xpx:n.x,ypx:n.y,x:eT(n.x/t0.offsetWidth,4),y:eT(n.y/t0.offsetHeight,4),pageFolds:r?n.y/window.innerHeight:void 0}),ri=(e,t)=>t?.pointerType&&t?.pageY!=null?{x:t.pageX,y:t.pageY}:e?({x:a,y:i}=ro(e),{x:a,y:i}):void 0,ro=e=>e?(o=e.getBoundingClientRect(),r=rr(X),{x:eT(o.left+r.x),y:eT(o.top+r.y),width:eT(o.width),height:eT(o.height)}):void 0,rs=(e,t,r,n={capture:!0,passive:!0})=>(t=eh(t),tS(r,r=>eJ(t,t=>e.addEventListener(t,r,n)),r=>eJ(t,t=>e.removeEventListener(t,r,n)))),rl=e=>{var{host:t,scheme:r,port:n}=tU(e,!1);return{host:t+(n?":"+n:""),scheme:r}},ru=()=>({...r=rr(Y),width:window.innerWidth,height:window.innerHeight,totalWidth:t0.offsetWidth,totalHeight:t0.offsetHeight});(E=s||(s={}))[E.Anonymous=0]="Anonymous",E[E.Indirect=1]="Indirect",E[E.Direct=2]="Direct",E[E.Sensitive=3]="Sensitive";var rc=t$(s,!1,"data classification"),rf=(e,t)=>rc.parse(e?.classification??e?.level)===rc.parse(t?.classification??t?.level)&&rv.parse(e?.purposes??e?.purposes)===rv.parse(t?.purposes??t?.purposes),rd=(e,t)=>null==e?void 0:ec(e.classification)&&ec(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:rc.parse(e.classification??e.level??t?.classification??0),purposes:rv.parse(e.purposes??e.purpose??t?.purposes??l.Necessary)};(T=l||(l={}))[T.None=0]="None",T[T.Necessary=1]="Necessary",T[T.Functionality=2]="Functionality",T[T.Performance=4]="Performance",T[T.Targeting=8]="Targeting",T[T.Security=16]="Security",T[T.Infrastructure=32]="Infrastructure",T[T.Any_Anonymous=49]="Any_Anonymous",T[T.Any=63]="Any",T[T.Server=2048]="Server",T[T.Server_Write=4096]="Server_Write";var rv=t$(l,!0,"data purpose",2111),rp=t$(l,!1,"data purpose",0),rh=(e,t)=>((u=e?.metadata)&&(t?(delete u.posted,delete u.queued,Object.entries(u).length||delete e.metadata):delete e.metadata),e),rg=e=>!!e?.patchTargetId;(x=c||(c={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rm=t$(c,!1,"variable scope");s.Anonymous,l.Necessary;var ry=e=>`'${e.key}' in ${rm.format(e.scope)} scope`,rb={scope:rm,purpose:rp,purposes:rv,classification:rc};tj(rb);var rw=e=>e?.filter(ee).sort((e,t)=>e.scope===t.scope?e.key.localeCompare(t.key,"en"):e.scope-t.scope);(N=f||(f={}))[N.Add=0]="Add",N[N.Min=1]="Min",N[N.Max=2]="Max",N[N.IfMatch=3]="IfMatch",N[N.IfNoneMatch=4]="IfNoneMatch",t$(f,!1,"variable patch type"),(O=d||(d={}))[O.Success=200]="Success",O[O.Created=201]="Created",O[O.Unchanged=304]="Unchanged",O[O.Denied=403]="Denied",O[O.NotFound=404]="NotFound",O[O.ReadOnly=405]="ReadOnly",O[O.Conflict=409]="Conflict",O[O.Unsupported=501]="Unsupported",O[O.Invalid=400]="Invalid",O[O.Error=500]="Error",t$(d,!1,"variable set status");var rk=(e,t,r)=>{var n,a=e(),i=e=>e,o=(e,r=rE)=>V(async()=>(n=i(r(await a,t)))&&e(n)),s={then:o(e=>e).then,all:o(e=>e,e=>e),changed:o(e=>eX(e,e=>e.status<300)),variables:o(e=>eF(e,rI)),values:o(e=>eF(e,e=>rI(e)?.value)),push:()=>(i=e=>(r?.(eF(rS(e))),e),s),value:o(e=>rI(e[0])?.value),variable:o(e=>rI(e[0])),result:o(e=>e[0])};return s},rS=e=>e?.map(e=>e?.status<400?e:L),rI=e=>rA(e)?e.current??e:L,rA=(e,t=!1)=>t?e?.status<300:e?.status<400||e?.status===404,rE=(e,t,r)=>{var n,a,i=[],o=eF(eh(e),(e,o)=>e&&(e.status<400||!r&&404===e.status?e:(a=`${ry(e.source??e)} could not be ${404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because ${409===e.status?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:403===e.status?e.error??"the operation was denied.":400===e.status?e.error??"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=t?.[o])||!1!==n(e,a))&&i.push(a),L)));return i.length?P(i.join("\n")):ev(e)?o:o?.[0]},rT=e=>rE(e,L,!0),rx=e=>e&&"string"==typeof e.type,rN=((...e)=>t=>t?.type&&e.some(e=>e===t?.type))("view"),rO=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rC=(e,t)=>t&&(!(p=e.get(v=t.tag+(t.value??"")))||(p.score??1)<(t.score??1))&&e.set(v,t),r$=(e,t="",r=new Map)=>{if(e)return eI(e)?eJ(e,e=>r$(e,t,r)):ef(e)?tR(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,a,i,o,s,l)=>{var u={tag:(n?rO(n)+"::":"")+t+rO(a),value:rO(i??o??s)};l&&10!==parseFloat(l)&&(u.score=parseFloat(l)/10),rC(r,u)}):rC(r,e),r},rj=new WeakMap,rM=e=>rj.get(e),r_=(e,t=X)=>(t?"--track-":"track-")+e,rU=(e,t,r,n,a,i)=>t?.[1]&&eJ(t9(e),o=>t[0][o]??=(i=X,ef(n=eJ(t[1],([t,r,n],a)=>tP(o,t)&&(i=void 0,!r||t1(e,r))&&eN(n??o)))&&(!(a=e.getAttribute(o))||ei(a))&&r$(a,tL(n,/\-/g,":"),r),i)),rF=()=>{},rq=(e,t)=>{if(h===(h=rV.tags))return rF(e,t);var r=e=>e?tJ(e)?[[e]]:eI(e)?eP(e,r):[eb(e)?[tK(e.match),e.selector,e.prefix]:[tK(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eQ(h))]];(rF=(e,t)=>rU(e,n,t))(e,t)},rP=(e,t)=>tO(ez(t7(e,r_(t,Y)),t7(e,r_("base-"+t,Y)))," "),rz={},rR=(e,t,r=rP(e,"attributes"))=>{r&&rU(e,rz[r]??=[{},tz(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tK(r||n),,t])],t),r$(rP(e,"tags"),void 0,t)},rD=(e,t,r=X,n)=>(r?t4(e,(e,r)=>r(rD(e,t,X)),eS(r)?r:void 0):tO(ez(t3(e,r_(t)),t7(e,r_(t,Y)))," "))??(n&&(g=rM(e))&&n(g))??null,rW=(e,t,r=X,n)=>""===(m=rD(e,t,r,n))||(null==m?m:ei(m)),rB=(e,t,r,n)=>e?(rR(e,n??=new Map),t4(e,e=>{rq(e,n),r$(r?.(e),void 0,n)},t),n.size?{tags:[...n.values()]}:{}):{},rV={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rJ=[],rK=[],rG=(e,t=0)=>e.charCodeAt(t),rL=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>rJ[rK[t]=e.charCodeAt(0)]=t);var rH=e=>{for(var t,r=0,n=e.length,a=[];n>r;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(rK[(16515072&t)>>18],rK[(258048&t)>>12],rK[(4032&t)>>6],rK[63&t]);return a.length+=n-r,rL(a)},rX=e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>r;)i[n++]=rJ[rG(e,r++)]<<2|(t=rJ[rG(e,r++)])>>4,a>r&&(i[n++]=(15&t)<<4|(t=rJ[rG(e,r++)])>>2,a>r&&(i[n++]=(3&t)<<6|rJ[rG(e,r++)]));return i},rY={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},rZ=(e=256)=>e*Math.random()|0,rQ=e=>{var t,r,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(rZ()));for(r=0,i[n++]=g(f^16*rZ(16)+a);t>r;i[n++]=g(f^e[r++]));for(;a--;)i[n++]=rZ();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((f^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);t>n;i[n++]=f^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(s=ea(t)?64:t,h(),[o,l]=rY[s],r=0;r<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[r++])))*l));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},r0={exports:{}};(e=>{(()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var t=e/4294967296,a=e%4294967296;c([211,t>>>24,t>>>16,t>>>8,t,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(r=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(r))})(e);break;case"string":(d=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(e.charCodeAt(n)>127){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var t=e.getTime()/1e3;if(0===e.getMilliseconds()&&t>=0&&t<4294967296)c([214,255,t>>>24,t>>>16,t>>>8,t]);else if(t>=0&&t<17179869184){var r=1e6*e.getMilliseconds();c([215,255,r>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t])}else{var r=1e6*e.getMilliseconds();c([199,12,255,r>>>24,r>>>16,r>>>8,r]),f(t)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var t=0;for(var r in e)void 0!==e[r]&&t++;for(var r in t<=15?u(128+t):t<=65535?c([222,t>>>8,t]):c([223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(s(r),s(n))}})(e);break;default:if(!a&&t&&t.invalidTypeReplacement)"function"==typeof t.invalidTypeReplacement?s(t.invalidTypeReplacement(e),!0):s(t.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var t=e.length;t<=15?u(144+t):t<=65535?c([220,t>>>8,t]):c([221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;t>r;r++)s(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function f(e){var t,r;e>=0?(t=e/4294967296,r=e%4294967296):(t=~(t=Math.abs(++e)/4294967296),r=~(r=Math.abs(e)%4294967296)),c([t>>>24,t>>>16,t>>>8,t,r>>>24,r>>>16,r>>>8,r])}}function r(e,t){var r,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(t>=0&&t<=127)return t;if(t>=128&&t<=143)return u(t-128);if(t>=144&&t<=159)return c(t-144);if(t>=160&&t<=191)return f(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return l(-1,1);if(197===t)return l(-1,2);if(198===t)return l(-1,4);if(199===t)return d(-1,1);if(200===t)return d(-1,2);if(201===t)return d(-1,4);if(202===t)return s(4);if(203===t)return s(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return d(1);if(213===t)return d(2);if(214===t)return d(4);if(215===t)return d(8);if(216===t)return d(16);if(217===t)return f(-1,1);if(218===t)return f(-1,2);if(219===t)return f(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(t>=224&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var r=0,a=!0;t-- >0;)if(a){var i=e[n++];r+=127&i,128&i&&(r-=128),a=!1}else r*=256,r+=e[n++];return r}function o(t){for(var r=0;t-- >0;)r*=256,r+=e[n++];return r}function s(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return(n+=t,4===t)?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function l(t,r){t<0&&(t=o(r));var a=e.subarray(n,n+t);return n+=t,a}function u(e,t){e<0&&(e=o(t));for(var r={};e-- >0;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];e-- >0;)r.push(a());return r}function f(t,r){t<0&&(t=o(r));var a=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;r>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=r)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=r)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=r)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,t)}function d(e,t){e<0&&(e=o(t));var r=o(1),a=l(e);return 255===r?(e=>{if(4===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*t)}if(8===e.length){var r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*t+r/1e6)}if(12===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var t=i(8);return new Date(1e3*t+r/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:r,data:a}}}var n={serialize:t,deserialize:r,encode:t,decode:r};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(r0);var{deserialize:r1,serialize:r2}=(C=r0.exports)&&C.__esModule&&Object.prototype.hasOwnProperty.call(C,"default")?C.default:C,r4="$ref",r6=(e,t,r)=>ek(e)?L:r?t!==L:null===t||t,r3=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var a,i,o,s=(e,t,n=e[t],a=r6(t,n,r)?u(n):L)=>(n!==a&&(a!==L||ev(e)?e[t]=a:delete e[t],l(()=>e[t]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||eS(e)||ek(e))return L;if(!eg(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[r4]||(e[r4]=o,l(()=>delete e[r4])),{[r4]:o};if(eb(e))for(var t in(i??=new Map).set(e,i.size+1),e)s(e,t);else!eI(e)||e instanceof Uint8Array||(!ev(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?s(e,r):(e[r]=null,l(()=>delete e[r])));return e};return W(()=>t?r2(u(e)??null):W(()=>JSON.stringify(e,L,n?2:0),()=>JSON.stringify(u(e),L,n?2:0)),!0,()=>a?.forEach(e=>e()))},r5=e=>{var t,r,n=e=>eg(e)?e[r4]&&(r=(t??=[])[e[r4]])?r:(e[r4]&&(t[e[r4]]=e,delete e[r4]),Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(ef(e)?JSON.parse(e):null!=e?W(()=>r1(e),()=>(console.error("Invalid message received.",e),L)):e)},r8=(e,t={})=>{var r=(e,{json:t=!1,...r})=>{var n=(e,n)=>ec(e)&&!0===n?e:o(e=ef(e)?new Uint8Array(eF(e.length,t=>255&e.charCodeAt(t))):t?W(()=>JSON.stringify(e),()=>JSON.stringify(r3(e,!1,r))):r3(e,!0,r),n);if(t)return[e=>r3(e,!1,r),e=>null==e?L:W(()=>r5(e),L),(e,t)=>n(e,t)];var[a,i,o]=rQ(e);return[(e,t)=>(t?Q:rH)(a(r3(e,!0,r))),e=>null!=e?r5(i(e instanceof Uint8Array?e:rX(e))):null,(e,t)=>n(e,t)]};if(!e){var n=+(t.json??0);if(n&&!1!==t.prettify)return(y??=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[+n]}return r(e,t)};r8();var[r9,r7]=r8(null,{json:!0,prettify:!0}),ne=tG(""+tQ.currentScript.src,"#"),nt=tG(""+(ne[1]||""),";"),nr=ne[0],nn=nt[1]||tU(nr,!1)?.host,na=e=>!!(nn&&tU(e,!1)?.host?.endsWith(nn)===Y),ni=(...e)=>tL(tO(e),/(^(?=\?))|(^\.(?=\/))/,nr.split("?")[0]),no=ni("?","var"),ns=ni("?","mnt");ni("?","usr");var nl=Symbol(),nu=Symbol(),nc=(e,t,r=Y,n=X)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tT("tail.js: ","90;3"))+t);var a=e?.[nu];a&&(e=e[nl]),null!=e&&console.log(eg(e)?tT(r9(e),"94"):eS(e)?""+e:e),a&&a.forEach(([e,t,r])=>nc(e,t,r,!0)),t&&console.groupEnd()},[nf,nd]=r8(),[nv,np]=[tY,tY],[nh,ng]=tI(),nm=e=>{np===tY&&([nv,np]=r8(e),ng(nv,np))},ny=e=>t=>nb(e,t),nb=(...e)=>{var t=e.shift();console.error(ef(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[nw,nk]=tI(),[nS,nI]=tI(),nA=e=>nT!==(nT=e)&&nk(nT=!1,nO(!0,!0)),nE=e=>nx!==(nx=!!e&&"visible"===document.visibilityState)&&nI(nx,!e,nN(!0,!0));nw(nE);var nT=!0,nx=!1,nN=tv(!1),nO=tv(!1);rs(window,["pagehide","freeze"],()=>nA(!1)),rs(window,["pageshow","resume"],()=>nA(!0)),rs(document,"visibilitychange",()=>(nE(!0),nx&&nA(!0))),nk(nT,nO(!0,!0));var nC=!1,n$=tv(!1),[nj,nM]=tI(),n_=th({callback:()=>nC&&nM(nC=!1,n$(!1)),frequency:2e4,once:!0,paused:!0}),nU=()=>!nC&&(nM(nC=!0,n$(!0)),n_.restart());rs(window,["focus","scroll"],nU),rs(window,"blur",()=>n_.trigger()),rs(document.body,["keydown","pointerdown","pointermove","scroll"],nU),nU();var nF=()=>n$();($=b||(b={}))[$.View=-3]="View",$[$.Tab=-2]="Tab",$[$.Shared=-1]="Shared";var nq=t$(b,!1,"local variable scope"),nP=e=>nq.tryParse(e)??rm(e),nz=e=>nq.format(e)??rm.format(e),nR=e=>!!nq.tryParse(e?.scope),nD=tj({scope:nq},rb),nW=e=>null==e?void 0:ef(e)?e:e.source?nW(e.source):`${nP(e.scope)}\0${e.key}\0${e.targetId??""}`,nB=e=>{var t=e.split("\0");return{scope:+t[0],key:t[1],targetId:t[2]}},nV=0,nJ=void 0,nK=()=>(nJ??tY())+"_"+nG(),nG=()=>(td(!0)-(parseInt(nJ.slice(0,-2),36)||0)).toString(36)+"_"+(++nV).toString(36),nL=e=>crypto.getRandomValues(e),nH=()=>tL("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nL(new Uint8Array(1))[0]&15>>e/4).toString(16)),nX={},nY={id:nJ,heartbeat:td()},nZ={knownTabs:{[nJ]:nY},variables:{}},[nQ,n0]=tI(),[n1,n2]=tI(),n4=tY,n6=e=>nX[nW(e)],n3=(...e)=>n8(e.map(e=>(e.cache=[td(),3e3],nD(e)))),n5=e=>eF(e,e=>e&&[e,nX[nW(e)]]),n8=e=>{var t=eF(e,e=>e&&[nW(e),e]);if(t?.length){var r=n5(e);e7(nX,t);var n=eX(t,e=>e[1].scope>b.Tab);n.length&&(e7(nZ.variables,n),n4({type:"patch",payload:eL(n)})),n2(r,nX,!0)}};nh((e,t)=>{nw(r=>{if(r){var n=t(sessionStorage.getItem(F));sessionStorage.removeItem(F),nJ=n?.[0]??td(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nX=eL(ez(eX(nX,([,e])=>e.scope===b.View),eF(n?.[1],e=>[nW(e),e])))}else sessionStorage.setItem(F,e([nJ,eF(nX,([,e])=>e.scope!==b.View?e:void 0)]))},!0),n4=(t,r)=>{e&&(localStorage.setItem(F,e([nJ,t,r])),localStorage.removeItem(F))},rs(window,"storage",e=>{if(e.key===F){var n=t?.(e.newValue);if(n&&(!n[2]||n[2]===nJ)){var[a,{type:i,payload:o}]=n;if("query"===i)r.active||n4({type:"set",payload:nZ},a);else if("set"===i&&r.active)e7(nZ,o),e7(nX,o.variables),r.trigger();else if("patch"===i){var s=n5(eF(o,1));e7(nZ.variables,o),e7(nX,o),n2(s,nX,!1)}else"tab"===i&&(e7(nZ.knownTabs,a,o),o&&n0("tab",o,!1))}}});var r=th(()=>n0("ready",nZ,!0),-25),n=th({callback(){var e=td()-1e4;eJ(nZ?.knownTabs,([t,r])=>r[0]<e&&tn(nZ.knownTabs,t)),nY.heartbeat=td(),n4({type:"tab",payload:nY})},frequency:5e3,paused:!0}),a=e=>{n4({type:"tab",payload:e?nY:void 0}),e?(r.restart(),n4({type:"query"})):r.toggle(!1),n.toggle(e)};nw(e=>a(e),!0)},!0);var[n9,n7]=tI(),[ae,at]=tI(),ar=((e,{timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?np:nd)(localStorage.getItem(e)),i=0,o=()=>localStorage.setItem(e,(r?nv:nf)([nJ,td()+t]));return async(r,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<td())&&(o(),a()?.[0]===nJ))return t>0&&(i=setInterval(()=>o(),t/2)),await K(r,!0,()=>{clearInterval(i),localStorage.removeItem(e)});var c=tw(),[f]=rs(window,"storage",t=>{t.key!==e||t.newValue||c.resolve()});await tk(tb(s??t),c),f()}null==s&&P(e+" could not be acquired.")}})(U+"rq"),an=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=r=>{var s=eS(t)?t?.(a,r):t;return!1!==s&&(null!=s&&!0!==s&&(a=s),n7(e,a,r,e=>(o=a===L,a=e)),!o&&(i=n?nv(a,!0):JSON.stringify(a)))};if(!r)return await ar(()=>eK(1,async t=>{if(!s(t))return eN();var r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(r.status>=400)return 0===t?eN(P(`Invalid response: ${await r.text()}`)):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tb((1+t)*200));var o=n?new Uint8Array(await r.arrayBuffer()):await r.text(),l=o?.length?(n?np:JSON.parse)?.(o):L;return null!=l&&at(l),eN(l)}));s(0)&&(navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||P("Beacon send failed."))},aa=["scope","key","targetId","version"],ai=[...aa,"created","modified","classification","purposes","tags","readonly","value"],ao=[...aa,"init","purpose","refresh"],as=[...ai,"value","force","patch"],al=new Map,au=(e,t)=>{var r=th(async()=>{var e=eF(al,([e,t])=>({...nB(e),result:[...t]}));e.length&&await u.get(...e)},3e3),n=(e,t)=>t&&eB(t,t=>e5(al,e,()=>new Set).add(t)),a=(e,t)=>{if(e){var r,a=nW(e),i=ta(al,a);if(i?.size){if(e?.purposes===t?.purposes&&e?.classification==t?.classification&&z(e?.value,t?.value))return;eJ(i,i=>{r=!1,i?.(e,t,(e=!0)=>r=e),r&&n(a,i)})}}};nw((e,t)=>r.toggle(e,e&&t>=3e3),!0),n1(e=>eJ(e,([e,t])=>a(e,t)));var i=new Map,o=(e,t)=>e7(i,e,ea(t)?t?void 0:0:t),u={get:(...r)=>rk(async()=>{(!r[0]||ef(r[0]))&&(a=r[0],r=r.slice(1)),t?.validateKey(a);var a,i=[],s=eF(r,(e,t)=>[e,t]),l=[],u=(await an(e,()=>!!(s=eF(s,([e,t])=>{if(e){var r=nW(e);n(r,e.result);var a=n6(r);e.init&&o(r,e.cache);var s=e.purposes;if((s??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.[1]<td())tu(i,[{...a,status:d.Success},t]);else if(!nR(e))return[to(e,ao),t];else if(eb(e.init)){var u={...nD(e),status:d.Created,...e.init};null!=u.value&&(tu(l,c(u)),tu(i,[u,t]))}}else tu(i,[{...e,status:d.Denied,error:"No consent for "+rv.logFormat(s)},t])}})).length&&{variables:{get:eF(s,0)},deviceSessionId:t?.deviceSessionId}))?.variables?.get??[];return tu(i,...eF(u,(e,t)=>e&&[e,s[t][1]])),l.length&&n8(l),i.map(([e])=>e)},eF(r,e=>e?.error)),set:(...r)=>rk(async()=>{(!r[0]||ef(r[0]))&&(n=r[0],r=r.slice(1)),t?.validateKey(n);var n,a=[],i=[],u=eF(r,(e,t)=>{if(e){var r=nW(e),n=n6(r);if(o(r,e.cache),nR(e)){if(null!=e.patch)return P("Local patching is not supported.");var u={value:e.value,classification:s.Anonymous,purposes:l.Necessary,scope:nq(e.scope),key:e.key};return i[t]={status:n?d.Success:d.Created,source:e,current:u},void tu(a,c(u))}return null==e.patch&&e?.version===void 0&&(e.version=n?.version,e.force??=!!e.version),[to(e,as),t]}}),f=u.length?D((await an(e,{variables:{set:u.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result."):[];return a.length&&n8(a),eJ(f,(e,t)=>{var[r,n]=u[t];e.source=r,r.result?.(e),i[n]=e}),i},eF(r,e=>e?.error))},c=(e,t=td())=>({...to(e,ai),cache:[t,t+(ta(i,nW(e))??3e3)]});return ae(({variables:e})=>{if(e){var t=td(),r=ez(eF(e.get,e=>rI(e)),eF(e.set,e=>rI(e)));r?.length&&n8(eB(r,c,t))}}),u},ac=(e,t,r=tX)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?e8(t,{type:e.type+"_patch",patchTargetId:e.clientId}):P("Source event not queued."),s=async(r,n=!0,a)=>{var i;return(!r[0]||ef(r[0]))&&(i=r[0],r=r.slice(1)),nc({[nu]:eF(r=r.map(e=>(t?.validateKey(i??e.key),e8(e,{metadata:{posted:!0}}),e8(rh(tl(e),!0),{timestamp:e.timestamp-td()}))),e=>[e,e.type,X])},"Posting "+tA([tE("new event",[eY(r,e=>!rg(e))||void 0]),tE("event patch",[eY(r,e=>rg(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),an(e,{events:r,variables:a,deviceSessionId:t?.deviceSessionId},{beacon:n})},l=async(e,{flush:r=!1,async:a=!0,variables:i}={})=>{if((e=eF(eh(e),e=>e8(t.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eJ(e,e=>nc(e,e.type)),!a)return s(e,!1,i);if(!r){e.length&&tu(n,...e);return}n.length&&tc(e,...n.splice(0)),e.length&&await s(e,!0,i)};return r>0&&th(()=>l([],{flush:!0}),r),nS((e,t,r)=>{if(!e&&(n.length||t||r>1500)){var o=eF(i,([e,t])=>{var[r,n]=t();return n&&(i.delete(e),a.delete(e)),r});(n.length||o.length)&&l(ez(n.splice(0),o),{flush:!0})}}),{post:l,postPatch:(e,t,r)=>l(o(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var s=!1,u=()=>{s=!0};return a.set(e,tl(e)),i.set(e,()=>{if(n?.isConnected===!1)u();else{var r=a.get(e),[i,l]=tf(t(r,u),r)??[];if(i&&!z(l,r))return a.set(e,tl(l)),[o(e,i),s]}return[void 0,s]}),r&&l(e),u}}},af=Symbol(),ad=e=>{var t=new IntersectionObserver(e=>eJ(e,e=>e.target[af]?.(e))),r=new Set;th({callback:()=>eJ(r,e=>e()),frequency:250,raf:!0});var n=(e,t,r=0)=>e<r?r:e>t?t:e;return(a,i)=>{if(i&&(o=eX(i?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==Y))&&eY(o)){var o,s,l,u,c=X,f=X,d=0,v=0,p=[tH(),tH()],h=aC(!1),g=tv(!1,nF),m=()=>{var t=a.getBoundingClientRect(),r=window.innerWidth,i=window.innerHeight,m=[n(t.top,i),n(t.right,r),n(t.bottom,i),n(t.left,r)],y=m[2]-m[0],b=m[1]-m[3],w=y/t.height||0,k=b/t.width||0,S=c?[.25,.33]:[.33,.75],I=(y>S[0]*i||w>S[0])&&(b>S[0]*r||k>S[0]);if(f!==I&&g(f=I,!0),c!==(c=f&&g()>=rV.impressionThreshold-250)){if(++d,h(c),!l){var A,E=a.innerText;E?.trim()?.length&&(A={characters:E.match(/\S/gu)?.length,words:E.match(/\b\w+\b/gu)?.length,sentences:E.match(/\w.*?[.!?]+(\s|$)/gu)?.length}).words&&(A.readingTime=6e4*(A.words/238)),tu(e,l=eX(eF(o,e=>(e.track?.impressions||rW(a,"impressions",Y,e=>e.track?.impressions))&&G({type:"impression",pos:ra(a),viewport:ru(),timeOffset:aj(),impressions:d,text:A,...aV(a,Y)})||null)))}l?.length&&(u=eF(l,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:h(),impressions:d,regions:s&&{top:s[0][0],middle:s[1][0],bottom:s[2][0]},seen:v}))))}var T=t.left<0?-t.left:0,x=t.top<0?-t.top:0,N=t.width*t.height;if(c&&(v=p[0].push(x,x+y)*p[1].push(T,T+b)/N),t.height>1.25*i||s){var O=x/t.height,C=(x+y)/t.height;eJ(s??=eF(3,()=>[{seen:!1,duration:0,impressions:0},tv(!1,nF),!1,!1]),(e,t)=>{var r=c&&(0===t?O<=.25:1===t?O<=.75&&C>=.25:C>=.75);e[2]!==r&&e[1](e[2]=r),e[3]!==e[2]&&(e[3]=e[2]&&e[1]()>rV.impressionThreshold-250)&&(e[0].seen=!0,++e[0].impressions),e[3]&&(e[0].duration+=e[1](!0,!0))})}};a[af]=({isIntersecting:e})=>{e7(r,m,e),e||(eJ(u,e=>e()),m())},t.observe(a)}}},av=()=>{n1((e,t,r)=>{var n=ez(rw(eF(e,1))?.map(e=>[e,`${e.key} (${nz(e.scope)}, ${e.scope<0?"client-side memory only":rv.format(e.purposes)})`,X]),[[{[nu]:rw(eF(t,1))?.map(e=>[e,`${e.key} (${nz(e.scope)}, ${e.scope<0?"client-side memory only":rv.format(e.purposes)})`,X])},"All variables",Y]]);nc({[nu]:n},tT(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eY(t)} in total).`,"2;3"))})},ap=()=>{var e=tZ?.screen;if(!e)return{};var{width:t,height:r,orientation:n}=e,a=t<r,i=n?.angle??tZ.orientation??0;return(-90===i||90===i)&&([t,r]=[r,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:tZ.devicePixelRatio,width:t,height:r,landscape:a}}},ah=e=>tu(e,G({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:k?.clientId,languages:eF(navigator.languages,(e,t,r=e.split("-"))=>G({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...ap()})),ag=(e,t="A"===re(e)&&t3(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),am=(e,t=re(e),r=rW(e,"button"))=>r!==X&&(R(t,"A","BUTTON")||"INPUT"===t&&R(t8(e,"type"),"button","submit")||r===Y),ay=(e,t=!1)=>({tagName:e.tagName,text:tN(t3(e,"title")?.trim()||t3(e,"alt")?.trim()||e.innerText?.trim(),100),href:e.href?.toString(),rect:t?ro(e):void 0}),ab=(e,t,r=!1)=>{var n;return t4(e??t,e=>"IMG"===re(e)||e===t?(n={element:ay(e,r)},X):Y),n},aw=e=>{if(w)return w;ef(e)&&([t,e]=nd(e),e=r8(t)[1](e)),e7(rV,e),nm(ta(rV,"encryptionKey"));var t,r=ta(rV,"key"),n=tZ[rV.name]??[];if(!ev(n)){P(`The global variable for the tracker "${rV.name}" is used for something else than an array of queued commands.`);return}var a=[],i=[],o=(e,...t)=>{var r=Y;i=eX(i,n=>W(()=>(n[e]?.(...t,{tracker:w,unsubscribe:()=>r=X}),r),ny(n)))},s=[],l={applyEventExtensions(e){e.clientId??=nK(),e.timestamp??=td(),v=Y;var t=X;return eF(a,([,r])=>{(t||r.decorate?.(e)===X)&&(t=Y)}),t?void 0:e},validateKey:(e,t=!0)=>!r&&!e||e===r||!!t&&P(`'${e}' is not a valid key.`)},u=au(no,l),c=ac(no,l),f=null,d=0,v=X,p=X;return Object.defineProperty(tZ,rV.name,{value:w=Object.freeze({id:"tracker_"+nK(),events:c,variables:u,push(...e){if(e.length){if(e.length>1&&(!e[0]||ef(e[0]))&&(t=e[0],e=e.slice(1)),ef(e[0])){var t,r=e[0];e=r.match(/^[{[]/)?JSON.parse(r):nd(r)}var n=X;if((e=eX(eP(e,e=>ef(e)?nd(e):e),e=>{if(!e)return X;if(aX(e))rV.tags=e7({},rV.tags,e.tagAttributes);else if(aY(e))return rV.disabled=e.disable,X;else if(a0(e))return n=Y,X;else if(a5(e))return e(w),X;return p||a2(e)||aQ(e)?Y:(s.push(e),X)})).length||n){var h=e6(e,e=>aQ(e)?-100:a2(e)?-50:a3(e)?-10:rx(e)?90:0);if(!(f&&f.splice(v?d+1:f.length,0,...h))){for(d=0,f=h;d<f.length;d++){var g=f[d];g&&(l.validateKey(t??g.key),W(()=>{var e,t=f[d];if(o("command",t),v=X,rx(t))c.post(t);else if(a1(t))u.get(...eh(t.get));else if(a3(t))u.set(...eh(t.set));else if(a2(t))tu(i,t.listener);else if(aQ(t))(e=W(()=>t.extension.setup(w),e=>nb(t.extension.id,e)))&&(tu(a,[t.priority??100,e,t.extension]),e6(a,([e])=>e));else if(a5(t))t(w);else{var r=X;for(var[,e]of a)if(r=e.processCommand?.(t)??X)break;r||nb("invalid-command",t,"Loaded extensions:",a.map(e=>e[2].id))}},e=>nb(w,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}},__isTracker:Y}),configurable:!1,writable:!1}),av(),nQ(async(e,t,r,a)=>{if("ready"===e){var i=rT((await u.get({scope:"session",key:M,refresh:!0},{scope:"session",key:_,refresh:!0,cache:H}))[0]).value;l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(ah(w),i.hasUserAgent=!0),p=!0,s.length&&tu(w,s),a(),tu(w,...eF(aK,e=>({extension:e})),...n,{set:{scope:"view",key:"loaded",value:!0}})}},!0),w},ak=()=>k?.clientId,aS={scope:"shared",key:"referrer"},aI=(e,t)=>{w.variables.set({...aS,value:[ak(),e]}),t&&w.variables.get({scope:aS.scope,key:aS.key,result:(r,n,a)=>r?.value?a():n?.value?.[1]===e&&t()})},aA=tv(),aE=tv(),aT=1,ax=()=>aE(),[aN,aO]=tI(),aC=e=>{var t=tv(e,aA),r=tv(e,aE),n=tv(e,nF),a=tv(e,()=>aT);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),activeTime:n(e,i),activations:a(e,i)})},a$=aC(),aj=()=>a$(),[aM,a_]=tI(),aU=(e,t)=>(t&&eJ(aq,t=>e(t,()=>!1)),aM(e)),aF=new WeakSet,aq=document.getElementsByTagName("iframe"),aP=e=>(null==e||(e===Y||""===e)&&(e="add"),ef(e)&&R(e,"add","remove","update","clear")?{action:e}:eg(e)?e:void 0);function az(e){if(e){if(null!=e.units&&R(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aR=e=>rB(e,void 0,e=>eF(eh(e5(rj,e)?.tags))),aD=e=>e?.component||e?.content,aW=e=>rB(e,t=>t!==e&&!!aD(e5(rj,t)),e=>(I=e5(rj,e),(I=e5(rj,e))&&eP(ez(I.component,I.content,I),"tags"))),aB=(e,t)=>t?e:{...e,rect:void 0,content:(A=e.content)&&eF(A,e=>({...e,rect:void 0}))},aV=(e,t=X,r)=>{var n,a,i,o=[],s=[],l=0;return t4(e,e=>{var a=e5(rj,e);if(a){if(aD(a)){var i=eX(eh(a.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==Y||e.track?.promote));n=(r??e4(i,e=>e.track?.region))&&ro(e)||void 0;var u=aW(e);a.content&&tc(o,...eF(a.content,e=>({...e,rect:n,...u}))),i?.length&&(tc(s,...eF(i,e=>(l=eZ(l,e.track?.secondary?1:2),aB({...e,content:o,rect:n,...u},!!n)))),o=[])}var c=a.area||rD(e,"area");c&&tc(s,...eF(eh(c)))}}),o.length&&tu(s,aB({id:"",rect:n,content:o})),eJ(s,e=>{ef(e)?tu(a??=[],e):(e.area??=tO(a,"/"),tc(i??=[],e))}),i||a?{components:i,area:tO(a,"/")}:void 0},aJ=Symbol();j={necessary:1,preferences:2,statistics:4,marketing:8},window.tail.push({consent:{externalSource:{key:"Cookiebot",poll(){var e=tQ.cookie.match(/CookieConsent=([^;]*)/)?.[1];if(e){var t=1;return e?.replace(/([a-z]+):(true|false)/g,(e,r,n)=>("true"===n&&(t|=j[r]??0),"")),{level:t>1?1:0,purposes:t}}}}}});var aK=[{id:"context",setup(e){th(()=>eJ(aq,e=>tt(aF,e)&&a_(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result:(r,n,a)=>(null==k||!r?.value||k?.definition?t=r?.value:(k.definition=r.value,k.metadata?.posted&&e.events.postPatch(k,{definition:t})),a())});var t,r=n6({scope:"tab",key:"viewIndex"})?.value??0,n=n6({scope:"tab",key:"tabIndex"})?.value;null==n&&n3({scope:"tab",key:"tabIndex",value:n=n6({scope:"shared",key:"tabIndex"})?.value??n6({scope:"session",key:M})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:n+1});var a=null,i=(i=X)=>{if(!rn(""+a,a=location.href)||i){var{source:o,scheme:s,host:l}=tU(location.href+"",!0);k={type:"view",timestamp:td(),clientId:nK(),tab:nJ,href:o,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:n+1,tabViewNumber:r+1,viewport:ru(),duration:a$(void 0,!0)},0===n&&(k.firstTab=Y),0===n&&0===r&&(k.landingPage=Y),n3({scope:"tab",key:"viewIndex",value:++r});var u=tF(location.href);if(eF(["source","medium","campaign","term","content"],(e,t)=>(k.utm??={})[e]=eh(u[`utm_${e}`])?.[0]),!(k.navigationType=S)&&performance&&eF(performance.getEntriesByType("navigation"),e=>{k.redirects=e.redirectCount,k.navigationType=tL(e.type,/\_/g,"-")}),S=void 0,"navigate"===(k.navigationType??="navigate")){var c=n6(aS)?.value;c&&na(document.referrer)&&(k.view=c?.[0],k.relatedEventId=c?.[1],e.variables.set({...aS,value:void 0}))}var c=document.referrer||null;c&&!na(c)&&(k.externalReferrer={href:c,domain:rl(c)}),k.definition=t,t=void 0,e.events.post(k),e.events.registerEventPatchSource(k,()=>({duration:aj()})),aO(k)}};return nS(e=>{e?(aE(Y),++aT):aE(X)}),rs(window,"popstate",()=>(S="back-forward",i())),eF(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),S="navigate",i()}}),i(),{processCommand:t=>aH(t)&&(tu(e,t.username?{type:"login",username:t.username}:{type:"logout"}),Y),decorate(e){!k||rN(e)||rg(e)||(e.view=k.clientId)}}}},{id:"components",setup(e){var t=ad(e),r=e=>null==e?void 0:{...e,component:eh(e.component),content:eh(e.content),tags:eh(e.tags)},n=({boundary:e,...n})=>{te(rj,e,e=>r("add"in n?{...e,component:ez(e?.component,n.component),content:ez(e?.content,n.content),area:n?.area??e?.area,tags:ez(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,e5(rj,e))};return{decorate(e){eJ(e.components,e=>ta(e,"track"))},processCommand:e=>aZ(e)?(n(e),Y):a6(e)?(eF(((e,t)=>{if(!t)return[];var r=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e5(n,a))for(var i=[];null!=t3(a,e);){tt(n,a);var o=tG(t3(a,e),"|");t3(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ed(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&t[u]&&(l=t[u]),tu(i,l)}}tu(r,...eF(i,e=>({add:Y,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),r})(e.scan.attribute,e.scan.components),n),Y):X}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{rs(r,["click","contextmenu","auxclick"],n=>{var a,i,o,s,l,u=X;if(t4(n.target,e=>{am(e)&&(o??=e),u=u||"NAV"===re(e);var t=rM(e),r=t?.component;!n.button&&r?.length&&!l&&(eJ(e.querySelectorAll("a,button"),t=>am(t)&&((l??=[]).length>3?eN():l.push({...ay(t,!0),component:t4(t,(e,t,r,n=rM(e)?.component)=>n&&t(n[0]),t=>t===e)}))),l&&(s??=e)),a??=rW(e,"clicks",Y,e=>e.track?.clicks)??(r&&e4(r,e=>e.track?.clicks!==X)),i??=rW(e,"region",Y,e=>e.track?.region)??(r&&e4(r,e=>e.track?.region))}),s??=o){var c,f=l&&!o&&a,d=aV(s,!1,f),v=aR(s);a??=!u;var p={...(i??=Y)?{pos:ra(o,n),viewport:ru()}:null,...ab(n.target,s),...d,timeOffset:aj(),...v};if(!o){f&&te(t,s,r=>{var a=ri(s,n);if(r)tu(r,a);else{var i=G({type:"component_click_intent",...p,clicks:r=[a],clickables:l});e.events.registerEventPatchSource(i,()=>({clicks:e5(t,s)}),!0,s)}return r});return}if(ag(o)){var h=o.hostname!==location.hostname,{host:g,scheme:m,source:y}=tU(o.href,!1);if(o.host===location.host&&o.pathname===location.pathname&&o.search===location.search){if("#"===o.hash)return;o.hash!==location.hash&&0===n.button&&tu(e,G({type:"anchor_navigation",anchor:o.hash,...p}));return}var b=G({clientId:nK(),type:"navigation",href:h?o.href:y,external:h,domain:{host:g,scheme:m},self:Y,anchor:o.hash,...p});if("contextmenu"===n.type){var w=o.href,k=na(w);if(k){aI(b.clientId,()=>tu(e,b));return}var S=(""+Math.random()).replace(".","").substring(1,8);if(!k){if(!rV.captureContextMenu)return;o.href=ns+"="+S+encodeURIComponent(w),rs(window,"storage",(t,r)=>t.key===q&&(t.newValue&&JSON.parse(t.newValue)?.requestId===S&&tu(e,b),r())),rs(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),o.href=w})}return}n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||t3(o,"target")!==window.name?(aI(b.clientId),b.self=X,tu(e,b)):rn(location.href,o.href)||(b.exit=b.external,aI(b.clientId)));return}var I=(t4(n.target,(e,t)=>!!(c??=aP(rM(e)?.cart??rD(e,"cart")))&&!c.item&&(c.item=e2(rM(e)?.content))&&t(c)),az(c));(I||a)&&tu(e,I?G({type:"cart_updated",...p,...I}):G({type:"component_click",...p}))}})};r(document),aU(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=rr(Y);aN(()=>ty(()=>(t={},r=rr(Y)),250)),rs(window,"scroll",()=>{var n=rr(),a=rt();if(n.y>=r.y){var i=[];!t.fold&&n.y>=r.y+200&&(t.fold=Y,tu(i,"fold")),!t["page-middle"]&&a.y>=.5&&(t["page-middle"]=Y,tu(i,"page-middle")),!t["page-end"]&&a.y>=.99&&(t["page-end"]=Y,tu(i,"page-end"));var o=eF(i,e=>G({type:"scroll",scrollType:e,offset:a}));o.length&&tu(e,o)}})}},{id:"cart",setup:e=>({processCommand(t){if(aL(t)){var r=t.cart;return"clear"===r?tu(e,{type:"cart_updated",action:"clear"}):(r=az(r))&&tu(e,{...r,type:"cart_updated"}),Y}return a4(t)?(tu(e,{type:"order",...t.order}),Y):X}})},{id:"forms",setup(e){var t=new Map,r=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=t5(i,r_("ref"))||"track_ref",l=()=>i.isConnected&&ro(i).width,u=e5(t,i,()=>{var t,r=new Map,n={type:"form",name:t5(i,r_("form-name"))||t3(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:aj()}));var s=()=>{o(),t[3]>=2&&(n.completed=3===t[3]||!l()),e.events.postPatch(n,{...a,totalTime:td(Y)-t[4]}),t[3]=1},u=tp();return rs(i,"submit",()=>{a=aV(i),t[3]=3,u(()=>{i.isConnected&&ro(i).width>0?(t[3]=2,u()):s()},750)}),t=[n,r,i,0,td(Y),1]});return e5(u[1],n)||eF(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||rW(e,"ref"))&&(e.value||(e.value=nH()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:tL(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:e.type??"unknown",[aJ]:r(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{if(i){var[e,t,n,a]=i,o=-(s-(s=ax())),u=-(l-(l=td(Y))),c=t[aJ];(t[aJ]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=Y,a[3]=2,eJ(e.fields,([e,r])=>r.lastField=e===t.name)),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,e.totalTime+=u,i=null}},s=0,l=0,u=e=>e&&rs(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(i=r,"focusin"===e.type?(l=td(Y),s=ax()):o()));u(document),aU(e=>e.contentDocument&&u(e.contentDocument),!0)}},{id:"consent",setup(e){var t=async t=>await e.variables.get({scope:"session",key:_,result:t}).value,r=async r=>{if(r){var n=await t();if(!n||rf(n,r=rd(r)))return[!1,n];var a={level:rc.lookup(r.classification),purposes:rv.lookup(r.purposes)};return await e.events.post(G({type:"consent",consent:a}),{async:!1,variables:{get:[{scope:"session",key:_}]}}),[!0,a]}},n={};return{processCommand(e){if(a8(e)){var a=e.consent.get;a&&t(a);var i=rd(e.consent.set);i&&(async()=>i.callback?.(...await r(i)))();var o=e.consent.externalSource;if(o){var s,l=o.key,u=n[l]??=th({frequency:o.pollFrequency??1e3}),c=async()=>{if(tQ.hasFocus()){var e=o.poll();if(e){var t=rd({...s,...e});if(t&&!rf(s,t)){var[n,a]=await r(t);n&&nc(a,"Consent was updated from "+l),s=t}}}};u.restart(o.pollFrequency,c).trigger()}return Y}return X}}}}],aG=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&t?.[e]!==void 0),aL=aG("cart"),aH=aG("username"),aX=aG("tagAttributes"),aY=aG("disable"),aZ=aG("boundary"),aQ=aG("extension"),a0=aG(Y,"flush"),a1=aG("get"),a2=aG("listener"),a4=aG("order"),a6=aG("scan"),a3=aG("set"),a5=e=>"function"==typeof e,a8=aG("consent");Object.defineProperty(tZ,".tail.js.init",{writable:!1,configurable:!1,value(e){e(aw)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
