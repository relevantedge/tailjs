(()=>{var e,t,r,n,i,a,o,l,u,s,d,v,c,f,p,h,g,m,b,w,k,S,x,T,I,F=e=>{for(var t=e;t;)t=Object.getPrototypeOf(e=t);return e},j=(e,t)=>{if(!e||F(e)===t)return e;for(var r of e.document.getElementsByTagName("iframe"))try{if(e=j(r.contentWindow,t))return e}catch{}},U=e=>null==e?e:"undefined"!=typeof window?j(window,F(e)):globalThis,M=!1,q=Symbol(),z=e=>(M=!0,e),R=Symbol(),P=Symbol(),D=Symbol.iterator,B=(e,t,r)=>{if(null==e||e[R])throw t;e=U(e);if(!e)throw t;var o,i=()=>(e,t,r,n,i)=>{var a,l,o=0;for(l of e)if((a=t?t(l,o++,n,i):l)!==q){if(a===z)break;if(n=a,r&&r.push(a),M){M=!1;break}}return r||n},a=(e.Array.prototype[R]=(e,t,r,n,i)=>{for(var o,l=0,u=e.length;l<u;l++)if(o=e[l],(o=t?t(o,l,n,i):o)!==q){if(o===z)break;if(n=o,r&&r.push(o),M){M=!1;break}}return r||n},i());for(o of(e.Object.prototype[R]=(e,t,r,n,o)=>{if(e[D])return(e.constructor===Object?a:Object.getPrototypeOf(e)[R]=i())(e,t,r,n,o);var u,d,s=0;for(d in e)if(u=[d,e[d]],(u=t?t(u,s++,n,o):u)!==q){if(u===z)break;if(n=u,r&&r.push(u),M){M=!1;break}}return r||n},e.Object.prototype[P]=function(){var t,e;return this[D]||this[eV]?this.constructor===Object?null!=(e=this[eV]())?e:this[D]():((e=Object.getPrototypeOf(this))[P]=null!=(t=e[eV])?t:e[D],this[P]()):function*(e){for(var t in e)yield[t,e[t]]}(this)},[e.Map.prototype,e.WeakMap.prototype,e.Set.prototype,e.WeakSet.prototype,Object.getPrototypeOf(function*(){})]))o[R]=i(),o[P]=o[D];return e.Number.prototype[R]=(e,t,r,n,i)=>a(W(e),t,r,n,i),e.Number.prototype[P]=W,e.Function.prototype[R]=(e,t,r,n,i)=>a(J(e),t,r,n,i),e.Function.prototype[P]=J,r()};function*W(e=this){for(var t=0;t<e;t++)yield t}function*J(e=this){for(var t=void 0;void 0!==(t=e(t));)yield t}var L=(e,t,r,n)=>{try{var i;return e?null!=(i=e[R](e,t,void 0,r,n))?i:r:null==e?e:void 0}catch(i){return B(e,i,()=>L(e,t,r,n))}},V=(e,t,r=[],n,i=e)=>{try{return e||0===e||""===e?e[R](e,t,r,n,i):null==e?e:void 0}catch(a){return B(e,a,()=>V(e,t,r,n,i))}},H=(e,t=!0,r=!1)=>V(e,!0===t?e=>null!=e?e:q:t?t.has?e=>null==e||t.has(e)===r?q:e:(n,i,a)=>!t(n,i,a,e)===r?n:q:e=>e||q),K=(e,t=e)=>!t&&e0(e)?e[e.length-1]:L(e,(r,n,i)=>!t||t(r,n,i,e)?i:r),G=(e,t)=>{var r=0;return L(e,t?(n,i,a)=>t(n,i,a,e)&&++r:()=>++r),r},X=(e,t,r=-1,n=[],i,a=e)=>V(e,(e,i,a)=>null!=(t?e=t(e,i,a):e)&&e[Symbol.iterator]&&"string"!=typeof e&&r?(X(e,void 0,r-1,n,e),q):e,n,i,a),Z=(e,t,r)=>{var n,i,a,o;return null!=t&&"function"!=typeof t&&([t,r]=[void 0,t]),L(e,!1!==r?(a=new Map,(e,r,n)=>{void 0!==(o=t?t(e,r,n):e)[0]&&ef(a,o[0],()=>[]).push(o[1])}):(a={},(e,r,l)=>(o=t?t(e,r,l):e)&&void 0!==o[0]&&(null!=(r=(n=a)[i=o[0]])?r:n[i]=[]).push(o[1]))),a},Y=(e,t,r,n)=>{try{return Q(e,t,void 0,r,n)}catch(i){return B(e,i,()=>Y(e,t,r,n))}},Q=async(e,t,r,n,i)=>{if(null==(e=await e))return e;if(!1!==e){for(var l=e[P](),u=0;(a=l.next())&&!(a=e4(a)?await a:a).done;){var a=a.value;if(e4(a)&&(a=await a),(a=await(t?t(a,u++,n,i):a))!==q){if(a===z)break;if(n=a,null!=r&&r.push(a),M){M=!1;break}}}return r||n}},ee=e=>null==e||e instanceof Set?e:new Set(e[D]&&"string"!=typeof e?e:[e]),er=e=>null==e||e0(e)?e:e[D]&&"string"!=typeof e?[...e]:[e],en=(e,t)=>!0===L(e,(r,n,i)=>(t?t(r,n,i,e):r)?M=!0:r),ei=(e,...t)=>{var r,n;for(n of e=!t.length&&e8(e)?e:[e,...t])if(null!=n){if(e8(n)){(null!=r?r:r=[]).push(...n);continue}(null!=r?r:r=[]).push(n)}return r},ea=(e,t,r)=>(r?-1:1)*(e===t?0:"string"==typeof e?"string"==typeof t?e.localeCompare(t):1:"string"==typeof t?-1:null==e?null==t?0:-1:null==t?1:e-t),eo=(e,t,r)=>er(e).sort("function"==typeof t?(e,n)=>ea(t(e),t(n),r):e0(t)?t.length?(e,n)=>{for(var i=0,a=0;a<t.length&&!i;a++)i=ea(t[a](e),t[a](n),r);return i}:(e,t)=>ea(e,t,r):(e,r)=>ea(e,r,t)),el=(e,t,r,n=!1)=>{var i,a;return L(e,n?(e,n,o)=>(void 0!==(i=t?t(e,n,o):e)&&o!==(o=r(o,i))&&(a=e),o):(e,n,o)=>void 0!==(i=t?t(e,n,o):e)?a=r(o,i):o),a},eu=(e,t,r)=>!t&&e0(e)?Math.max(...e):el(e,t,(e,t)=>null==e||e<t?t:e,r),es=Symbol(),ed=Symbol(),ev=Symbol(),ec=(e,t,r)=>{if(null==e||e[ed])throw t;var i,e=U(e);if(!e||e.Object.prototype[es])throw t;for({prototype:i}of[e.Map,e.WeakMap])i[es]=function(e,t){return void 0===t?this.delete(e):this.get(e)!==t&&!!this.set(e,t)},i[ed]=i.get;for({prototype:i}of[e.Set,e.WeakSet])i[es]=function(e,t,r=!1){return t||r&&void 0===t?!this.has(e)&&!!this.add(e):this.delete(e)},i[ed]=i.has,i[ev]=function(e){for(var t of e)void 0!==t&&this.add(t);return this};for({prototype:i}of(e.Array.prototype[ev]=function(e){return this.push(...e),this},[e.Object,e.Array]))i[es]=function(e,t){return void 0===t?void 0!==this[e]&&(delete this[e],!0):(this[e]=t)!==t},i[ed]=function(e){return this[e]};return r()},ef=(e,t,r)=>{try{if(null==e)return e;var n=e[ed](t);if(void 0===n&&void 0!==(n="function"==typeof r?r():r)){if(null!=n&&n.then)return n.then(r=>void 0===r?r:e[es](t,r));e[es](t,n)}return n}catch(n){return ec(e,n,()=>ef(e,t,r))}},ep=(e,t,r)=>{try{return!0===(null==e?void 0:e[es](t,r,!0))}catch(n){return ec(e,n,()=>ep(e,t,r))}},eh=(e,t,r)=>{try{return e[es](t,r),r}catch(n){return ec(e,n,()=>eh(e,t,r))}},eg=(e,t)=>em(e,t,void 0),em=(e,t,r)=>{try{var n=e[ed](t);return e[es](t,r),n}catch(n){return ec(e,n,()=>em(e,t,r))}},ey=(e,t,r)=>{r=r(ef(e,t));return"function"==typeof(null==r?void 0:r.then)?r.then(r=>eh(e,t,r)):eh(e,t,r)},eb=(e,t=-1)=>{var r=null==e?void 0:e.constructor;if(r!==Object&&r!==Array)return e;var i,n=r();for(i in e){var a=e[i];n[i]=t&&((null==a?void 0:a.constructor)===Object||e0(a))?eb(a,t-1):a}return n},ew=(e,...t)=>{try{return null==e?e:e[ev](t)}catch(r){return ec(e,r,()=>ew(e,...t))}},ek=(e,t)=>{var r={};return L(e,t?(e,n,i)=>(e=t(e,n,i))&&("symbol"!=typeof e||e!==q&&e!==z)?r[e[0]]=e[1]:e:e=>e&&("symbol"!=typeof e||e!==q&&e!==z)?r[e[0]]=e[1]:e),r},eS=(e,...t)=>{try{return(null==e?void 0:e.constructor)===Object?L(t,t=>L(t,t=>t&&(e[t[0]]=t[1]))):L(t,t=>L(t,t=>t&&e[es](t[0],t[1]))),e}catch(r){return ec(e,r,()=>eS(e,...t))}},ex=(e,t,r={})=>{if(null!=e){var o,{deep:n=!0,overwrite:i=!0,nulls:a=!1}=r;for(o of void 0===t?[]:null!=t&&t[D]&&"string"!=typeof t?t:[t])L(o,t=>{var l,u;t&&([t,l]=t,u=e[t],(a?null==u:void 0===u)?e[t]=l:n&&(null==l?void 0:l.constructor)===Object&&(null==u?void 0:u.constructor)===Object?ex(u,l,r):i&&(e[t]=l))})}return e},eT=(e,t)=>null==e?e:ek(t,t=>void 0!==e[t]||t in e?[t,e[t]]:q),eI=e=>"function"==typeof e?e():e,eA=(e,t)=>{var r,i,a;if(e)return e5(t)?(a={},e5(e)&&(L(e,([e,o])=>{if(!eO(o,t[e],-1)){if(e5(r=o)){if(!(o=eA(o,t[e])))return;[o,r]=o}else eZ(o)&&eZ(void 0)&&(o=(r=o)-void 0);a[e]=o,(null!=i?i:i=eb(t))[e]=r}}),i)?[a,i]:void 0):[e,e]},eE=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return Object.assign(r,{push(n,i){for(var a=[n,i],o=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,l=0;l<r.length;l++){var u,s,d=r[l];if(e(a[1],d[0])<0)return o(r.splice(l,0,a));if(e(a[0],d[1])<=0){if(e(a[0],d[0])<0&&(u=d[0]=a[0]),0<e(a[1],d[1])&&(u=d[1]=a[1]),!((null==(s=r[l+1])?void 0:s[0])<d[1]))return o(null!=u);u=a=r.splice(l--,1)[0]}}return o(a&&(r[r.length]=a))},width:0})};function eN(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var e$=(e,t=e=>Error(e))=>{throw eY(e=eI(e))?t(e):e},eO=(e,t,r=-1)=>{if(e===t||null==(null!=e?e:t))return!0;if(!e0(e)&&!e5(e)||!e0(t)&&!e5(t)||e.length!==t.length)return!1;var i,n=0;for(i in e){if(e[i]!==t[i]&&!eO(e[i],t[i],r-1))return!1;++n}return n===Object.keys(t).length},eC=(e,t,...r)=>e===t||0<r.length&&r.some(t=>eC(e,t)),eF=(e,t=!0,r)=>{try{return e()}catch(e){return e6(t)?e1(e=t(e))?e$(e):e:eK(t)?console.error(t?e$(e):e):t}finally{null!=r&&r()}};class ej extends Promise{get initialized(){return null!=this._result}then(e,t){var r;return(null!=(r=this._result)?r:this._result=this._action()).then(e,t)}catch(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).catch(e)}finally(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).finally(e)}constructor(e){super(()=>{}),eN(this,"_action",void 0),eN(this,"_result",void 0),this._action=e}}var eU=e=>new ej(async()=>eI(e)),eM=async(e,t=!0,r)=>{try{return await eI(e)}catch(e){if(!eK(t))return await t(e);if(t)throw e;console.error(e)}finally{await(null==r?void 0:r())}},eq=e=>e,ez=e=>e===eB,eR=void 0,eP=Number.MAX_SAFE_INTEGER,eD=!1,eB=!0,eW=()=>{},eJ=e=>e,eL=Symbol.iterator,eV=Symbol.asyncIterator,eH=(e,t)=>(r,n=!0)=>e(r)||t&&n&&null!=r&&null!=(r=t(r))?r:eR,eK=e=>"boolean"==typeof e,eG=eH(eK,e=>0!=e&&(1==e||"false"!==e&&("true"===e||eR))),eX=e=>e!==eD,eZ=e=>"number"==typeof e,eY=e=>"string"==typeof e,eQ=eH(eY,e=>null==e?void 0:e.toString()),e0=Array.isArray,e1=e=>e instanceof Error,e2=e=>e&&"object"==typeof e,e5=e=>(null==e?void 0:e.constructor)===Object,e3=e=>"symbol"==typeof e,e6=e=>"function"==typeof e,e4=e=>!(null==e||!e.then),e8=(e,t=!1)=>!(null==e||!e[eL]||"string"==typeof e&&!t),e9=(e,t)=>null==e?eR:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,e7=(e,t,r)=>e[0]===t&&e[e.length-1]===r,te=e=>eY(e)&&(e7(e,"{","}")||e7(e,"[","]")),tt="undefined"!=typeof performance?(e=eB)=>e?Math.trunc(tt(eD)):performance.timeOrigin+performance.now():Date.now,tr=(e=!0,t=()=>tt())=>{var r,n=+e*t(),i=0;return(a=e,o)=>(r=e?i+=-n+(n=t()):i,o&&(i=0),(e=a)&&(n=t()),r)},ti=(e,t=0)=>{var e=e6(e)?{frequency:t,callback:e}:e,{queue:i=!0,paused:a=!1,trigger:o=!1,once:l=!1,callback:u=()=>{},raf:s}=e,d=(t=null!=(e=e.frequency)?e:0,0),v=td(!0).resolve(),c=tr(!a),f=c(),p=async e=>{if(!d||!i&&v.pending&&!0!==e)return!1;if((y.busy=!0)!==e)for(;v.pending;)await v;return e||v.reset(),(!1===await eM(()=>u(c(),-f+(f=c())),!1,()=>!e&&v.resolve())||t<=0||l)&&m(!1),!(y.busy=!1)},h=()=>d=setTimeout(()=>s?requestAnimationFrame(g):g(),t<0?-t:t),g=()=>{y.active&&p(),y.active&&h()},m=(e,t=!e)=>(c(e,t),clearTimeout(d),y.active=!!(d=e?h():0),y),y={active:!1,busy:!1,restart:(e,r)=>(t=null!=e?e:t,u=null!=r?r:u,m(!0,!0)),toggle:(e,t)=>e!==y.active?e?t?(m(!0),y.trigger(),y):m(!0):m(!1):y,trigger:async e=>await p(e)&&(m(y.active),!0)};return y.toggle(!a,o)};function ta(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}class to{get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tl,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}constructor(){ta(this,"_promise",void 0),this.reset()}}class tl{then(e,t){return this._promise.then(e,t)}constructor(){var e;ta(this,"_promise",void 0),ta(this,"resolve",void 0),ta(this,"reject",void 0),ta(this,"value",void 0),ta(this,"error",void 0),ta(this,"pending",!0),this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(this.pending)return this.pending=!1,this[t?"error":"value"]=r===eR||r,e(r),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}}var ts=(e,t)=>null==e||isFinite(e)?!e||e<=0?eI(t):new Promise(r=>setTimeout(async()=>r(await eI(t)),e)):e$(`Invalid delay ${e}.`),td=e=>new(e?to:tl),tc=(e,t,r)=>{var n=!1,i=(...t)=>e(...t,a),a=()=>n!==(n=!1)&&(r(i),!0),o=()=>n!==(n=!0)&&(t(i),!0);return o(),[a,o]},eH=()=>{var e,t=new Set;return[(r,n)=>{var i=tc(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,i[0]),i},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tp=(e,t,r)=>null==e?eR:e0(t)?null==(t=t[0])?eR:t+" "+tp(e,t,r):null==t?eR:1===t?e:null!=r?r:"is"===e?"are":e+"s",th=!0,tg=(e,t,r)=>r?(th&&r.push("[",t+"","m"),e0(e)?r.push(...e):r.push(e),th&&r.push("[m"),r):tg(e,t,[]).join(""),tm=(e,t,r=!1)=>e&&(e.length>t?r?`${e.slice(0,t)}... [and ${e.length-t} more]`:e.slice(0,t-1)+"…":e),tb=e=>null==e||"boolean"==typeof e||""===e.toString(),tw=(e,t,r)=>null==e?e:e8(e)?H("function"==typeof t?V(e,t):(r=t,e),tb,!0).join(null!=r?r:""):tb(e)?"":e.toString(),tk=(e,t,r,n)=>{var i,l;return e||0===e?"function"==typeof t?tk(V(e,t),r,n):(i=[],n=L(e,(e,t,r)=>tb(e)?q:(r&&i.push(r),e.toString())),[t,l]=e0(t)?t:[,t],l=(null!=l?l:l="and")[0]===(t=null==t?",":t)?l+" ":" "+(l?l+" ":""),t=i.length?""+i.join(t+" ")+l+n:null!=n?n:"",r?r(t,i.length+ +(null!=n)):t):null==e?e:eR},tS=(e,t)=>{var o,r=[],n={},i={},a=0;for(o in t)o===t[o]&&(Object.defineProperty(i,o,{value:o,writable:!1,enumerable:!0,configurable:!1}),n[o]=a++,r.push(o));var l=(t,r=!0)=>null==t?eR:null!=n[t]?t:r?e$(`The ${e} "${t}" is not defined.`):eR,u={writable:!1,enumerable:!1,configurable:!1};return Object.defineProperties(i,{parse:{value:l,...u},ranks:{value:n,...u},levels:{value:r,...u},compare:{value(e,t){e=n[l(e)],t=n[l(t)];return e<t?-1:+(t<e)},...u}}),i},tx=Symbol(),tT=(e,{delimiters:t=["|",";",","],decode:r=!0,lowerCase:n}={})=>{var i,o;return e?(null==(o=e.split("=").map(e=>(e=r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim(),n?e.toLowerCase():e)))[1]&&(o[1]=""),o[2]=o[1]&&(eY(t)?t=[t]:e0(t))&&L(t,e=>1<(i=o[1].split(e)).length?z(i):eR)||(o[1]?[o[1]]:[]),o):eR},tI=(e,{delimiters:t=!0,requireAuthority:r,...n}={})=>null==e?eR:tO(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,i,a,o,l,u,s,d,v,c,f)=>{e={source:e,scheme:r,urn:r?!i:!i&&eR,authority:a,user:o,password:l,host:null!=u?u:s,port:null!=d?parseInt(d):eR,path:v,query:!1===t?c:c?tA(c,{...n,delimiters:t}):eR,fragment:f};return e.path=e.path||(e.authority?e.urn?"":"/":eR),e}),tA=(e,t)=>tE(e,"&",t),tE=(e,t,{delimiters:r=!0,...n}={})=>{e=V(null==e||null==(e=e.match(/(?:^.*?\?|^)([^#]*)/))||null==(e=e[1])?void 0:e.split(t),e=>{var[e,a,o]=null!=(e=tT(e,{...n,delimiters:!1===r?[]:!0===r?eR:r}))?e:[];return null!=(e=null==e?void 0:e.replace(/\[\]$/,""))?!1!==r?[e,1<o.length?o:a]:[e,a]:q}),t=ek(Z(e,!1),([e,t])=>[e,!1!==r?1<t.length?ei(t):t[0]:t.join(",")]);return t&&(t[tx]=e),t},tN=(e,t)=>t&&null!=e?t.test(e):eR,t$=(e,t,r)=>tO(e,t,r,!0),tO=(e,t,i,a=!1)=>null==(null!=e?e:t)?eR:i?(r=eR,a?(n=[],tO(e,t,(...e)=>null!=(r=i(...e))&&n.push(r))):e.replace(t,(...e)=>r=i(...e)),r):null!=(a=e.match(t))?a:eR,tC=e=>null==e?void 0:e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),t_=/\z./g,tF=(e,t)=>(t=tw(ee(H(e,e=>null==e?void 0:e.length)),"|"))?RegExp(t,"gu"):t_,tj={},tU=e=>e instanceof RegExp,tM=(r,n=[","," "])=>{var i;return tU(r)?r:e0(r)?tF(V(r,e=>null==(e=tM(e,n))?void 0:e.source)):eK(r)?r?/./g:t_:eY(r)?null!=(i=(e=tj)[t=r])?i:e[t]=tO(r||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,r)=>t?RegExp(t,"gu"):tF(V(tq(r,RegExp(`(?<!(?<!\\\\)\\\\)[${tw(n,tC)}]`)),e=>e&&`^${tw(tq(e,RegExp("(?<!(?<!\\\\)\\\\)\\*")),e=>tC(tz(e,/\\(.)/g,"$1")),".*")}$`))):eR},tq=(e,t,r=!0)=>null==e?eR:r?H(tq(e,t,!1)):e.split(t),tz=(e,t,r)=>null!=(t=null==e?void 0:e.replace(t,r))?t:e,tR=tS("data classification",{never:"never",anonymous:"anonymous",indirect:"indirect",direct:"direct",sensitive:"sensitive"}),tP=["necessary","performance","functionality","marketing","personalization","security"],tD=ek(tP,e=>[e,e]),tB=(Object.freeze(ek(tP,e=>[e,!0])),(e,t)=>"personalization"===e&&!0!==(null==t?void 0:t.personalization)?"functionality":"security"===e&&!0!==(null==t?void 0:t.security)?"necessary":e),tW=(e,t)=>{var r=e;return!0!==(null==t?void 0:t.personalization)&&null!=r.personalization&&(null!=(r=r===e?{...e}:r).functionality?r.personalization=r.functionality:r.functionality=r.personalization,delete r.personalization),!0!==(null==t?void 0:t.security)&&null!=r.security&&delete(r=r===e?{...e}:r).security,r},tJ={names:tP,specificNames:tP.filter(e=>"necessary"!==e),parse(e,{names:t=!1,includeDefault:r=!0,validate:n=!0}={}){if(null==e)return e;if(e.purposes&&(e=e.purposes),eY(e)&&(e=e.split(",")),e0(e)){var a,i={};for(a of e)if(a!==tG){if(!tD[a]){n&&e$(`The purpose name '${a}' is not defined.`);continue}"necessary"!==a&&(i[a]=!0)}e=i}return t?(t=V(e,([e,t])=>tD[e]&&t?e:q)).length||!r?t:["necessary"]:e},get all(){return{functionality:!0,marketing:!0,performance:!0,personalization:!0,security:!0}},test(e,t,{intersect:r,optionalPurposes:n,targetPurpose:i}){if("boolean"==typeof n&&(n={personalization:n,security:n}),i&&"necessary"!==(i=tB(i,n))&&!t[tB(i,n)])return!1;if(e=tW(e,n),t=tW(t,n),r){for(var a in t)if(tD[a]&&t[a]&&!e[a])return!1;if("all"===r)for(var a in e)if(tD[a]&&e[a]&&!t[a])return!1;return!0}var o=!1;for(a in e)if(tD[a]&&e[a]){if(t[a])return!0;o=!0}return!o}},tV=(tS("data restriction",{public:"public","trusted-write":"trusted-write","trusted-only":"trusted-only"}),{anonymous:{classification:"anonymous",purposes:{}},clone:e=>e&&{classification:e.classification,purposes:{...e.purposes}},equals:(e,t)=>e===t||e&&t&&e.classification===t.classification&&tJ.test(e.purposes,t.purposes,{intersect:"all",optionalPurposes:!0}),serialize(e){var t=tJ.parse(e.purposes,{names:!0,includeDefault:!1});return e.classification&&"anonymous"!==e.classification||null!=t&&t.length?e.classification+":"+t:null},deserialize(e,t){var a;return e?([e,a]=e.split(":"),{classification:null!=(e=tR.parse(e,!1))?e:"anonymous",purposes:null!=(e=tJ.parse(a,{validate:!1}))?e:{}}):t?tV.clone(t):{classification:"anonymous",purposes:{}}}}),tH=(e,t)=>(!(i=null==e?void 0:e.metadata)||t&&(delete i.posted,delete i.queued,Object.entries(i).length)||delete e.metadata,e),tK=e=>!(null==e||!e.patchTargetId),tG="@schema",tX=Symbol(),tZ=e=>void 0===e?"undefined":tm(JSON.stringify(e),40,!0),tY=/^\d{4}-\d{2}-\d{2}(?:T00:00:00(?:\.000)?)?Z$/,tQ=/^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{1,7})?)?Z$/,t0=/^\{?([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\}?$/,t1=/^(?:(?:([\w+.-]+):)(\/\/)?)((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))(?::(\d*))?)(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/,t2=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:(\[(([0-9.]+)|([0-9a-f:]+))\])|(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9]))?$/,t5=(e,t,r)=>(e.push({path:"",type:null,source:t,message:tZ(t)+` ${r}.`}),tX),t3=(e,t,r)=>"number"==typeof e&&(!t&&Number.isFinite(e)&&!Number.isNaN(e)||Number.isInteger(e))||r&&"string"==typeof e&&t3((t?parseInt:parseFloat)(e),t,!1),t6={},tP=((e=>{null==e.primitive&&(e.primitive=typeof(null!=(r=null==(r=e.enum)?void 0:r[0])?r:""));var r,u,l=null!=(l=t6[r=e.primitive+"-"+(null!=(r=e.format)?r:"")+"-"+!1])?l:t6[r]=(e=>{switch(e.primitive){case"boolean":return(e,t)=>"boolean"==typeof e?e:t5(t,e,"is not a Boolean");case"date":return(e,t)=>e&&tY.test(e)&&!isNaN(+new Date(e))?e:t5(t,e,"is not a valid ISO 8601 UTC date (time is not allowed, and the 'Z' postfix must be added to indicate Coordinated Universal Time)");case"timestamp":case"datetime":var r="format"in e?"unix"!==e.format:"datetime"===e.primitive;return(e,n)=>{if(!e||t3(e,!1,!1)){if(!t3(e,!0,!1))return t5(n,e,"is not a valid UNIX timestamp");e*=1}else if(!tQ.test(e)||isNaN(+new Date(e)))return t5(n,e,"is not a valid ISO 8601 UTC date/time (the 'Z' postfix must be added to indicate Coordinated Universal Time)");return e=new Date(e),r?new Date(e).toISOString():+e};case"duration":return(e,r)=>t3(e,!0,!1)?+e:t5(r,e,"is not a valid duration (must be provided as milliseconds)");case"integer":return(e,r)=>t3(e,!0,!1)?+e:t5(r,e,"is not a valid integer");case"number":return(e,r)=>t3(e,!1,!1)?e:t5(r,e,"is not a number");case"string":switch(e.format){case"uri":return(e,t)=>"string"==typeof e&&t1.test(e)?e:t5(t,e,"is not a valid URI");case"url":return(e,t)=>{var r="string"==typeof e&&t1.exec(e);return r?r[2]?e:t5(t,e,"is not a valid URL (it is a URI, but a URL is required)"):t5(t,e,"is not a valid URL")};case"urn":return(e,t)=>{var r="string"==typeof e&&t1.exec(e);return r?"urn"!==r[1]||r[2]?t5(t,e,"is not a valid URN (it is a URI, but a URN is required)"):e:t5(t,e,"is not a valid URN")};case"email":return(e,t)=>"string"==typeof e&&t2.test(e)?e.toLowerCase():t5(t,e,"is not a valid email address")}return(e,t)=>"string"==typeof e?e:t5(t,e,"is not a string");case"uuid":return(e,t)=>{var r;return null!=(r="string"==typeof e?null==(r=t0.exec(e))?void 0:r[1].toLowerCase():null)?r:t5(t,e,"is not a valid UUID")};default:throw TypeError(`'${tZ(e)}' is not a supported primitive type.`)}})(e),d=e.maxLength,c=(null!=d&&(v=l,l=(e,t)=>(e=v(e,t))!==tX&&e.length>d?t5(t,e,`exceeds the maximum allowed ${d} number of characters`):e),e.min),f=e.max;if(null==c&&null==f||(p=null!=c?null!=f?`between ${c} and `+f:"at least "+c:"at most "+f,v=l,l=(e,t)=>(e=v(e,t))===tX||(null==c||c<=e)&&(null==f||e<=f)?e:t5(t,e,p)),"enum"in e){var v=l;if(!(u=new Set((Array.isArray(e.enum)?e.enum:[e.enum]).map(e=>{var t=[];if((e=v(e,t))===tX)throw TypeError(t[0]);return e}))).size)throw TypeError("At least one enum value to test against is required.");var p="is not the constant value "+tk(e.enum.map(e=>JSON.stringify(e)),"or"),l=(e,t)=>(e=v(e,t))===tX||u.has(e)?e:t5(t,e,p)}ee(u)})({primitive:"string",format:"uri"}),tS("variable scope",{global:"global",session:"session",device:"device",user:"user"})),t8=({key:e,scope:t="",entityId:r="",source:n=""},i="")=>["'"+e+"'",n&&"from '"+n+"'",i,t&&"in "+t+" scope",r&&"for '"+r+"'"].filter(e=>e).join(" "),t9=e=>null==e?e:{source:e.source,key:e.key,scope:e.scope,entityId:e.entityId},t7=((A={})[A.Success=200]="Success",A[A.Created=201]="Created",A[A.NotModified=304]="NotModified",A[A.BadRequest=400]="BadRequest",A[A.Forbidden=403]="Forbidden",A[A.NotFound=404]="NotFound",A[A.Conflict=409]="Conflict",A[A.Error=500]="Error",A),re=(e,t=!0)=>null!=(null==e?void 0:e.value)||!t&&(!e||404===e.status),rt=(e,t=!0)=>e&&(e.status<400||!t&&404===e.status);function rr(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var rn=e=>{var t=t8(e),r=e.error;return e.status<400?`${t} succeeded with status ${e.status} - ${t7[e.status]}.`:`${t} failed with status ${e.status} - ${t7[e.status]}${r?` (${r})`:""}.`};class ri extends Error{constructor(e,t){super(null!=t?t:"One or more operations failed."),rr(this,"succeeded",void 0),rr(this,"failed",void 0),this.succeeded=null!=(t=null==e?void 0:e.filter(e=>rt(e,!1)))?t:[],this.failed=null!=(t=null==e?void 0:e.filter(e=>!rt(e,!1)))?t:[]}}var ra=e=>!!e.callback,ro=e=>!!e.poll,rl=Symbol(),ru=(e,t,r,{poll:n,logCallbackError:i}={})=>{var a=e0(t)?t:[t],o=[],l=(async()=>{var s,d,u,v,c,t=await r(a.filter(e=>e)),l=[];for(u of a)u&&null!=(d=t.get(u))&&(d[rl]=u,ra(u)&&l.push([u,d,e=>!0===u.callback(e)]),ro(u))&&l.push([u,d,e=>{var t;return!re(e,!1)||(t=!re(e,!1)||u.poll(e.value,e[rl]===u,s),s=e.value,t)}]);for([u,v,c]of l)try{var f="get"===e?async e=>!0===await c(e)&&(null==n?void 0:n(u,f)):c;await f(v)}catch(t){var p=`${e} callback for ${t8(u)} failed: ${t}.`;i?i(p,u,t):o.push(p)}return t})(),u=async(r,n)=>{var d,v,c,i=await l,u=[],s=[];for(d of a)d?null==(c=i.get(d))?s.push(`No result for ${t8(d)}.`):!r||rt(c,n||"set"===e)?u.push(r&&c.status===t7.NotFound?void 0:1<r?null!=(v=c.value)?v:void 0:c):s.push(rn(c)):u.push(void 0);if(s.push(...o),s.length)throw 10<s.length&&s.push(`
(and ${s.splice(10).length} more...)`),new ri(u,s.join("\n"));return a===t?u:u[0]};return Object.assign(eU(()=>u(1,!1)),{as:()=>u(1,!1),all:()=>u(0,!1),require:()=>u(1,!0),value:(e=!1)=>u(2,e),values:(e=!1)=>u(2,e)})},rs=e=>e&&"string"==typeof e.type,rd=(e=>t=>(null==t?void 0:t.type)&&e.some(e=>e===(null==t?void 0:t.type)))(["view"]),rv=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rc=(e,t)=>{var r;return t&&(!(o=e.get(a=t.tag+(null!=(r=t.value)?r:"")))||(null!=(r=o.score)?r:1)<(null!=(r=t.score)?r:1))&&e.set(a,t)},rf=(e,t="",r=new Map)=>{if(e)return e8(e)?L(e,e=>rf(e,t,r)):eY(e)?tO(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,i,a,o,l,u)=>{i={tag:(n?rv(n)+"::":"")+t+rv(i),value:rv(null!=(n=null!=a?a:o)?n:l)};u&&10!==parseFloat(u)&&(i.score=parseFloat(u)/10),rc(r,i)}):rc(r,e),r},rp=tS("local variable scope",{view:"view",tab:"tab",shared:"shared"}),rh=tS("variable scope",{...rp,...tP}),rg=e=>("global"!==e.scope&&e.entityId&&(e.entityId=void 0),e),rm=e=>null!=e&&!!e.scope&&null!=rp.ranks[e.scope],ry=e=>null==e?e:[e.scope,e.key,e.entityId].join("\0"),rb=e=>{e=e.split("\0");return{scope:e[0],key:e[1],entityId:e[2]}},rk=()=>()=>e$("Not initialized."),rS=window,rx=document,rT=rx.body,rI=(e,t)=>!(null==e||!e.matches(t)),rA=((e=>th=e)(!!rS.chrome),eP),rE=(e,t,r=(e,t)=>rA<=t)=>{for(var n=0,i=eD;1===(null==e?void 0:e.nodeType)&&!r(e,n++)&&t(e,(e,t)=>(null!=e&&(a=e,i=t!==eB&&null!=a),eB),n-1)!==eD&&!i;){var a,l=e;null===(e=e.parentElement)&&(null==l?void 0:l.ownerDocument)!==rx&&(e=null==l||null==(l=l.ownerDocument.defaultView)?void 0:l.frameElement)}return a},rN=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":var r;return null==(r=(""+e).trim())?void 0:r.toLowerCase();case!1:case"r":case"b":return""===e||eG(e);case"n":return parseFloat(e);case"j":return eF(()=>JSON.parse(e),eW);case"h":return eF(()=>nI(e),eW);case"e":return eF(()=>null==nE?void 0:nE(e),eW);default:return e0(t)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:rN(e,t[0])):void 0}},r$=(e,t,r)=>rN(null==e?void 0:e.getAttribute(t),r),rO=(e,t,r)=>rE(e,(e,n)=>n(r$(e,t,r))),rC=(e,t)=>null==(e=r$(e,t))||null==(t=e.trim())?void 0:t.toLowerCase(),r_=e=>null==e?void 0:e.getAttributeNames(),rF=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,rj=e=>null!=e?e.tagName:null,rM=e=>({x:e9(scrollX,e),y:e9(scrollY,e)}),rq=(e,t)=>tz(e,/#.*$/,"")===tz(t,/#.*$/,""),rz=(e,t,r=eB)=>(u=rR(e,t))&&eq({xpx:u.x,ypx:u.y,x:e9(u.x/rT.offsetWidth,4),y:e9(u.y/rT.offsetHeight,4),pageFolds:r?u.y/window.innerHeight:void 0}),rR=(e,t)=>null!=t&&t.pointerType&&null!=(null==t?void 0:t.pageY)?{x:t.pageX,y:t.pageY}:e?({x:s,y:d}=rD(e),{x:s,y:d}):void 0,rD=(e,t=!0)=>e?(v=e.getBoundingClientRect(),l=t?rM(eD):{x:0,y:0},{x:e9(v.left+l.x),y:e9(v.top+l.y),width:e9(v.width),height:e9(v.height)}):void 0,rB=(e,t,r,n={capture:!0,passive:!0})=>(t=er(t),tc(r,r=>L(t,t=>e.addEventListener(t,r,n)),r=>L(t,t=>e.removeEventListener(t,r,n)))),rJ=()=>({...l=rM(eB),width:window.innerWidth,height:window.innerHeight,totalWidth:rT.offsetWidth,totalHeight:rT.offsetHeight}),rL=new WeakMap,rV=e=>rL.get(e),rH=(e,t=eD)=>(t?"--track-":"track-")+e,rK=(e,t,r,n,i,a)=>(null==t?void 0:t[1])&&L(r_(e),o=>{var l;return null!=(l=(c=t[0])[f=o])?l:c[f]=(a=eD,!eY(n=L(t[1],([t,r,n],i)=>tN(o,t)&&(a=void 0,!r||rI(e,r))&&z(null!=n?n:o)))||(i=e.getAttribute(o))&&!eG(i)||rf(i,tz(n,/\-/g,":"),r),a)}),rG=()=>{},rX=(e,t)=>{if(p===(p=r5.tags))return rG(e,t);var r=e=>e?tU(e)?[[e]]:e8(e)?X(e,r,1):[e5(e)?[tM(e.match),e.selector,e.prefix]:[tM(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(X(p,([,e])=>e,1))]];(rG=(e,t)=>rK(e,n,t))(e,t)},rZ=(e,t)=>tw(ei(rF(e,rH(t,eB)),rF(e,rH("base-"+t,eB)))," "),rY={},rQ=(e,t,r=rZ(e,"attributes"))=>{var n;r&&rK(e,null!=(n=rY[r])?n:rY[r]=[{},t$(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tM(r||n),,t])],t),rf(rZ(e,"tags"),void 0,t)},r0=(e,t,r=eD,n)=>null!=(r=null!=(r=r?rE(e,(e,r)=>r(r0(e,t,eD)),e6(r)?r:void 0):tw(ei(r$(e,rH(t)),rF(e,rH(t,eB)))," "))?r:n&&(h=rV(e))&&n(h))?r:null,r1=(e,t,r=eD,n)=>""===(g=r0(e,t,r,n))||(null==g?g:eG(g)),r2=(e,t,r,n)=>e&&(null==n&&(n=new Map),rQ(e,n),rE(e,e=>{rX(e,n),rf(null==r?void 0:r(e),void 0,n)},t),n.size)?{tags:[...n.values()]}:{},r5={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,json:!1,impressionThreshold:1e3,captureContextMenu:!0,tags:{default:["data-id","data-name"]}},r3=[],r6=[],r4=(e,t=0)=>e.charCodeAt(t),r9=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>r3[r6[t]=e.charCodeAt(0)]=t),e=>{for(var t,r=0,n=e.length,i=[];r<n;)t=e[r++]<<16|e[r++]<<8|e[r++],i.push(r6[(16515072&t)>>18],r6[(258048&t)>>12],r6[(4032&t)>>6],r6[63&t]);return i.length+=n-r,(e=>String.fromCharCode(...e))(i)}),ne={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},nt=(e=256)=>e*Math.random()|0,nn={exports:{}},{deserialize:ni,serialize:na}=((()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,i=new Uint8Array(128),a=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return i.subarray(0,a);function l(e,i){var c,o;switch(typeof e){case"undefined":s(192);break;case"boolean":s(e?195:194);break;case"number":(e=>{var t;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?s(e):0<e&&e<=255?d([204,e]):-128<=e&&e<=127?d([208,e]):0<e&&e<=65535?d([205,e>>>8,e]):-32768<=e&&e<=32767?d([209,e>>>8,e]):0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?d([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?d([211,(t=e/4294967296)>>>24,t>>>16,t>>>8,t,(t=e%4294967296)>>>24,t>>>16,t>>>8,t]):-0x8000000000000000<=e&&e<=0x8000000000000000?(s(211),v(e)):d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(r=new ArrayBuffer(8))).setFloat64(0,e),s(203),d(new Uint8Array(r)))})(e);break;case"string":(c=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var i=0,a=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var l=e.charCodeAt(o);if(l<128)a[i++]=l;else{if(l<2048)a[i++]=l>>6|192;else{if(55295<l&&l<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(o);if(u<56320||57343<u)throw Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+o+" out of range");a[i++]=(l=65536+((1023&l)<<10)+(1023&u))>>18|240,a[i++]=l>>12&63|128}else a[i++]=l>>12|224;a[i++]=l>>6&63|128}a[i++]=63&l|128}}return t?a:a.subarray(0,i)})(e)).length)<=31?s(160+c):d(c<=255?[217,c]:c<=65535?[218,c>>>8,c]:[219,c>>>24,c>>>16,c>>>8,c]),d(o);break;case"object":null===e?s(192):e instanceof Date?(e=>{var r,t=e.getTime()/1e3;0===e.getMilliseconds()&&0<=t&&t<4294967296?d([214,255,t>>>24,t>>>16,t>>>8,t]):0<=t&&t<17179869184?d([215,255,(r=1e6*e.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t]):(d([199,12,255,(r=1e6*e.getMilliseconds())>>>24,r>>>16,r>>>8,r]),v(t))})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((o=(c=e).length)<=255?d([196,o]):d(o<=65535?[197,o>>>8,o]:[198,o>>>24,o>>>16,o>>>8,o]),d(c)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u:e=>{var r,t=0;for(r in e)void 0!==e[r]&&t++;for(r in t<=15?s(128+t):d(t<=65535?[222,t>>>8,t]:[223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(l(r),l(n))}})(e);break;default:if(i||!t||!t.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof t.invalidTypeReplacement?l(t.invalidTypeReplacement(e),!0):l(t.invalidTypeReplacement,!0)}}function u(e){var t=e.length;t<=15?s(144+t):d(t<=65535?[220,t>>>8,t]:[221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;r<t;r++)l(e[r])}function s(e){if(i.length<a+1){for(var t=2*i.length;t<a+1;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i[a]=e,a++}function d(e){if(i.length<a+e.length){for(var t=2*i.length;t<a+e.length;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i.set(e,a),a+=e.length}function v(e){var t,e=0<=e?(t=e/4294967296,e%4294967296):(t=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));d([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function r(e,t){var r,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(i());else r=i();return r;function i(){var t=e[n++];if(0<=t&&t<=127)return t;if(128<=t&&t<=143)return s(t-128);if(144<=t&&t<=159)return d(t-144);if(160<=t&&t<=191)return v(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return u(-1,1);if(197===t)return u(-1,2);if(198===t)return u(-1,4);if(199===t)return c(-1,1);if(200===t)return c(-1,2);if(201===t)return c(-1,4);if(202===t)return l(4);if(203===t)return l(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return a(1);if(209===t)return a(2);if(210===t)return a(4);if(211===t)return a(8);if(212===t)return c(1);if(213===t)return c(2);if(214===t)return c(4);if(215===t)return c(8);if(216===t)return c(16);if(217===t)return v(-1,1);if(218===t)return v(-1,2);if(219===t)return v(-1,4);if(220===t)return d(-1,2);if(221===t)return d(-1,4);if(222===t)return s(-1,2);if(223===t)return s(-1,4);if(224<=t&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function a(t){for(var a,r=0,i=!0;0<t--;)i?(r+=127&(a=e[n++]),128&a&&(r-=128),i=!1):r=(r*=256)+e[n++];return r}function o(t){for(var r=0;0<t--;)r=256*r+e[n++];return r}function l(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return n+=t,4===t?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function u(t,r){t<0&&(t=o(r));r=e.subarray(n,n+t);return n+=t,r}function s(e,t){e<0&&(e=o(t));for(var r={};0<e--;)r[i()]=i();return r}function d(e,t){e<0&&(e=o(t));for(var r=[];0<e--;)r.push(i());return r}function v(t,r){t<0&&(t=o(r));r=n;return n+=t,((e,t,r)=>{var n=t,i="";for(r+=t;n<r;){var a=e[n++];if(127<a)if(191<a&&a<224){if(r<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");a=(31&a)<<6|63&e[n++]}else if(223<a&&a<240){if(r<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");a=(15&a)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<a&&a<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+a.toString(16)+" at index "+(n-1));if(r<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");a=(7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(a<=65535)i+=String.fromCharCode(a);else{if(!(a<=1114111))throw Error("UTF-8 decode: code point 0x"+a.toString(16)+" exceeds UTF-16 reach");a-=65536,i=(i+=String.fromCharCode(a>>10|55296))+String.fromCharCode(1023&a|56320)}}return i})(e,r,t)}function c(e,t){e<0&&(e=o(t));t=o(1),e=u(e);return 255===t?(e=>{var r,t;if(4===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*t);if(8===e.length)return r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*t+r/1e6);if(12===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,t=a(8),new Date(1e3*t+r/1e6);throw Error("Invalid data length for a date value.")})(e):{type:t,data:e}}}var n={serialize:t,deserialize:r,encode:t,decode:r};nn.exports=n})(),(A=nn.exports)&&A.__esModule&&Object.prototype.hasOwnProperty.call(A,"default")?A.default:A),no="$ref",nl=(e,t,r)=>e3(e)?eR:r?t!==eR:null===t||t,nu=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var i,a,o,l=(e,t,n=e[t],i=nl(t,n,r)?s(n):eR)=>(n!==i&&(i!==eR||e0(e)?e[t]=i:delete e[t],u(()=>e[t]=n)),i),u=e=>(null!=i?i:i=[]).push(e),s=e=>{if(null==e||e6(e)||e3(e))return eR;if(e2(e)){if(e.toJSON&&e!==(e=e.toJSON()))return s(e);if(null!=(o=null==a?void 0:a.get(e)))return e[no]||(e[no]=o,u(()=>delete e[no])),{[no]:o};if(e5(e))for(var t in(null!=a?a:a=new Map).set(e,a.size+1),e)l(e,t);else!e8(e)||e instanceof Uint8Array||(!e0(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?l(e,r):(e[r]=null,u(()=>delete e[r])))}return e};return eF(()=>{var r;return t?na(null!=(r=s(e))?r:null):eF(()=>JSON.stringify(e,eR,2*!!n),()=>JSON.stringify(s(e),eR,2*!!n))},!0,()=>null==i?void 0:i.forEach(e=>e()))},ns=e=>{var t,r,n=e=>e2(e)?e[no]&&(r=(null!=t?t:t=[])[e[no]])?r:(e[no]&&delete(t[e[no]]=e)[no],Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(eY(e)?eF(()=>JSON.parse(e),()=>(console.error("Invalid JSON received.",e,Error().stack),eR)):null!=e?eF(()=>ni(e),()=>(console.error("Invalid message received.",e,Error().stack),eR)):e)},nd=(e,t={})=>{var r=(e,{json:t=!1,decodeJson:r=!1,...n})=>{var o,l,u,i=(e,r)=>eZ(e)&&!0===r?e:u(e=eY(e)?new Uint8Array(V(e.length,t=>255&e.charCodeAt(t))):t?eF(()=>JSON.stringify(e),()=>JSON.stringify(nu(e,!1,n))):nu(e,!0,n),r),a=e=>null==e?eR:eF(()=>ns(e),eR);return t?[e=>nu(e,!1,n),a,(e,t)=>i(e,t)]:([o,l,u]=(e=>{for(var t,r,n,i,a,l,o=0n,u=0n,s=[],d=0,v=0,c=0,f=0,p=[],c=0;c<(null==e?void 0:e.length);f+=p[c]=e.charCodeAt(c++));var h=e?()=>{s=[...p],v=255&(d=f),c=-1}:()=>{},g=e=>(v=255&(d+=-s[c=(c+1)%s.length]+(s[c]=e)),e);return[e?e=>{for(h(),i=16-((t=e.length)+4)%16,a=new Uint8Array(4+t+i),n=0;n<3;a[n++]=g(nt()));for(r=0,a[n++]=g(v^16*nt(16)+i);r<t;a[n++]=g(v^e[r++]));for(;i--;)a[n++]=nt();return a}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((v^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,a=new Uint8Array(t);n<t;a[n++]=v^g(e[r++]));return a}:e=>e,(e,t=64)=>{if(null==e)return null;for(l=eK(t)?64:t,h(),[o,u]=ne[l],r=0;r<e.length;o=BigInt.asUintN(l,(o^BigInt(v^g(e[r++])))*u));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]})(e),[(e,t)=>(t?eJ:r9)(o(nu(e,!0,n))),e=>null!=e?ns(l(e instanceof Uint8Array?e:(r&&te(e)?a:e=>{for(var t,r=0,n=0,i=e.length,a=new Uint8Array(3*(i/4|0)+(i+3&3)%3);r<i;)a[n++]=r3[r4(e,r++)]<<2|(t=r3[r4(e,r++)])>>4,r<i&&(a[n++]=(15&t)<<4|(t=r3[r4(e,r++)])>>2,r<i)&&(a[n++]=(3&t)<<6|r3[r4(e,r++)]);return a})(e))):null,(e,t)=>i(e,t)])};if(!e){var n=+(null!=(n=t.json)?n:0);if(n&&!1!==t.prettify)return(null!=m?m:m=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[n]}return r(e,t)},[nv,,]=(nd(),nd(null,{json:!0,decodeJson:!0}),nd(null,{json:!0,prettify:!0})),tS=tq(""+rx.currentScript.src,"#"),tP=tq(""+(tS[1]||""),";"),nh=tS[0],ng=tP[1]||(null==(A=tI(nh,{delimiters:!1}))?void 0:A.host),nm=e=>!(!ng||(null==(e=tI(e,{delimiters:!1}))||null==(e=e.host)?void 0:e.endsWith(ng))!==eB),tS=(...e)=>tz(tw(e),/(^(?=\?))|(^\.(?=\/))/,nh.split("?")[0]),nb=tS("?","var"),nw=tS("?","mnt"),nk=(tS("?","usr"),Symbol()),nS=Symbol(),nx=(e,t,r=eB,n=eD)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tg("tail.js: ","90;3"))+t);r=null==e?void 0:e[nS];null!=(e=r?e[nk]:e)&&console.log(e2(e)?tg(nv(e),"94"):e6(e)?""+e:e),r&&r.forEach(([e,t,r])=>nx(e,t,r,!0)),t&&console.groupEnd()},[nT,nI]=nd(),[nA,nE]=[rk,rk],nN=!0,[tP,nO]=eH(),nF=(...e)=>{var r,a=e.shift();console.error(e[1]instanceof Error?e[1].message:eY(e[1])?e.shift():null!=(r=null==(r=e[1])?void 0:r.message)?r:"An error occurred",null!=(r=a.id)?r:a,...e)},[nj,nU]=eH(),[nM,nq]=eH(),nz=e=>nP!==(nP=e)&&nU(nP,nW(!0,!0)),nR=e=>nD!==(nD=!!e&&"visible"===document.visibilityState)&&nq(nD,!e,nB(!0,!0)),nP=(nj(nR),!0),nD=!1,nB=tr(!1),nW=tr(!1),nJ=(rB(window,["pagehide","freeze","beforeunload"],()=>nz(!1)),rB(window,["pageshow","resume"],()=>nz(!0)),rB(document,"visibilitychange",()=>(nR(!0),nD&&nz(!0))),nU(nP,nW(!0,!0)),!1),nL=tr(!1),[,nH]=eH(),nK=ti({callback:()=>nJ&&nH(nJ=!1,nL(!1)),frequency:2e4,once:!0,paused:!0}),A=()=>!nJ&&(nH(nJ=!0,nL(!0)),nK.restart()),nX=(rB(window,["focus","scroll"],A),rB(window,"blur",()=>nK.trigger()),rB(document.body,["keydown","pointerdown","pointermove","scroll"],A),A(),()=>nL()),nZ=0,nY=void 0,nQ=()=>(null!=nY?nY:rk())+"_"+n0(),n0=()=>(tt(!0)-(parseInt(nY.slice(0,-2),36)||0)).toString(36)+"_"+(++nZ).toString(36),n5=new Map,n3={id:nY,heartbeat:tt()},n6={knownTabs:new Map([[nY,n3]]),variables:new Map},[n4,n8]=eH(),[n9,n7]=eH(),ie=rk,it=(e,t=tt())=>{e=n5.get(eY(e)?e:ry(e));return null!=e&&e.cache&&e.cache[0]+e.cache[1]<=t?void 0:e},ir=(...e)=>{var t=tt();return ia(V(e,e=>(e.cache=[t],[t9(e),{...e,created:t,modified:t,version:"0"}])))},ii=e=>null!=(e=V(e,e=>{var t,r;return e&&(t=ry(e[0]),(r=n5.get(t))!==e[1])?[t,e[1],r,e[0]]:q}))?e:[],ia=e=>{var r,n,e=ii(e);null!=e&&e.length&&(r=tt(),L(e,([,e,t])=>{e&&!e.cache&&(e.cache=null!=(e=null==t?void 0:t.cache)?e:[r,3e3])}),eS(n5,e),(n=H(e,([,,,e])=>0<rh.compare(e.scope,"tab"))).length&&ie({type:"patch",payload:ek(n)}),n7(V(e,([,e,t,r])=>[r,e,t]),n5,!0))},[,il]=(tP((e,t)=>{nj(r=>{var n;r?(r=t(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),nY=null!=(n=null==r?void 0:r[0])?n:tt(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),n5=new Map(ei(H(n5,([,e])=>"view"===(null==e?void 0:e.scope)),V(null==r?void 0:r[1],e=>[ry(e),e])))):sessionStorage.setItem("_tail:state",e([nY,V(n5,([,e])=>e&&"view"!==e.scope?e:q)]))},!0),ie=(t,r)=>{e&&(localStorage.setItem("_tail:state",e([nY,t,r])),localStorage.removeItem("_tail:state"))},rB(window,"storage",e=>{var a,o,l;"_tail:state"!==e.key||!(e=null==t?void 0:t(e.newValue))||e[2]&&e[2]!==nY||([e,{type:a,payload:o}]=e,"query"===a?r.active||ie({type:"set",payload:[V(n6.knownTabs),V(n6.variables)]},e):"set"===a&&r.active?(n6.knownTabs=new Map(o[0]),n6.variables=new Map(o[1]),n5=new Map(o[1]),r.trigger()):"patch"===a?(l=ii(V(o,([e,t])=>[rb(e),t])),eS(n6.variables,o),eS(n5,o),n7(V(l,([,e,t,r])=>[r,e,t]),n5,!1)):"tab"===a&&(eh(n6.knownTabs,e,o),o)&&n8("tab",o,!1))});var r=ti(()=>n8("ready",n6,!0),-25),n=ti({callback(){var e=tt()-1e4;L(n6.knownTabs,([t,r])=>r[0]<e&&eh(n6.knownTabs,t,void 0)),n3.heartbeat=tt(),ie({type:"tab",payload:n3})},frequency:5e3,paused:!0});nj(e=>(e=>{ie({type:"tab",payload:e?n3:void 0}),e?(r.restart(),ie({type:"query"})):r.toggle(!1),n.toggle(e)})(e),!0)},!0),eH()),[iu,is]=eH(),id=(({timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var i=()=>(r?nE:nI)(localStorage.getItem("_tail:rq")),a=0,o=()=>localStorage.setItem("_tail:rq",(r?nA:nT)([nY,tt()+t]));return async(r,l,u=null!=l?1:n)=>{for(;u--;){var d=i();if((!d||d[1]<tt())&&(o(),(null==(d=i())?void 0:d[0])===nY))return 0<t&&(a=setInterval(()=>o(),t/2)),eM(r,!0,()=>{clearInterval(a),localStorage.removeItem("_tail:rq")});var v=td(),[d]=rB(window,"storage",t=>{"_tail:rq"!==t.key||t.newValue||v.resolve()});e=[ts(null!=l?l:t),v],await Promise.race(e.map(e=>e6(e)?e():e)),d()}var e;null==l&&e$("_tail:rq could not be acquired.")}})(),iv=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{n=n&&nN;var i,a,o=!1,l=r=>{var l=e6(t)?null==t?void 0:t(i,r):t;return!1!==l&&(il(e,i=null!=l&&!0!==l?l:i,r,e=>(o=i===eR,i=e)),!o)&&(a=n?nA(i,!0):JSON.stringify(i))};if(!r)return id(()=>Y(1,async t=>{var o;return l(t)?400<=(o=await fetch(e,{method:null!=i?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain; charset=iso-8859-1"},body:a})).status?0===t?z(e$("Invalid response: "+await o.text())):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await ts(200*(1+t))):(null!=(o=null!=(t=n?new Uint8Array(await o.arrayBuffer()):await o.text())&&t.length?null==(o=n?nE:JSON.parse)?void 0:o(t):eR)&&is(o),z(o)):stop()}));l(0)&&!navigator.sendBeacon(e,new Blob(null!=i?[a]:[],{type:"text/plain; charset=iso-8859-1"}))&&e$("Beacon send failed.")},tS=["scope","key","entityId","source"],ip=[...tS,"purpose","ifModifiedSince","ifNoneMatch","passive"],ih=[...tS,"value","force","ttl","version"],ig=Symbol(),im=new Map,ib=Symbol(),iS=Symbol(),ix=[.75,.33],iT=[.25,.33],iA=e=>V(eo(e,[e=>e.scope,e=>e.key]),e=>e?[e,`${t8(e)}, ${rm(e)?"client-side memory only":(e=>{var t;return`${null!=(t=null==e?void 0:e.classification)?t:"anonymous"} data for ${tk(tJ.parse(null==e?void 0:e.purposes,{names:!0}))}  purposes.`})(null==(e=e.schema)?void 0:e.usage)})`,eD]:q),iO=(e,t="A"===rj(e)&&r$(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),iC=(e,t=rj(e),r=r1(e,"button"))=>r!==eD&&(eC(t,"A","BUTTON")||"INPUT"===t&&eC(rC(e,"type"),"button","submit")||r===eB),i_=(e,t=!1)=>{var r;return{tagName:e.tagName,text:tm((null==(r=r$(e,"title"))?void 0:r.trim())||(null==(r=r$(e,"alt"))?void 0:r.trim())||(null==(r=e.innerText)?void 0:r.trim()),100),href:null==(r=e.href)?void 0:r.toString(),rect:t?rD(e):void 0}},ij=()=>null==S?void 0:S.clientId,iU={scope:"shared",key:"referrer"},iM=(e,t)=>{k.variables.set({...iU,value:[ij(),e]}),t&&k.variables.get({scope:iU.scope,key:iU.key,poll:(r,n,i)=>!!r||(null==i?void 0:i[1])===e&&t()&&!1})},iq=tr(),iz=tr(),iR=1,[iD,iB]=eH(),iW=e=>{var t=tr(e,iq),r=tr(e,iz),n=tr(e,nX),i=tr(e,()=>iR);return(e,a)=>({totalTime:t(e,a),visibleTime:r(e,a),activeTime:n(e,a),activations:i(e,a)})},iJ=iW(),[iV,iH]=eH(),iK=(e,t)=>(t&&L(iX,t=>e(t,()=>!1)),iV(e)),iG=new WeakSet,iX=document.getElementsByTagName("iframe");function iY(e){if(e){if(null!=e.units&&eC(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var i0=e=>(null==e?void 0:e.component)||(null==e?void 0:e.content),i1=e=>r2(e,t=>t!==e&&!!i0(rL.get(t)),e=>(T=rL.get(e),(T=rL.get(e))&&X(ei(T.component,T.content,T),e=>e.tags,1))),i2=(e,t)=>t?e:{...e,rect:void 0,content:(I=e.content)&&V(I,e=>({...e,rect:void 0}))},i5=(e,t=eD,r)=>{var n,i,a,o=[],l=[],u=0;return rE(e,e=>{var d,a,i=rL.get(e);i&&(i0(i)&&(a=null!=(a=H(er(i.component),e=>{var r;return 0===u||!t&&(1===u&&(null==(r=e.track)?void 0:r.secondary)!==eB||(null==(r=e.track)?void 0:r.promote))}))?a:[],n=(null!=r?r:en(a,e=>null==(e=e.track)?void 0:e.region))&&rD(e)||void 0,d=i1(e),i.content&&o.unshift(...V(i.content,e=>({...e,rect:n,...d}))),null!=a)&&a.length&&(l.unshift(...V(a,e=>{var t;return u=eu([u,null!=(t=e.track)&&t.secondary?1:2]),i2({...e,content:o.length?o:void 0,rect:n,...d},!!n)})),o=[]),a=i.area||r0(e,"area"))&&l.unshift(a)}),o.length&&l.push(i2({id:"",rect:n,content:o})),L(l,e=>{eY(e)?(null!=i?i:i=[]).push(e):(null==e.area&&(e.area=tw(i,"/")),(null!=a?a:a=[]).unshift(e))}),a||i?{components:a,area:tw(i,"/")}:void 0},i3=Symbol(),i6=[{id:"context",setup(e){ti(()=>L(iX,e=>ep(iG,e)&&iH(e)),500).trigger(),e.variables.get({scope:"view",key:"view",poll(t){return null==S||!t||null!=S&&S.definition?null!=(n=t)&&t.navigation&&f(!0):(S.definition=t,null!=(t=S.metadata)&&t.posted?e.events.postPatch(S,{definition:n}):nx(S,S.type+" (definition updated)")),!0}});var n,t,d=null!=(t=null==(t=it({scope:"tab",key:"viewIndex"}))?void 0:t.value)?t:0,v=null==(t=it({scope:"tab",key:"tabIndex"}))?void 0:t.value,c=(null==v&&ir({scope:"tab",key:"tabIndex",value:v=null!=(t=null!=(t=null==(t=it({scope:"shared",key:"tabIndex"}))?void 0:t.value)?t:null==(t=it({scope:"session",key:"@info"}))||null==(t=t.value)?void 0:t.tabs)?t:0},{scope:"shared",key:"tabIndex",value:v+1}),null),f=(t=eD)=>{var a,o,l,i,p;rq(""+c,c=location.href)&&!t||({source:t,scheme:i,host:a}=tI(location.href+"",{requireAuthority:!0}),S={type:"view",timestamp:tt(),clientId:nQ(),tab:nY,href:t,path:location.pathname,hash:location.hash||void 0,domain:{scheme:i,host:a},tabNumber:v+1,tabViewNumber:d+1,viewport:rJ(),duration:iJ(void 0,!0)},0===v&&(S.firstTab=eB),0===v&&0===d&&(S.landingPage=eB),ir({scope:"tab",key:"viewIndex",value:++d}),o=tA(location.href),V(["source","medium","campaign","term","content"],(e,t)=>{var n;return null!=(e=(null!=(n=(l=S).utm)?n:l.utm={})[e]=null==(n=er(o["utm_"+e]))?void 0:n[0])?e:q}),!(S.navigationType=x)&&performance&&L(performance.getEntriesByType("navigation"),e=>{S.redirects=e.redirectCount,S.navigationType=tz(e.type,/\_/g,"-")}),x=void 0,"navigate"===(null!=(t=S.navigationType)?t:S.navigationType="navigate")&&(p=null==(i=it(iU))?void 0:i.value)&&nm(document.referrer)&&(S.view=null==p?void 0:p[0],S.relatedEventId=null==p?void 0:p[1],e.variables.set({...iU,value:void 0})),(p=document.referrer||null)&&!nm(p)&&(S.externalReferrer={href:p,domain:(()=>{var{host:t,scheme:r,port:n}=tI(p,{delimiters:!1,requireAuthority:!0});return{host:t+(n?":"+n:""),scheme:r}})()}),S.definition=n,n=void 0,e.events.post(S),e.events.registerEventPatchSource(S,()=>({duration:iJ()})),iB(S))};return nM(e=>{e?(iz(eB),++iR):iz(eD)}),rB(window,"popstate",()=>(x="back-forward",f())),L(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),x="navigate",f()}}),f(),{processCommand:t=>i9(t)&&(e(t.username?{type:"login",username:t.username}:{type:"logout"}),eB),decorate(e){!S||rd(e)||tK(e)||(e.view=S.clientId)}}}},{id:"components",setup(e){var t=(e=>{var t=new IntersectionObserver(e=>L(e,e=>{var t,r;return null==(t=(r=e.target)[iS])?void 0:t.call(r,e)})),r=new Set,n=(ti({callback:()=>L(r,e=>e()),frequency:250,raf:!0}),(e,t,r=0)=>e<r?r:t<e?t:e),i=rx.createRange();return(a,o)=>{var l,u,s,d,v,c,f,p,h,g,m,y,b,w,k,S;o&&(l=H(null==o?void 0:o.component,e=>{var t;return(null==(t=e.track)?void 0:t.impressions)||(null!=(t=null==(t=e.track)?void 0:t.secondary)?t:e.inferred)!==eB}))&&l.length&&(p=f=eD,g=h=0,m=(e,t,r,n)=>{var i,a=null!=(a=(i=null!=u?u:u=[])[e])?a:i[e]=[{duration:0,impressions:0},tr(!1,nX),!1,!1,0,0,0,eE()];a[4]=t,a[5]=r,a[6]=n},y=[eE(),eE()],b=iW(!1),w=tr(!1,nX),k=-1,S=()=>{var $,t=a.getBoundingClientRect(),r=window.innerWidth,o=window.innerHeight,S=[n(t.top,o),n(t.right,r),n(t.bottom,o),n(t.left,r)],x=S[2]-S[0],S=S[1]-S[3],E=f?iT:ix,r=(E[0]*o<x||E[0]<(x/t.height||0))&&(E[0]*r<S||E[0]<(S/t.width||0));if(p!==r&&w(p=r,!0),f!==(f=p&&w()>=r5.impressionThreshold-250)&&(++h,b(f),s||(s=V(l,e=>((null==(e=e.track)?void 0:e.impressions)||r1(a,"impressions",eB,e=>null==(e=e.track)?void 0:e.impressions))&&eq({type:"impression",pos:rz(a),viewport:rJ(),timeOffset:iJ(),impressions:h,...i5(a,eB)})||q),e(s)),null!=s)&&s.length&&($=b(),d=V(s,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:$,impressions:h,regions:u&&{top:u[0][0],middle:u[1][0],bottom:u[2][0]},seen:g,text:c,read:$.activeTime&&c&&n($.activeTime/c.readTime,g)})))),t.height!==k){k=t.height;E=a.textContent;if({boundaries:v,...c}=(e=>{for(var r,n,i=RegExp("[\\p{L}\\p{N}][\\p{L}\\p{N}'’]*|([.!?]+)","gu"),a=0,o=0,l=0,u=0,s=!1;r=i.exec(e);)r[1]?(s&&++u,s=!1):(s=!0,a+=r[0].length,6<r[0].length&&++l,++o);s&&++u;var i=RegExp("[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)","gu"),d=[0,.25,.75,1].map(e=>e*a|0),v=[],f=0,p=!1;do{if(null!=(r=i.exec(e))&&r[1])p&&++f;else{for(var c=null==r?void 0:r.index,h=!1,g=0;g<d.length;g++)d[g]--||(v[g]={offset:null!=n?n:c,wordsBefore:f,readTime:e9(f/238*6e4)},h=!0);(p=!h)||(f=0),n=c+1}}while(r);return{text:e,length:e.length,characters:a,words:o,sentences:u,lix:e9(o/u+100*l/o),readTime:e9(o/238*6e4),boundaries:v}})(null!=E?E:""),u||t.height>=1.25*o){var C=rx.createTreeWalker(a,NodeFilter.SHOW_TEXT),_=0,F=0;for(null==u&&(u=[]);F<v.length&&(j=C.nextNode());){var j,U,M,D,B,R=null!=(U=null==(U=j.textContent)?void 0:U.length)?U:0;for(_+=R;_>=(null==(M=v[F])?void 0:M.offset);)i[F%2?"setEnd":"setStart"](j,v[F].offset-_+R),F++%2&&({top:M,bottom:D}=i.getBoundingClientRect(),B=t.top,F<3?m(0,M-B,D-B,v[1].readTime):(m(1,u[0][4],M-B,v[2].readTime),m(2,M-B,D-B,v[3].readTime)))}}}var r=t.left<0?-t.left:0,E=t.top<0?-t.top:0,H=t.width*t.height;f&&(g=y[0].push(E,E+x)*y[1].push(r,r+S)/H),u&&L(u,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),i=n(t.bottom>o?o:t.bottom,e[5],e[4]),a=f&&0<i-r,l=e[0];l.duration=e[1](a),a&&(e[3]!==(e[3]=a)&&++e[0].impressions,l.seen=e[7].push(r,i)/(e[5]-e[4]),l.read=n(l.duration/e[6],l.seen))})},a[iS]=({isIntersecting:e})=>{eh(r,S,e),e||(L(d,e=>e()),S())},t.observe(a))}})(e),n=({boundary:e,...n})=>{ey(rL,e,e=>{var t;return(e=>null==e?void 0:{...e,component:er(e.component),content:er(e.content),tags:er(e.tags)})("add"in n?{...e,component:ei(null==e?void 0:e.component,n.component),content:ei(null==e?void 0:e.content,n.content),area:null!=(t=null==n?void 0:n.area)?t:null==e?void 0:e.area,tags:ei(null==e?void 0:e.tags,n.tags),cart:null!=(t=n.cart)?t:null==e?void 0:e.cart,track:null!=(t=n.track)?t:null==e?void 0:e.track}:"update"in n?n.update(e):n)}),t(e,rL.get(e))};return{decorate(e){L(e.components,t=>{eh(t,"track",void 0),L(e.clickables,e=>eh(e,"track",void 0))})},processCommand:e=>at(e)?(n(e),eB):al(e)?(L(((e,t)=>{var r,n;return t?(r=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(i=>{if(!n.has(i))for(var a=[];null!=r$(i,e);){ep(n,i);var o,l=tq(r$(i,e),"|");r$(i,e,null);for(var u=0;u<l.length;u++){var d=l[u];if(""!==d){var s="-"===d?-1:parseInt(null!=(s=eQ(d))?s:"",36);if(s<0)a.length+=s;else{if(0===u&&(a.length=0),isNaN(s)&&/^["\[{]/.test(d))for(var c="";u<l.length;u++)try{d=JSON.parse(c+=l[u]);break}catch{}0<=s&&t[s]&&(d=t[s]),ew(a,d)}}}ew(r,...V(a,e=>({add:eB,...e,boundary:i})));var f=i.nextElementSibling;"WBR"===i.tagName&&null!=(o=i.parentNode)&&o.removeChild(i),i=f}}),r):[]})(e.scan.attribute,e.scan.components),n),eB):eD}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{rB(r,["click","contextmenu","auxclick"],n=>{var i,a,o,l,u,s=eD;if(rE(n.target,e=>{iC(e)&&null==o&&(o=e),s=s||"NAV"===rj(e);var t,d=rV(e),d=null==d?void 0:d.component;!n.button&&null!=d&&d.length&&!u&&(L(e.querySelectorAll("a,button"),t=>iC(t)&&(3<(null!=u?u:u=[]).length?z:u.push({...i_(t,!0),component:rE(t,(e,t,r,n=null==(i=rV(e))?void 0:i.component)=>n&&t(n[0]),t=>t===e)}))),u)&&null==l&&(l=e),null==i&&(i=null!=(t=r1(e,"clicks",eB,e=>null==(e=e.track)?void 0:e.clicks))?t:d&&en(d,e=>(null==(e=e.track)?void 0:e.clicks)!==eD)),null==a&&(a=null!=(t=r1(e,"region",eB,e=>null==(e=e.track)?void 0:e.region))?t:d&&en(d,e=>null==(e=e.track)?void 0:e.region))}),null!=l?l:l=o){var d,v=u&&!o&&i,c=i5(null!=o?o:l,!1,v),f=r2(null!=o?o:l,void 0,e=>H(er(null==(e=rL.get(e))?void 0:e.tags))),p=(null==i&&(i=!s),{...(a=null==a?eB:a)?{pos:rz(o,n),viewport:rJ()}:null,...((e,t)=>{var n;return rE(null!=e?e:t,e=>"IMG"===rj(e)||e===t?(n={element:i_(e,!1)},eD):eB),n})(n.target,null!=o?o:l),...c,timeOffset:iJ(),...f});if(o)if(iO(o)){var h=o,c=h.hostname!==location.hostname,{host:f,scheme:y,source:b}=tI(h.href,{delimiters:!1,requireAuthority:!0});if(h.host===location.host&&h.pathname===location.pathname&&h.search===location.search)return"#"===h.hash?void 0:void(h.hash!==location.hash&&0===n.button&&e(eq({type:"anchor_navigation",anchor:h.hash,...p})));var k,x,w=eq({clientId:nQ(),type:"navigation",href:c?h.href:b,external:c,domain:{host:f,scheme:y},self:eB,anchor:h.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||r$(h,"target")!==window.name?(iM(w.clientId),w.self=eD,e(w)):rq(location.href,h.href)||(w.exit=w.external,iM(w.clientId))):(k=h.href,(b=nm(k))?iM(w.clientId,()=>e(w)):(x=(""+Math.random()).replace(".","").substring(1,8),b||r5.captureContextMenu&&(h.href=nw+"="+x+encodeURIComponent(k),rB(window,"storage",(t,r)=>"_tail:push"===t.key&&(t.newValue&&(null==(t=JSON.parse(t.newValue))?void 0:t.requestId)===x&&e(w),r())),rB(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),h.href=k}))))}else{rE(n.target,(e,t)=>{var r;return!!(null!=d?d:d=(e=>eY(e=null==e||e!==eB&&""!==e?e:"add")&&eC(e,"add","remove","update","clear")?{action:e}:e2(e)?e:void 0)(null!=(r=null==(r=rV(e))?void 0:r.cart)?r:r0(e,"cart")))&&!d.item&&(d.item=K(null==(r=rV(e))?void 0:r.content))&&t(d)});c=iY(d);(c||i)&&e(eq(c?{type:"cart_updated",...p,...c}:{type:"component_click",...p}))}else v&&ey(t,l,r=>{var i=rR(l,n);return r?r.push(i):(i=eq({type:"component_click_intent",...p,clicks:r=[i],clickables:u}),e.events.registerEventPatchSource(i,()=>({clicks:t.get(l)}),!0,l)),r})}})};r(document),iK(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=rM(eB);iD(()=>{return e=()=>(t={},r=rM(eB)),setTimeout(e,250);var e}),rB(window,"scroll",()=>{var a,n=rM(),i={x:(l=rM(eD)).x/(rT.offsetWidth-window.innerWidth)||0,y:l.y/(rT.offsetHeight-window.innerHeight)||0};n.y>=r.y&&(a=[],!t.fold&&n.y>=r.y+200&&(t.fold=eB,a.push("fold")),!t["page-middle"]&&.5<=i.y&&(t["page-middle"]=eB,a.push("page-middle")),!t["page-end"]&&.99<=i.y&&(t["page-end"]=eB,a.push("page-end")),(n=V(a,e=>eq({type:"scroll",scrollType:e,offset:i}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(t){var r;return i8(t)?("clear"===(r=t.cart)?e({type:"cart_updated",action:"clear"}):(r=iY(r))&&e({...r,type:"cart_updated"}),eB):ao(t)?(e({type:"order",...t.order}),eB):eD}})},{id:"forms",setup(e){var t,r=new Map,n=(e,t=!1)=>{var r=!t||rO(e,rH("form-value")),e=(t&&(r=r?eG(r):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return t&&(e=e&&tm(e,200)),r?e:void 0},i=t=>{var i,o,s,a=t.form;if(a)return o=rO(a,rH("ref"))||"track_ref",(s=ef(r,a,()=>{var t,r=new Map,n={type:"form",name:rO(a,rH("form-name"))||r$(a,"name")||a.id||void 0,activeTime:0,totalTime:0,fields:{}},o=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:iJ()})),()=>{1!==t[3]&&(l(),2<=t[3]&&(n.completed=3===t[3]||!(a.isConnected&&rD(a).width)),e.events.postPatch(n,{...i,completed:n.completed,totalTime:tt(eB)-t[4]}),t[3]=1)}),s=((e=0)=>{var t,r,n=(i,a=e)=>{if(void 0===i)return!!r;clearTimeout(t),eK(i)?i&&(a<0?eX:ez)(null==r?void 0:r())?n(r,a):r=void 0:(r=i,t=setTimeout(()=>n(!0,a),a<0?-a:a))};return n})();return rB(a.ownerDocument.body,"submit",e=>{var r,n;i=i5(a),t[3]=3,e.defaultPrevented?([r]=nj(e=>{e||(n?nx("The browser is navigating to another page after submit leaving a reCAPTCHA challenge. "+tg("Form not submitted",1)):3===t[3]?(nx("The browser is navigating to another page after submit. "+tg("Form submitted",1)),o()):nx("The browser is navigating to another page after submit, but submit was earlier cancelled because of validation errors. "+tg("Form not submitted.",1)),r())}),n=!1,s(()=>{if((()=>{for(var e=a.ownerDocument;e;){if(en(e.querySelectorAll("iframe"),e=>e.src.match(RegExp("https:\\/\\/www.google.com\\/.*(?<=\\/)recaptcha\\/.*(?<=\\/)bframe","gi"))&&(e=>{if(!e||!e.isConnected||rD(e,!1).width<=0)return!1;for(;e;){var t=null==(t=e.ownerDocument.defaultView)?void 0:t.getComputedStyle(e);if("hidden"===t.visibility||"0"===t.opacity)return!1;e=e.parentElement}return!0})(e)))return!0;e=eF(()=>{var r;return null==(r=e.defaultView)||null==(r=r.frameElement)?void 0:r.ownerDocument},()=>{})}return!1})())return t[3]=2,nx("reCAPTCHA challenge is active."),n=!0;n&&(n=!1,nx("reCAPTCHA challenge ended (for better or worse)."),t[3]=3),a.isConnected&&0<rD(a).width?(t[3]=2,nx("Form is still visible after 1750 ms, validation errors assumed. "+tg("Form not submitted",1))):(nx("Form is no longer visible 1750 ms after submit. "+tg("Form submitted",1)),o()),r()},1750)):(nx("Submit event triggered and default not prevented. "+tg("Form submitted",1)),o())},{capture:!1}),t=[n,r,a,0,tt(eB),1]}))[1].get(t)||L(a.querySelectorAll("INPUT,SELECT,TEXTAREA,BUTTON"),(e,t)=>{var d,v,a;"BUTTON"===e.tagName&&"submit"!==e.type||(e.name&&"hidden"!==e.type?(a=null!=(d=(a=s[0].fields)[v=e.name])?d:a[v]={id:e.id||v,name:v,label:tz(null!=(v=null==(d=e.labels)||null==(a=d[0])?void 0:a.innerText)?v:e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:null!=(d=e.type)?d:"unknown",[i3]:n(e),value:n(e,!0)},s[0].fields[a.name]=a,s[1].set(e,a)):"hidden"!==e.type||e.name!==o&&!r1(e,"ref")||(e.value||(e.value=tz("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),s[0].ref=e.value))}),[t,s]},a=(e,[r,n]=null!=(t=i(e))?t:[],a=null==n?void 0:n[1].get(r))=>a&&[n[0],a,r,n],o=null,l=()=>{var r,i,a,l,d,v,c;o&&([r,i,a,l]=o,d=-(u-(u=iz())),v=-(s-(s=tt(eB))),c=i[i3],(i[i3]=n(a))!==c&&(null==i.fillOrder&&(i.fillOrder=l[5]++),i.filled&&(i.corrections=(null!=(c=i.corrections)?c:0)+1),i.filled=eB,l[3]=2,L(r.fields,([e,t])=>t.lastField=e===i.name)),i.value=n(a,!0),i.activeTime+=d,i.totalTime+=v,r.activeTime+=d,r.totalTime+=v,o=null)},u=0,s=0,d=e=>e&&rB(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(o=r,"focusin"===e.type?(s=tt(eB),u=iz()):l()));d(document),iK(e=>e.contentDocument&&d(e.contentDocument),!0)}},{id:"consent",setup(e){var t,n=async t=>e.variables.get({scope:"session",key:"@consent",poll:t,refresh:!t,passive:!t}).value(),i=async t=>{var r;if(t)return!(r=await n())||tV.equals(r,t)?[!1,r]:(await e.events.post(eq({type:"consent",consent:t}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,t])},r={analytics_storage:"performance",functionality_storage:"functionality",personalization_storage:"personalization",ad_storage:"marketing",security_storage:"security"},a=(e({consent:{externalSource:{key:"Google Consent Mode v2",frequency:250,poll(){var e,n=rS.dataLayer,i=t,a=null==n?void 0:n.length;if(a&&(t!==(t=n[a-1])||!t))for(;a--&&((e=n[a])!==i||!i);){var o={},l=!0;if("consent"===(null==e?void 0:e[0])&&"update"===e[1])return V(r,([t,r])=>"granted"===e[2][t]&&(o[r]=!0,l=l&&("security"===r||"necessary"===r))),{classification:l?"anonymous":"direct",purposes:o}}}}}}),{});return{processCommand(e){var t,r,o,s,d;return ad(e)?((t=e.consent.get)&&n((e,r,n)=>!e||t(e,n)),(r=e.consent.set)&&(async()=>{var e,t,n;"consent"in r?([t,n]=await i(r.consent),null!=(e=r.callback)&&e.call(r,t,n)):i(r)})(),(o=e.consent.externalSource)&&(d=o.key,(null!=(e=a[d])?e:a[d]=ti({frequency:null!=(e=o.frequency)?e:1e3})).restart(o.frequency,async()=>{var e,t,r;rx.hasFocus()&&(e=o.poll(s))&&!tV.equals(s,e)&&([t,r]=await i(e),t&&nx(r,"Consent was updated from "+d),s=e)}).trigger()),eB):eD}}}}],A=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==(null==t?void 0:t[e])),i8=A("cart"),i9=A("username"),i7=A("tagAttributes"),ae=A("disable"),at=A("boundary"),ar=A("extension"),an=A(eB,"flush"),ai=A("get"),aa=A("listener"),ao=A("order"),al=A("scan"),au=A("set"),as=e=>"function"==typeof e,ad=A("consent");(e=>{if(!k){eY(e)&&([r,e]=nI(e),e=nd(r,{decodeJson:!0})[1](e)),ex(r5,[e],{overwrite:!0}),(e=>{nE===rk&&([nA,nE]=nd(e,{json:!e,prettify:!1}),nN=!!e,nO(nA,nE))})(eg(r5,"encryptionKey"));var r,o,l,u,s,d,v,c,f,p,h,g,m,i=eg(r5,"key"),a=null!=(e=null==(r=rS[r5.name])?void 0:r._)?e:[];if(e0(a))return o=[],l=[],u=(e,...t)=>{var r=eB;l=H(l,n=>eF(()=>{var i;return null!=(i=n[e])&&i.call(n,...t,{tracker:k,unsubscribe:()=>r=eD}),r},(e=>t=>nF(e,t))(n)))},s=[],v=((e,t)=>{var r=ti(async()=>{var e=V(im,([e,t])=>en(t,e=>null==(e=e[ig])?void 0:e.refresh)?{...rb(e),refresh:!0}:q);e.length&&await a.get(e)},3e3),n=(e,t)=>t&&!!ef(im,e,()=>new Set).add(t),a=(nj((e,t)=>r.toggle(e,e&&3e3<=t),!0),n9(e=>L(e,([e,t])=>{null!=t&&t.passive?delete t.passive:(e=>{var t,r;e&&(t=ry(e),null!=(r=eg(im,t)))&&r.size&&L(r,r=>!0===r(e)&&n(t,r))})(t?{status:t7.Success,...t}:{status:t7.NotFound,...e})})),{get:r=>ru("get",r,async r=>{r[0]&&!eY(r[0])||(o=r[0],r=r.slice(1)),null!=t&&t.validateKey(o);var l=new Map,u=[],s=V(r,e=>{var t=it(ry(e)),r=e.purpose;if(r&&!0!==(null==t||null==(i=t.schema)?void 0:i.usage.purposes[r]))l.set(e,{...e,status:t7.Forbidden,error:`No consent for '${r}'.`});else if(!e.refresh&&t)l.set(e,{status:t7.Success,...t});else{if(!rm(e))return[eT(e,ip),e];var i,r=null==(i=e.init)?void 0:i.call(e);r?(r={...t9(e),version:"1",created:d,modified:d,value:r,cache:[d,null!=(i=e.ttl)?i:null==t?void 0:t.ttl]},ew(u,[t9(r),r]),l.set(e,{status:t7.Success,...r})):l.set(e,{status:t7.NotFound,...t9(e)})}return q}),d=tt(),o=s.length&&(null==(o=await iv(e,{variables:{get:V(s,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId}))||null==(r=o.variables)?void 0:r.get)||[],c=[];return L(o,(e,t)=>{var n,r;(null==e?void 0:e.status)===t7.NotFound?null!=(r=null==(r=(n=s[t][1]).init)?void 0:r.call(n))&&c.push([n,{...t9(n),value:r}]):l.set(s[t][1],rg(e))}),c.length&&L(await a.set(V(c,([,e])=>e)).all(),(e,t)=>l.set(c[t][0],rg(e.status===t7.Conflict?{...e,status:t7.Success}:e.status===t7.Success&&null==e.value?{...e,status:t7.NotFound}:e))),u.length&&ia(u),l},{poll:(e,t)=>(t[ig]=e,n(ry(e),t)),logCallbackError:(e,t,r)=>nF("Variables.get",e,{operation:t,error:r})}),set:r=>ru("set",r,async r=>{r[0]&&!eY(r[0])||(n=r[0],r=r.slice(1)),null!=t&&t.validateKey(n);for(var n,i,o=[],l=new Map,u=tt(),s=[],d=V(r,e=>{var i,r,t=it(ry(e));return rm(e)?((r=null==(i=e.patch?e.patch(null==t?void 0:t.value):e.value)?void 0:{...t9(e),created:null!=(r=null==t?void 0:t.created)?r:u,modified:u,version:null!=t&&t.version?""+(parseInt(t.version)+1):"1",scope:e.scope,key:e.key,value:i,cache:[u,e.ttl]})&&(r.cache=[u,null!=(i=e.ttl)?i:3e3]),l.set(e,r?{status:t?t7.Success:t7.Created,...r}:{status:t7.Success,...t9(e)}),ew(o,[t9(e),r]),q):e.patch?(s.push(e),q):(void 0===(null==e?void 0:e.version)&&(e.version=null==t?void 0:t.version),[eT(e,ih),e])}),v=0;!v++||s.length;)L(await a.get(V(s,e=>t9(e))).all(),(e,t)=>{var r=s[t];rt(e,!1)?ew(d,[{...r,patch:void 0,value:s[t].patch(null==e?void 0:e.value),version:e.version},r]):l.set(r,e)}),s=[],L(d.length?(e=>null!=e?e:e$("No result.",e=>TypeError(e.replace("..."," is required."))))(null==(i=(await iv(e,{variables:{set:V(d,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId})).variables)?void 0:i.set):[],(e,t)=>{var[,t]=d[t];v<=3&&t.patch&&((null==e?void 0:e.status)===t7.Conflict||(null==e?void 0:e.status)===t7.NotFound)?ew(s,t):l.set(t,rg(e))});return o.length&&ia(o),l},{logCallbackError:(e,t,r)=>nF("Variables.set",e,{operation:t,error:r})})});return iu(({variables:e})=>{e&&null!=(e=ei(V(e.get,e=>re(e)?e:q),V(e.set,e=>rt(e)?e:q)))&&e.length&&ia(V(e,e=>[t9(e),rt(e)?e:void 0]))}),a})(nb,d={applyEventExtensions(e){return null==e.clientId&&(e.clientId=nQ()),null==e.timestamp&&(e.timestamp=tt()),h=eB,L(o,([,t])=>{var r;return(null==(r=t.decorate)?void 0:r.call(t,e))===eD&&z(!0)})?void 0:e},validateKey:(e,t=!0)=>!i&&!e||e===i||!!t&&e$(`'${e}' is not a valid key.`)}),c=((e,t,r=5e3)=>{var n=[],i=new WeakMap,a=new Map,o=(e,t)=>{var r;return null!=(r=e.metadata)&&r.queued?ex(t,{type:e.type+"_patch",patchTargetId:e.clientId}):e$("Source event not queued.")},l=e=>{i.set(e,eb(e))},u=async(r,n=!0,i)=>{var a;return r[0]&&!eY(r[0])||(a=r[0],r=r.slice(1)),r=V(r,e=>{if(null!=t&&t.validateKey(null!=a?a:e.key),ex(e,{metadata:{posted:!0}}),e[ib]){if(L(e[ib],(t,r,n)=>!1===t(e)||n,!1))return;delete e[ib]}return ex(tH(eb(e),!0),{timestamp:e.timestamp-tt()})}),nx({[nS]:V(r,e=>[e,e.type,eD])},"Posting "+tk([tp("new event",[G(r,e=>!tK(e))||void 0]),tp("event patch",[G(r,e=>tK(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),iv(e,{events:r,variables:i,deviceSessionId:null==t?void 0:t.deviceSessionId},{beacon:n})},s=async(e,{flush:r=!1,async:i=!0,variables:a}={})=>{var o=[];if(e=V(er(e),e=>{var r;return null!=(r=e.metadata)&&r.queued||o.push(e),null!=(r=ex(t.applyEventExtensions(e),{metadata:{queued:!0}}))?r:q}),L(o,e=>nx(e,e.type)),!i)return u(e,!1,a);r?(n.length&&e.unshift(...n.splice(0)),e.length&&await u(e,!0,a)):e.length&&n.push(...e)};return 0<r&&ti(()=>s([],{flush:!0}),r),nM((e,t,r)=>{!e&&(n.length||t||1500<r)&&(e=V(a,([e,t])=>{var[t,n]=t();return n&&(a.delete(e),i.delete(e)),null!=t?t:q}),n.length||e.length)&&s(ei(n.splice(0),e),{flush:!0})}),{post:s,postPatch:(e,t,r)=>s(o(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var u=!1,d=()=>{u=!0};return l(e),((e,t)=>{(null!=(e=(b=e)[w=ib])?e:b[w]=new Set).add(t)})(e,l),a.set(e,()=>{if(!1===(null==n?void 0:n.isConnected))d();else{var a=i.get(e),l=t(a,d),[l,v]=(nx({diff:{snapshot:a,patched:l},stack:Error().stack},"Patch "+a.type),null!=(l=eA(l,a))?l:[]);if(l&&!eO(v,a))return i.set(e,eb(v)),[o(e,l),u]}return[void 0,u]}),r&&s(e),d}}})(nb,d),f=null,p=0,g=h=eD,m=!1,k=(...e)=>{if(m){if(e.length){1<e.length&&(!e[0]||eY(e[0]))&&(t=e[0],e=e.slice(1)),eY(e[0])&&(r=e[0],e=te(r)?JSON.parse(r):nI(r));var t,n=eD;if((e=H(X(e,e=>eY(e)?nI(e):e),e=>{if(!e)return eD;if(i7(e))r5.tags=eS({},r5.tags,e.tagAttributes);else{if(ae(e))return r5.disabled=e.disable,eD;if(an(e))return n=eB,eD;if(as(e))return e(k),eD}return g||aa(e)||ar(e)?eB:(s.push(e),eD)})).length||n){var r=eo(e,e=>ar(e)?-100:aa(e)?-50:au(e)?-10:90*!!rs(e));if(!f||!f.splice(h?p+1:f.length,0,...r)){for(p=0,f=r;p<f.length;p++){var y=f[p];y&&(d.validateKey(null!=t?t:y.key),eF(()=>{var e=f[p];if(u("command",e),h=eD,rs(e))c.post(e);else if(ai(e))v.get(er(e.get));else if(au(e))v.set(er(e.set));else if(aa(e))l.push(e.listener);else if(ar(e))(t=eF(()=>e.extension.setup(k),t=>nF(e.extension.id,t)))&&(o.push([null!=(r=e.priority)?r:100,t,e.extension]),eo(o,([e])=>e));else if(as(e))e(k);else{var r,n,t,a=eD;for([,t]of o)if(a=null!=(n=null==(n=t.processCommand)?void 0:n.call(t,e))?n:eD)break;a||nF("invalid-command",e,"Loaded extensions:",V(o,e=>e[2].id))}},e=>nF(k,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}}else a.push(...e)},Object.defineProperty(rS,r5.name,{value:Object.freeze(Object.assign(k,{id:"tracker_"+nQ(),events:c,variables:v,__isTracker:eB})),configurable:!1,writable:!1}),n9((e,t,r)=>{var n=ei(iA(V(e,([,e])=>e||q)),[[{[nS]:iA(V(t,([,e])=>e||q))},"All variables",eB]]);nx({[nS]:n},tg(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${t.size} in total).`,"2;3"))}),n4(async(e,t,r,n)=>{var o;"ready"===e&&([e,o]=await v.get([{scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:eP}]).values(!0),d.deviceSessionId=e.deviceSessionId,e.hasUserAgent||((e=>{e(eq({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:null==S?void 0:S.clientId,languages:V(navigator.languages,(e,t)=>{var[r,n]=e.split("-");return eq({id:e,language:r,region:n,primary:0===t,preference:t+1})}),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...(r=null==rS?void 0:rS.screen,r?({width:r,height:i,orientation:a}=r,o=r<i,-90!==(a=null!=(a=null!=(a=null==a?void 0:a.angle)?a:rS.orientation)?a:0)&&90!==a||([r,i]=[i,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:rS.devicePixelRatio,width:r,height:i,landscape:o}}):{})}));var i,o,a,r})(k),e.hasUserAgent=!0),g=!0,s.length&&k(s),n(),m=!0,k(...V(i6,e=>({extension:e})),...a),k({set:{scope:"view",key:"loaded",value:!0}}))},!0);e$(`The global variable for the tracker "${r5.name}" is used for something else than an array of queued commands.`)}})("{{CONFIG}}")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
