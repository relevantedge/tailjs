(()=>{var e,t,r,n,i,a,l,o,u,s,d,v,c,f,p,h,g,m,b,w,k,S,x,T,A;function j(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var F=(e,t=e=>Error(e))=>{throw el(e=e5(e))?t(e):e},U=(e,t,r=-1)=>{if(e===t||null==(null!=e?e:t))return!0;if(!eu(e)&&!ec(e)||!eu(t)&&!ec(t)||e.length!==t.length)return!1;var i,n=0;for(i in e){if(e[i]!==t[i]&&!U(e[i],t[i],r-1))return!1;++n}return n===Object.keys(t).length},M=(e,t,...r)=>e===t||0<r.length&&r.some(t=>M(e,t)),q=(e,t)=>null!=e?e:F(null!=t?t:"A required value is missing",e=>TypeError(e.replace("..."," is required."))),z=(e,t=!0,r)=>{try{return e()}catch(e){return eh(t)?es(e=t(e))?F(e):e:er(t)?console.error(t?F(e):e):t}finally{null!=r&&r()}};class R extends Promise{get initialized(){return null!=this._result}then(e,t){var r;return(null!=(r=this._result)?r:this._result=this._action()).then(e,t)}catch(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).catch(e)}finally(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).finally(e)}constructor(e){super(()=>{}),j(this,"_action",void 0),j(this,"_result",void 0),this._action=e}}var P=e=>new R(async()=>e5(e)),D=async(e,t=!0,r)=>{try{return await e5(e)}catch(e){if(!er(t))return await t(e);if(t)throw e;console.error(e)}finally{await(null==r?void 0:r())}},B=e=>e,W=e=>!!e,J=e=>e===K,L=void 0,V=Number.MAX_SAFE_INTEGER,H=!1,K=!0,G=()=>{},X=e=>e,Z=e=>null!=e,Y=Symbol.iterator,Q=Symbol.asyncIterator,ee=(e,t)=>(r,n=!0)=>e(r)||t&&n&&null!=r&&null!=(r=t(r))?r:L,et=(e,t)=>eh(t)?e!==L?t(e):L:(null==e?void 0:e[t])!==L?e:L,er=e=>"boolean"==typeof e,en=ee(er,e=>0!=e&&(1==e||"false"!==e&&("true"===e||L))),ei=e=>e!==H,ea=e=>"number"==typeof e,el=e=>"string"==typeof e,eo=ee(el,e=>null==e?void 0:e.toString()),eu=Array.isArray,es=e=>e instanceof Error,ed=(e,t=!1)=>null==e?L:!t&&eu(e)?e:eg(e)?[...e]:[e],ev=e=>e&&"object"==typeof e,ec=e=>(null==e?void 0:e.constructor)===Object,ef=(e,t)=>"function"==typeof(null==e?void 0:e[t]),ep=e=>"symbol"==typeof e,eh=e=>"function"==typeof e,eg=(e,t=!1)=>!(null==e||!e[Y]||"string"==typeof e&&!t),em=e=>e instanceof Map,ey=e=>e instanceof Set,eb=(e,t)=>null==e?L:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,ew=(e,t,r)=>e[0]===t&&e[e.length-1]===r,ek=e=>el(e)&&(ew(e,"{","}")||ew(e,"[","]")),eS=!1,ex=e=>(eS=!0,e),eT=e=>null==e?L:eh(e)?e:t=>t[e],eA=(e,t,r)=>(null!=t?t:r)!==L?(e=eT(e),null==t&&(t=0),null==r&&(r=V),(n,i)=>t--?L:r--?e?e(n,i):n:r):e,eI=e=>null==e?void 0:e.filter(Z),eE=(e,t,r,n)=>null==e?[]:!t&&eu(e)?eI(e):e[Y]?function*(e,t){if(null!=e)if(t){t=eT(t);var r=0;for(n of e)if(null!=(n=t(n,r++))&&(yield n),eS){eS=!1;break}}else for(var n of e)null!=n&&(yield n)}(e,r===L?t:eA(t,r,n)):ev(e)?function*(e,t){t=eT(t);var n,r=0;for(n in e){var i=[n,e[n]];if(null!=(i=t?t(i,r++):i)&&(yield i),eS){eS=!1;break}}}(e,eA(t,r,n)):eE(eh(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(null==t&&(t=-e-1);e++;)yield t--;else for(null==t&&(t=0);e--;)yield t++}(e,r),t),eN=(e,t,r,n)=>eE(e,t,r,n),e$=(e,t,r=1,n=!1,i,a)=>function*e(t,r,n,i){if(null!=t)if(t[Y]||n&&ev(t))for(var a of i?eE(t):t)1!==r?yield*e(a,r-1,n,!0):yield a;else yield t}(eE(e,t,i,a),r+1,n,!1),eO=(e,t,r,n)=>{if(t=eT(t),eu(e)){var i=0,a=[];for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n&&!eS;r++){var l=e[r];null!=(t?l=t(l,i++):l)&&a.push(l)}return eS=!1,a}return null!=e?tQ(eN(e,t,r,n)):L},eC=(e,t,r,n)=>null!=e?new Set([...eN(e,t,r,n)]):L,e_=(e,t,r=1,n=!1,i,a)=>tQ(e$(e,t,r,n,i,a)),ej=(...e)=>{var t;return ez(1===e.length?e[0]:e,e=>null!=e&&(null!=t?t:t=[]).push(...tQ(e))),t},eF=(e,t,r,n)=>{var i,a,l=0;for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n;r++)if(null!=e[r]&&(i=null!=(a=t(e[r],l++))?a:i,eS)){eS=!1;break}return i},eU=(e,t)=>{var r,n,a,i=0;for(a of e)if(null!=a&&(r=null!=(n=t(a,i++))?n:r,eS)){eS=!1;break}return r},eM=(e,t)=>{var r,n,a,i=0;for(a in e)if(r=null!=(n=t([a,e[a]],i++))?n:r,eS){eS=!1;break}return r},eq=(e,t,r,n)=>{var i;if(null!=e){if(eu(e))return eF(e,t,r,n);if(r===L){if(e[Y])return eU(e,t);if("object"==typeof e)return eM(e,t)}for(var a of eE(e,t,r,n))null!=a&&(i=a);return i}},ez=eq,eR=async(e,t,r,n)=>{var i,a;if(null==e)return L;for(a of eN(e,t,r,n))if(null!=(a=await a)&&(i=a),eS){eS=!1;break}return i},eP=(e,t)=>{if(null==e)return L;var r={};if(t){var n,a,i=0;for(a in e)(n=t([a,e[a]],i++))&&(r[n[0]]=n[1])}else for(var l of e)l&&(r[l[0]]=l[1]);return r},eD=(e,t,r)=>{var n,i,a;return null==e?L:er(t)||r?(a={},ez(e,r?(e,n)=>null!=(e=t(e,n))&&null!=(e[1]=r(a[e[0]],e[1]))&&(a[e[0]]=e[1]):e=>ez(e,t?e=>{var t;return null!=(null==e?void 0:e[1])&&((null!=(t=(n=a)[i=e[0]])?t:n[i]=[]).push(e[1]),a)}:e=>null!=(null==e?void 0:e[1])&&(a[e[0]]=e[1],a))),a):eP(eO(e,t?(e,r)=>et(t(e,r),1):e=>et(e,1)))},eB=(e,t,r,n,i)=>{var l=()=>eh(r)?r():r;return null!=(e=eq(e,(e,n)=>r=null!=(e=t(r,e,n))?e:l(),n,i))?e:l()},eW=(e,t,r,n)=>eO(e,(e,r)=>e&&null!=t&&t(e,r)?e:L,r,n),eJ=(e,t)=>{var r,n;if(null==e)return L;if(!t){if(null!=(r=null!=(n=e.length)?n:e.size))return r;if(!e[Y])return Object.keys(e).length}return r=0,null!=(n=eq(e,t?(e,n)=>t(e,n)?++r:r:()=>++r))?n:0},eL=(e,...t)=>null==e?L:ea(e)?Math.max(e,...t):eB(e,(e,r,n,i=t[1]?t[1](r,n):r)=>null==e||ea(i)&&e<i?i:e,L,t[2],t[3]),eH=(e,t,r,n)=>{var i;return null==e?L:ec(e)&&!t?0<Object.keys(e).length:null!=(i=null!=(i=null==(i=e.some)?void 0:i.call(e,null!=t?t:W))?i:eq(e,t?(e,r)=>!!t(e,r)&&ex(!0):()=>ex(!0),r,n))&&i},eK=(e,t=e=>e)=>{var r;return null!=(r=ed(e))&&r.sort((e,r)=>t(e)-t(r)),e},eG=(e,t,r)=>(e.constructor===Object||eu(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eX=(e,t,r)=>{var n;if(e)return void 0===(n=e.get?e.get(t):e.has?e.has(t):e[t])&&null!=r&&null!=(n=eh(r)?r():r)&&eG(e,t,n),n},eZ=(e,...t)=>(ez(t,t=>ez(t,([t,r])=>{null!=r&&(ec(e[t])&&ec(r)?eZ(e[t],r):e[t]=r)})),e),eY=(e,t,r,n)=>{if(e)return null!=r?eG(e,t,r,n):(ez(t,t=>eu(t)?eG(e,t[0],t[1]):ez(t,([t,r])=>eG(e,t,r))),e)},eQ=(e,t,r)=>{var n;return ef(e,"set")?void 0===(n=r(e.get(t)))?e.delete(t):e.set(t,n):ef(e,"add")?r(n=e.has(t))?e.add(t):e.delete(t):e&&void 0===(n=e[t]=r(e[t]))&&ec(e)&&delete e[t],e},e1=(e,t)=>{var r;if(null!=(null!=e?e:t))return r=eX(e,t),ef(e,"delete")?e.delete(t):delete e[t],r},e2=(e,t)=>{if(e)return eu(t)?(eu(e)&&1<e.length?t.sort((e,t)=>t-e):t).map(t=>e2(e,t)):eu(e)?t<e.length?e.splice(t,1)[0]:void 0:e1(e,t)},e5=e=>eh(e)?e():e,e3=(e,t=-1)=>eu(e)?t?e.map(e=>e3(e,t-1)):[...e]:ec(e)?t?eD(e,([e,r])=>[e,e3(r,t-1)]):{...e}:ey(e)?new Set(t?eO(e,e=>e3(e,t-1)):e):em(e)?new Map(t?eO(e,e=>[e[0],e3(e[1],t-1)]):e):e,e6=(e,...t)=>null==e?void 0:e.push(...t),e4=(e,...t)=>null==e?void 0:e.unshift(...t),e8=(e,t)=>{var r,i,a;if(e)return ec(t)?(a={},ec(e)&&(ez(e,([e,l])=>{if(!U(l,t[e],-1)){if(ec(r=l)){if(!(l=e8(l,t[e])))return;[l,r]=l}else ea(l)&&ea(void 0)&&(l=(r=l)-void 0);a[e]=l,(null!=i?i:i=e3(t))[e]=r}}),i)?[a,i]:void 0):[e,e]},e9="undefined"!=typeof performance?(e=K)=>e?Math.trunc(e9(H)):performance.timeOrigin+performance.now():Date.now,e7=(e=!0,t=()=>e9())=>{var r,n=+e*t(),i=0;return(a=e,l)=>(r=e?i+=-n+(n=t()):i,l&&(i=0),(e=a)&&(n=t()),r)},tt=(e,t=0)=>{var e=eh(e)?{frequency:t,callback:e}:e,{queue:i=!0,paused:a=!1,trigger:l=!1,once:o=!1,callback:u=()=>{},raf:s}=e,d=(t=null!=(e=e.frequency)?e:0,0),v=to(!0).resolve(),c=e7(!a),f=c(),p=async e=>{if(!d||!i&&v.pending&&!0!==e)return!1;if((y.busy=!0)!==e)for(;v.pending;)await v;return e||v.reset(),(!1===await D(()=>u(c(),-f+(f=c())),!1,()=>!e&&v.resolve())||t<=0||o)&&m(!1),!(y.busy=!1)},h=()=>d=setTimeout(()=>s?requestAnimationFrame(g):g(),t<0?-t:t),g=()=>{y.active&&p(),y.active&&h()},m=(e,t=!e)=>(c(e,t),clearTimeout(d),y.active=!!(d=e?h():0),y),y={active:!1,busy:!1,restart:(e,r)=>(t=null!=e?e:t,u=null!=r?r:u,m(!0,!0)),toggle:(e,t)=>e!==y.active?e?t?(m(!0),y.trigger(),y):m(!0):m(!1):y,trigger:async e=>await p(e)&&(m(y.active),!0)};return y.toggle(!a,l)};function tr(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}class tn{get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new ti,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}constructor(){tr(this,"_promise",void 0),this.reset()}}class ti{then(e,t){return this._promise.then(e,t)}constructor(){var e;tr(this,"_promise",void 0),tr(this,"resolve",void 0),tr(this,"reject",void 0),tr(this,"value",void 0),tr(this,"error",void 0),tr(this,"pending",!0),this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(this.pending)return this.pending=!1,this[t?"error":"value"]=r===L||r,e(r),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}}var tl=(e,t)=>null==e||isFinite(e)?!e||e<=0?e5(t):new Promise(r=>setTimeout(async()=>r(await e5(t)),e)):F(`Invalid delay ${e}.`),to=e=>new(e?tn:ti),ts=(e,t,r)=>{var n=!1,i=(...t)=>e(...t,a),a=()=>n!==(n=!1)&&(r(i),!0),l=()=>n!==(n=!0)&&(t(i),!0);return l(),[a,l]},ee=()=>{var e,t=new Set;return[(r,n)=>{var i=ts(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,i[0]),i},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tv=(e,t,r)=>null==e?L:eu(t)?null==(t=t[0])?L:t+" "+tv(e,t,r):null==t?L:1===t?e:null!=r?r:"is"===e?"are":e+"s",tc=!0,tf=(e,t,r)=>r?(tc&&e6(r,"[",t,"m"),eu(e)?e6(r,...e):e6(r,e),tc&&e6(r,"[m"),r):tf(e,t,[]).join(""),tp=(e,t,r=!1)=>e&&(e.length>t?r?`${e.slice(0,t)}... [and ${e.length-t} more]`:e.slice(0,t-1)+"â€¦":e),tg=(e,t)=>{var l,r=[],n={},i={},a=0;for(l in t)l===t[l]&&(Object.defineProperty(i,l,{value:l,writable:!1,enumerable:!0,configurable:!1}),n[l]=a++,r.push(l));var o=(t,r=!0)=>null==t?L:null!=n[t]?t:r?F(`The ${e} "${t}" is not defined.`):L,u={writable:!1,enumerable:!1,configurable:!1};return Object.defineProperties(i,{parse:{value:o,...u},ranks:{value:n,...u},levels:{value:r,...u},compare:{value(e,t){e=n[o(e)],t=n[o(t)];return e<t?-1:+(t<e)},...u}}),i},tm=Symbol(),ty=(e,{delimiters:t=["|",";",","],decode:r=!0,lowerCase:n}={})=>{var i,l;return e?(null==(l=e.split("=").map(e=>(e=r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim(),n?e.toLowerCase():e)))[1]&&(l[1]=""),l[2]=l[1]&&(el(t)?t=[t]:eu(t))&&tV(t,e=>1<(i=l[1].split(e)).length?tR(i):L)||(l[1]?[l[1]]:[]),l):L},tb=(e,{delimiters:t=!0,requireAuthority:r,...n}={})=>null==e?L:tT(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,i,a,l,o,u,s,d,v,c,f)=>{e={source:e,scheme:r,urn:r?!i:!i&&L,authority:a,user:l,password:o,host:null!=u?u:s,port:null!=d?parseInt(d):L,path:v,query:!1===t?c:c?tw(c,{...n,delimiters:t}):L,fragment:f};return e.path=e.path||(e.authority?e.urn?"":"/":L),e}),tw=(e,t)=>tk(e,"&",t),tk=(e,t,{delimiters:r=!0,...n}={})=>{e=tH(null==e||null==(e=e.match(/(?:^.*?\?|^)([^#]*)/))||null==(e=e[1])?void 0:e.split(t),e=>{var[e,a,l]=null!=(e=ty(e,{...n,delimiters:!1===r?[]:!0===r?L:r}))?e:[];return null!=(e=null==e?void 0:e.replace(/\[\]$/,""))?!1!==r?[e,1<l.length?l:a]:[e,a]:tz}),t=rr(tX(e,!1),([e,t])=>[e,!1!==r?1<t.length?t1(t):t[0]:t.join(",")]);return t&&(t[tm]=e),t},tS=(e,t)=>t&&null!=e?t.test(e):L,tx=(e,t,r)=>tT(e,t,r,!0),tT=(e,t,i,a=!1)=>null==(null!=e?e:t)?L:i?(r=L,a?(n=[],tT(e,t,(...e)=>null!=(r=i(...e))&&n.push(r))):e.replace(t,(...e)=>r=i(...e)),r):null!=(a=e.match(t))?a:L,tA=e=>null==e?void 0:e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tI=/\z./g,tE=(e,t)=>(t=ro(eC(eW(e,e=>null==e?void 0:e.length)),"|"))?RegExp(t,"gu"):tI,tN={},t$=e=>e instanceof RegExp,tO=(r,n=[","," "])=>{var i;return t$(r)?r:eu(r)?tE(eO(r,e=>null==(e=tO(e,n))?void 0:e.source)):er(r)?r?/./g:tI:el(r)?null!=(i=(e=tN)[t=r])?i:e[t]=tT(r||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,r)=>t?RegExp(t,"gu"):tE(eO(tC(r,RegExp(`(?<!(?<!\\\\)\\\\)[${ro(n,tA)}]`)),e=>e&&`^${ro(tC(e,RegExp("(?<!(?<!\\\\)\\\\)\\*")),e=>tA(t_(e,/\\(.)/g,"$1")),".*")}$`))):L},tC=(e,t,r=!0)=>null==e?L:r?tC(e,t,!1).filter(X):e.split(t),t_=(e,t,r)=>null!=(t=null==e?void 0:e.replace(t,r))?t:e,tj=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return eY(r,{push(n,i){for(var a=[n,i],l=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,o=0;o<r.length;o++){var u,s,d=r[o];if(e(a[1],d[0])<0)return l(r.splice(o,0,a));if(e(a[0],d[1])<=0){if(e(a[0],d[0])<0&&(u=d[0]=a[0]),0<e(a[1],d[1])&&(u=d[1]=a[1]),!((null==(s=r[o+1])?void 0:s[0])<d[1]))return l(null!=u);u=a=r.splice(o--,1)[0]}}return l(a&&(r[r.length]=a))},width:0})},tF=e=>{for(var t=e;t;)t=Object.getPrototypeOf(e=t);return e},tU=(e,t)=>{if(!e||tF(e)===t)return e;for(var r of e.document.getElementsByTagName("iframe"))try{if(e=tU(r.contentWindow,t))return e}catch{}},tM=e=>null==e?e:globalThis.window?tU(window,tF(e)):globalThis,tq=!1,tz=Symbol(),tR=e=>(tq=!0,e),tP=Symbol(),tD=Symbol(),tB=Symbol.iterator,tW=(e,t,r)=>{if(null==e||e[tP])throw t;e=tM(e);if(!e)throw t;var l,i=()=>(e,t,r,n,i)=>{var a,o,l=0;for(o of e)if((a=t?t(o,l++,n,i):o)!==tz){if(a===tR)break;if(n=a,r&&r.push(a),tq){tq=!1;break}}return r||n},a=(e.Array.prototype[tP]=(e,t,r,n,i)=>{for(var l,o=0,u=e.length;o<u;o++)if(l=e[o],(l=t?t(l,o,n,i):l)!==tz){if(l===tR)break;if(n=l,r&&r.push(l),tq){tq=!1;break}}return r||n},i());for(l of(e.Object.prototype[tP]=(e,t,r,n,l)=>{if(e[tB])return(e.constructor===Object?a:Object.getPrototypeOf(e)[tP]=i())(e,t,r,n,l);var u,d,s=0;for(d in e)if(u=[d,e[d]],(u=t?t(u,s++,n,l):u)!==tz){if(u===tR)break;if(n=u,r&&r.push(u),tq){tq=!1;break}}return r||n},e.Object.prototype[tD]=function(){var t,e;return this[tB]||this[Q]?this.constructor===Object?null!=(e=this[Q]())?e:this[tB]():((e=Object.getPrototypeOf(this))[tD]=null!=(t=e[Q])?t:e[tB],this[tD]()):function*(e){for(var t in e)yield[t,e[t]]}(this)},[e.Map.prototype,e.WeakMap.prototype,e.Set.prototype,e.WeakSet.prototype,Object.getPrototypeOf(function*(){})]))l[tP]=i(),l[tD]=l[tB];return e.Number.prototype[tP]=(e,t,r,n,i)=>a(tJ(e),t,r,n,i),e.Number.prototype[tD]=tJ,e.Function.prototype[tP]=(e,t,r,n,i)=>a(tL(e),t,r,n,i),e.Function.prototype[tD]=tL,r()};function*tJ(e=this){for(var t=0;t<e;t++)yield t}function*tL(e=this){for(var t=void 0;void 0!==(t=e(t));)yield t}var tV=(e,t,r,n)=>{try{return e?e[tP](e,t,void 0,r,n):null==e?e:void 0}catch(i){return tW(e,i,()=>tV(e,t,r,n))}},tH=(e,t,r=[],n,i=e)=>{try{return e||0===e||""===e?e[tP](e,t,r,n,i):null==e?e:void 0}catch(a){return tW(e,a,()=>tH(e,t,r,n,i))}},tK=(e,t=!0,r=!1)=>tH(e,!0===t?e=>null!=e?e:tz:t?t.has?e=>null==e||t.has(e)===r?tz:e:(e,n,i)=>!t(e,n,i)===r?e:tz:e=>e||tz),tG=(e,t,r=-1,n=[],i,a=e)=>tH(e,(e,i,a)=>null!=(t?e=t(e,i,a):e)&&e[Symbol.iterator]&&"string"!=typeof e&&r?(tG(e,void 0,r-1,n,e),tz):e,n,i,a),tX=(e,t,r)=>{var n,i,a,l;return null!=t&&"function"!=typeof t&&([t,r]=[void 0,t]),tV(e,!1!==r?(a=new Map,(e,r,n)=>{void 0!==(l=t?t(e,r,n):e)[0]&&t9(a,l[0],()=>[]).push(l[1])}):(a={},(e,r,o)=>(l=t?t(e,r,o):e)&&void 0!==l[0]&&(null!=(r=(n=a)[i=l[0]])?r:n[i]=[]).push(l[1]))),a},tY=e=>void 0===e?[]:null!=e&&e[tB]&&"string"!=typeof e?e:[e],tQ=e=>null==e||eu(e)?e:e[tB]&&"string"!=typeof e?[...e]:[e],t0=(e,t)=>!0===tV(e,(r,n,i)=>(t?t(r,n,i,e):r)?tq=!0:r),t1=(e,...t)=>{var r,n;for(n of e=!t.length&&eg(e)?e:[e,...t])if(null!=n){if(eg(n)){(null!=r?r:r=[]).push(...n);continue}(null!=r?r:r=[]).push(n)}return r},t2=(e,t,r)=>(r?-1:1)*(e===t?0:"string"==typeof e?"string"==typeof t?e.localeCompare(t):1:"string"==typeof t?-1:null==e?null==t?0:-1:null==t?1:e-t),t5=(e,t,r)=>tQ(e).sort("function"==typeof t?(e,n)=>t2(t(e),t(n),r):eu(t)?t.length?(e,n)=>{for(var i=0,a=0;a<t.length&&!i;a++)i=t2(t[a](e),t[a](n),r);return i}:(e,t)=>t2(e,t,r):(e,r)=>t2(e,r,t)),t3=Symbol(),t6=Symbol(),t4=Symbol(),t8=(e,t,r)=>{if(null==e||e[t6])throw t;var i,e=tM(e);if(!e||e.Object.prototype[t3])throw t;for({prototype:i}of[e.Map,e.WeakMap])i[t3]=function(e,t){return void 0===t?this.delete(e):this.get(e)!==t&&!!this.set(e,t)},i[t6]=i.get;for({prototype:i}of[e.Set,e.WeakSet])i[t3]=function(e,t,r=!1){return t||r&&void 0===t?!this.has(e)&&!!this.add(e):this.delete(e)},i[t6]=i.has,i[t4]=function(e){for(var t of e)void 0!==t&&this.add(t);return this};for({prototype:i}of(e.Array.prototype[t4]=function(e){return this.push(...e),this},[e.Object,e.Array]))i[t3]=function(e,t){return void 0===t?void 0!==this[e]&&(delete this[e],!0):(this[e]=t)!==t},i[t6]=function(e){return this[e]};return r()},t9=(e,t,r)=>{try{if(null==e)return e;var n=e[t6](t);if(void 0===n&&void 0!==(n="function"==typeof r?r():r)){if(null!=n&&n.then)return n.then(r=>void 0===r?r:e[t3](t,r));e[t3](t,n)}return n}catch(n){return t8(e,n,()=>t9(e,t,r))}},t7=(e,t,r)=>{try{return!0===(null==e?void 0:e[t3](t,r,!0))}catch(n){return t8(e,n,()=>t7(e,t,r))}},re=(e,t,r)=>{try{return e[t3](t,r),r}catch(n){return t8(e,n,()=>re(e,t,r))}},rt=(e,...t)=>{try{return null==e?e:e[t4](t)}catch(r){return t8(e,r,()=>rt(e,...t))}},rr=(e,t)=>{var r={};return tV(e,t?(e,n,i)=>(e=t(e,n,i))&&("symbol"!=typeof e||e!==tz&&e!==tR)?r[e[0]]=e[1]:e:e=>e&&("symbol"!=typeof e||e!==tz&&e!==tR)?r[e[0]]=e[1]:e),r},rn=(e,...t)=>{try{return(null==e?void 0:e.constructor)===Object?tV(t,t=>tV(t,t=>t&&(e[t[0]]=t[1]))):tV(t,t=>tV(t,t=>t&&e[t3](t[0],t[1]))),e}catch(r){return t8(e,r,()=>rn(e,...t))}},ri=(e,t,r={})=>{if(null!=e){var l,{deep:n=!0,overwrite:i=!0,nulls:a=!1}=r;for(l of tY(t))tV(l,t=>{var o,u;t&&([t,o]=t,u=e[t],(a?null==u:void 0===u)?e[t]=o:n&&(null==o?void 0:o.constructor)===Object&&(null==u?void 0:u.constructor)===Object?ri(u,o,r):i&&(e[t]=o))})}return e},ra=(e,t)=>null==e?e:rr(t,t=>null!=e[t]||t in e?[t,e[t]]:tz),rl=e=>null==e||"boolean"==typeof e||""===e.toString(),ro=(e,t,r)=>null==e?e:eg(e)?tK("function"==typeof t?tH(e,t):(r=t,e),rl,!0).join(null!=r?r:""):rl(e)?"":e.toString(),ru=(e,t,r,n)=>{var i,o;return e||0===e?"function"==typeof t?ru(tH(e,t),r,n):(i=[],n=tV(e,(e,t,r)=>rl(e)?tz:(r&&i.push(r),e.toString())),[t,o]=eu(t)?t:[,t],o=(null!=o?o:o="and")[0]===(t=null==t?",":t)?o+" ":" "+(o?o+" ":""),t=i.length?""+i.join(t+" ")+o+n:null!=n?n:"",r?r(t,i.length+ +(null!=n)):t):null==e?e:void 0},rs=tg("data classification",{never:"never",anonymous:"anonymous",indirect:"indirect",direct:"direct",sensitive:"sensitive"}),rd=["necessary","performance","functionality","marketing","personalization","security"],rv=rr(rd,e=>[e,e]),rc=(Object.freeze(eP(rd.map(e=>[e,!0]))),(e,t)=>"personalization"===e&&!0!==(null==t?void 0:t.personalization)?"functionality":"security"===e&&!0!==(null==t?void 0:t.security)?"necessary":e),rf=(e,t)=>{var r=e;return!0!==(null==t?void 0:t.personalization)&&null!=r.personalization&&(null!=(r=r===e?{...e}:r).functionality?r.personalization=r.functionality:r.functionality=r.personalization,delete r.personalization),!0!==(null==t?void 0:t.security)&&null!=r.security&&delete(r=r===e?{...e}:r).security,r},rp={names:rd,specificNames:rd.filter(e=>"necessary"!==e),parse(e,{names:t=!1,includeDefault:r=!0,validate:n=!0}={}){if(null==e)return e;if(e.purposes&&(e=e.purposes),el(e)&&(e=e.split(",")),eu(e)){var a,i={};for(a of e)if(a!==rb){if(!rv[a]){n&&F(`The purpose name '${a}' is not defined.`);continue}"necessary"!==a&&(i[a]=!0)}e=i}return t?(t=tH(e,([e,t])=>rv[e]&&t?e:tz)).length||!r?t:["necessary"]:e},get all(){return{functionality:!0,marketing:!0,performance:!0,personalization:!0,security:!0}},test(e,t,{intersect:r,optionalPurposes:n,targetPurpose:i}){if("boolean"==typeof n&&(n={personalization:n,security:n}),i&&"necessary"!==(i=rc(i,n))&&!t[rc(i,n)])return!1;if(e=rf(e,n),t=rf(t,n),r){for(var a in t)if(rv[a]&&t[a]&&!e[a])return!1;if("all"===r)for(var a in e)if(rv[a]&&e[a]&&!t[a])return!1;return!0}var l=!1;for(a in e)if(rv[a]&&e[a]){if(t[a])return!0;l=!0}return!l}},rh=(tg("data restriction",{public:"public","trusted-write":"trusted-write","trusted-only":"trusted-only"}),e=>{var t;return`${null!=(t=null==e?void 0:e.classification)?t:"anonymous"} data for ${ru(rp.parse(null==e?void 0:e.purposes,{names:!0}))}  purposes.`}),rg={anonymous:{classification:"anonymous",purposes:{}},clone:e=>e&&{classification:e.classification,purposes:{...e.purposes}},equals:(e,t)=>e===t||e&&t&&e.classification===t.classification&&rp.test(e.purposes,t.purposes,{intersect:"all",optionalPurposes:!0}),serialize(e){var t=rp.parse(e.purposes,{names:!0,includeDefault:!1});return e.classification&&"anonymous"!==e.classification||null!=t&&t.length?e.classification+":"+t:null},deserialize(e,t){var a;return e?([e,a]=e.split(":"),{classification:null!=(e=rs.parse(e,!1))?e:"anonymous",purposes:null!=(e=rp.parse(a,{validate:!1}))?e:{}}):t?rg.clone(t):{classification:"anonymous",purposes:{}}}},rm=(e,t)=>(!(i=null==e?void 0:e.metadata)||t&&(delete i.posted,delete i.queued,Object.entries(i).length)||delete e.metadata,e),ry=e=>!(null==e||!e.patchTargetId),rb="@schema",rw=Symbol(),rk=e=>void 0===e?"undefined":tp(JSON.stringify(e),40,!0),rS=/^\d{4}-\d{2}-\d{2}(?:T00:00:00(?:\.000)?)?Z$/,rx=/^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{1,7})?)?Z$/,rT=/^\{?([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\}?$/,rA=/^(?:(?:([\w+.-]+):)(\/\/)?)((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))(?::(\d*))?)(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/,rI=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:(\[(([0-9.]+)|([0-9a-f:]+))\])|(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9]))?$/,rE=(e,t,r)=>(e.push({path:"",type:null,source:t,message:rk(t)+` ${r}.`}),rw),rN=(e,t,r)=>"number"==typeof e&&(!t&&Number.isFinite(e)&&!Number.isNaN(e)||Number.isInteger(e))||r&&"string"==typeof e&&rN((t?parseInt:parseFloat)(e),t,!1),r$={},rd=((e=>{null==e.primitive&&(e.primitive=typeof(null!=(r=null==(r=e.enum)?void 0:r[0])?r:""));var r,u,o=null!=(o=r$[r=e.primitive+"-"+(null!=(r=e.format)?r:"")+"-"+!1])?o:r$[r]=(e=>{switch(e.primitive){case"boolean":return(e,t)=>"boolean"==typeof e?e:rE(t,e,"is not a Boolean");case"date":return(e,t)=>e&&rS.test(e)&&!isNaN(+new Date(e))?e:rE(t,e,"is not a valid ISO 8601 UTC date (time is not allowed, and the 'Z' postfix must be added to indicate Coordinated Universal Time)");case"timestamp":case"datetime":var r="format"in e?"unix"!==e.format:"datetime"===e.primitive;return(e,n)=>{if(!e||rN(e,!1,!1)){if(!rN(e,!0,!1))return rE(n,e,"is not a valid UNIX timestamp");e*=1}else if(!rx.test(e)||isNaN(+new Date(e)))return rE(n,e,"is not a valid ISO 8601 UTC date/time (the 'Z' postfix must be added to indicate Coordinated Universal Time)");return e=new Date(e),r?new Date(e).toISOString():+e};case"duration":return(e,r)=>rN(e,!0,!1)?+e:rE(r,e,"is not a valid duration (must be provided as milliseconds)");case"integer":return(e,r)=>rN(e,!0,!1)?+e:rE(r,e,"is not a valid integer");case"number":return(e,r)=>rN(e,!1,!1)?e:rE(r,e,"is not a number");case"string":switch(e.format){case"uri":return(e,t)=>"string"==typeof e&&rA.test(e)?e:rE(t,e,"is not a valid URI");case"url":return(e,t)=>{var r="string"==typeof e&&rA.exec(e);return r?r[2]?e:rE(t,e,"is not a valid URL (it is a URI, but a URL is required)"):rE(t,e,"is not a valid URL")};case"urn":return(e,t)=>{var r="string"==typeof e&&rA.exec(e);return r?"urn"!==r[1]||r[2]?rE(t,e,"is not a valid URN (it is a URI, but a URN is required)"):e:rE(t,e,"is not a valid URN")};case"email":return(e,t)=>"string"==typeof e&&rI.test(e)?e.toLowerCase():rE(t,e,"is not a valid email address")}return(e,t)=>"string"==typeof e?e:rE(t,e,"is not a string");case"uuid":return(e,t)=>{var r;return null!=(r="string"==typeof e?null==(r=rT.exec(e))?void 0:r[1].toLowerCase():null)?r:rE(t,e,"is not a valid UUID")};default:throw TypeError(`'${rk(e)}' is not a supported primitive type.`)}})(e),d=e.maxLength,c=(null!=d&&(v=o,o=(e,t)=>(e=v(e,t))!==rw&&e.length>d?rE(t,e,`exceeds the maximum allowed ${d} number of characters`):e),e.min),f=e.max;if(null==c&&null==f||(p=null!=c?null!=f?`between ${c} and `+f:"at least "+c:"at most "+f,v=o,o=(e,t)=>(e=v(e,t))===rw||(null==c||c<=e)&&(null==f||e<=f)?e:rE(t,e,p)),"enum"in e){var v=o;if(!(u=new Set((Array.isArray(e.enum)?e.enum:[e.enum]).map(e=>{var t=[];if((e=v(e,t))===rw)throw TypeError(t[0]);return e}))).size)throw TypeError("At least one enum value to test against is required.");var p="is not the constant value "+ru(e.enum.map(e=>JSON.stringify(e)),"or"),o=(e,t)=>(e=v(e,t))===rw||u.has(e)?e:rE(t,e,p)}(e=>null==e||e instanceof Set||new Set(e[tB]&&"string"!=typeof e?e:[e]))(u)})({primitive:"string",format:"uri"}),tg("variable scope",{global:"global",session:"session",device:"device",user:"user"})),rC=({key:e,scope:t="",entityId:r="",source:n=""},i="")=>["'"+e+"'",n&&"from '"+n+"'",i,t&&"in "+t+" scope",r&&"for '"+r+"'"].filter(e=>e).join(" "),r_=e=>null==e?e:{source:e.source,key:e.key,scope:e.scope,entityId:e.entityId},rj=((I={})[I.Success=200]="Success",I[I.Created=201]="Created",I[I.NotModified=304]="NotModified",I[I.Forbidden=403]="Forbidden",I[I.NotFound=404]="NotFound",I[I.BadRequest=405]="BadRequest",I[I.Conflict=409]="Conflict",I[I.Error=500]="Error",I),rF=(e,t=!0)=>null!=(null==e?void 0:e.value)||!t&&(!e||404===e.status),rU=(e,t=!0)=>e&&(e.status<400||!t&&404===e.status);function rM(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var rq=e=>{var t=rC(e),r=e.error;return e.status<400?`${t} succeeded with status ${e.status} - ${rj[e.status]}.`:`${t} failed with status ${e.status} - ${rj[e.status]}${r?` (${r})`:""}.`};class rz extends Error{constructor(e,t){super(null!=t?t:"One or more operations failed."),rM(this,"succeeded",void 0),rM(this,"failed",void 0),this.succeeded=null!=(t=null==e?void 0:e.filter(e=>rU(e,!1)))?t:[],this.failed=null!=(t=null==e?void 0:e.filter(e=>!rU(e,!1)))?t:[]}}var rR=e=>!!e.callback,rP=e=>!!e.poll,rD=Symbol(),rB=(e,t,r,{poll:n,logCallbackError:i}={})=>{var a=eu(t)?t:[t],l=[],o=(async()=>{var s,d,u,v,c,t=await r(a.filter(e=>e)),o=[];for(u of a)u&&null!=(d=t.get(u))&&(d[rD]=u,rR(u)&&o.push([u,d,e=>!0===u.callback(e)]),rP(u))&&o.push([u,d,e=>{var t;return!rF(e,!1)||(t=!rF(e,!1)||u.poll(e.value,e[rD]===u,s),s=e.value,t)}]);for([u,v,c]of o)try{var f="get"===e?async e=>!0===await c(e)&&(null==n?void 0:n(u,f)):c;await f(v)}catch(t){var p=`${e} callback for ${rC(u)} failed: ${t}.`;i?i(p,u,t):l.push(p)}return t})(),u=async(r,n)=>{var d,v,c,i=await o,u=[],s=[];for(d of a)d?null==(c=i.get(d))?s.push(`No result for ${rC(d)}.`):!r||rU(c,n||"set"===e)?u.push(r&&c.status===rj.NotFound?void 0:1<r?null!=(v=c.value)?v:void 0:c):s.push(rq(c)):u.push(void 0);if(s.push(...l),s.length)throw 10<s.length&&s.push(`
(and ${s.splice(10).length} more...)`),new rz(u,s.join("\n"));return a===t?u:u[0]};return Object.assign(P(()=>u(1,!1)),{as:()=>u(1,!1),all:()=>u(0,!1),require:()=>u(1,!0),value:(e=!1)=>u(2,e),values:(e=!1)=>u(2,e)})},rW=e=>e&&"string"==typeof e.type,rJ=(e=>t=>(null==t?void 0:t.type)&&e.some(e=>e===(null==t?void 0:t.type)))(["view"]),rL=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rV=(e,t)=>{var r;return t&&(!(l=e.get(a=t.tag+(null!=(r=t.value)?r:"")))||(null!=(r=l.score)?r:1)<(null!=(r=t.score)?r:1))&&e.set(a,t)},rH=(e,t="",r=new Map)=>{if(e)return eg(e)?tV(e,e=>rH(e,t,r)):el(e)?tT(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,i,a,l,o,u)=>{i={tag:(n?rL(n)+"::":"")+t+rL(i),value:rL(null!=(n=null!=a?a:l)?n:o)};u&&10!==parseFloat(u)&&(i.score=parseFloat(u)/10),rV(r,i)}):rV(r,e),r},rK=tg("local variable scope",{view:"view",tab:"tab",shared:"shared"}),rG=tg("variable scope",{...rK,...rd}),rX=e=>("global"!==e.scope&&e.entityId&&(e.entityId=void 0),e),rZ=e=>null!=e&&!!e.scope&&null!=rK.ranks[e.scope],rY=e=>null==e?e:[e.scope,e.key,e.targetId].join("\0"),rQ=e=>{e=e.split("\0");return{scope:e[0],key:e[1],targetId:e[2]}},r1=()=>()=>F("Not initialized."),r2=window,r5=document,r3=r5.body,r6=(e,t)=>!(null==e||!e.matches(t)),r4=((e=>tc=e)(!!r2.chrome),V),r8=(e,t,r=(e,t)=>r4<=t)=>{for(var n=0,i=H;1===(null==e?void 0:e.nodeType)&&!r(e,n++)&&t(e,(e,t)=>(null!=e&&(a=e,i=t!==K&&null!=a),K),n-1)!==H&&!i;){var a,o=e;null===(e=e.parentElement)&&(null==o?void 0:o.ownerDocument)!==r5&&(e=null==o||null==(o=o.ownerDocument.defaultView)?void 0:o.frameElement)}return a},r9=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":var r;return null==(r=(""+e).trim())?void 0:r.toLowerCase();case!1:case"r":case"b":return""===e||en(e);case"n":return parseFloat(e);case"j":return z(()=>JSON.parse(e),G);case"h":return z(()=>n6(e),G);case"e":return z(()=>null==n8?void 0:n8(e),G);default:return eu(t)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:r9(e,t[0])):void 0}},r7=(e,t,r)=>r9(null==e?void 0:e.getAttribute(t),r),ne=(e,t,r)=>r8(e,(e,n)=>n(r7(e,t,r))),nt=(e,t)=>null==(e=r7(e,t))||null==(t=e.trim())?void 0:t.toLowerCase(),nr=e=>null==e?void 0:e.getAttributeNames(),nn=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,ni=e=>null!=e?e.tagName:null,nl=e=>({x:eb(scrollX,e),y:eb(scrollY,e)}),no=(e,t)=>t_(e,/#.*$/,"")===t_(t,/#.*$/,""),nu=(e,t,r=K)=>(u=ns(e,t))&&B({xpx:u.x,ypx:u.y,x:eb(u.x/r3.offsetWidth,4),y:eb(u.y/r3.offsetHeight,4),pageFolds:r?u.y/window.innerHeight:void 0}),ns=(e,t)=>null!=t&&t.pointerType&&null!=(null==t?void 0:t.pageY)?{x:t.pageX,y:t.pageY}:e?({x:s,y:d}=nv(e),{x:s,y:d}):void 0,nv=(e,t=!0)=>e?(v=e.getBoundingClientRect(),o=t?nl(H):{x:0,y:0},{x:eb(v.left+o.x),y:eb(v.top+o.y),width:eb(v.width),height:eb(v.height)}):void 0,nc=(e,t,r,n={capture:!0,passive:!0})=>(t=tQ(t),ts(r,r=>tV(t,t=>e.addEventListener(t,r,n)),r=>tV(t,t=>e.removeEventListener(t,r,n)))),np=()=>({...o=nl(K),width:window.innerWidth,height:window.innerHeight,totalWidth:r3.offsetWidth,totalHeight:r3.offsetHeight}),nh=new WeakMap,ng=e=>nh.get(e),nm=(e,t=H)=>(t?"--track-":"track-")+e,ny=(e,t,r,n,i,a)=>(null==t?void 0:t[1])&&tV(nr(e),l=>{var o;return null!=(o=(c=t[0])[f=l])?o:c[f]=(a=H,!el(n=tV(t[1],([t,r,n],i)=>tS(l,t)&&(a=void 0,!r||r6(e,r))&&ex(null!=n?n:l)))||(i=e.getAttribute(l))&&!en(i)||rH(i,t_(n,/\-/g,":"),r),a)}),nb=()=>{},nw=(e,t)=>{if(p===(p=nE.tags))return nb(e,t);var r=e=>e?t$(e)?[[e]]:eg(e)?e_(e,r):[ec(e)?[tO(e.match),e.selector,e.prefix]:[tO(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(tG(p,([,e])=>e,1))]];(nb=(e,t)=>ny(e,n,t))(e,t)},nk=(e,t)=>ro(ej(nn(e,nm(t,K)),nn(e,nm("base-"+t,K)))," "),nS={},nx=(e,t,r=nk(e,"attributes"))=>{var n;r&&ny(e,null!=(n=nS[r])?n:nS[r]=[{},tx(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tO(r||n),,t])],t),rH(nk(e,"tags"),void 0,t)},nT=(e,t,r=H,n)=>null!=(r=null!=(r=r?r8(e,(e,r)=>r(nT(e,t,H)),eh(r)?r:void 0):ro(ej(r7(e,nm(t)),nn(e,nm(t,K)))," "))?r:n&&(h=ng(e))&&n(h))?r:null,nA=(e,t,r=H,n)=>""===(g=nT(e,t,r,n))||(null==g?g:en(g)),nI=(e,t,r,n)=>e&&(null==n&&(n=new Map),nx(e,n),r8(e,e=>{nw(e,n),rH(null==r?void 0:r(e),void 0,n)},t),n.size)?{tags:[...n.values()]}:{},nE={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,json:!1,impressionThreshold:1e3,captureContextMenu:!0,tags:{default:["data-id","data-name"]}},nN=[],n$=[],nO=(e,t=0)=>e.charCodeAt(t),n_=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>nN[n$[t]=e.charCodeAt(0)]=t),e=>{for(var t,r=0,n=e.length,i=[];r<n;)t=e[r++]<<16|e[r++]<<8|e[r++],i.push(n$[(16515072&t)>>18],n$[(258048&t)>>12],n$[(4032&t)>>6],n$[63&t]);return i.length+=n-r,(e=>String.fromCharCode(...e))(i)}),nj=e=>{for(var t,r=0,n=0,i=e.length,a=new Uint8Array(3*(i/4|0)+(i+3&3)%3);r<i;)a[n++]=nN[nO(e,r++)]<<2|(t=nN[nO(e,r++)])>>4,r<i&&(a[n++]=(15&t)<<4|(t=nN[nO(e,r++)])>>2,r<i)&&(a[n++]=(3&t)<<6|nN[nO(e,r++)]);return a},nF={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},nU=(e=256)=>e*Math.random()|0,nq={exports:{}},{deserialize:nz,serialize:nR}=((()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,i=new Uint8Array(128),a=0;if(t&&t.multiple)for(var l=0;l<e.length;l++)o(e[l]);else o(e);return i.subarray(0,a);function o(e,i){var c,l;switch(typeof e){case"undefined":s(192);break;case"boolean":s(e?195:194);break;case"number":(e=>{var t;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?s(e):0<e&&e<=255?d([204,e]):-128<=e&&e<=127?d([208,e]):0<e&&e<=65535?d([205,e>>>8,e]):-32768<=e&&e<=32767?d([209,e>>>8,e]):0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?d([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?d([211,(t=e/4294967296)>>>24,t>>>16,t>>>8,t,(t=e%4294967296)>>>24,t>>>16,t>>>8,t]):-0x8000000000000000<=e&&e<=0x8000000000000000?(s(211),v(e)):d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(r=new ArrayBuffer(8))).setFloat64(0,e),s(203),d(new Uint8Array(r)))})(e);break;case"string":(c=(l=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var i=0,a=new Uint8Array(e.length*(t?1:4)),l=0;l!==r;l++){var o=e.charCodeAt(l);if(o<128)a[i++]=o;else{if(o<2048)a[i++]=o>>6|192;else{if(55295<o&&o<56320){if(++l>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(l);if(u<56320||57343<u)throw Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+l+" out of range");a[i++]=(o=65536+((1023&o)<<10)+(1023&u))>>18|240,a[i++]=o>>12&63|128}else a[i++]=o>>12|224;a[i++]=o>>6&63|128}a[i++]=63&o|128}}return t?a:a.subarray(0,i)})(e)).length)<=31?s(160+c):d(c<=255?[217,c]:c<=65535?[218,c>>>8,c]:[219,c>>>24,c>>>16,c>>>8,c]),d(l);break;case"object":null===e?s(192):e instanceof Date?(e=>{var r,t=e.getTime()/1e3;0===e.getMilliseconds()&&0<=t&&t<4294967296?d([214,255,t>>>24,t>>>16,t>>>8,t]):0<=t&&t<17179869184?d([215,255,(r=1e6*e.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t]):(d([199,12,255,(r=1e6*e.getMilliseconds())>>>24,r>>>16,r>>>8,r]),v(t))})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((l=(c=e).length)<=255?d([196,l]):d(l<=65535?[197,l>>>8,l]:[198,l>>>24,l>>>16,l>>>8,l]),d(c)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u:e=>{var r,t=0;for(r in e)void 0!==e[r]&&t++;for(r in t<=15?s(128+t):d(t<=65535?[222,t>>>8,t]:[223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(o(r),o(n))}})(e);break;default:if(i||!t||!t.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof t.invalidTypeReplacement?o(t.invalidTypeReplacement(e),!0):o(t.invalidTypeReplacement,!0)}}function u(e){var t=e.length;t<=15?s(144+t):d(t<=65535?[220,t>>>8,t]:[221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;r<t;r++)o(e[r])}function s(e){if(i.length<a+1){for(var t=2*i.length;t<a+1;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i[a]=e,a++}function d(e){if(i.length<a+e.length){for(var t=2*i.length;t<a+e.length;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i.set(e,a),a+=e.length}function v(e){var t,e=0<=e?(t=e/4294967296,e%4294967296):(t=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));d([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function r(e,t){var r,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(i());else r=i();return r;function i(){var t=e[n++];if(0<=t&&t<=127)return t;if(128<=t&&t<=143)return s(t-128);if(144<=t&&t<=159)return d(t-144);if(160<=t&&t<=191)return v(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return u(-1,1);if(197===t)return u(-1,2);if(198===t)return u(-1,4);if(199===t)return c(-1,1);if(200===t)return c(-1,2);if(201===t)return c(-1,4);if(202===t)return o(4);if(203===t)return o(8);if(204===t)return l(1);if(205===t)return l(2);if(206===t)return l(4);if(207===t)return l(8);if(208===t)return a(1);if(209===t)return a(2);if(210===t)return a(4);if(211===t)return a(8);if(212===t)return c(1);if(213===t)return c(2);if(214===t)return c(4);if(215===t)return c(8);if(216===t)return c(16);if(217===t)return v(-1,1);if(218===t)return v(-1,2);if(219===t)return v(-1,4);if(220===t)return d(-1,2);if(221===t)return d(-1,4);if(222===t)return s(-1,2);if(223===t)return s(-1,4);if(224<=t&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function a(t){for(var a,r=0,i=!0;0<t--;)i?(r+=127&(a=e[n++]),128&a&&(r-=128),i=!1):r=(r*=256)+e[n++];return r}function l(t){for(var r=0;0<t--;)r=256*r+e[n++];return r}function o(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return n+=t,4===t?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function u(t,r){t<0&&(t=l(r));r=e.subarray(n,n+t);return n+=t,r}function s(e,t){e<0&&(e=l(t));for(var r={};0<e--;)r[i()]=i();return r}function d(e,t){e<0&&(e=l(t));for(var r=[];0<e--;)r.push(i());return r}function v(t,r){t<0&&(t=l(r));r=n;return n+=t,((e,t,r)=>{var n=t,i="";for(r+=t;n<r;){var a=e[n++];if(127<a)if(191<a&&a<224){if(r<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");a=(31&a)<<6|63&e[n++]}else if(223<a&&a<240){if(r<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");a=(15&a)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<a&&a<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+a.toString(16)+" at index "+(n-1));if(r<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");a=(7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(a<=65535)i+=String.fromCharCode(a);else{if(!(a<=1114111))throw Error("UTF-8 decode: code point 0x"+a.toString(16)+" exceeds UTF-16 reach");a-=65536,i=(i+=String.fromCharCode(a>>10|55296))+String.fromCharCode(1023&a|56320)}}return i})(e,r,t)}function c(e,t){e<0&&(e=l(t));t=l(1),e=u(e);return 255===t?(e=>{var r,t;if(4===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*t);if(8===e.length)return r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*t+r/1e6);if(12===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,t=a(8),new Date(1e3*t+r/1e6);throw Error("Invalid data length for a date value.")})(e):{type:t,data:e}}}var n={serialize:t,deserialize:r,encode:t,decode:r};nq.exports=n})(),(I=nq.exports)&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I),nP="$ref",nD=(e,t,r)=>ep(e)?L:r?t!==L:null===t||t,nB=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var i,a,l,o=(e,t,n=e[t],i=nD(t,n,r)?s(n):L)=>(n!==i&&(i!==L||eu(e)?e[t]=i:delete e[t],u(()=>e[t]=n)),i),u=e=>(null!=i?i:i=[]).push(e),s=e=>{if(null==e||eh(e)||ep(e))return L;if(ev(e)){if(e.toJSON&&e!==(e=e.toJSON()))return s(e);if(null!=(l=null==a?void 0:a.get(e)))return e[nP]||(e[nP]=l,u(()=>delete e[nP])),{[nP]:l};if(ec(e))for(var t in(null!=a?a:a=new Map).set(e,a.size+1),e)o(e,t);else!eg(e)||e instanceof Uint8Array||(!eu(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?o(e,r):(e[r]=null,u(()=>delete e[r])))}return e};return z(()=>{var r;return t?nR(null!=(r=s(e))?r:null):z(()=>JSON.stringify(e,L,2*!!n),()=>JSON.stringify(s(e),L,2*!!n))},!0,()=>null==i?void 0:i.forEach(e=>e()))},nW=e=>{var t,r,n=e=>ev(e)?e[nP]&&(r=(null!=t?t:t=[])[e[nP]])?r:(e[nP]&&delete(t[e[nP]]=e)[nP],Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(el(e)?z(()=>JSON.parse(e),()=>(console.error("Invalid JSON received.",e,Error().stack),L)):null!=e?z(()=>nz(e),()=>(console.error("Invalid message received.",e,Error().stack),L)):e)},nJ=(e,t={})=>{var r=(e,{json:t=!1,decodeJson:r=!1,...n})=>{var l,o,u,i=(e,r)=>ea(e)&&!0===r?e:u(e=el(e)?new Uint8Array(tH(e.length,t=>255&e.charCodeAt(t))):t?z(()=>JSON.stringify(e),()=>JSON.stringify(nB(e,!1,n))):nB(e,!0,n),r),a=e=>null==e?L:z(()=>nW(e),L);return t?[e=>nB(e,!1,n),a,(e,t)=>i(e,t)]:([l,o,u]=(e=>{for(var t,r,n,i,a,o,l=0n,u=0n,s=[],d=0,v=0,c=0,f=0,p=[],c=0;c<(null==e?void 0:e.length);f+=p[c]=e.charCodeAt(c++));var h=e?()=>{s=[...p],v=255&(d=f),c=-1}:()=>{},g=e=>(v=255&(d+=-s[c=(c+1)%s.length]+(s[c]=e)),e);return[e?e=>{for(h(),i=16-((t=e.length)+4)%16,a=new Uint8Array(4+t+i),n=0;n<3;a[n++]=g(nU()));for(r=0,a[n++]=g(v^16*nU(16)+i);r<t;a[n++]=g(v^e[r++]));for(;i--;)a[n++]=nU();return a}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((v^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,a=new Uint8Array(t);n<t;a[n++]=v^g(e[r++]));return a}:e=>e,(e,t=64)=>{if(null==e)return null;for(o=er(t)?64:t,h(),[l,u]=nF[o],r=0;r<e.length;l=BigInt.asUintN(o,(l^BigInt(v^g(e[r++])))*u));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+l%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):l.toString(36)}]})(e),[(e,t)=>(t?X:n_)(l(nB(e,!0,n))),e=>null!=e?nW(o(e instanceof Uint8Array?e:(r&&ek(e)?a:nj)(e))):null,(e,t)=>i(e,t)])};if(!e){var n=+(null!=(n=t.json)?n:0);if(n&&!1!==t.prettify)return(null!=m?m:m=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[n]}return r(e,t)},[nL,,]=(nJ(),nJ(null,{json:!0,decodeJson:!0}),nJ(null,{json:!0,prettify:!0})),tg=tC(""+r5.currentScript.src,"#"),rd=tC(""+(tg[1]||""),";"),nG=tg[0],nX=rd[1]||(null==(I=tb(nG,{delimiters:!1}))?void 0:I.host),nZ=e=>!(!nX||(null==(e=tb(e,{delimiters:!1}))||null==(e=e.host)?void 0:e.endsWith(nX))!==K),tg=(...e)=>t_(ro(e),/(^(?=\?))|(^\.(?=\/))/,nG.split("?")[0]),nQ=tg("?","var"),n0=tg("?","mnt"),n1=(tg("?","usr"),Symbol()),n2=Symbol(),n5=(e,t,r=K,n=H)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tf("tail.js: ","90;3"))+t);r=null==e?void 0:e[n2];null!=(e=r?e[n1]:e)&&console.log(ev(e)?tf(nL(e),"94"):eh(e)?""+e:e),r&&r.forEach(([e,t,r])=>n5(e,t,r,!0)),t&&console.groupEnd()},[n3,n6]=nJ(),[n4,n8]=[r1,r1],n9=!0,[rd,ie]=ee(),ii=(...e)=>{var r,a=e.shift();console.error(e[1]instanceof Error?e[1].message:el(e[1])?e.shift():null!=(r=null==(r=e[1])?void 0:r.message)?r:"An error occurred",null!=(r=a.id)?r:a,...e)},[ia,il]=ee(),[io,iu]=ee(),is=e=>iv!==(iv=e)&&il(iv,ih(!0,!0)),id=e=>ic!==(ic=!!e&&"visible"===document.visibilityState)&&iu(ic,!e,ip(!0,!0)),iv=(ia(id),!0),ic=!1,ip=e7(!1),ih=e7(!1),ig=(nc(window,["pagehide","freeze","beforeunload"],()=>is(!1)),nc(window,["pageshow","resume"],()=>is(!0)),nc(document,"visibilitychange",()=>(id(!0),ic&&is(!0))),il(iv,ih(!0,!0)),!1),im=e7(!1),[,ib]=ee(),iw=tt({callback:()=>ig&&ib(ig=!1,im(!1)),frequency:2e4,once:!0,paused:!0}),I=()=>!ig&&(ib(ig=!0,im(!0)),iw.restart()),iS=(nc(window,["focus","scroll"],I),nc(window,"blur",()=>iw.trigger()),nc(document.body,["keydown","pointerdown","pointermove","scroll"],I),I(),()=>im()),ix=0,iT=void 0,iA=()=>(null!=iT?iT:r1())+"_"+iI(),iI=()=>(e9(!0)-(parseInt(iT.slice(0,-2),36)||0)).toString(36)+"_"+(++ix).toString(36),i$=new Map,iO={id:iT,heartbeat:e9()},iC={knownTabs:new Map([[iT,iO]]),variables:new Map},[i_,ij]=ee(),[iF,iU]=ee(),iM=r1,iq=(e,t=e9())=>{e=i$.get(el(e)?e:rY(e));return null!=e&&e.cache&&e.cache[0]+e.cache[1]<=t?void 0:e},iz=(...e)=>{var t=e9();return iP(tH(e,e=>(e.cache=[t],[r_(e),{...e,created:t,modified:t,version:"0"}])))},iR=e=>null!=(e=tH(e,e=>{var t,r;return e&&(t=rY(e[0]),(r=i$.get(t))!==e[1])?[t,e[1],r,e[0]]:tz}))?e:[],iP=e=>{var r,n,e=iR(e);null!=e&&e.length&&(r=e9(),tV(e,([,e,t])=>{e&&!e.cache&&(e.cache=null!=(e=null==t?void 0:t.cache)?e:[r,3e3])}),rn(i$,e),(n=tK(e,([,,,e])=>0<rG.compare(e.scope,"tab"))).length&&iM({type:"patch",payload:rr(n)}),iU(tH(e,([,e,t,r])=>[r,e,t]),i$,!0))},[,iB]=(rd((e,t)=>{ia(r=>{var n;r?(r=t(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),iT=null!=(n=null==r?void 0:r[0])?n:e9(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),i$=new Map(t1(tK(i$,([,e])=>"view"===(null==e?void 0:e.scope)),tH(null==r?void 0:r[1],e=>[rY(e),e])))):sessionStorage.setItem("_tail:state",e([iT,tH(i$,([,e])=>e&&"view"!==e.scope?e:tz)]))},!0),iM=(t,r)=>{e&&(localStorage.setItem("_tail:state",e([iT,t,r])),localStorage.removeItem("_tail:state"))},nc(window,"storage",e=>{var a,l,o;"_tail:state"!==e.key||!(e=null==t?void 0:t(e.newValue))||e[2]&&e[2]!==iT||([e,{type:a,payload:l}]=e,"query"===a?r.active||iM({type:"set",payload:[tH(iC.knownTabs),tH(iC.variables)]},e):"set"===a&&r.active?(iC.knownTabs=new Map(l[0]),iC.variables=new Map(l[1]),i$=new Map(l[1]),r.trigger()):"patch"===a?(o=iR(tH(l,([e,t])=>[rQ(e),t])),rn(iC.variables,l),rn(i$,l),iU(tH(o,([,e,t,r])=>[r,e,t]),i$,!1)):"tab"===a&&(re(iC.knownTabs,e,l),l)&&ij("tab",l,!1))});var r=tt(()=>ij("ready",iC,!0),-25),n=tt({callback(){var e=e9()-1e4;tV(iC.knownTabs,([t,r])=>r[0]<e&&re(iC.knownTabs,t,void 0)),iO.heartbeat=e9(),iM({type:"tab",payload:iO})},frequency:5e3,paused:!0});ia(e=>(e=>{iM({type:"tab",payload:e?iO:void 0}),e?(r.restart(),iM({type:"query"})):r.toggle(!1),n.toggle(e)})(e),!0)},!0),ee()),[iW,iJ]=ee(),iL=(({timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var i=()=>(r?n8:n6)(localStorage.getItem("_tail:rq")),a=0,l=()=>localStorage.setItem("_tail:rq",(r?n4:n3)([iT,e9()+t]));return async(r,o,u=null!=o?1:n)=>{for(;u--;){var d=i();if((!d||d[1]<e9())&&(l(),(null==(d=i())?void 0:d[0])===iT))return 0<t&&(a=setInterval(()=>l(),t/2)),D(r,!0,()=>{clearInterval(a),localStorage.removeItem("_tail:rq")});var v=to(),[d]=nc(window,"storage",t=>{"_tail:rq"!==t.key||t.newValue||v.resolve()});e=[tl(null!=o?o:t),v],await Promise.race(e.map(e=>eh(e)?e():e)),d()}var e;null==o&&F("_tail:rq could not be acquired.")}})(),iV=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{n=n&&n9;var i,a,l=!1,o=r=>{var o=eh(t)?null==t?void 0:t(i,r):t;return!1!==o&&(iB(e,i=null!=o&&!0!==o?o:i,r,e=>(l=i===L,i=e)),!l)&&(a=n?n4(i,!0):JSON.stringify(i))};if(!r)return iL(()=>eR(1,async t=>{var l;return o(t)?400<=(l=await fetch(e,{method:null!=i?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain; charset=iso-8859-1"},body:a})).status?0===t?ex(F("Invalid response: "+await l.text())):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tl(200*(1+t))):(null!=(l=null!=(t=n?new Uint8Array(await l.arrayBuffer()):await l.text())&&t.length?null==(l=n?n8:JSON.parse)?void 0:l(t):L)&&iJ(l),ex(l)):ex()}));o(0)&&!navigator.sendBeacon(e,new Blob(null!=i?[a]:[],{type:"text/plain; charset=iso-8859-1"}))&&F("Beacon send failed.")},tg=["scope","key","entityId","source"],iK=[...tg,"purpose","ifModifiedSince","ifNoneMatch","passive"],iG=[...tg,"value","force","ttl","version"],iX=Symbol(),iZ=new Map,iQ=Symbol(),i2=Symbol(),i5=[.75,.33],i3=[.25,.33],i4=e=>tH(t5(e,[e=>e.scope,e=>e.key]),e=>e?[e,`${rC(e)}, ${rZ(e)?"client-side memory only":rh(null==(e=e.schema)?void 0:e.usage)})`,H]:tz),ae=(e,t="A"===ni(e)&&r7(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),at=(e,t=ni(e),r=nA(e,"button"))=>r!==H&&(M(t,"A","BUTTON")||"INPUT"===t&&M(nt(e,"type"),"button","submit")||r===K),ar=(e,t=!1)=>{var r;return{tagName:e.tagName,text:tp((null==(r=r7(e,"title"))?void 0:r.trim())||(null==(r=r7(e,"alt"))?void 0:r.trim())||(null==(r=e.innerText)?void 0:r.trim()),100),href:null==(r=e.href)?void 0:r.toString(),rect:t?nv(e):void 0}},ai=e=>{if(k)return k;el(e)&&([r,e]=n6(e),e=nJ(r,{decodeJson:!0})[1](e)),eY(nE,e),(e=>{n8===r1&&([n4,n8]=nJ(e,{json:!e,prettify:!1}),n9=!!e,ie(n4,n8))})(e2(nE,"encryptionKey"));var r,l,o,u,s,d,v,c,f,p,h,g,m,i=e2(nE,"key"),a=null!=(e=null==(r=r2[nE.name])?void 0:r._)?e:[];if(eu(a))return l=[],o=[],u=(e,...t)=>{var r=K;o=eW(o,n=>z(()=>{var i;return null!=(i=n[e])&&i.call(n,...t,{tracker:k,unsubscribe:()=>r=H}),r},(e=>t=>ii(e,t))(n)))},s=[],v=((e,t)=>{var r=tt(async()=>{var e=tH(iZ,([e,t])=>t0(t,e=>null==(e=e[iX])?void 0:e.refresh)?{...rQ(e),refresh:!0}:tz);e.length&&await a.get(e)},3e3),n=(e,t)=>t&&t9(iZ,e,()=>new Set).add(t),a=(ia((e,t)=>r.toggle(e,e&&3e3<=t),!0),iF(e=>tV(e,([e,t])=>{null!=t&&t.passive?delete t.passive:(e=>{var t,r;e&&(t=rY(e),null!=(r=e2(iZ,t)))&&r.size&&tV(r,r=>!0===r(e)&&n(t,r))})(t?{status:rj.Success,...t}:{status:rj.NotFound,...e})})),{get:r=>rB("get",r,async r=>{r[0]&&!el(r[0])||(l=r[0],r=r.slice(1)),null!=t&&t.validateKey(l);var o=new Map,u=[],s=tH(r,e=>{var t=iq(rY(e)),r=e.purpose;if(r&&!0!==(null==t||null==(i=t.schema)?void 0:i.usage.purposes[r]))o.set(e,{...e,status:rj.Forbidden,error:`No consent for '${r}'.`});else if(!e.refresh&&t)o.set(e,{status:rj.Success,...t});else{if(!rZ(e))return[ra(e,iK),e];var i,r=null==(i=e.init)?void 0:i.call(e);r?(r={...r_(e),version:"1",created:d,modified:d,value:r,cache:[d,null!=(i=e.ttl)?i:null==t?void 0:t.ttl]},rt(u,[r_(r),r]),o.set(e,{status:rj.Success,...r})):o.set(e,{status:rj.NotFound,...r_(e)})}return tz}),d=e9(),l=s.length&&(null==(l=await iV(e,{variables:{get:tH(s,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId}))||null==(r=l.variables)?void 0:r.get)||[],c=[];return tV(l,(e,t)=>{var n,r;(null==e?void 0:e.status)===rj.NotFound?null!=(r=null==(r=(n=s[t][1]).init)?void 0:r.call(n))&&c.push([n,{...r_(n),value:r}]):o.set(s[t][1],rX(e))}),c.length&&tV(await a.set(tH(c,([,e])=>e)).all(),(e,t)=>o.set(c[t][0],rX(e.status===rj.Conflict?{...e,status:rj.Success}:e))),u.length&&iP(u),o},{poll:(e,t)=>(t[iX]=e,n(rY(e),t)),logCallbackError:(e,t,r)=>ii("Variables.get",e,{operation:t,error:r})}),set:r=>rB("set",r,async r=>{r[0]&&!el(r[0])||(n=r[0],r=r.slice(1)),null!=t&&t.validateKey(n);for(var n,i,l=[],o=new Map,u=e9(),s=[],d=tH(r,e=>{var i,r,t=iq(rY(e));return rZ(e)?((r=null==(i=e.patch?e.patch(null==t?void 0:t.value):e.value)?void 0:{...r_(e),created:null!=(r=null==t?void 0:t.created)?r:u,modified:u,version:null!=t&&t.version?""+(parseInt(t.version)+1):"1",scope:e.scope,key:e.key,value:i,cache:[u,e.ttl]})&&(r.cache=[u,null!=(i=e.ttl)?i:3e3]),o.set(e,r?{status:t?rj.Success:rj.Created,...r}:{status:rj.Success,...r_(e)}),rt(l,[r_(e),r]),tz):e.patch?(s.push(e),tz):(void 0===(null==e?void 0:e.version)&&(e.version=null==t?void 0:t.version),[ra(e,iG),e])}),v=0;!v++||s.length;)tV(await a.get(tH(s,e=>r_(e))).all(),(e,t)=>{var r=s[t];rU(e,!1)?rt(d,[{...r,patch:void 0,value:s[t].patch(null==e?void 0:e.value),version:e.version},r]):o.set(r,e)}),s=[],tV(d.length?q(null==(i=(await iV(e,{variables:{set:tH(d,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId})).variables)?void 0:i.set,"No result."):[],(e,t)=>{var[,t]=d[t];v<=3&&t.patch&&((null==e?void 0:e.status)===rj.Conflict||(null==e?void 0:e.status)===rj.NotFound)?rt(s,t):o.set(t,rX(e))});return l.length&&iP(l),o},{logCallbackError:(e,t,r)=>ii("Variables.set",e,{operation:t,error:r})})});return iW(({variables:e})=>{e&&null!=(e=t1(tH(e.get,e=>rF(e)?e:tz),tH(e.set,e=>rU(e)?e:tz)))&&e.length&&iP(tH(e,e=>[r_(e),rU(e)?e:void 0]))}),a})(nQ,d={applyEventExtensions(e){return null==e.clientId&&(e.clientId=iA()),null==e.timestamp&&(e.timestamp=e9()),h=K,tV(l,([,t])=>{var r;return(null==(r=t.decorate)?void 0:r.call(t,e))===H&&tR(!0)})?void 0:e},validateKey:(e,t=!0)=>!i&&!e||e===i||!!t&&F(`'${e}' is not a valid key.`)}),c=((e,t)=>{var n=[],i=new WeakMap,a=new Map,l=(e,t)=>{var r;return null!=(r=e.metadata)&&r.queued?eZ(t,{type:e.type+"_patch",patchTargetId:e.clientId}):F("Source event not queued.")},o=e=>{i.set(e,e3(e))},u=async(r,n=!0,i)=>{var a;return r[0]&&!el(r[0])||(a=r[0],r=r.slice(1)),r=tH(r,e=>{if(null!=t&&t.validateKey(null!=a?a:e.key),eZ(e,{metadata:{posted:!0}}),e[iQ]){if(tV(e[iQ],(t,r,n)=>!1===t(e)||n,!1))return;delete e[iQ]}return eZ(rm(e3(e),!0),{timestamp:e.timestamp-e9()})}),n5({[n2]:tH(r,e=>[e,e.type,H])},"Posting "+ru([tv("new event",[eJ(r,e=>!ry(e))||void 0]),tv("event patch",[eJ(r,e=>ry(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),iV(e,{events:r,variables:i,deviceSessionId:null==t?void 0:t.deviceSessionId},{beacon:n})},s=async(e,{flush:r=!1,async:i=!0,variables:a}={})=>{var l=[];if(e=tH(tQ(e),e=>{var r;return null!=(r=e.metadata)&&r.queued||e6(l,e),null!=(r=ri(t.applyEventExtensions(e),{metadata:{queued:!0}}))?r:tz}),tV(l,e=>n5(e,e.type)),!i)return u(e,!1,a);r?(n.length&&e4(e,...n.splice(0)),e.length&&await u(e,!0,a)):e.length&&e6(n,...e)};return tt(()=>s([],{flush:!0}),5e3),io((e,t,r)=>{!e&&(n.length||t||1500<r)&&(e=tH(a,([e,t])=>{var[t,n]=t();return n&&(a.delete(e),i.delete(e)),null!=t?t:tz}),n.length||e.length)&&s(ej(n.splice(0),e),{flush:!0})}),{post:s,postPatch:(e,t,r)=>s(l(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var u=!1,d=()=>{u=!0};return o(e),((e,t)=>{var r;(null!=(r=(b=e)[w=iQ])?r:b[w]=new Set).add(t)})(e,o),a.set(e,()=>{if(!1===(null==n?void 0:n.isConnected))d();else{var a=i.get(e),o=t(a,d),[o,v]=(n5({diff:{snapshot:a,patched:o},stack:Error().stack},"Patch "+a.type),null!=(o=e8(o,a))?o:[]);if(o&&!U(v,a))return i.set(e,e3(v)),[l(e,o),u]}return[void 0,u]}),r&&s(e),d}}})(nQ,d),f=null,p=0,g=h=H,m=!1,k=(...e)=>{if(m){if(e.length){1<e.length&&(!e[0]||el(e[0]))&&(t=e[0],e=e.slice(1)),el(e[0])&&(r=e[0],e=ek(r)?JSON.parse(r):n6(r));var t,n=H;if((e=eW(tG(e,e=>el(e)?n6(e):e),e=>{if(!e)return H;if(aF(e))nE.tags=eY({},nE.tags,e.tagAttributes);else{if(aU(e))return nE.disabled=e.disable,H;if(az(e))return n=K,H;if(aJ(e))return e(k),H}return g||aP(e)||aq(e)?K:(s.push(e),H)})).length||n){var r=eK(e,e=>aq(e)?-100:aP(e)?-50:aW(e)?-10:90*!!rW(e));if(!f||!f.splice(h?p+1:f.length,0,...r)){for(p=0,f=r;p<f.length;p++){var y=f[p];y&&(d.validateKey(null!=t?t:y.key),z(()=>{var e=f[p];if(u("command",e),h=H,rW(e))c.post(e);else if(aR(e))v.get(tQ(e.get));else if(aW(e))v.set(tQ(e.set));else if(aP(e))e6(o,e.listener);else if(aq(e))(t=z(()=>e.extension.setup(k),t=>ii(e.extension.id,t)))&&(e6(l,[null!=(r=e.priority)?r:100,t,e.extension]),eK(l,([e])=>e));else if(aJ(e))e(k);else{var r,n,t,a=H;for([,t]of l)if(a=null!=(n=null==(n=t.processCommand)?void 0:n.call(t,e))?n:H)break;a||ii("invalid-command",e,"Loaded extensions:",tH(l,e=>e[2].id))}},e=>ii(k,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}}else a.push(...e)},Object.defineProperty(r2,nE.name,{value:Object.freeze(Object.assign(k,{id:"tracker_"+iA(),events:c,variables:v,__isTracker:K})),configurable:!1,writable:!1}),iF((e,t,r)=>{var n=ej(i4(tH(e,([,e])=>e||tz)),[[{[n2]:i4(tH(t,([,e])=>e||tz))},"All variables",K]]);n5({[n2]:n},tf(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eJ(t)} in total).`,"2;3"))}),i_(async(e,t,r,n)=>{var l;"ready"===e&&([e,l]=await v.get([{scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:V}]).values(!0),d.deviceSessionId=e.deviceSessionId,e.hasUserAgent||((()=>{k(B({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:null==S?void 0:S.clientId,languages:tH(navigator.languages,(e,t)=>{var[r,n]=e.split("-");return B({id:e,language:r,region:n,primary:0===t,preference:t+1})}),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...(r=null==r2?void 0:r2.screen,r?({width:r,height:i,orientation:a}=r,l=r<i,-90!==(a=null!=(a=null!=(a=null==a?void 0:a.angle)?a:r2.orientation)?a:0)&&90!==a||([r,i]=[i,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:r2.devicePixelRatio,width:r,height:i,landscape:l}}):{})}));var i,l,a,r})(),e.hasUserAgent=!0),g=!0,s.length&&k(s),n(),m=!0,k(...tH(aO,e=>({extension:e})),...a),k({set:{scope:"view",key:"loaded",value:!0}}))},!0),k;F(`The global variable for the tracker "${nE.name}" is used for something else than an array of queued commands.`)},aa=()=>null==S?void 0:S.clientId,al={scope:"shared",key:"referrer"},ao=(e,t)=>{k.variables.set({...al,value:[aa(),e]}),t&&k.variables.get({scope:al.scope,key:al.key,poll:(r,n,i)=>!!r||(null==i?void 0:i[1])===e&&t()&&!1})},au=e7(),as=e7(),ad=1,[ac,af]=ee(),ap=e=>{var t=e7(e,au),r=e7(e,as),n=e7(e,iS),i=e7(e,()=>ad);return(e,a)=>({totalTime:t(e,a),visibleTime:r(e,a),activeTime:n(e,a),activations:i(e,a)})},ah=ap(),[am,ay]=ee(),ab=(e,t)=>(t&&tV(ak,t=>e(t,()=>!1)),am(e)),aw=new WeakSet,ak=document.getElementsByTagName("iframe");function ax(e){if(e){if(null!=e.units&&M(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var aA=e=>(null==e?void 0:e.component)||(null==e?void 0:e.content),aI=e=>nI(e,t=>t!==e&&!!aA(nh.get(t)),e=>(T=nh.get(e),(T=nh.get(e))&&e_(ej(T.component,T.content,T),"tags"))),aE=(e,t)=>t?e:{...e,rect:void 0,content:(A=e.content)&&tH(A,e=>({...e,rect:void 0}))},aN=(e,t=H,r)=>{var n,i,a,l=[],o=[],u=0;return r8(e,e=>{var s,a,i=nh.get(e);i&&(aA(i)&&(a=eW(tQ(i.component),e=>{var r;return 0===u||!t&&(1===u&&(null==(r=e.track)?void 0:r.secondary)!==K||(null==(r=e.track)?void 0:r.promote))}),n=(null!=r?r:eH(a,e=>null==(e=e.track)?void 0:e.region))&&nv(e)||void 0,s=aI(e),i.content&&e4(l,...tH(i.content,e=>({...e,rect:n,...s}))),null!=a)&&a.length&&(e4(o,...tH(a,e=>{var t;return u=eL(u,null!=(t=e.track)&&t.secondary?1:2),aE({...e,content:l.length?l:void 0,rect:n,...s},!!n)})),l=[]),a=i.area||nT(e,"area"))&&e4(o,a)}),l.length&&e6(o,aE({id:"",rect:n,content:l})),tV(o,e=>{el(e)?e6(null!=i?i:i=[],e):(null==e.area&&(e.area=ro(i,"/")),e4(null!=a?a:a=[],e))}),a||i?{components:a,area:ro(i,"/")}:void 0},a$=Symbol(),aO=[{id:"context",setup(e){tt(()=>tV(ak,e=>t7(aw,e)&&ay(e)),500).trigger(),e.variables.get({scope:"view",key:"view",poll(t){return null==S||!t||null!=S&&S.definition?null!=(n=t)&&t.navigation&&f(!0):(S.definition=t,null!=(t=S.metadata)&&t.posted?e.events.postPatch(S,{definition:n}):n5(S,S.type+" (definition updated)")),!0}});var n,t,d=null!=(t=null==(t=iq({scope:"tab",key:"viewIndex"}))?void 0:t.value)?t:0,v=null==(t=iq({scope:"tab",key:"tabIndex"}))?void 0:t.value,c=(null==v&&iz({scope:"tab",key:"tabIndex",value:v=null!=(t=null!=(t=null==(t=iq({scope:"shared",key:"tabIndex"}))?void 0:t.value)?t:null==(t=iq({scope:"session",key:"@info"}))||null==(t=t.value)?void 0:t.tabs)?t:0},{scope:"shared",key:"tabIndex",value:v+1}),null),f=(t=H)=>{var a,l,o,i,p;no(""+c,c=location.href)&&!t||({source:t,scheme:i,host:a}=tb(location.href+"",{requireAuthority:!0}),S={type:"view",timestamp:e9(),clientId:iA(),tab:iT,href:t,path:location.pathname,hash:location.hash||void 0,domain:{scheme:i,host:a},tabNumber:v+1,tabViewNumber:d+1,viewport:np(),duration:ah(void 0,!0)},0===v&&(S.firstTab=K),0===v&&0===d&&(S.landingPage=K),iz({scope:"tab",key:"viewIndex",value:++d}),l=tw(location.href),tH(["source","medium","campaign","term","content"],(e,t)=>{var n;return null!=(e=(null!=(n=(o=S).utm)?n:o.utm={})[e]=null==(n=tQ(l["utm_"+e]))?void 0:n[0])?e:tz}),!(S.navigationType=x)&&performance&&tV(performance.getEntriesByType("navigation"),e=>{S.redirects=e.redirectCount,S.navigationType=t_(e.type,/\_/g,"-")}),x=void 0,"navigate"===(null!=(t=S.navigationType)?t:S.navigationType="navigate")&&(p=null==(i=iq(al))?void 0:i.value)&&nZ(document.referrer)&&(S.view=null==p?void 0:p[0],S.relatedEventId=null==p?void 0:p[1],e.variables.set({...al,value:void 0})),(p=document.referrer||null)&&!nZ(p)&&(S.externalReferrer={href:p,domain:(()=>{var{host:t,scheme:r,port:n}=tb(p,{delimiters:!1,requireAuthority:!0});return{host:t+(n?":"+n:""),scheme:r}})()}),S.definition=n,n=void 0,e.events.post(S),e.events.registerEventPatchSource(S,()=>({duration:ah()})),af(S))};return io(e=>{e?(as(K),++ad):as(H)}),nc(window,"popstate",()=>(x="back-forward",f())),tV(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),x="navigate",f()}}),f(),{processCommand:t=>aj(t)&&(e(t.username?{type:"login",username:t.username}:{type:"logout"}),K),decorate(e){!S||rJ(e)||ry(e)||(e.view=S.clientId)}}}},{id:"components",setup(e){var t=(e=>{var t=new IntersectionObserver(e=>tV(e,e=>{var t,r;return null==(t=(r=e.target)[i2])?void 0:t.call(r,e)})),r=new Set,n=(tt({callback:()=>tV(r,e=>e()),frequency:250,raf:!0}),(e,t,r=0)=>e<r?r:t<e?t:e),i=r5.createRange();return(a,l)=>{var o,u,s,d,v,c,f,p,h,g,m,y,b,w,k,S;l&&(o=eW(null==l?void 0:l.component,e=>{var t;return(null==(t=e.track)?void 0:t.impressions)||(null!=(t=null==(t=e.track)?void 0:t.secondary)?t:e.inferred)!==K}))&&eJ(o)&&(p=f=H,g=h=0,m=(e,t,r,n)=>{var i,a=null!=(a=(i=null!=u?u:u=[])[e])?a:i[e]=[{duration:0,impressions:0},e7(!1,iS),!1,!1,0,0,0,tj()];a[4]=t,a[5]=r,a[6]=n},y=[tj(),tj()],b=ap(!1),w=e7(!1,iS),k=-1,S=()=>{var $,t=a.getBoundingClientRect(),r=window.innerWidth,l=window.innerHeight,S=[n(t.top,l),n(t.right,r),n(t.bottom,l),n(t.left,r)],x=S[2]-S[0],S=S[1]-S[3],E=f?i3:i5,r=(E[0]*l<x||E[0]<(x/t.height||0))&&(E[0]*r<S||E[0]<(S/t.width||0));if(p!==r&&w(p=r,!0),f!==(f=p&&w()>=nE.impressionThreshold-250)&&(++h,b(f),s||(s=tH(o,e=>((null==(e=e.track)?void 0:e.impressions)||nA(a,"impressions",K,e=>null==(e=e.track)?void 0:e.impressions))&&B({type:"impression",pos:nu(a),viewport:np(),timeOffset:ah(),impressions:h,...aN(a,K)})||tz),e(s)),null!=s)&&s.length&&($=b(),d=tH(s,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:$,impressions:h,regions:u&&{top:u[0][0],middle:u[1][0],bottom:u[2][0]},seen:g,text:c,read:$.activeTime&&c&&n($.activeTime/c.readTime,g)})))),t.height!==k){k=t.height;E=a.textContent;if({boundaries:v,...c}=(e=>{for(var r,n,i=RegExp("[\\p{L}\\p{N}][\\p{L}\\p{N}'â€™]*|([.!?]+)","gu"),a=0,l=0,o=0,u=0,s=!1;r=i.exec(e);)r[1]?(s&&++u,s=!1):(s=!0,a+=r[0].length,6<r[0].length&&++o,++l);s&&++u;var i=RegExp("[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)","gu"),d=[0,.25,.75,1].map(e=>e*a|0),v=[],f=0,p=!1;do{if(null!=(r=i.exec(e))&&r[1])p&&++f;else{for(var c=null==r?void 0:r.index,h=!1,g=0;g<d.length;g++)d[g]--||(v[g]={offset:null!=n?n:c,wordsBefore:f,readTime:eb(f/238*6e4)},h=!0);(p=!h)||(f=0),n=c+1}}while(r);return{text:e,length:e.length,characters:a,words:l,sentences:u,lix:eb(l/u+100*o/l),readTime:eb(l/238*6e4),boundaries:v}})(null!=E?E:""),u||t.height>=1.25*l){var C=r5.createTreeWalker(a,NodeFilter.SHOW_TEXT),_=0,j=0;for(null==u&&(u=[]);j<v.length&&(F=C.nextNode());){var F,U,M,P,D,z=null!=(U=null==(U=F.textContent)?void 0:U.length)?U:0;for(_+=z;_>=(null==(M=v[j])?void 0:M.offset);)i[j%2?"setEnd":"setStart"](F,v[j].offset-_+z),j++%2&&({top:M,bottom:P}=i.getBoundingClientRect(),D=t.top,j<3?m(0,M-D,P-D,v[1].readTime):(m(1,u[0][4],M-D,v[2].readTime),m(2,M-D,P-D,v[3].readTime)))}}}var r=t.left<0?-t.left:0,E=t.top<0?-t.top:0,L=t.width*t.height;f&&(g=y[0].push(E,E+x)*y[1].push(r,r+S)/L),u&&tV(u,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),i=n(t.bottom>l?l:t.bottom,e[5],e[4]),a=f&&0<i-r,o=e[0];o.duration=e[1](a),a&&(e[3]!==(e[3]=a)&&++e[0].impressions,o.seen=e[7].push(r,i)/(e[5]-e[4]),o.read=n(o.duration/e[6],o.seen))})},a[i2]=({isIntersecting:e})=>{eY(r,S,e),e||(tV(d,e=>e()),S())},t.observe(a))}})(e),n=({boundary:e,...n})=>{eQ(nh,e,e=>{var t;return(e=>null==e?void 0:{...e,component:tQ(e.component),content:tQ(e.content),tags:tQ(e.tags)})("add"in n?{...e,component:ej(null==e?void 0:e.component,n.component),content:ej(null==e?void 0:e.content,n.content),area:null!=(t=null==n?void 0:n.area)?t:null==e?void 0:e.area,tags:ej(null==e?void 0:e.tags,n.tags),cart:null!=(t=n.cart)?t:null==e?void 0:e.cart,track:null!=(t=n.track)?t:null==e?void 0:e.track}:"update"in n?n.update(e):n)}),t(e,nh.get(e))};return{decorate(e){tV(e.components,t=>{re(t,"track",void 0),tV(e.clickables,e=>re(e,"track",void 0))})},processCommand:e=>aM(e)?(n(e),K):aB(e)?(tV(((e,t)=>{var r,n;return t?(r=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(i=>{if(!n.has(i))for(var a=[];null!=r7(i,e);){((e,t)=>e instanceof Set||e instanceof WeakSet?e.has(t)||e.add(t):eX(e,t)||eG(e,t,!0))(n,i);var l,o=tC(r7(i,e),"|");r7(i,e,null);for(var u=0;u<o.length;u++){var d=o[u];if(""!==d){var s="-"===d?-1:parseInt(null!=(s=eo(d))?s:"",36);if(s<0)a.length+=s;else{if(0===u&&(a.length=0),isNaN(s)&&/^["\[{]/.test(d))for(var c="";u<o.length;u++)try{d=JSON.parse(c+=o[u]);break}catch{}0<=s&&t[s]&&(d=t[s]),e6(a,d)}}}e6(r,...tH(a,e=>({add:K,...e,boundary:i})));var f=i.nextElementSibling;"WBR"===i.tagName&&null!=(l=i.parentNode)&&l.removeChild(i),i=f}}),r):[]})(e.scan.attribute,e.scan.components),n),K):H}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{nc(r,["click","contextmenu","auxclick"],n=>{var i,a,l,o,u,s=H;if(r8(n.target,e=>{at(e)&&null==l&&(l=e),s=s||"NAV"===ni(e);var t,d=ng(e),d=null==d?void 0:d.component;!n.button&&null!=d&&d.length&&!u&&(tV(e.querySelectorAll("a,button"),t=>at(t)&&(3<(null!=u?u:u=[]).length?ex():u.push({...ar(t,!0),component:r8(t,(e,t,r,n=null==(i=ng(e))?void 0:i.component)=>n&&t(n[0]),t=>t===e)}))),u)&&null==o&&(o=e),null==i&&(i=null!=(t=nA(e,"clicks",K,e=>null==(e=e.track)?void 0:e.clicks))?t:d&&eH(d,e=>(null==(e=e.track)?void 0:e.clicks)!==H)),null==a&&(a=null!=(t=nA(e,"region",K,e=>null==(e=e.track)?void 0:e.region))?t:d&&eH(d,e=>null==(e=e.track)?void 0:e.region))}),null!=o?o:o=l){var d,v=u&&!l&&i,c=aN(null!=l?l:o,!1,v),f=nI(null!=l?l:o,void 0,e=>tK(tQ(null==(e=nh.get(e))?void 0:e.tags))),p=(null==i&&(i=!s),{...(a=null==a?K:a)?{pos:nu(l,n),viewport:np()}:null,...((e,t)=>{var n;return r8(null!=e?e:t,e=>"IMG"===ni(e)||e===t?(n={element:ar(e,!1)},H):K),n})(n.target,null!=l?l:o),...c,timeOffset:ah(),...f});if(l)if(ae(l)){var h=l,c=h.hostname!==location.hostname,{host:f,scheme:y,source:b}=tb(h.href,{delimiters:!1,requireAuthority:!0});if(h.host===location.host&&h.pathname===location.pathname&&h.search===location.search)return"#"===h.hash?void 0:void(h.hash!==location.hash&&0===n.button&&e(B({type:"anchor_navigation",anchor:h.hash,...p})));var k,x,w=B({clientId:iA(),type:"navigation",href:c?h.href:b,external:c,domain:{host:f,scheme:y},self:K,anchor:h.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||r7(h,"target")!==window.name?(ao(w.clientId),w.self=H,e(w)):no(location.href,h.href)||(w.exit=w.external,ao(w.clientId))):(k=h.href,(b=nZ(k))?ao(w.clientId,()=>e(w)):(x=(""+Math.random()).replace(".","").substring(1,8),b||nE.captureContextMenu&&(h.href=n0+"="+x+encodeURIComponent(k),nc(window,"storage",(t,r)=>"_tail:push"===t.key&&(t.newValue&&(null==(t=JSON.parse(t.newValue))?void 0:t.requestId)===x&&e(w),r())),nc(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),h.href=k}))))}else{r8(n.target,(e,t)=>{var r;return!!(null!=d?d:d=(e=>el(e=null==e||e!==K&&""!==e?e:"add")&&M(e,"add","remove","update","clear")?{action:e}:ev(e)?e:void 0)(null!=(r=null==(r=ng(e))?void 0:r.cart)?r:nT(e,"cart")))&&!d.item&&(d.item=(e=>null==e?L:eu(e)||el(e)?e[e.length-1]:eq(e,(e,r)=>e,void 0,void 0))(null==(r=ng(e))?void 0:r.content))&&t(d)});c=ax(d);(c||i)&&e(B(c?{type:"cart_updated",...p,...c}:{type:"component_click",...p}))}else v&&eQ(t,o,r=>{var i=ns(o,n);return r?e6(r,i):(i=B({type:"component_click_intent",...p,clicks:r=[i],clickables:u}),e.events.registerEventPatchSource(i,()=>({clicks:t.get(o)}),!0,o)),r})}})};r(document),ab(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=nl(K);ac(()=>{return e=()=>(t={},r=nl(K)),setTimeout(e,250);var e}),nc(window,"scroll",()=>{var a,n=nl(),i={x:(o=nl(H)).x/(r3.offsetWidth-window.innerWidth)||0,y:o.y/(r3.offsetHeight-window.innerHeight)||0};n.y>=r.y&&(a=[],!t.fold&&n.y>=r.y+200&&(t.fold=K,e6(a,"fold")),!t["page-middle"]&&.5<=i.y&&(t["page-middle"]=K,e6(a,"page-middle")),!t["page-end"]&&.99<=i.y&&(t["page-end"]=K,e6(a,"page-end")),(n=tH(a,e=>B({type:"scroll",scrollType:e,offset:i}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(t){var r;return a_(t)?("clear"===(r=t.cart)?e({type:"cart_updated",action:"clear"}):(r=ax(r))&&e({...r,type:"cart_updated"}),K):aD(t)?(e({type:"order",...t.order}),K):H}})},{id:"forms",setup(e){var t,r=new Map,n=(e,t=!1)=>{var r=!t||ne(e,nm("form-value")),e=(t&&(r=r?en(r):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return t&&(e=e&&tp(e,200)),r?e:void 0},i=t=>{var i,l,s,a=t.form;if(a)return l=ne(a,nm("ref"))||"track_ref",(s=t9(r,a,()=>{var t,r=new Map,n={type:"form",name:ne(a,nm("form-name"))||r7(a,"name")||a.id||void 0,activeTime:0,totalTime:0,fields:{}},l=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:ah()})),()=>{1!==t[3]&&(o(),2<=t[3]&&(n.completed=3===t[3]||!(a.isConnected&&nv(a).width)),e.events.postPatch(n,{...i,completed:n.completed,totalTime:e9(K)-t[4]}),t[3]=1)}),s=((e=0)=>{var t,r,n=(i,a=e)=>{if(void 0===i)return!!r;clearTimeout(t),er(i)?i&&(a<0?ei:J)(null==r?void 0:r())?n(r,a):r=void 0:(r=i,t=setTimeout(()=>n(!0,a),a<0?-a:a))};return n})();return nc(a.ownerDocument.body,"submit",e=>{var r,n;i=aN(a),t[3]=3,e.defaultPrevented?([r]=ia(e=>{e||(n?n5("The browser is navigating to another page after submit leaving a reCAPTCHA challenge. "+tf("Form not submitted",1)):3===t[3]?(n5("The browser is navigating to another page after submit. "+tf("Form submitted",1)),l()):n5("The browser is navigating to another page after submit, but submit was earlier cancelled because of validation errors. "+tf("Form not submitted.",1)),r())}),n=!1,s(()=>{if((()=>{for(var e=a.ownerDocument;e;){if(t0(e.querySelectorAll("iframe"),e=>e.src.match(RegExp("https:\\/\\/www.google.com\\/.*(?<=\\/)recaptcha\\/.*(?<=\\/)bframe","gi"))&&(e=>{if(!e||!e.isConnected||nv(e,!1).width<=0)return!1;for(;e;){var t=null==(t=e.ownerDocument.defaultView)?void 0:t.getComputedStyle(e);if("hidden"===t.visibility||"0"===t.opacity)return!1;e=e.parentElement}return!0})(e)))return!0;e=z(()=>{var r;return null==(r=e.defaultView)||null==(r=r.frameElement)?void 0:r.ownerDocument},()=>{})}return!1})())return t[3]=2,n5("reCAPTCHA challenge is active."),n=!0;n&&(n=!1,n5("reCAPTCHA challenge ended (for better or worse)."),t[3]=3),a.isConnected&&0<nv(a).width?(t[3]=2,n5("Form is still visible after 1750 ms, validation errors assumed. "+tf("Form not submitted",1))):(n5("Form is no longer visible 1750 ms after submit. "+tf("Form submitted",1)),l()),r()},1750)):(n5("Submit event triggered and default not prevented. "+tf("Form submitted",1)),l())},{capture:!1}),t=[n,r,a,0,e9(K),1]}))[1].get(t)||tV(a.querySelectorAll("INPUT,SELECT,TEXTAREA,BUTTON"),(e,t)=>{var d,v,a;"BUTTON"===e.tagName&&"submit"!==e.type||(e.name&&"hidden"!==e.type?(a=null!=(d=(a=s[0].fields)[v=e.name])?d:a[v]={id:e.id||v,name:v,label:t_(null!=(v=null==(d=e.labels)||null==(a=d[0])?void 0:a.innerText)?v:e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:null!=(d=e.type)?d:"unknown",[a$]:n(e),value:n(e,!0)},s[0].fields[a.name]=a,s[1].set(e,a)):"hidden"!==e.type||e.name!==l&&!nA(e,"ref")||(e.value||(e.value=t_("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),s[0].ref=e.value))}),[t,s]},a=(e,[r,n]=null!=(t=i(e))?t:[],a=null==n?void 0:n[1].get(r))=>a&&[n[0],a,r,n],l=null,o=()=>{var r,i,a,o,d,v,c;l&&([r,i,a,o]=l,d=-(u-(u=as())),v=-(s-(s=e9(K))),c=i[a$],(i[a$]=n(a))!==c&&(null==i.fillOrder&&(i.fillOrder=o[5]++),i.filled&&(i.corrections=(null!=(c=i.corrections)?c:0)+1),i.filled=K,o[3]=2,tV(r.fields,([e,t])=>t.lastField=e===i.name)),i.value=n(a,!0),i.activeTime+=d,i.totalTime+=v,r.activeTime+=d,r.totalTime+=v,l=null)},u=0,s=0,d=e=>e&&nc(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(l=r,"focusin"===e.type?(s=e9(K),u=as()):o()));d(document),ab(e=>e.contentDocument&&d(e.contentDocument),!0)}},{id:"consent",setup(e){var t,n=async t=>e.variables.get({scope:"session",key:"@consent",poll:t,refresh:!t,passive:!t}).value(),i=async t=>{var r;if(t)return!(r=await n())||rg.equals(r,t)?[!1,r]:(await e.events.post(B({type:"consent",consent:t}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,t])},r={analytics_storage:"performance",functionality_storage:"functionality",personalization_storage:"personalization",ad_storage:"marketing",security_storage:"security"},a=(e({consent:{externalSource:{key:"Google Consent Mode v2",frequency:250,poll(){var e,n=r2.dataLayer,i=t,a=null==n?void 0:n.length;if(a&&(t!==(t=n[a-1])||!t))for(;a--&&((e=n[a])!==i||!i);){var l={},o=!0;if("consent"===(null==e?void 0:e[0])&&"update"===e[1])return tH(r,([t,r])=>"granted"===e[2][t]&&(l[r]=!0,o=o&&("security"===r||"necessary"===r))),{classification:o?"anonymous":"direct",purposes:l}}}}}}),{});return{processCommand(e){var t,r,l,s,d;return aL(e)?((t=e.consent.get)&&n((e,r,n)=>!e||t(e,n)),(r=e.consent.set)&&(async()=>{var e,t,n;"consent"in r?([t,n]=await i(r.consent),null!=(e=r.callback)&&e.call(r,t,n)):i(r)})(),(l=e.consent.externalSource)&&(d=l.key,(null!=(e=a[d])?e:a[d]=tt({frequency:null!=(e=l.frequency)?e:1e3})).restart(l.frequency,async()=>{var e,t,r;r5.hasFocus()&&(e=l.poll(s))&&!rg.equals(s,e)&&([t,r]=await i(e),t&&n5(r,"Consent was updated from "+d),s=e)}).trigger()),K):H}}}}],I=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==(null==t?void 0:t[e])),a_=I("cart"),aj=I("username"),aF=I("tagAttributes"),aU=I("disable"),aM=I("boundary"),aq=I("extension"),az=I(K,"flush"),aR=I("get"),aP=I("listener"),aD=I("order"),aB=I("scan"),aW=I("set"),aJ=e=>"function"==typeof e,aL=I("consent");Object.defineProperty(r2,".tail.js.init",{writable:!1,configurable:!1,value(e){e(ai)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
