(()=>{"use strict";var e,t,r,n,o=e=>(e=>e&&"object"==typeof e)(e)&&!a(e),a=(e,t=!1)=>!!e?.[Symbol.iterator]&&(t||!("string"==typeof e)),l=()=>Math.trunc(performance.timeOrigin+performance.now()),s=l().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),i=(e,t,r,n={capture:!0,passive:!0})=>(r=>{var l=!1,s=()=>l!==(l=!1)&&(e.addEventListener(t,u,n),!0),i=()=>l!==(l=!0)&&(e.addEventListener(t,u,n),!0),u=e=>r(e,s);return i(),[s,i]})(r),u=JSON.stringify,d=e=>{if(null==e)return null;try{return JSON.parse(e)}catch(e){}},g=(r=0,{get(t){return e.getItem(t)?.[0]??null},set:t=(t,r,n)=>(null==r?e.removeItem(t):e.setItem(t,[r,s,n]),r),delete(e){return t(e,null)},update:n=(o,a,l)=>{3<r++&&v(`Race condition ('${o}').`,!0);var i=t(o,a(e.getItem(o)?.[0]??null)),u=e.getItem(o);return u?.[1]&&u?.[1]!==s?n(o,a):(r=0,i)},observe:(e={getItem(e){return d(localStorage.getItem(e))},setItem(e,t){return localStorage.setItem(e,u(t.filter(e=>null!=e)))},removeItem(e){return localStorage.removeItem(e)},observe(e,t){var[r,n]=i(window,"storage",({key:r,newValue:n,oldValue:o})=>e==r&&t(d(n),d(o),e)),[o,a]=i(window,"pageshow",n),[l,s]=i(window,"pagehide",r);return[()=>(l(),o(),r()),()=>(s(),a(),n())]}}).observe?e.observe.bind(e):void 0}),v=(e,t,r=!1)=>{if("boolean"==typeof t&&(r=t,t=null),t?.message&&(e+="("+t.message,t.stack&&(e+="\n\n"+t.stack),e+=")"),console.error(e),r)throw new Error(e)},m=((t=g)=>({get:()=>t.get("active2"),set:(r,n)=>t.set("active2",r,n),delete:()=>t.delete("active2"),update:(r,n)=>t.update("active2",r,n),observe:t.observe?r=>t.observe("active2",r):void 0}))(),c=async()=>{i(window,"pageshow",()=>m.update(e=>((e=o(e)?e:{})[s]=l(),e))),i(window,"pagehide",()=>m.update(e=>(o(e)&&delete e[s],e)))};window[".tail.js.init"]=e=>{e(c)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
