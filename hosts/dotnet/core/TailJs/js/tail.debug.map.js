(()=>{"use strict";var e,r,t,n,l,i,a,s,v,d,c,f,p,h,g,m,y,b,w,k,S,T,I,A,x,N,O,B=(e,r=e=>Error(e))=>{throw eg(e=rc(e))?r(e):e},V=(e,r,t=-1)=>{if(e===r||null==(null!=e?e:r))return!0;if(ek(e)&&ek(r)&&e.length===r.length){var l,n=0;for(l in e){if(e[l]!==r[l]&&!V(e[l],r[l],t-1))return!1;++n}return n===Object.keys(r).length}return!1},J=(e,r,...t)=>e===r||0<t.length&&t.some(r=>J(e,r)),L=(e,r)=>null!=e?e:B(null!=r?r:"A required value is missing",e=>TypeError(e.replace("..."," is required."))),K=(e,r=!0,t)=>{try{return e()}catch(e){return ex(r)?eb(e=r(e))?B(e):e:es(r)?console.error(r?B(e):e):r}finally{null!=t&&t()}},G=e=>{var r,t=()=>t.initialized||r?r:(r=rc(e)).then?r=r.then(e=>(t.initialized=!0,t.resolved=r=e)):(t.initialized=!0,t.resolved=r);return t},Y=async(e,r=!0,t)=>{try{var n,l=await rc(e);return ey(r)?null==(n=r[0])?void 0:n.call(r,l):l}catch(e){if(!es(r)){if(ey(r)){if(r[1])return r[1](e);throw e}var i=await(null==r?void 0:r(e));if(i instanceof Error)throw i;return i}if(r)throw e;console.error(e)}finally{await(null==t?void 0:t())}},Z=e=>e,Q=void 0,ee=Number.MAX_SAFE_INTEGER,er=!1,et=!0,en=()=>{},el=e=>e,ei=e=>null!=e,ea=Symbol.iterator,eo=(e,r)=>(t,n=!0)=>e(t)||r&&n&&null!=t&&null!=(t=r(t))?t:Q,eu=(e,r)=>ex(r)?e!==Q?r(e):Q:(null==e?void 0:e[r])!==Q?e:Q,es=e=>"boolean"==typeof e,ev=eo(es,e=>0!=e&&(1==e||"false"!==e&&("true"===e||Q))),ed=e=>!!e,ep=Number.isSafeInteger,eh=e=>"number"==typeof e,eg=e=>"string"==typeof e,em=eo(eg,e=>null==e?void 0:e.toString()),ey=Array.isArray,eb=e=>e instanceof Error,ew=(e,r=!1)=>null==e?Q:!r&&ey(e)?e:eN(e)?[...e]:[e],ek=e=>null!==e&&"object"==typeof e,eS=Object.prototype,eT=Object.getPrototypeOf,eE=e=>null!=e&&eT(e)===eS,eI=(e,r)=>"function"==typeof(null==e?void 0:e[r]),eA=e=>"symbol"==typeof e,ex=e=>"function"==typeof e,eN=(e,r=!1)=>!(null==e||!e[ea]||"object"!=typeof e&&!r),eO=e=>e instanceof Map,eC=e=>e instanceof Set,ej=(e,r)=>null==e?Q:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,e$=!1,e_=e=>(e$=!0,e),eM=e=>null==e?Q:ex(e)?e:r=>r[e],eU=(e,r,t)=>(null!=r?r:t)!==Q?(e=eM(e),null==r&&(r=0),null==t&&(t=ee),(n,l)=>r--?Q:t--?e?e(n,l):n:t):e,eF=e=>null==e?void 0:e.filter(ei),eP=(e,r,t,n)=>null==e?[]:!r&&ey(e)?eF(e):e[ea]?function*(e,r){if(null!=e)if(r){r=eM(r);var t=0;for(n of e)if(null!=(n=r(n,t++))&&(yield n),e$){e$=!1;break}}else for(var n of e)null!=n&&(yield n)}(e,t===Q?r:eU(r,t,n)):ek(e)?function*(e,r){r=eM(r);var n,t=0;for(n in e){var l=[n,e[n]];if(null!=(l=r?r(l,t++):l)&&(yield l),e$){e$=!1;break}}}(e,eU(r,t,n)):eP(ex(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(null==r&&(r=-e-1);e++;)yield r--;else for(null==r&&(r=0);e--;)yield r++}(e,t),r),eR=(e,r,t,n)=>eP(e,r,t,n),ez=(e,r,t=1,n=!1,l,i)=>function*e(r,t,n,l){if(null!=r)if(r[ea]||n&&ek(r))for(var i of l?eP(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}(eP(e,r,l,i),t+1,n,!1),eD=(e,r,t,n)=>{if(r=eM(r),ey(e)){var l=0,i=[];for(t=t<0?e.length+t:null!=t?t:0,n=n<0?e.length+n:null!=n?n:e.length;t<n&&!e$;t++){var a=e[t];null!=(r?a=r(a,l++):a)&&i.push(a)}return e$=!1,i}return null!=e?ew(eR(e,r,t,n)):Q},eB=(e,r,t=1,n=!1,l,i)=>ew(ez(e,r,t,n,l,i)),eV=(...e)=>{var r;return eX(1===e.length?e[0]:e,e=>null!=e&&(null!=r?r:r=[]).push(...ew(e))),r},eG=(e,r,...t)=>null==e?Q:eN(e)?eD(e,e=>r(e,...t)):r(e,...t),eH=(e,r,t,n)=>{var l;if(null!=e){if(ey(e))return((e,r,t,n)=>{var l,i,a=0;for(t=t<0?e.length+t:null!=t?t:0,n=n<0?e.length+n:null!=n?n:e.length;t<n;t++)if(null!=e[t]&&(l=null!=(i=r(e[t],a++))?i:l,e$)){e$=!1;break}return l})(e,r,t,n);if(t===Q){if(e[ea])return((e,r)=>{var t,n,i,l=0;for(i of e)if(null!=i&&(t=null!=(n=r(i,l++))?n:t,e$)){e$=!1;break}return t})(e,r);if("object"==typeof e)return((e,r)=>{var t,n,i,l=0;for(i in e)if(t=null!=(n=r([i,e[i]],l++))?n:t,e$){e$=!1;break}return t})(e,r)}for(var i of eP(e,r,t,n))null!=i&&(l=i);return l}},eX=eH,eZ=Object.fromEntries,eQ=(e,r,t)=>{var n,l,i;return null==e?Q:es(r)||t?(i={},eX(e,t?(e,n)=>null!=(e=r(e,n))&&null!=(e[1]=t(i[e[0]],e[1]))&&(i[e[0]]=e[1]):e=>eX(e,r?e=>{var r;return null!=(null==e?void 0:e[1])&&((null!=(r=(n=i)[l=e[0]])?r:n[l]=[]).push(e[1]),i)}:e=>null!=(null==e?void 0:e[1])&&(i[e[0]]=e[1],i))),i):eZ(eD(e,r?(e,t)=>eu(r(e,t),1):e=>eu(e,1)))},e1=(e,r=e=>null!=e,t=ey(e),n,l)=>(e=>t&&!ey(e)?[...e]:e)(eP(e,(e,t)=>r(e,t)?e:Q,n,l)),e2=(e,r,t,n)=>{var l;if(null==e)return Q;if(r)e=e1(e,r,!1,t,n);else{if(null!=(l=null!=(r=e.length)?r:e.size))return l;if(!e[ea])return Object.keys(e).length}return l=0,null!=(t=eH(e,()=>++l))?t:0},e4=(e,...r)=>null==e?Q:eh(e)?Math.max(e,...r):((e,r,t,n,l)=>{var a=()=>ex(t)?t():t;return null!=(e=eH(e,(e,n)=>{return t=null!=(e=r(t,e,n))?e:a()},n,l))?e:a()})(e,(e,t,n,l=r[1]?r[1](t,n):t)=>null==e||eh(l)&&e<l?l:e,Q,r[2],r[3]),e9=(e,r,t,n)=>{var l;return null==e?Q:eE(e)&&!r?0<Object.keys(e).length:null!=(l=null!=(l=null==(l=e.some)?void 0:l.call(e,null!=r?r:ed))?l:eH(e,r?(e,t)=>!!r(e,t)&&e_(!0):()=>e_(!0),t,n))&&l},e7=(e,r=e=>e)=>(null!=e&&e.sort((e,t)=>r(e)-r(t)),e),re=(e,r,t)=>(e.constructor===Object||ey(e)?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),rr=(e,r,t)=>{var n;if(e)return e.constructor===Object&&null==t?e[r]:(void 0===(n=e.get?e.get(r):e.has?e.has(r):e[r])&&null!=t&&null!=(n=ex(t)?t():t)&&re(e,r,n),n)},rt=(e,...r)=>(eX(r,r=>eX(r,([r,t])=>{null!=t&&(eE(e[r])&&eE(t)?rt(e[r],t):e[r]=t)})),e),eo=e=>(r,t,n,l)=>{if(r)return null!=n?e(r,t,n,l):(eX(t,t=>ey(t)?e(r,t[0],t[1]):eX(t,([t,n])=>e(r,t,n))),r)},rl=eo(re),ri=eo((e,r,t)=>re(e,r,ex(t)?t(rr(e,r)):t)),ra=(e,r)=>e instanceof Set||e instanceof WeakSet?!e.has(r)&&(e.add(r),!0):rr(e,r)!==rl(e,r,!0),ro=(e,r)=>{var t;if(null!=(null!=e?e:r))return t=rr(e,r),eI(e,"delete")?e.delete(r):delete e[r],t},rs=(e,r)=>{if(e)return ey(r)?(ey(e)&&1<e.length?r.sort((e,r)=>r-e):r).map(r=>rs(e,r)):ey(e)?r<e.length?e.splice(r,1)[0]:void 0:ro(e,r)},rd=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>ek(t)?ey(t)?t.map(r=>ey(r)?1===r.length?[r[0],e[r[0]]]:rd(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:rd(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},rc=e=>ex(e)?e():e,rf=(e,r=-1)=>ey(e)?r?e.map(e=>rf(e,r-1)):[...e]:eE(e)?r?eQ(e,([e,t])=>[e,rf(t,r-1)]):{...e}:eC(e)?new Set(r?eD(e,e=>rf(e,r-1)):e):eO(e)?new Map(r?eD(e,e=>[e[0],rf(e[1],r-1)]):e):e,rp=(e,...r)=>null==e?void 0:e.push(...r),rh=(e,...r)=>null==e?void 0:e.unshift(...r),rg=(e,r)=>{var t,l,i;if(e)return eE(r)?(i={},eE(e)&&(eX(e,([e,a])=>{if(a!==r[e]){if(eE(t=a)){if(!(a=rg(a,r[e])))return;[a,t]=a}i[e]=a,(null!=l?l:l=rf(r))[e]=t}}),l)?[i,l]:void 0):[e,e]},rm="undefined"!=typeof performance?(e=et)=>e?Math.trunc(rm(er)):performance.timeOrigin+performance.now():Date.now,ry=(e=!0,r=()=>rm())=>{var t,n=+e*r(),l=0;return(i=e,a)=>(t=e?l+=-n+(n=r()):l,a&&(l=0),(e=i)&&(n=r()),t)},rw=(e,r=0)=>{var e=ex(e)?{frequency:r,callback:e}:e,{queue:l=!0,paused:i=!1,trigger:a=!1,once:o=!1,callback:u=()=>{},raf:s}=e,v=(r=null!=(e=e.frequency)?e:0,0),d=(new rS).resolve(),c=ry(!i),f=c(),p=async e=>{if(!v||!l&&d.pending&&!0!==e)return!1;if((y.busy=!0)!==e)for(;d.pending;)await d;return e||d.reset(),(!1===await Y(()=>u(c(),-f+(f=c())),!1,()=>!e&&d.resolve())||r<=0||o)&&m(!1),!(y.busy=!1)},h=()=>v=setTimeout(()=>s?requestAnimationFrame(g):g(),r<0?-r:r),g=()=>{y.active&&p(),y.active&&h()},m=(e,r=!e)=>(c(e,r),clearTimeout(v),y.active=!!(v=e?h():0),y),y={active:!1,busy:!1,restart:(e,t)=>(r=null!=e?e:r,u=null!=t?t:u,m(!0,!0)),toggle:(e,r)=>e!==y.active?e?r?(m(!0),y.trigger(),y):m(!0):m(!1):y,trigger:async e=>await p(e)&&(m(y.active),!0)};return y.toggle(!i,a)};function rk(e,r,t){r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t}class rS{get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new rT,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}constructor(){rk(this,"_promise",void 0),this.reset()}}class rT{then(e,r){return this._promise.then(e,r)}constructor(){var e;rk(this,"_promise",void 0),rk(this,"resolve",void 0),rk(this,"reject",void 0),rk(this,"value",void 0),rk(this,"error",void 0),rk(this,"pending",!0),this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(this.pending)return this.pending=!1,this[r?"error":"value"]=t===Q||t,e(t),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}}var r$,rI=(e,r)=>null==e||isFinite(e)?!e||e<=0?rc(r):new Promise(t=>setTimeout(async()=>t(await rc(r)),e)):B(`Invalid delay ${e}.`),rN=(e,r,t)=>{var n=!1,l=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(l),!0),a=()=>n!==(n=!0)&&(r(l),!0);return a(),[i,a]},eo=()=>{var e,r=new Set;return[(t,n)=>{var l=rN(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,l[0]),l},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rC=(e,r=["and",", "])=>{var t;return e?1===(e=eD(e)).length?e[0]:ey(r)?[e.slice(0,-1).join(null!=(t=r[1])?t:", ")," ",r[0]," ",e[e.length-1]].join(""):e.join(null!=r?r:", "):Q},rj=(e,r,t)=>null==e?Q:ey(r)?null==(r=r[0])?Q:r+" "+rj(e,r,t):null==r?Q:1===r?e:null!=t?t:e+"s",r_=(e,r,t)=>t?(r$&&rp(t,"[",r,"m"),ey(e)?rp(t,...e):rp(t,e),r$&&rp(t,"[m"),t):r_(e,r,[]).join(""),rU=(e,r)=>e&&(e.length>r?e.slice(0,-1)+"â€¦":e),rF=(e,r,t)=>null==e?Q:ex(r)?rC(eD(eg(e)?[e]:e,r),null!=t?t:""):eg(e)?e:rC(eD(e,e=>!1===e?Q:e),null!=r?r:""),rq=e=>(e=Math.log2(e))===(0|e),rR=(e,r,t,n)=>{var l,i,a,o,e=Object.fromEntries(Object.entries(e).filter(([e,r])=>eg(e)&&eh(r)).map(([e,r])=>[e.toLowerCase(),r])),s=Object.entries(e),v=Object.values(e),d=null!=(l=e.any)?l:v.reduce((e,r)=>e|r,0),c=r?{...e,any:d,none:0}:e,f=Object.fromEntries(Object.entries(c).map(([e,r])=>[r,e])),p=(e,t)=>{var n;return ep(e)?!r&&t?null!=f[e]?e:Q:Number.isSafeInteger(e)?e:Q:eg(e)?null!=(n=null!=(n=c[e])?n:c[e.toLowerCase()])?n:p(parseInt(e),t):Q},h=!1,[g,m]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||h?e:null==(t=p(t,r))?(h=!0,Q):(null!=e?e:0)|t,(h=!1,Q)):p(e),(e,r)=>null==(e=g(e,!1))?Q:r&&(a=f[e&d])?(i=m(e&~(e&d),!1)).length?[a,...i]:a:(e=s.filter(([,r])=>r&&e&r&&rq(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[p,e=>null!=(e=p(e))?f[e]:Q],y=(e,r)=>null==e?Q:null==(e=g(o=e,r))?B(TypeError(JSON.stringify(o)+` is not a valid ${t} value.`)):e,b=s.filter(([,e])=>!n||(n&e)===e&&rq(e));return((e,r)=>{var t=(r,n)=>{var l;if(r){if(ey(r)){if(eE(r[0]))return void r.splice(1).forEach(e=>t(e,r[0]));l=r}else l=eD(r);l.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...eE(t)&&("get"in t||"value"in t)?t:ex(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e})(e=>y(e),[[{configurable:!1,enumerable:!1},{parse:y,tryParse:g,entries:s,values:v,lookup:m,length:s.length,format:e=>m(e,!0),logFormat:(e,r="or")=>"any"===(e=m(e,!0))?"any "+t:`the ${t} `+rC(eD(ew(e),e=>(e=>null==e?Q:"'"+e+"'")(e)),[r])},r&&{pure:b,map:(e,r)=>(e=y(e),b.filter(([,r])=>r&e).map(null!=r?r:([,e])=>e))}]])},rz=(...e)=>{var r=(e=>!ey(e)&&eN(e)?eD(e,eO(e)?e=>e:eC(e)?e=>[e,!0]:(e,r)=>[r,e]):ek(e)?Object.entries(e):Q)(eQ(e,!0)),t=e=>(ek(e)&&(ey(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,l=Q;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,a)=>!l&&null!=(l=a===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=l)))})),e);return t},rD=Symbol(),rW=(e,r=["|",";",","],t=!0)=>{var l;return e?(null==(l=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim()))[1]&&(l[1]=""),l[2]=l[1]&&(null==r?void 0:r.length)&&((e,r)=>null==e?Q:(r=eM(r),eH(e,(e,t)=>!r||(e=r(e,t))?e_(e):Q,void 0,void 0)))(r,(e,r,t=l[1].split(e))=>1<t.length?t:Q)||(l[1]?[l[1]]:[]),l):Q},rB=(e,r=!0,t)=>null==e?Q:rG(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,l,i,a,o,u,s,v,d,c)=>{e={source:e,scheme:t,urn:t?!n:!n&&Q,authority:l,user:i,password:a,host:null!=o?o:u,port:null!=s?parseInt(s):Q,path:v,query:!1===r?d:rV(d,r),fragment:c};return e.path=e.path||(e.authority?e.urn?"":"/":Q),e}),rV=(e,r,t=!0)=>rJ(e,"&",r,t),rJ=(e,r,t,n=!0)=>{var a,o=[],e=null==e?Q:eQ(null==e||null==(e=e.match(/(?:^.*?\?|^)([^#]*)/))||null==(e=e[1])?void 0:e.split(r),(e,r,[l,i,u]=null!=(a=rW(e,!1===t?[]:!0===t?Q:t,n))?a:[],s)=>(s=null!=(l=null==l?void 0:l.replace(/\[\]$/,""))?!1!==t?[l,1<u.length?u:i]:[l,i]:Q,o.push(s),s),(e,r)=>e?!1!==t?eV(e,r):(e?e+",":"")+r:r);return e&&(e[rD]=o),e},rG=(e,r,l,i=!1)=>null==(null!=e?e:r)?Q:l?(t=Q,i?(n=[],rG(e,r,(...e)=>null!=(t=l(...e))&&n.push(t))):e.replace(r,(...e)=>t=l(...e)),t):e.match(r),rH=e=>null==e?void 0:e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rX=/\z./g,rY=(e,r)=>(r=rF((e=>null!=e?new Set([...eR(e,void 0,void 0,void 0)]):Q)(e1(e,e=>null==e?void 0:e.length)),"|"))?RegExp(r,"gu"):rX,rZ={},rQ=e=>e instanceof RegExp,r0=(t,n=[","," "])=>{var l;return rQ(t)?t:ey(t)?rY(eD(t,e=>{return null==(e=r0(e,n))?void 0:e.source})):es(t)?t?/./g:rX:eg(t)?null!=(l=(e=rZ)[r=t])?l:e[r]=rG(t||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,t)=>r?RegExp(r,"gu"):rY(eD(r1(t,RegExp(`(?<!(?<!\\\\)\\\\)[${rF(n,rH)}]`)),e=>e&&`^${rF(r1(e,RegExp("(?<!(?<!\\\\)\\\\)\\*")),e=>rH(r2(e,/\\(.)/g,"$1")),".*")}$`))):Q},r1=(e,r)=>{return null!=(r=null==e?void 0:e.split(r))?r:e},r2=(e,r,t)=>{return null!=(r=null==e?void 0:e.replace(r,t))?r:e},r4=(e=(e,r)=>e-r,r=e=>e[1]-e[0])=>{var t=[];return rl(t,{push(n,l){for(var i=[n,l],a=(e=!0)=>e?t.width=t.reduce((e,t)=>e+r(t),0):t.width,o=0;o<t.length;o++){var u,s,v=t[o];if(e(i[1],v[0])<0)return a(t.splice(o,0,i));if(e(i[0],v[1])<=0){if(e(i[0],v[0])<0&&(u=v[0]=i[0]),0<e(i[1],v[1])&&(u=v[1]=i[1]),!((null==(s=t[o+1])?void 0:s[0])<v[1]))return a(null!=u);u=i=t.splice(o--,1)[0]}}return a(i&&(t[t.length]=i))},width:0})},r6=((C=l=l||{})[C.Anonymous=0]="Anonymous",C[C.Indirect=1]="Indirect",C[C.Direct=2]="Direct",C[C.Sensitive=3]="Sensitive",rR(l,!1,"data classification")),r5=(e,r)=>{var t;return r6.parse(null!=(t=null==e?void 0:e.classification)?t:null==e?void 0:e.level)===r6.parse(null!=(t=null==r?void 0:r.classification)?t:null==r?void 0:r.level)&&r8.parse(null!=(t=null==e?void 0:e.purposes)?t:null==e?void 0:e.purposes)===r8.parse(null!=(t=null==r?void 0:r.purposes)?t:null==r?void 0:r.purposes)},r3=(e,r)=>{var t;return null==e?void 0:eh(e.classification)&&eh(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:r6.parse(null!=(t=null!=(t=null!=(t=e.classification)?t:e.level)?t:null==r?void 0:r.classification)?t:0),purposes:r8.parse(null!=(e=null!=(t=null!=(t=e.purposes)?t:e.purpose)?t:null==r?void 0:r.purposes)?e:i.Necessary)}},r8=((C=i=i||{})[C.None=0]="None",C[C.Necessary=1]="Necessary",C[C.Functionality=2]="Functionality",C[C.Performance=4]="Performance",C[C.Targeting=8]="Targeting",C[C.Security=16]="Security",C[C.Infrastructure=32]="Infrastructure",C[C.Any_Anonymous=49]="Any_Anonymous",C[C.Any=63]="Any",C[C.Server=2048]="Server",C[C.Server_Write=4096]="Server_Write",rR(i,!0,"data purpose",2111)),C=rR(i,!1,"data purpose",0),r7=(e,r)=>(!(a=null==e?void 0:e.metadata)||r&&(delete a.posted,delete a.queued,Object.entries(a).length)||delete e.metadata,e),te=e=>!(null==e||!e.patchTargetId),tr=(($=o={})[$.Global=0]="Global",$[$.Entity=1]="Entity",$[$.Session=2]="Session",$[$.Device=3]="Device",rR(o,!($[$.User=4]="User"),"variable scope")),o=(l.Anonymous,i.Necessary,{scope:tr,purpose:C,purposes:r8,classification:r6}),tl=(rz(o),e=>null==e?void 0:e.filter(ei).sort((e,r)=>e.scope===r.scope?e.key.localeCompare(r.key,"en"):e.scope-r.scope)),ti=((C=$={})[C.Add=0]="Add",C[C.Min=1]="Min",C[C.Max=2]="Max",C[C.IfMatch=3]="IfMatch",rR($,!(C[C.IfNoneMatch=4]="IfNoneMatch"),"variable patch type"),($=s=s||{})[$.Success=200]="Success",$[$.Created=201]="Created",$[$.Unchanged=304]="Unchanged",$[$.Denied=403]="Denied",$[$.NotFound=404]="NotFound",$[$.ReadOnly=405]="ReadOnly",$[$.Conflict=409]="Conflict",$[$.Unsupported=501]="Unsupported",$[$.Invalid=400]="Invalid",$[$.Error=500]="Error",rR(s,!1,"variable set status"),(e,r,t)=>{var n,l=e(),i=e=>e,e=(e,t=ts)=>(e=>{var r={initialized:!0,then:(e=>{var r=G(e);return(e,t)=>Y(r,[e,t])})(()=>(r.initialized=!0,rc(e)))};return r})(async()=>(n=i(t(await l,r)))&&e(n)),o={then:e(e=>e).then,all:e(e=>e,e=>e),changed:e(e=>e1(e,e=>e.status<300)),variables:e(e=>eD(e,to)),values:e(e=>eD(e,e=>{return null==(e=to(e))?void 0:e.value})),push:()=>(i=e=>(null!=t&&t(eD((e=>null==e?void 0:e.map(e=>(null==e?void 0:e.status)<400?e:Q))(e))),e),o),value:e(e=>{return null==(e=to(e[0]))?void 0:e.value}),variable:e(e=>to(e[0])),result:e(e=>e[0])};return o}),to=e=>{var r;return tu(e)?null!=(r=e.current)?r:e:Q},tu=(e,r=!1)=>r?(null==e?void 0:e.status)<300:(null==e?void 0:e.status)<400||404===(null==e?void 0:e.status),ts=(e,r,t)=>{var n,l,i=[],a=eD(ew(e),(e,a)=>{var s;return e&&(e.status<400||!t&&404===e.status?e:(l=(e=>`'${e.key}' in ${tr.format(e.scope)} scope`)(null!=(s=e.source)?s:e)+" could not be "+(404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because `+(409===e.status?`of a conflict. The expected version '${null==(s=e.source)?void 0:s.version}' did not match the current version '${null==(s=e.current)?void 0:s.version}'.`:403===e.status?null!=(s=e.error)?s:"the operation was denied.":400===e.status?null!=(s=e.error)?s:"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?"of an unexpected error: "+e.error:"of an unknown reason.")),null!=(n=null==r?void 0:r[a])&&!1===n(e,l)||i.push(l),Q))});return i.length?B(i.join("\n")):ey(e)?a:null==a?void 0:a[0]},td=e=>e&&"string"==typeof e.type,tc=(e=>r=>(null==r?void 0:r.type)&&e.some(e=>e===(null==r?void 0:r.type)))(["view"]),tf=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,tp=(e,r)=>{var t;return r&&(!(d=e.get(v=r.tag+(null!=(t=r.value)?t:"")))||(null!=(t=d.score)?t:1)<(null!=(t=r.score)?t:1))&&e.set(v,r)},th=(e,r="",t=new Map)=>{if(e)return eN(e)?eX(e,e=>th(e,r,t)):eg(e)?rG(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,l,i,a,o,u)=>{l={tag:(n?tf(n)+"::":"")+r+tf(l),value:tf(null!=(n=null!=i?i:a)?n:o)};u&&10!==parseFloat(u)&&(l.score=parseFloat(u)/10),tp(t,l)}):tp(t,e),t},tg=((C=c=c||{})[C.View=-3]="View",C[C.Tab=-2]="Tab",C[C.Shared=-1]="Shared",rR(c,!1,"local variable scope")),ty=e=>{var r;return null!=(r=tg.format(e))?r:tr.format(e)},tb=e=>!!tg.tryParse(null==e?void 0:e.scope),tw=rz({scope:tg},o),tk=e=>{return null==e?void 0:eg(e)?e:e.source?tk(e.source):`${(e=>{var r;return null!=(r=tg.tryParse(e))?r:tr(e)})(e.scope)} ${e.key} `+(null!=(e=e.targetId)?e:"")},tS=e=>{e=e.split("\0");return{scope:+e[0],key:e[1],targetId:e[2]}},tE=()=>()=>B("Not initialized."),tI=window,tA=document,tx=tA.body,tO=((e=>r$=e)(!!tI.chrome),ee),tC=(e,r,t=(e,r)=>tO<=r)=>{for(var n=0,l=er;1===(null==e?void 0:e.nodeType)&&!t(e,n++)&&r(e,(e,r)=>(null!=e&&(i=e,l=r!==et&&null!=i),et),n-1)!==er&&!l;){var i,o=e;null===(e=e.parentElement)&&(null==o?void 0:o.ownerDocument)!==tA&&(e=null==o||null==(o=o.ownerDocument.defaultView)?void 0:o.frameElement)}return i},tj=(e,r="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":var t;return null==(t=(""+e).trim())?void 0:t.toLowerCase();case!1:case"r":case"b":return""===e||ev(e);case"n":return parseFloat(e);case"j":return K(()=>JSON.parse(e),en);case"h":return K(()=>nx(e),en);case"e":return K(()=>null==nO?void 0:nO(e),en);default:return ey(r)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:tj(e,r[0])):void 0}},t$=(e,r,t)=>tj(null==e?void 0:e.getAttribute(r),t),t_=(e,r,t)=>tC(e,(e,n)=>n(t$(e,r,t))),tM=(e,r)=>{return null==(e=t$(e,r))||null==(r=e.trim())?void 0:r.toLowerCase()},tF=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,tP=e=>null!=e?e.tagName:null,tR=e=>({x:ej(scrollX,e),y:ej(scrollY,e)}),tz=(e,r)=>r2(e,/#.*$/,"")===r2(r,/#.*$/,""),tD=(e,r,t=et)=>(p=tW(e,r))&&Z({xpx:p.x,ypx:p.y,x:ej(p.x/tx.offsetWidth,4),y:ej(p.y/tx.offsetHeight,4),pageFolds:t?p.y/window.innerHeight:void 0}),tW=(e,r)=>null!=r&&r.pointerType&&null!=(null==r?void 0:r.pageY)?{x:r.pageX,y:r.pageY}:e?({x:h,y:g}=tB(e),{x:h,y:g}):void 0,tB=e=>e?(m=e.getBoundingClientRect(),f=tR(er),{x:ej(m.left+f.x),y:ej(m.top+f.y),width:ej(m.width),height:ej(m.height)}):void 0,tV=(e,r,t,n={capture:!0,passive:!0})=>(r=ew(r),rN(t,t=>eX(r,r=>e.addEventListener(r,t,n)),t=>eX(r,r=>e.removeEventListener(r,t,n)))),tL=()=>({...f=tR(et),width:window.innerWidth,height:window.innerHeight,totalWidth:tx.offsetWidth,totalHeight:tx.offsetHeight}),tK=new WeakMap,tG=e=>tK.get(e),tH=(e,r=er)=>(r?"--track-":"track-")+e,tX=(e,r,t,n,l,i)=>(null==r?void 0:r[1])&&eX((e=>null==e?void 0:e.getAttributeNames())(e),a=>{var o;return null!=(o=(y=r[0])[b=a])?o:y[b]=(i=er,!eg(n=eX(r[1],([r,t,n],l)=>(r=>r&&null!=a?r.test(a):Q)(r)&&(i=void 0,!t||(e=>!(null==e||!e.matches(t)))(e))&&e_(null!=n?n:a)))||(l=e.getAttribute(a))&&!ev(l)||th(l,r2(n,/\-/g,":"),t),i)}),tY=()=>{},tZ=(e,r)=>{if(w===(w=t5.tags))return tY(e,r);var t=e=>e?rQ(e)?[[e]]:eN(e)?eB(e,t):[eE(e)?[r0(e.match),e.selector,e.prefix]:[r0(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eD(w,eE(w)?e=>e[1]:e=>e,void 0,void 0))]];(tY=(e,r)=>tX(e,n,r))(e,r)},tQ=(e,r)=>rF(eV(tF(e,tH(r,et)),tF(e,tH("base-"+r,et)))," "),t0={},t1=(e,r,t=tQ(e,"attributes"))=>{var n;t&&tX(e,null!=(n=t0[t])?n:t0[t]=[{},(e=>rG(e,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[r0(t||n),,r],!0))(t)],r),th(tQ(e,"tags"),void 0,r)},t2=(e,r,t=er,n)=>{return null!=(t=null!=(t=t?tC(e,(e,t)=>t(t2(e,r,er)),ex(t)?t:void 0):rF(eV(t$(e,tH(r)),tF(e,tH(r,et)))," "))?t:n&&(k=tG(e))&&n(k))?t:null},t4=(e,r,t=er,n)=>""===(S=t2(e,r,t,n))||(null==S?S:ev(S)),t6=(e,r,t,n)=>e&&(null==n&&(n=new Map),t1(e,n),tC(e,e=>{tZ(e,n),th(null==t?void 0:t(e),void 0,n)},r),n.size)?{tags:[...n.values()]}:{},t5={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},t3=[],t8=[],t9=(e,r=0)=>e.charCodeAt(r),ne=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>t3[t8[r]=e.charCodeAt(0)]=r),e=>{for(var r,t=0,n=e.length,l=[];t<n;)r=e[t++]<<16|e[t++]<<8|e[t++],l.push(t8[(16515072&r)>>18],t8[(258048&r)>>12],t8[(4032&r)>>6],t8[63&r]);return l.length+=n-t,(e=>String.fromCharCode(...e))(l)}),nt={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},nn=(e=256)=>e*Math.random()|0,ni={exports:{}},{deserialize:na,serialize:no}=((()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,l=new Uint8Array(128),i=0;if(r&&r.multiple)for(var a=0;a<e.length;a++)o(e[a]);else o(e);return l.subarray(0,i);function o(e,l){var c,a;switch(typeof e){case"undefined":s(192);break;case"boolean":s(e?195:194);break;case"number":(e=>{var r;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?s(e):0<e&&e<=255?v([204,e]):-128<=e&&e<=127?v([208,e]):0<e&&e<=65535?v([205,e>>>8,e]):-32768<=e&&e<=32767?v([209,e>>>8,e]):0<e&&e<=4294967295?v([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?v([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?v([211,(r=e/4294967296)>>>24,r>>>16,r>>>8,r,(r=e%4294967296)>>>24,r>>>16,r>>>8,r]):-0x8000000000000000<=e&&e<=0x8000000000000000?(s(211),d(e)):v(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(t=new ArrayBuffer(8))).setFloat64(0,e),s(203),v(new Uint8Array(t)))})(e);break;case"string":(c=(a=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(127<e.charCodeAt(n)){r=!1;break}for(var l=0,i=new Uint8Array(e.length*(r?1:4)),a=0;a!==t;a++){var o=e.charCodeAt(a);if(o<128)i[l++]=o;else{if(o<2048)i[l++]=o>>6|192;else{if(55295<o&&o<56320){if(++a>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(a);if(u<56320||57343<u)throw Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+a+" out of range");i[l++]=(o=65536+((1023&o)<<10)+(1023&u))>>18|240,i[l++]=o>>12&63|128}else i[l++]=o>>12|224;i[l++]=o>>6&63|128}i[l++]=63&o|128}}return r?i:i.subarray(0,l)})(e)).length)<=31?s(160+c):v(c<=255?[217,c]:c<=65535?[218,c>>>8,c]:[219,c>>>24,c>>>16,c>>>8,c]),v(a);break;case"object":null===e?s(192):e instanceof Date?(e=>{var t,r=e.getTime()/1e3;0===e.getMilliseconds()&&0<=r&&r<4294967296?v([214,255,r>>>24,r>>>16,r>>>8,r]):0<=r&&r<17179869184?v([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r]):(v([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),d(r))})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((a=(c=e).length)<=255?v([196,a]):v(a<=65535?[197,a>>>8,a]:[198,a>>>24,a>>>16,a>>>8,a]),v(c)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u:e=>{var t,r=0;for(t in e)void 0!==e[t]&&r++;for(t in r<=15?s(128+r):v(r<=65535?[222,r>>>8,r]:[223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(o(t),o(n))}})(e);break;default:if(l||!r||!r.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?o(r.invalidTypeReplacement(e),!0):o(r.invalidTypeReplacement,!0)}}function u(e){var r=e.length;r<=15?s(144+r):v(r<=65535?[220,r>>>8,r]:[221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;t<r;t++)o(e[t])}function s(e){if(l.length<i+1){for(var r=2*l.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(l),l=t}l[i]=e,i++}function v(e){if(l.length<i+e.length){for(var r=2*l.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(l),l=t}l.set(e,i),i+=e.length}function d(e){var r,e=0<=e?(r=e/4294967296,e%4294967296):(r=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));v([r>>>24,r>>>16,r>>>8,r,e>>>24,e>>>16,e>>>8,e])}}function t(e,r){var t,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(l());else t=l();return t;function l(){var r=e[n++];if(0<=r&&r<=127)return r;if(128<=r&&r<=143)return s(r-128);if(144<=r&&r<=159)return v(r-144);if(160<=r&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return u(-1,1);if(197===r)return u(-1,2);if(198===r)return u(-1,4);if(199===r)return c(-1,1);if(200===r)return c(-1,2);if(201===r)return c(-1,4);if(202===r)return o(4);if(203===r)return o(8);if(204===r)return a(1);if(205===r)return a(2);if(206===r)return a(4);if(207===r)return a(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return c(1);if(213===r)return c(2);if(214===r)return c(4);if(215===r)return c(8);if(216===r)return c(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return v(-1,2);if(221===r)return v(-1,4);if(222===r)return s(-1,2);if(223===r)return s(-1,4);if(224<=r&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var i,t=0,l=!0;0<r--;)l?(t+=127&(i=e[n++]),128&i&&(t-=128),l=!1):t=(t*=256)+e[n++];return t}function a(r){for(var t=0;0<r--;)t=256*t+e[n++];return t}function o(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return n+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function u(r,t){r<0&&(r=a(t));t=e.subarray(n,n+r);return n+=r,t}function s(e,r){e<0&&(e=a(r));for(var t={};0<e--;)t[l()]=l();return t}function v(e,r){e<0&&(e=a(r));for(var t=[];0<e--;)t.push(l());return t}function d(r,t){r<0&&(r=a(t));t=n;return n+=r,((e,r,t)=>{var n=r,l="";for(t+=r;n<t;){var i=e[n++];if(127<i)if(191<i&&i<224){if(t<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(223<i&&i<240){if(t<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<i&&i<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(t<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(i<=65535)l+=String.fromCharCode(i);else{if(!(i<=1114111))throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,l+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320)}}return l})(e,t,r)}function c(e,r){e<0&&(e=a(r));r=a(1),e=u(e);return 255===r?(e=>{var t,r;if(4===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*r);if(8===e.length)return t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6);if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,r=i(8),new Date(1e3*r+t/1e6);throw Error("Invalid data length for a date value.")})(e):{type:r,data:e}}}var n={serialize:r,deserialize:t,encode:r,decode:t};ni.exports=n})(),($=ni.exports)&&$.__esModule&&Object.prototype.hasOwnProperty.call($,"default")?$.default:$),nu="$ref",ns=(e,r,t)=>eA(e)?Q:t?r!==Q:null===r||r,nv=(e,r,{defaultValues:t=!0,prettify:n=!1})=>{var l,i,a,o=(e,r,n=e[r],l=ns(r,n,t)?s(n):Q)=>(n!==l&&(l!==Q||ey(e)?e[r]=l:delete e[r],u(()=>e[r]=n)),l),u=e=>(null!=l?l:l=[]).push(e),s=e=>{if(null==e||ex(e)||eA(e))return Q;if(ek(e)){if(e.toJSON&&e!==(e=e.toJSON()))return s(e);if(null!=(a=null==i?void 0:i.get(e)))return e[nu]||(e[nu]=a,u(()=>delete e[nu])),{[nu]:a};if(eE(e))for(var r in(null!=i?i:i=new Map).set(e,i.size+1),e)o(e,r);else!eN(e)||e instanceof Uint8Array||(!ey(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?o(e,t):(e[t]=null,u(()=>delete e[t])))}return e};return K(()=>{var t;return r?no(null!=(t=s(e))?t:null):K(()=>JSON.stringify(e,Q,n?2:0),()=>JSON.stringify(s(e),Q,n?2:0))},!0,()=>null==l?void 0:l.forEach(e=>e()))},nd=e=>{var r,t,n=e=>ek(e)?e[nu]&&(t=(null!=r?r:r=[])[e[nu]])?t:(e[nu]&&delete(r[e[nu]]=e)[nu],Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return n(eg(e)?JSON.parse(e):null!=e?K(()=>na(e),()=>(console.error("Invalid message received.",e),Q)):e)},nc=(e,r={})=>{var t=(e,{json:r=!1,...t})=>{var l,i,a,n=(e,n)=>eh(e)&&!0===n?e:a(e=eg(e)?new Uint8Array(eD(e.length,r=>255&e.charCodeAt(r))):r?K(()=>JSON.stringify(e),()=>JSON.stringify(nv(e,!1,t))):nv(e,!0,t),n);return r?[e=>nv(e,!1,t),e=>null==e?Q:K(()=>nd(e),Q),(e,r)=>n(e,r)]:([l,i,a]=(e=>{for(var r,t,n,l,i,o,a=0n,u=0n,s=[],v=0,d=0,c=0,f=0,p=[],c=0;c<(null==e?void 0:e.length);f+=p[c]=e.charCodeAt(c++));var h=e?()=>{s=[...p],d=255&(v=f),c=-1}:()=>{},g=e=>(d=255&(v+=-s[c=(c+1)%s.length]+(s[c]=e)),e);return[e?e=>{for(h(),l=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+l),n=0;n<3;i[n++]=g(nn()));for(t=0,i[n++]=g(d^16*nn(16)+l);t<r;i[n++]=g(d^e[t++]));for(;l--;)i[n++]=nn();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((d^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);n<r;i[n++]=d^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(o=es(r)?64:r,h(),[a,u]=nt[o],t=0;t<e.length;a=BigInt.asUintN(o,(a^BigInt(d^g(e[t++])))*u));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+a%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):a.toString(36)}]})(e),[(e,r)=>(r?el:ne)(l(nv(e,!0,t))),e=>null!=e?nd(i(e instanceof Uint8Array?e:(e=>{for(var r,t=0,n=0,l=e.length,i=new Uint8Array(3*(l/4|0)+(l+3&3)%3);t<l;)i[n++]=t3[t9(e,t++)]<<2|(r=t3[t9(e,t++)])>>4,t<l&&(i[n++]=(15&r)<<4|(r=t3[t9(e,t++)])>>2,t<l)&&(i[n++]=(3&r)<<6|t3[t9(e,t++)]);return i})(e))):null,(e,r)=>n(e,r)])};if(!e){var n=+(null!=(n=r.json)?n:0);if(n&&!1!==r.prettify)return(null!=T?T:T=[t(null,{json:!1}),t(null,{json:!0,prettify:!0})])[n]}return t(e,r)},[nf,,]=(nc(),nc(null,{json:!0,prettify:!0})),C=r1(""+tA.currentScript.src,"#"),rR=r1(""+(C[1]||""),";"),nm=C[0],ny=rR[1]||(null==(rz=rB(nm,!1))?void 0:rz.host),nb=e=>{return!(!ny||(null==(e=rB(e,!1))||null==(e=e.host)?void 0:e.endsWith(ny))!==et)},o=(...e)=>r2(rF(e),/(^(?=\?))|(^\.(?=\/))/,nm.split("?")[0]),nk=o("?","var"),nS=o("?","mnt"),nT=(o("?","usr"),Symbol()),nE=Symbol(),nI=(e,r,t=et,n=er)=>{r&&(t?console.groupCollapsed:console.group)((n?"":r_("tail.js: ","90;3"))+r);t=null==e?void 0:e[nE];null!=(e=t?e[nT]:e)&&console.log(ek(e)?r_(nf(e),"94"):ex(e)?""+e:e),t&&t.forEach(([e,r,t])=>nI(e,r,t,!0)),r&&console.groupEnd()},[nA,nx]=nc(),[nN,nO]=[tE,tE],[$,nj]=eo(),nM=(...e)=>{var r,l=e.shift();console.error(eg(e[1])?e.shift():null!=(r=null==(r=e[1])?void 0:r.message)?r:"An error occurred",null!=(r=l.id)?r:l,...e)},[nU,nF]=eo(),[nP,nq]=eo(),nR=e=>nD!==(nD=e)&&nF(nD=!1,nV(!0,!0)),nz=e=>nW!==(nW=!!e&&"visible"===document.visibilityState)&&nq(nW,!e,nB(!0,!0)),nD=(nU(nz),!0),nW=!1,nB=ry(!1),nV=ry(!1),nJ=(tV(window,["pagehide","freeze"],()=>nR(!1)),tV(window,["pageshow","resume"],()=>nR(!0)),tV(document,"visibilitychange",()=>(nz(!0),nW&&nR(!0))),nF(nD,nV(!0,!0)),!1),nL=ry(!1),[,nG]=eo(),nH=rw({callback:()=>nJ&&nG(nJ=!1,nL(!1)),frequency:2e4,once:!0,paused:!0}),C=()=>!nJ&&(nG(nJ=!0,nL(!0)),nH.restart()),nY=(tV(window,["focus","scroll"],C),tV(window,"blur",()=>nH.trigger()),tV(document.body,["keydown","pointerdown","pointermove","scroll"],C),C(),()=>nL()),nZ=0,nQ=void 0,n0=()=>(null!=nQ?nQ:tE())+"_"+n1(),n1=()=>(rm(!0)-(parseInt(nQ.slice(0,-2),36)||0)).toString(36)+"_"+(++nZ).toString(36),n6={},n5={id:nQ,heartbeat:rm()},n3={knownTabs:{[nQ]:n5},variables:{}},[n8,n9]=eo(),[n7,le]=eo(),lr=tE,lt=e=>n6[tk(e)],ln=(...e)=>li(e.map(e=>(e.cache=[rm(),3e3],tw(e)))),ll=e=>eD(e,e=>e&&[e,n6[tk(e)]]),li=e=>{var r=eD(e,e=>e&&[tk(e),e]);null!=r&&r.length&&(e=ll(e),rl(n6,r),(r=e1(r,e=>e[1].scope>c.Tab)).length&&(rl(n3.variables,r),lr({type:"patch",payload:eQ(r)})),le(e,n6,!0))},[,lo]=($((e,r)=>{nU(t=>{var n;t?(t=r(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),nQ=null!=(n=null==t?void 0:t[0])?n:rm(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),n6=eQ(eV(e1(n6,([,e])=>e.scope===c.View),eD(null==t?void 0:t[1],e=>[tk(e),e])))):sessionStorage.setItem("_tail:state",e([nQ,eD(n6,([,e])=>e.scope!==c.View?e:void 0)]))},!0),lr=(r,t)=>{e&&(localStorage.setItem("_tail:state",e([nQ,r,t])),localStorage.removeItem("_tail:state"))},tV(window,"storage",e=>{var i,a,o;"_tail:state"!==e.key||!(e=null==r?void 0:r(e.newValue))||e[2]&&e[2]!==nQ||([e,{type:i,payload:a}]=e,"query"===i?t.active||lr({type:"set",payload:n3},e):"set"===i&&t.active?(rl(n3,a),rl(n6,a.variables),t.trigger()):"patch"===i?(o=ll(eD(a,1)),rl(n3.variables,a),rl(n6,a),le(o,n6,!1)):"tab"===i&&(rl(n3.knownTabs,e,a),a)&&n9("tab",a,!1))});var t=rw(()=>n9("ready",n3,!0),-25),n=rw({callback(){var e=rm()-1e4;eX(null==n3?void 0:n3.knownTabs,([r,t])=>t[0]<e&&((e,r)=>{var t=[],n=!1,l=(e,i,a,o)=>{var u;e&&(u=r[i],i===r.length-1?ey(u)?(n=!0,u.forEach(r=>t.push(ro(e,r)))):t.push(ro(e,u)):(ey(u)?(n=!0,u.forEach(r=>l(rr(e,r),i+1,e,r))):l(rr(e,u),i+1,e,u),!e2(e)&&a&&rs(a,o)))};return l(e,0),n?t:t[0]})(n3.knownTabs,[r])),n5.heartbeat=rm(),lr({type:"tab",payload:n5})},frequency:5e3,paused:!0});nU(e=>(e=>{lr({type:"tab",payload:e?n5:void 0}),e?(t.restart(),lr({type:"query"})):t.toggle(!1),n.toggle(e)})(e),!0)},!0),eo()),[lu,ls]=eo(),lv=(({timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var l=()=>(t?nO:nx)(localStorage.getItem("_tail:rq")),i=0,a=()=>localStorage.setItem("_tail:rq",(t?nN:nA)([nQ,rm()+r]));return async(t,o,u=null!=o?1:n)=>{for(;u--;){var v=l();if((!v||v[1]<rm())&&(a(),(null==(v=l())?void 0:v[0])===nQ))return 0<r&&(i=setInterval(()=>a(),r/2)),Y(t,!0,()=>{clearInterval(i),localStorage.removeItem("_tail:rq")});var d=new rT,[v]=tV(window,"storage",r=>{"_tail:rq"!==r.key||r.newValue||d.resolve()});e=[rI(null!=o?o:r),d],await Promise.race(e.map(e=>ex(e)?e():e)),v()}var e;null==o&&B("_tail:rq could not be acquired.")}})(),ld=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var l,i,a=!1,o=t=>{var o=ex(r)?null==r?void 0:r(l,t):r;return!1!==o&&(lo(e,l=null!=o&&!0!==o?o:l,t,e=>(a=l===Q,l=e)),!a)&&(i=n?nN(l,!0):JSON.stringify(l))};if(!t)return lv(()=>(async r=>{var l,i;for(i of eR(1,r,void 0,void 0))if(null!=(i=await i)&&(l=i),e$){e$=!1;break}return l})(async r=>{var a;return o(r)?400<=(a=await fetch(e,{method:null!=l?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i})).status?0===r?e_(B("Invalid response: "+await a.text())):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rI(200*(1+r))):(null!=(a=null!=(r=n?new Uint8Array(await a.arrayBuffer()):await a.text())&&r.length?null==(a=n?nO:JSON.parse)?void 0:a(r):Q)&&ls(a),e_(a)):e_()}));o(0)&&!navigator.sendBeacon(e,new Blob(null!=l?[i]:[],{type:"text/plain"}))&&B("Beacon send failed.")},rR=["scope","key","targetId","version"],lf=[...rR,"created","modified","classification","purposes","tags","readonly","value"],lp=[...rR,"init","purpose","refresh"],lh=[...lf,"value","force","patch"],lg=new Map,lm=(e,r)=>{var t=rw(async()=>{var e=eD(lg,([e,r])=>({...tS(e),result:[...r]}));e.length&&await v.get(...e)},3e3),n=(e,r)=>r&&eG(r,r=>rr(lg,e,()=>new Set).add(r)),o=(nU((e,r)=>t.toggle(e,e&&3e3<=r),!0),n7(e=>eX(e,([e,r])=>((e,r)=>{var t,l,i;e&&(l=tk(e),null==(i=rs(lg,l))||!i.size||(null==e?void 0:e.purposes)===(null==r?void 0:r.purposes)&&(null==e?void 0:e.classification)==(null==r?void 0:r.classification)&&V(null==e?void 0:e.value,null==r?void 0:r.value)||eX(i,i=>{t=!1,null!=i&&i(e,r,(e=!0)=>t=e),t&&n(l,i)}))})(e,r))),new Map),u=(e,r)=>rl(o,e,es(r)?r?void 0:0:r),v={get:(...t)=>ti(async()=>{t[0]&&!eg(t[0])||(a=t[0],t=t.slice(1)),null!=r&&r.validateKey(a);var v=[],c=eD(t,(e,r)=>[e,r]),f=[],a=null!=(a=null==(a=await ld(e,()=>!!(c=eD(c,([e,r])=>{if(e){var t,l=tk(e),i=(n(l,e.result),lt(l)),l=(e.init&&u(l,e.cache),e.purposes);if((null!=l?l:-1)&(null!=(t=null==i?void 0:i.purposes)?t:-1))if(!e.refresh&&(null==i?void 0:i[1])<rm())rp(v,[{...i,status:s.Success},r]);else{if(!tb(e))return[rd(e,lp),r];eE(e.init)&&null!=(t={...tw(e),status:s.Created,...e.init}).value&&(rp(f,d(t)),rp(v,[t,r]))}else rp(v,[{...e,status:s.Denied,error:"No consent for "+r8.logFormat(l)},r])}})).length&&{variables:{get:eD(c,0)},deviceSessionId:null==r?void 0:r.deviceSessionId}))||null==(a=a.variables)?void 0:a.get)?a:[];return rp(v,...eD(a,(e,r)=>e&&[e,c[r][1]])),f.length&&li(f),v.map(([e])=>e)},eD(t,e=>null==e?void 0:e.error)),set:(...t)=>ti(async()=>{t[0]&&!eg(t[0])||(a=t[0],t=t.slice(1)),null!=r&&r.validateKey(a);var o=[],v=[],c=eD(t,(e,r)=>{var a,n;if(e)return n=tk(e),a=lt(n),u(n,e.cache),tb(e)?null!=e.patch?B("Local patching is not supported."):(n={value:e.value,classification:l.Anonymous,purposes:i.Necessary,scope:tg(e.scope),key:e.key},v[r]={status:a?s.Success:s.Created,source:e,current:n},void rp(o,d(n))):(null==e.patch&&void 0===(null==e?void 0:e.version)&&(e.version=null==a?void 0:a.version,null==e.force)&&(e.force=!!e.version),[rd(e,lh),r])}),a=c.length?L(null==(a=(await ld(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:null==r?void 0:r.deviceSessionId})).variables)?void 0:a.set,"No result."):[];return o.length&&li(o),eX(a,(e,r)=>{var t,[r,l]=c[r];null!=(t=(e.source=r).result)&&t.call(r,e),v[l]=e}),v},eD(t,e=>null==e?void 0:e.error))},d=(e,r=rm())=>{return{...rd(e,lf),cache:[r,r+(null!=(r=rs(o,tk(e)))?r:3e3)]}};return lu(({variables:e})=>{var r;e&&(r=rm(),null!=(e=eV(eD(e.get,e=>to(e)),eD(e.set,e=>to(e)))))&&e.length&&li(eG(e,d,r))}),v},lb=Symbol(),lw=[.75,.33],lk=[.25,.33],lE=()=>{var l,a,i,t=null==tI?void 0:tI.screen;return t?({width:t,height:l,orientation:i}=t,a=t<l,-90!==(i=null!=(i=null!=(i=null==i?void 0:i.angle)?i:tI.orientation)?i:0)&&90!==i||([t,l]=[l,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:tI.devicePixelRatio,width:t,height:l,landscape:a}}):{}},lI=e=>e(Z({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:null==A?void 0:A.clientId,languages:eD(navigator.languages,(e,r,t=e.split("-"))=>Z({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...lE()})),lA=(e,r="A"===tP(e)&&t$(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),lx=(e,r=tP(e),t=t4(e,"button"))=>t!==er&&(J(r,"A","BUTTON")||"INPUT"===r&&J(tM(e,"type"),"button","submit")||t===et),lN=(e,r=!1)=>{var t;return{tagName:e.tagName,text:rU((null==(t=t$(e,"title"))?void 0:t.trim())||(null==(t=t$(e,"alt"))?void 0:t.trim())||(null==(t=e.innerText)?void 0:t.trim()),100),href:null==(t=e.href)?void 0:t.toString(),rect:r?tB(e):void 0}},lC=e=>{if(I)return I;eg(e)&&([t,e]=nx(e),e=nc(t)[1](e)),rl(t5,e),(e=>{nO===tE&&([nN,nO]=nc(e),nj(nN,nO))})(rs(t5,"encryptionKey"));var t,a,o,u,s,v,d,c,f,p,h,g,l=rs(t5,"key"),i=null!=(e=null==(t=tI[t5.name])?void 0:t._)?e:[];if(ey(i))return a=[],o=[],u=(e,...r)=>{var t=et;o=e1(o,n=>K(()=>{var l;return null!=(l=n[e])&&l.call(n,...r,{tracker:I,unsubscribe:()=>t=er}),t},(e=>r=>nM(e,r))(n)))},s=[],d=lm(nk,v={applyEventExtensions(e){null==e.clientId&&(e.clientId=n0()),null==e.timestamp&&(e.timestamp=rm()),h=et;var n=er;return eD(a,([,r])=>{var t;!n&&(null==(t=r.decorate)?void 0:t.call(r,e))!==er||(n=et)}),n?void 0:e},validateKey:(e,r=!0)=>!l&&!e||e===l||!!r&&B(`'${e}' is not a valid key.`)}),c=((e,r)=>{var n=[],l=new WeakMap,i=new Map,a=(e,r)=>{var t;return null!=(t=e.metadata)&&t.queued?rt(r,{type:e.type+"_patch",patchTargetId:e.clientId}):B("Source event not queued.")},o=async(t,n=!0,l)=>{var i;return t[0]&&!eg(t[0])||(i=t[0],t=t.slice(1)),nI({[nE]:eD(t=t.map(e=>(null!=r&&r.validateKey(null!=i?i:e.key),rt(e,{metadata:{posted:!0}}),rt(r7(rf(e),!0),{timestamp:e.timestamp-rm()}))),e=>[e,e.type,er])},"Posting "+rC([rj("new event",[e2(t,e=>!te(e))||void 0]),rj("event patch",[e2(t,e=>te(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),ld(e,{events:t,variables:l,deviceSessionId:null==r?void 0:r.deviceSessionId},{beacon:n})},u=async(e,{flush:t=!1,async:l=!0,variables:i}={})=>{if((e=eD(ew(e),e=>rt(r.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eX(e,e=>nI(e,e.type)),!l)return o(e,!1,i);t?(n.length&&rh(e,...n.splice(0)),e.length&&await o(e,!0,i)):e.length&&rp(n,...e)};return rw(()=>u([],{flush:!0}),5e3),nP((e,r,t)=>{!e&&(n.length||r||1500<t)&&(e=eD(i,([e,r])=>{var[r,n]=r();return n&&(i.delete(e),l.delete(e)),r}),n.length||e.length)&&u(eV(n.splice(0),e),{flush:!0})}),{post:u,postPatch:(e,r,t)=>u(a(e,r),{flush:!0}),registerEventPatchSource(e,r,t=!1,n){var o=!1,s=()=>{o=!0};return l.set(e,rf(e)),i.set(e,()=>{if(!1===(null==n?void 0:n.isConnected))s();else{var i=l.get(e),[t,v]=null!=(t=rg(r(i,s),i))?t:[];if(t&&!V(v,i))return l.set(e,rf(v)),[a(e,t),o]}return[void 0,o]}),t&&u(e),s}}})(nk,v),f=null,p=0,g=h=er,I=(...e)=>{if(e.length){1<e.length&&(!e[0]||eg(e[0]))&&(r=e[0],e=e.slice(1)),eg(e[0])&&(e=(t=e[0]).match(/^[{[]/)?JSON.parse(t):nx(t));var r,n=er;if((e=e1(eB(e,e=>eg(e)?nx(e):e),e=>{if(!e)return er;if(l3(e))t5.tags=rl({},t5.tags,e.tagAttributes);else{if(l8(e))return t5.disabled=e.disable,er;if(ie(e))return n=et,er;if(io(e))return e(I),er}return g||it(e)||l7(e)?et:(s.push(e),er)})).length||n){var t=e7(e,e=>l7(e)?-100:it(e)?-50:ia(e)?-10:td(e)?90:0);if(!f||!f.splice(h?p+1:f.length,0,...t)){for(p=0,f=t;p<f.length;p++){var i=f[p];i&&(v.validateKey(null!=r?r:i.key),K(()=>{var e=f[p];if(u("command",e),h=er,td(e))c.post(e);else if(ir(e))d.get(...ew(e.get));else if(ia(e))d.set(...ew(e.set));else if(it(e))rp(o,e.listener);else if(l7(e))(r=K(()=>e.extension.setup(I),r=>nM(e.extension.id,r)))&&(rp(a,[null!=(t=e.priority)?t:100,r,e.extension]),e7(a,([e])=>e));else if(io(e))e(I);else{var t,n,r,i=er;for([,r]of a)if(i=null!=(n=null==(n=r.processCommand)?void 0:n.call(r,e))?n:er)break;i||nM("invalid-command",e,"Loaded extensions:",a.map(e=>e[2].id))}},e=>nM(I,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}},Object.defineProperty(tI,t5.name,{value:Object.freeze(Object.assign(I,{id:"tracker_"+n0(),events:c,variables:d,__isTracker:et})),configurable:!1,writable:!1}),n7((e,r,t)=>{var n=eV(null==(n=tl(eD(e,1)))?void 0:n.map(e=>[e,`${e.key} (${ty(e.scope)}, ${e.scope<0?"client-side memory only":r8.format(e.purposes)})`,er]),[[{[nE]:null==(n=tl(eD(r,1)))?void 0:n.map(e=>[e,`${e.key} (${ty(e.scope)}, ${e.scope<0?"client-side memory only":r8.format(e.purposes)})`,er])},"All variables",et]]);nI({[nE]:n},r_(`Variables changed${t?"":" - merging changes from another tab"} (${e.length} changed, ${e2(r)} in total).`,"2;3"))}),n8(async(e,r,t,n)=>{"ready"===e&&(e=(e=>ts(e,Q,!0))((await d.get({scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:ee}))[0]).value,v.deviceSessionId=e.deviceSessionId,e.hasUserAgent||(lI(I),e.hasUserAgent=!0),g=!0,s.length&&I(s),n(),I(...eD(l2,e=>({extension:e})),...i,{set:{scope:"view",key:"loaded",value:!0}}))},!0),I;B(`The global variable for the tracker "${t5.name}" is used for something else than an array of queued commands.`)},lj=()=>null==A?void 0:A.clientId,l$={scope:"shared",key:"referrer"},l_=(e,r)=>{I.variables.set({...l$,value:[lj(),e]}),r&&I.variables.get({scope:l$.scope,key:l$.key,result(t,n,l){return null!=t&&t.value?l():(null==n||null==(t=n.value)?void 0:t[1])===e&&r()}})},lM=ry(),lU=ry(),lF=1,[lq,lR]=eo(),lz=e=>{var r=ry(e,lM),t=ry(e,lU),n=ry(e,nY),l=ry(e,()=>lF);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),activeTime:n(e,i),activations:l(e,i)})},lD=lz(),[lB,lV]=eo(),lJ=(e,r)=>(r&&eX(lK,r=>e(r,()=>!1)),lB(e)),lL=new WeakSet,lK=document.getElementsByTagName("iframe");function lH(e){if(e){if(null!=e.units&&J(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var lY=e=>(null==e?void 0:e.component)||(null==e?void 0:e.content),lZ=e=>t6(e,r=>r!==e&&!!lY(rr(tK,r)),e=>(rr(tK,e),(N=rr(tK,e))&&eB(eV(N.component,N.content,N),"tags"))),lQ=(e,r)=>r?e:{...e,rect:void 0,content:(O=e.content)&&eD(O,e=>({...e,rect:void 0}))},l0=(e,r=er,t)=>{var n,l,i,a=[],o=[],u=0;return tC(e,e=>{var s,i,l=rr(tK,e);l&&(lY(l)&&(i=e1(ew(l.component),e=>{var t;return 0===u||!r&&(1===u&&(null==(t=e.track)?void 0:t.secondary)!==et||(null==(t=e.track)?void 0:t.promote))}),n=(null!=t?t:e9(i,e=>{return null==(e=e.track)?void 0:e.region}))&&tB(e)||void 0,s=lZ(e),l.content&&rh(a,...eD(l.content,e=>({...e,rect:n,...s}))),null!=i)&&i.length&&(rh(o,...eD(i,e=>{var r;return u=e4(u,null!=(r=e.track)&&r.secondary?1:2),lQ({...e,content:a,rect:n,...s},!!n)})),a=[]),i=l.area||t2(e,"area"))&&rh(o,...eD(ew(i)))}),a.length&&rp(o,lQ({id:"",rect:n,content:a})),eX(o,e=>{eg(e)?rp(null!=l?l:l=[],e):(null==e.area&&(e.area=rF(l,"/")),rh(null!=i?i:i=[],e))}),i||l?{components:i,area:rF(l,"/")}:void 0},l1=Symbol(),P={necessary:1,preferences:2,statistics:4,marketing:8},l2=(window.tail({consent:{externalSource:{key:"Cookiebot",poll(){var t,e=null==(e=tA.cookie.match(/CookieConsent=([^;]*)/))?void 0:e[1];if(e)return t=1,null!=e&&e.replace(/([a-z]+):(true|false)/g,(e,r,n)=>{return"true"===n&&(t|=null!=(n=P[r])?n:0),""}),{level:1<t?1:0,purposes:t}}}}}),[{id:"context",setup(e){rw(()=>eX(lK,e=>ra(lL,e)&&lV(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result(r,t,l){return null==A||null==r||!r.value||null!=A&&A.definition?n=null==r?void 0:r.value:(A.definition=r.value,null!=(r=A.metadata)&&r.posted&&e.events.postPatch(A,{definition:n})),l()}});var n,r,v=null!=(r=null==(r=lt({scope:"tab",key:"viewIndex"}))?void 0:r.value)?r:0,d=null==(r=lt({scope:"tab",key:"tabIndex"}))?void 0:r.value,c=(null==d&&ln({scope:"tab",key:"tabIndex",value:d=null!=(r=null!=(r=null==(r=lt({scope:"shared",key:"tabIndex"}))?void 0:r.value)?r:null==(r=lt({scope:"session",key:"@info"}))||null==(r=r.value)?void 0:r.tabs)?r:0},{scope:"shared",key:"tabIndex",value:d+1}),null),f=(r=er)=>{var i,a,o,l,p;tz(""+c,c=location.href)&&!r||({source:r,scheme:l,host:i}=rB(location.href+"",!0),A={type:"view",timestamp:rm(),clientId:n0(),tab:nQ,href:r,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:i},tabNumber:d+1,tabViewNumber:v+1,viewport:tL(),duration:lD(void 0,!0)},0===d&&(A.firstTab=et),0===d&&0===v&&(A.landingPage=et),ln({scope:"tab",key:"viewIndex",value:++v}),a=rV(location.href),eD(["source","medium","campaign","term","content"],(e,r)=>{var n;return(null!=(n=(o=A).utm)?n:o.utm={})[e]=null==(n=ew(a["utm_"+e]))?void 0:n[0]}),!(A.navigationType=x)&&performance&&eD(performance.getEntriesByType("navigation"),e=>{A.redirects=e.redirectCount,A.navigationType=r2(e.type,/\_/g,"-")}),x=void 0,"navigate"===(null!=(r=A.navigationType)?r:A.navigationType="navigate")&&(p=null==(l=lt(l$))?void 0:l.value)&&nb(document.referrer)&&(A.view=null==p?void 0:p[0],A.relatedEventId=null==p?void 0:p[1],e.variables.set({...l$,value:void 0})),(p=document.referrer||null)&&!nb(p)&&(A.externalReferrer={href:p,domain:(()=>{var{host:r,scheme:t,port:n}=rB(p,!1);return{host:r+(n?":"+n:""),scheme:t}})()}),A.definition=n,n=void 0,e.events.post(A),e.events.registerEventPatchSource(A,()=>({duration:lD()})),lR(A))};return nP(e=>{e?(lU(et),++lF):lU(er)}),tV(window,"popstate",()=>(x="back-forward",f())),eD(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),x="navigate",f()}}),f(),{processCommand:r=>l5(r)&&(e(r.username?{type:"login",username:r.username}:{type:"logout"}),et),decorate(e){!A||tc(e)||te(e)||(e.view=A.clientId)}}}},{id:"components",setup(e){var r=(e=>{var r=new IntersectionObserver(e=>eX(e,e=>{var r,t;return null==(r=(t=e.target)[lb])?void 0:r.call(t,e)})),t=new Set,n=(rw({callback:()=>eX(t,e=>e()),frequency:250,raf:!0}),(e,r,t=0)=>e<t?t:r<e?r:e),l=tA.createRange();return(i,a)=>{var o,u,s,v,d,c,f,p,h,g,m,y,b,w,k,S;a&&(o=e1(null==a?void 0:a.component,e=>{var r;return(null==(r=e.track)?void 0:r.impressions)||(null!=(r=null==(r=e.track)?void 0:r.secondary)?r:e.inferred)!==et}))&&e2(o)&&(p=f=er,g=h=0,m=(e,r,t,n)=>{var l,i=null!=(i=(l=null!=u?u:u=[])[e])?i:l[e]=[{duration:0,impressions:0},ry(!1,nY),!1,!1,0,0,0,r4()];i[4]=r,i[5]=t,i[6]=n},y=[r4(),r4()],b=lz(!1),w=ry(!1,nY),k=-1,S=()=>{var O,r=i.getBoundingClientRect(),t=window.innerWidth,a=window.innerHeight,S=[n(r.top,a),n(r.right,t),n(r.bottom,a),n(r.left,t)],T=S[2]-S[0],S=S[1]-S[3],I=T/r.height||0,A=S/r.width||0,x=f?lk:lw,I=(x[0]*a<T||x[0]<I)&&(x[0]*t<S||x[0]<A);if(p!==I&&w(p=I,!0),f!==(f=p&&w()>=t5.impressionThreshold-250)&&(++h,b(f),s||e(s=e1(eD(o,e=>{return((null==(e=e.track)?void 0:e.impressions)||t4(i,"impressions",et,e=>{return null==(e=e.track)?void 0:e.impressions}))&&Z({type:"impression",pos:tD(i),viewport:tL(),timeOffset:lD(),impressions:h,...l0(i,et)})||null}))),null!=s)&&s.length&&(O=b(),v=eD(s,r=>e.events.registerEventPatchSource(r,()=>({relatedEventId:r.clientId,duration:O,impressions:h,regions:u&&{top:u[0][0],middle:u[1][0],bottom:u[2][0]},seen:g,text:c,read:O.activeTime&&c&&n(O.activeTime/c.readTime,g)})))),r.height!==k){k=r.height;t=i.textContent;if({boundaries:d,...c}=(e=>{for(var t,n,l=RegExp("[\\p{L}\\p{N}][\\p{L}\\p{N}'â€™]*|([.!?]+)","gu"),i=0,a=0,o=0,u=0,s=!1;t=l.exec(e);)t[1]?(s&&++u,s=!1):(s=!0,i+=t[0].length,6<t[0].length&&++o,++a);s&&++u;var l=RegExp("[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)","gu"),v=[0,.25,.75,1].map(e=>e*i|0),d=[],f=0,p=!1;do{if(null!=(t=l.exec(e))&&t[1])p&&++f;else{for(var c=null==t?void 0:t.index,h=!1,g=0;g<v.length;g++)v[g]--||(d[g]={offset:null!=n?n:c,wordsBefore:f,readTime:ej(f/238*6e4)},h=!0);(p=!h)||(f=0),n=c+1}}while(t);return{text:e,length:e.length,characters:i,words:a,sentences:u,lix:ej(a/u+100*o/a),readTime:ej(a/238*6e4),boundaries:d}})(null!=t?t:""),u||r.height>=1.25*a){var j=tA.createTreeWalker(i,NodeFilter.SHOW_TEXT),$=0,_=0;for(null==u&&(u=[]);_<d.length&&(M=j.nextNode());){var M,U,F,z,D,q=null!=(U=null==(U=M.textContent)?void 0:U.length)?U:0;for($+=q;$>=(null==(F=d[_])?void 0:F.offset);)l[_%2?"setEnd":"setStart"](M,d[_].offset-$+q),_++%2&&({top:F,bottom:z}=l.getBoundingClientRect(),D=r.top,_<3?m(0,F-D,z-D,d[1].readTime):(m(1,u[0][4],F-D,d[2].readTime),m(2,F-D,z-D,d[3].readTime)))}}}x=r.left<0?-r.left:0,A=r.top<0?-r.top:0,I=r.width*r.height;f&&(g=y[0].push(A,A+T)*y[1].push(x,x+S)/I),u&&eX(u,e=>{var t=n(r.top<0?-r.top:0,e[5],e[4]),l=n(r.bottom>a?a:r.bottom,e[5],e[4]),i=f&&0<l-t,o=e[0];o.duration=e[1](i),i&&(e[3]!==(e[3]=i)&&++e[0].impressions,o.seen=e[7].push(t,l)/(e[5]-e[4]),o.read=n(o.duration/e[6],o.seen))})},i[lb]=({isIntersecting:e})=>{rl(t,S,e),e||(eX(v,e=>e()),S())},r.observe(i))}})(e),n=({boundary:e,...n})=>{ri(tK,e,e=>{var r;return(e=>null==e?void 0:{...e,component:ew(e.component),content:ew(e.content),tags:ew(e.tags)})("add"in n?{...e,component:eV(null==e?void 0:e.component,n.component),content:eV(null==e?void 0:e.content,n.content),area:null!=(r=null==n?void 0:n.area)?r:null==e?void 0:e.area,tags:eV(null==e?void 0:e.tags,n.tags),cart:null!=(r=n.cart)?r:null==e?void 0:e.cart,track:null!=(r=n.track)?r:null==e?void 0:e.track}:"update"in n?n.update(e):n)}),r(e,rr(tK,e))};return{decorate(e){eX(e.components,e=>rs(e,"track"))},processCommand:e=>l9(e)?(n(e),et):ii(e)?(eD(((e,r)=>{var t,n;return r?(t=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(l=>{if(!rr(n,l))for(var i=[];null!=t$(l,e);){ra(n,l);var a,o=r1(t$(l,e),"|");t$(l,e,null);for(var u=0;u<o.length;u++){var v=o[u];if(""!==v){var s="-"===v?-1:parseInt(null!=(s=em(v))?s:"",36);if(s<0)i.length+=s;else{if(0===u&&(i.length=0),isNaN(s)&&/^["\[{]/.test(v))for(var c="";u<o.length;u++)try{v=JSON.parse(c+=o[u]);break}catch(e){}0<=s&&r[s]&&(v=r[s]),rp(i,v)}}}rp(t,...eD(i,e=>({add:et,...e,boundary:l})));var f=l.nextElementSibling;"WBR"===l.tagName&&null!=(a=l.parentNode)&&a.removeChild(l),l=f}}),t):[]})(e.scan.attribute,e.scan.components),n),et):er}}},{id:"navigation",setup(e){var r=new WeakMap,t=t=>{tV(t,["click","contextmenu","auxclick"],n=>{var l,i,a,o,u,s=er;if(tC(n.target,e=>{lx(e)&&null==a&&(a=e),s=s||"NAV"===tP(e);var r,v=tG(e),v=null==v?void 0:v.component;!n.button&&null!=v&&v.length&&!u&&(eX(e.querySelectorAll("a,button"),r=>lx(r)&&(3<(null!=u?u:u=[]).length?e_():u.push({...lN(r,!0),component:tC(r,(e,r,t,n=null==(l=tG(e))?void 0:l.component)=>n&&r(n[0]),r=>r===e)}))),u)&&null==o&&(o=e),null==l&&(l=null!=(r=t4(e,"clicks",et,e=>{return null==(e=e.track)?void 0:e.clicks}))?r:v&&e9(v,e=>{return(null==(e=e.track)?void 0:e.clicks)!==er})),null==i&&(i=null!=(r=t4(e,"region",et,e=>{return null==(e=e.track)?void 0:e.region}))?r:v&&e9(v,e=>{return null==(e=e.track)?void 0:e.region}))}),null!=o?o:o=a){var v,d=u&&!a&&l,c=l0(o,!1,d),f=t6(o,void 0,e=>{return eD(ew(null==(e=rr(tK,e))?void 0:e.tags))}),p=(null==l&&(l=!s),{...(i=null==i?et:i)?{pos:tD(a,n),viewport:tL()}:null,...((e,r)=>{var n;return tC(null!=e?e:r,e=>"IMG"===tP(e)||e===r?(n={element:lN(e,!1)},er):et),n})(n.target,o),...c,timeOffset:lD(),...f});if(a)if(lA(a)){var h=a,c=h.hostname!==location.hostname,{host:f,scheme:y,source:b}=rB(h.href,!1);if(h.host===location.host&&h.pathname===location.pathname&&h.search===location.search)return"#"===h.hash?void 0:void(h.hash!==location.hash&&0===n.button&&e(Z({type:"anchor_navigation",anchor:h.hash,...p})));var k,T,w=Z({clientId:n0(),type:"navigation",href:c?h.href:b,external:c,domain:{host:f,scheme:y},self:et,anchor:h.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||t$(h,"target")!==window.name?(l_(w.clientId),w.self=er,e(w)):tz(location.href,h.href)||(w.exit=w.external,l_(w.clientId))):(k=h.href,(b=nb(k))?l_(w.clientId,()=>e(w)):(T=(""+Math.random()).replace(".","").substring(1,8),b||t5.captureContextMenu&&(h.href=nS+"="+T+encodeURIComponent(k),tV(window,"storage",(r,t)=>{return"_tail:push"===r.key&&(r.newValue&&(null==(r=JSON.parse(r.newValue))?void 0:r.requestId)===T&&e(w),t())}),tV(t,["keydown","keyup","visibilitychange","pointermove"],(e,r)=>{r(),h.href=k}))))}else{tC(n.target,(e,r)=>{var t;return!!(null!=v?v:v=(e=>eg(e=null==e||e!==et&&""!==e?e:"add")&&J(e,"add","remove","update","clear")?{action:e}:ek(e)?e:void 0)(null!=(t=null==(t=tG(e))?void 0:t.cart)?t:t2(e,"cart")))&&!v.item&&(v.item=(e=>null==e?Q:ey(e)||eg(e)?e[e.length-1]:eH(e,(e,t)=>e,void 0,void 0))(null==(t=tG(e))?void 0:t.content))&&r(v)});c=lH(v);(c||l)&&e(Z(c?{type:"cart_updated",...p,...c}:{type:"component_click",...p}))}else d&&ri(r,o,t=>{var l=tW(o,n);return t?rp(t,l):(l=Z({type:"component_click_intent",...p,clicks:t=[l],clickables:u}),e.events.registerEventPatchSource(l,()=>({clicks:rr(r,o)}),!0,o)),t})}})};t(document),lJ(e=>e.contentDocument&&t(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=tR(et);lq(()=>{return e=()=>(r={},t=tR(et)),setTimeout(e,250);var e}),tV(window,"scroll",()=>{var i,n=tR(),l={x:(f=tR(er)).x/(tx.offsetWidth-window.innerWidth)||0,y:f.y/(tx.offsetHeight-window.innerHeight)||0};n.y>=t.y&&(i=[],!r.fold&&n.y>=t.y+200&&(r.fold=et,rp(i,"fold")),!r["page-middle"]&&.5<=l.y&&(r["page-middle"]=et,rp(i,"page-middle")),!r["page-end"]&&.99<=l.y&&(r["page-end"]=et,rp(i,"page-end")),(n=eD(i,e=>Z({type:"scroll",scrollType:e,offset:l}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(r){var t;return l6(r)?("clear"===(t=r.cart)?e({type:"cart_updated",action:"clear"}):(t=lH(t))&&e({...t,type:"cart_updated"}),et):il(r)?(e({type:"order",...r.order}),et):er}})},{id:"forms",setup(e){var r,t=new Map,n=(e,r=!1)=>{var t=!r||t_(e,tH("form-value")),e=(r&&(t=t?ev(t):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return r&&(e=e&&rU(e,200)),t?e:void 0},l=r=>{var l,a,s,i=r.form;if(i)return a=t_(i,tH("ref"))||"track_ref",s=rr(t,i,()=>{var r,t=new Map,n={type:"form",name:t_(i,tH("form-name"))||t$(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}},s=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:lD()})),((e=0)=>{var r,t,n=(l,i=e)=>{if(void 0===l)return!!t;clearTimeout(r),es(l)?l&&(i<0?e=>e!==er:e=>e===et)(null==t?void 0:t())?n(t):t=void 0:(t=l,r=setTimeout(()=>n(!0,i),i<0?-i:i))};return n})());return tV(i,"submit",()=>{l=l0(i),r[3]=3,s(()=>{(i.isConnected&&0<tB(i).width?(r[3]=2,s):()=>{o(),2<=r[3]&&(n.completed=3===r[3]||!(i.isConnected&&tB(i).width)),e.events.postPatch(n,{...l,totalTime:rm(et)-r[4]}),r[3]=1})()},750)}),r=[n,t,i,0,rm(et),1]}),rr(s[1],r)||eD(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{var v,d,i;e.name&&"hidden"!==e.type?(d=e.name,i=null!=(v=(i=s[0].fields)[d])?v:i[d]={id:e.id||d,name:d,label:r2(null!=(d=null==(v=e.labels)||null==(i=v[0])?void 0:i.innerText)?d:e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:null!=(v=e.type)?v:"unknown",[l1]:n(e),value:n(e,!0)},s[0].fields[i.name]=i,s[1].set(e,i)):"hidden"!==e.type||e.name!==a&&!t4(e,"ref")||(e.value||(e.value=r2("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),s[0].ref=e.value)}),[r,s]},i=(e,[t,n]=null!=(r=l(e))?r:[],i=null==n?void 0:n[1].get(t))=>i&&[n[0],i,t,n],a=null,o=()=>{var t,l,i,o,v,d,c;a&&([t,l,i,o]=a,v=-(u-(u=lU())),d=-(s-(s=rm(et))),c=l[l1],(l[l1]=n(i))!==c&&(null==l.fillOrder&&(l.fillOrder=o[5]++),l.filled&&(l.corrections=(null!=(c=l.corrections)?c:0)+1),l.filled=et,o[3]=2,eX(t.fields,([e,r])=>r.lastField=e===l.name)),l.value=n(i,!0),l.activeTime+=v,l.totalTime+=d,t.activeTime+=v,t.totalTime+=d,a=null)},u=0,s=0,v=e=>e&&tV(e,["focusin","focusout","change"],(e,r,t=e.target&&i(e.target))=>t&&(a=t,"focusin"===e.type?(s=rm(et),u=lU()):o()));v(document),lJ(e=>e.contentDocument&&v(e.contentDocument),!0)}},{id:"consent",setup(e){var r=async r=>e.variables.get({scope:"session",key:"@consent",result:r}).value,t=async t=>{var n;if(t)return!(n=await r())||r5(n,t=r3(t))?[!1,n]:(n={level:r6.lookup(t.classification),purposes:r8.lookup(t.purposes)},await e.events.post(Z({type:"consent",consent:n}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,n])},n={};return{processCommand(e){var i,a,l,s,v;return iu(e)?((l=e.consent.get)&&r(l),(i=r3(e.consent.set))&&(async()=>{var e;return null==(e=i.callback)?void 0:e.call(i,...await t(i))})(),(a=e.consent.externalSource)&&(v=a.key,(null!=(l=n[v])?l:n[v]=rw({frequency:null!=(e=a.pollFrequency)?e:1e3})).restart(a.pollFrequency,async()=>{var e,n,l;tA.hasFocus()&&(e=a.poll())&&(e=r3({...s,...e}))&&!r5(s,e)&&([n,l]=await t(e),n&&nI(l,"Consent was updated from "+v),s=e)}).trigger()),et):er}}}}]),rz=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&void 0!==(null==r?void 0:r[e])),l6=rz("cart"),l5=rz("username"),l3=rz("tagAttributes"),l8=rz("disable"),l9=rz("boundary"),l7=rz("extension"),ie=rz(et,"flush"),ir=rz("get"),it=rz("listener"),il=rz("order"),ii=rz("scan"),ia=rz("set"),io=e=>"function"==typeof e,iu=rz("consent");Object.defineProperty(tI,".tail.js.init",{writable:!1,configurable:!1,value(e){e(lC)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
