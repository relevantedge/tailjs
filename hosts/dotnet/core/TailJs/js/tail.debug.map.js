(()=>{"use strict";var e=void 0,r=(r,t=!0,n)=>{try{return r()}catch(r){if(!o(t))return t?.(r);if(t)throw r;return console.error(r),e}finally{n?.()}},t=async(r,t=!0,n,a=1)=>{for(;a--;)try{return await r()}catch(e){if(o(t)){if(t&&!a)throw e;console.error(e)}else await t(e,!a)}finally{n?.()}return e},n=r=>r===e,a=r=>r!==e,i=e=>null!=e,o=e=>"boolean"==typeof e,s=e=>!!e,f=e=>"number"==typeof e,l=e=>"string"==typeof e,u=Array.isArray,c=e=>u(e),d=(e,r=!1)=>null==e?[]:!r&&c(e)?e:w(e,!0)?[...e]:[e],v=(e,r=!1)=>e&&"object"==typeof e&&(r||!w(e)),g=(e,r)=>"function"==typeof e?.[r],y=e=>"symbol"==typeof e,h=e=>"function"==typeof e,w=(e,r=!1)=>!!e?.[Symbol.iterator]&&(r||!l(e)),b=(e,r=0,t)=>r||a(t)?e.slice?e.slice(r,t):0>r||0>t?b([...e],r,t):function*(){for(var n of(t??=Number.MAX_SAFE_INTEGER,e))if(!r--){if(!t--)break;yield n}}():e;function*p(e,r=(e=>e),t){var n,i=0,o=0,s={prev:void 0,source:e,skip:()=>o=1,end:e=>(o=a(e)?2:3,e)};for(var f of e){if(void 0===(n=r(f,i++,s))||o%2||(t?t(n):yield n,s.prev=f),o>1)break;o=0}}var m=(e,r,t)=>w(e,!0)?r||t?b(m(e),r,t):e:a(e)?v(e)?m(Object.entries(e),r,t):h(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(a(r)&&(yield r);t--&&a(r=e(r));)yield r}(e,r,t):function*(e=0,r=0){for(;e--;)yield r++}(e,r):[];var A,E=(e,r,...t)=>(!h(r)&&i(r)&&(t.unshift(r),r=null),e=m(e,...t),r?3>r.length&&g(e,"map")?e.map(r).filter(a):[...p(e,r)]:d(e,!0)),I=(e,r,...t)=>{var n,i=void 0;if(e=m(e,...t),3>r.length&&g(e,"forEach"))e.forEach(((e,t)=>a(n=r(e,t))&&(i=n)));else for(var o of p(e,r,(e=>i=e)));return i},S=(e,r=s,t,...n)=>t?d(r(e,r,!1,...n)):((e,r)=>c(e)?e.filter(r):function*(){var t=0;for(var n of e)r(n,t++)&&(yield n)}())(m(e,...n),r),k=S,U=(e,r,...t)=>g(e,"some")?e.some(r?(e,t)=>r(e,t):s):r?U(k(e,r,!1,...t)):I(e,((e,r,{end:t})=>t(!0)))??!1,T=(e,r,t)=>{var n=g(e,"get")?e.get(r):g(e,"has")?e.has(r):e[r];return!a(n)&&a(t)&&a(n=h(t)?t():t)&&N(e,r,n),n},N=(!0,(e,...r)=>{var t,[i,o]=r,s=([r,a])=>n(a)?x(e,r):((t||T(e,r)!==a)&&(g(e,"set")?e.set(r,a):g(e,"add")?a?e.add(r):e.delete(r):e[r]=a),a);return(t=1===r.length)?(c(i)&&i.every((e=>v(e)))&&(i=Object.assign({},...i)),v(i)?(Object.assign(e,i),Object.entries(i).forEach((([r,t])=>!a(t)&&delete e[r])),e):(v(i)?I(i,s):I(i,(e=>v(e)?I(e,s):s(e))),e)):s([i,o])}),x=(e,r,...t)=>{if(t.length)return t.map((r=>x(e,r)));var n=T(e,r);return g(e,"delete")?e.delete(r):c(e)?e.splice(r,1):delete e[r],n},F=e=>{var r,t,n,i={resolved:void 0,reset:()=>(i.resolved=void 0,n=new Promise(((e,n)=>(r=r=>{i.resolved=!a(r)||r,e(r)},t=n))),i),resolve:e=>(r(e),i),reject:e=>(t(e),i),signal:e=>(r(e),i.reset()),then:(...e)=>n.then(...e),wait:e=>Promise.race([C(e),n])};return i.reset(),e?i.resolve(e):i},O=()=>Math.trunc(performance.timeOrigin+performance.now()),M=(e,r)=>{var{queue:n=!0,paused:a=!1,trigger:i=!1,frequency:o}=f(r)?{frequency:r}:r,s=0,l=F().resolve(),u=async r=>!(!s||!n&&!l.resolved&&!0!==r||(d.busy=!0,!0!==r&&await l,l.reset(),(!1===await t(e,!1,(()=>l.resolve()))||0>o)&&c(!0),d.busy=!1,0)),c=e=>(clearInterval(s),d.active=!!(s=e?setInterval(u,0>o?-o:o):0),d),d={active:!1,busy:!1,restart:(r,t)=>(e=r??e,o=t??o,r||t||!s?c(!0):d),toggle:(e,r)=>e!==d.active?e?r?(c(!0),d.trigger(),d):c(!0):c(!1):d,trigger:async e=>await u(e)&&(c(!0),!0)};return d.toggle(!a,i)},C=(e=0,r)=>new Promise((t=>e?setTimeout((()=>t(r)),e):t(r))),j=O().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),_=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},z=(...e)=>(e=S(e),[()=>U(e,(e=>e[0]())),()=>U(e,(e=>e[1]()))]),R=()=>{var e=new Set;return[r=>_(r,(r=>e.add(r)),(r=>e.delete(r))),(...r)=>e.forEach((e=>e(...r)))]},[q,J]=R(),P=(e,r,t,n={capture:!0,passive:!0})=>c(r)?z(...E(r,(r=>P(e,r,t,n)))):_(t,(t=>e.addEventListener(r,t,n)),(t=>e.addEventListener(r,t,n))),V=(e,r=!0)=>(A=q(e),B&&r&&e(D,!1,A[0]),A),D=!0,B=!1,G=()=>(!B||!D)&&J(D=!0,B||!(B=!0));P(window,"pagehide",(()=>(D||B)&&J(D=!1,B=!1))),P(window,"pageshow",G),P(document,"visibilitychange",(()=>"visible"===document.visibilityState?G():D&&J(D=!1,B)));var $=[],X=[],L=(e,r=0)=>e.charCodeAt(r);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach(((e,r)=>$[X[r]=e.charCodeAt(0)]=r));var Q,H={32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},K=(e=256)=>e*Math.random()|0,W={exports:{}};Q=W,(()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var s=0;s<e.length;s++)f(e[s]);else f(e);return i.subarray(0,o);function f(e,i){switch(typeof e){case"undefined":l();break;case"boolean":(e=>{c(e?195:194)})(e);break;case"number":(e=>{if(isFinite(e)&&Math.floor(e)===e)if(0>e||e>127)if(0>e&&e>=-32)c(e);else if(e>0&&255>=e)d([204,e]);else if(-128>e||e>127)if(e>0&&65535>=e)d([205,e>>>8,e]);else if(-32768>e||e>32767)if(e>0&&4294967295>=e)d([206,e>>>24,e>>>16,e>>>8,e]);else if(-2147483648>e||e>2147483647)if(e>0&&0x10000000000000000>=e){var r=e/a,i=e%a;d([211,r>>>24,r>>>16,r>>>8,r,i>>>24,i>>>16,i>>>8,i])}else-0x8000000000000000>e||e>0x8000000000000000?d(0>e?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(c(211),v(e));else d([210,e>>>24,e>>>16,e>>>8,e]);else d([209,e>>>8,e]);else d([208,e]);else c(e);else n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),c(203),d(new Uint8Array(t))})(e);break;case"string":(e=>{var r=(e=>{for(var r=!0,t=e.length,n=0;t>n;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(128>s)i[a++]=s;else{if(2048>s)i[a++]=s>>6|192;else{if(s>55295&&56320>s){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var f=e.charCodeAt(o);if(56320>f||f>57343)throw new Error("UTF-8 encode: second surrogate character 0x"+f.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&f),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}}return r?i:i.subarray(0,a)})(e),t=r.length;t>31?d(t>255?t>65535?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):c(160+t),d(r)})(e);break;case"object":null===e?l():e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&4294967296>r)d([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&17179869184>r)d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]);else{var t;d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r)}})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?(e=>{var r=e.length;d(r>15?r>65535?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)})(e):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r>15?d(r>65535?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):c(128+r),e){var n=e[t];void 0!==n&&(f(t),f(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?f(r.invalidTypeReplacement(e),!0):f(r.invalidTypeReplacement,!0)}}function l(e){c(192)}function u(e){var r=e.length;r>15?d(r>65535?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):c(144+r);for(var t=0;r>t;t++)f(e[t])}function c(e){if(i.length<o+1){for(var r=2*i.length;o+1>r;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,t;0>e?(e++,r=~(r=Math.abs(e)/a),t=~(t=Math.abs(e)%a)):(r=e/a,t=e%a),d([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function r(e,r){var t,n=4294967296,a=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(r>=0&&127>=r)return r;if(r>=128&&143>=r)return u(r-128);if(r>=144&&159>=r)return c(r-144);if(r>=160&&191>=r)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return f(4);if(203===r)return f(8);if(204===r)return s(1);if(205===r)return s(2);if(206===r)return s(4);if(207===r)return s(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&255>=r)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var t=0,n=!0;r-- >0;)if(n){var i=e[a++];t+=127&i,128&i&&(t-=128),n=!1}else t*=256,t+=e[a++];return t}function s(r){for(var t=0;r-- >0;)t*=256,t+=e[a++];return t}function f(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){0>r&&(r=s(t));var n=e.subarray(a,a+r);return a+=r,n}function u(e,r){0>e&&(e=s(r));for(var t={};e-- >0;)t[i()]=i();return t}function c(e,r){0>e&&(e=s(r));for(var t=[];e-- >0;)t.push(i());return t}function d(r,t){0>r&&(r=s(t));var n=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127)if(i>191&&224>i){if(n>=t)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&240>i){if(n+1>=t)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(239>=i||i>=248)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(n+2>=t)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(i>65535){if(i>1114111)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a+=String.fromCharCode(i>>10|55296),a+=String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,n,r)}function v(e,r){0>e&&(e=s(r));var t=s(1),i=l(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2);return r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6)}if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(i):{type:t,data:i}}}var t={serialize:e,deserialize:r,encode:e,decode:r};Q?Q.exports=t:window[window.msgpackJsName||"msgpack"]=t})();var Y=W.exports,Z="$ref",ee=new ArrayBuffer(8),re=new DataView(ee),te=e=>{var r,t,i,o=(e,r,t=e[r],n=f(t))=>((t!==n||y(r))&&(e[r]=n,s((()=>e[r]=t))),t),s=e=>(r??=[]).push(e),f=e=>null==e||h(e)||y(e)?null:Number.isFinite(e)&&!Number.isSafeInteger(e)?(re.setFloat64(0,e,!0),{"":[...new Uint32Array(ee)]}):v(e,!0)?e.toJSON&&e!==(e=e.toJSON())?f(e):a(i=(t??=new Map).get(e))?(e[Z]||(e[Z]=i,s((()=>delete e[Z]))),{[Z]:i}):(v(e)?(t.set(e,t.size+1),Object.keys(e).forEach((r=>(n(o(e,r))||y(r))&&delete e[r]))):w(e)&&(!c(e)||Object.keys(e).length<e.length?[...e]:e).forEach(((r,t)=>t in e?o(e,t):(e[t]=null,s((()=>delete e[t]))))),e):e,l=Y.serialize(f(e));return r?.forEach((e=>e())),l},ne=(e,t=!1)=>{var[n,a,s]=((e="")=>{var r,t,n,a,s,f=0n,l=0,u=0n,c=[],d=0,v=0,g=0,y=0,h=[];for(g=0;g<e.length;y+=h[g]=e.charCodeAt(g++));var w=e?()=>{c=[...h],v=255&(d=y),g=-1}:()=>{},b=e=>(v=255&(d+=-c[g=(g+1)%c.length]+(c[g]=e)),e);return[e?e=>{for(w(),r=e.length,a=16-(r+4)%16,s=new Uint8Array(4+r+a),n=0;3>n;s[n++]=b(K()));for(s[n++]=b(v^16*K(16)+a),t=0;r>t;s[n++]=b(v^e[t++]));for(;a--;)s[n++]=K();return s}:e=>e,e?e=>{for(w(),t=0;3>t;b(e[t++]));if(0>=(r=e.length-4-((v^b(e[t++]))%16||16)))return new Uint8Array(0);for(s=new Uint8Array(r),n=0;r>n;s[n++]=v^b(e[t++]));return s}:e=>e,(e,r=64)=>{if(!i(e))return null;for(l=o(r)?64:r,w(),[f,u]=H[l],t=0;t<e.length;f=BigInt.asUintN(l,(f^BigInt(v^b(e[t++])))*u));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+f%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):f.toString(36)}]})(e??""),u=(e,r)=>f(e)&&!0===r?e:(e=l(e)?new Uint8Array(E(e.length,(r=>255&e.charCodeAt(r)))):t?JSON.stringify(e):te(e),s(e,r));return t?[e=>JSON.stringify(e),e=>null==e?void 0:r((()=>JSON.parse(e,void 0))),(e,r)=>u(e,r)]:[e=>(e=>{for(var r,t,n=0,a=e.length,i=[];a>n;)r=e[n++]<<16|e[n++]<<8|e[n++],i.push(X[(16515072&r)>>18],X[(258048&r)>>12],X[(4032&r)>>6],X[63&r]);return i.length+=a-n,t=i,String.fromCharCode(...t)})(n(te(e))),e=>{return i(e)?(t=a((e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=$[L(e,t++)]<<2|(r=$[L(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=$[L(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|$[L(e,t++)]));return i})(e)),s=e=>v(e,!0)?c(e[""])&&2===(e=e[""]).length?new DataView(new Uint32Array(e).buffer).getFloat64(0,!0):e[Z]&&(o=(n??=[])[e[Z]])?o:(e[Z]&&(n[e[Z]]=e,delete e[Z]),Object.entries(e).forEach((([r,t])=>t!==(t=s(t))&&(e[r]=t))),e):e,i(t)?r((()=>s(Y.deserialize(t))),(()=>{})):void 0):null;var t,n,o,s},(e,r)=>u(e,r)]};ne();var[ae,ie]=ne("foo",!0),oe=e=>{if(!l(e))return[e];var[,r,t]=e.match(/(.*?)(?:@:([0-9a-z]+))?$/);return[r,a(t)?parseInt(t,36):void 0]},se=(e,r)=>{var[t,n]=oe(r);if(!n||n-O()>=0)return t;x(localStorage,e)},fe=(e=>{var[r,t]=R(),a=r=>e.getItem(r)?.[0],i=(r,i,o)=>{var s=a(r);return n(i)?(e.removeItem(r),t(void 0,{key:r,oldValue:s,source:j,self:!0})):(e.setItem(r,i,j,o),t(i,{key:r,oldValue:s,source:j,self:!0})),i},o=0,s=(r,t,n)=>{o++>3&&ce(`Race condition ('${r}').`,!0);var a=i(r,t(e.getItem(r)?.[0]),n),f=e.getItem(r);return f?.[1]&&f?.[1]!==j?s(r,t,n):(o=0,a)};return{get:a,set:i,delete:e=>i(e,void 0),update:s,observe:e.observe?(t,n,a)=>{var[i,o]=z(e.observe(t,((e,r,t)=>n(e?.[0],{key:t,oldValue:r?.[0],source:e?.[1]},i))),a?r(((e,r,a)=>r.key===t&&n(e,r,a))):void 0);return[i,o]}:void 0}})({getItem:e=>ie(se(e,localStorage.getItem(e))),setItem:(e,r,t,n)=>localStorage.setItem(e,ae([r,t])+(n>0?`@:${(O()+n).toString(36)}`:"")),removeItem:e=>localStorage.removeItem(e),observe(e,r){var[t,n]=P(window,"storage",(({key:t,newValue:n,oldValue:a})=>e==t&&r(ie(oe(n)[0]),ie(oe(a)[0]),e)));return z([t,n],V(((e,r)=>!r&&(e?n():t()))))}});M((()=>{I(localStorage,(([e,r])=>!se(e,r)))}),{frequency:2e3,trigger:!0});var le,ue=(e,r,t=fe)=>({get:()=>t.get(e),set:(n,a)=>t.set(e,n,a??r),delete:()=>t.delete(e),update:(n,a)=>t.update(e,n,a??r),observe:t.observe?(r,n)=>t.observe(e,r,n):void 0}),ce=(e,r,t=!1)=>{if("boolean"==typeof r&&(t=r,r=null),de(r?e:null,r??e),t)throw new Error(e)},de=(e,r)=>{var t=e;return r&&(r=JSON.stringify(r=v(r)?{message:r.message??r,stack:r.stack}:r)),e=JSON.stringify(e),(le??=((e,r,t=!1)=>{var n=ue("chat");return{post(e){n.set({sender:j,payload:e}),n.delete()},unsubscribe:n.observe((e=>{!a(e)||e.target&&e.target!==j||r(e.sender,e.payload)}),!0)[0]}})(0,((e,r)=>console[r[1]?"error":"log"](e===j?"This tab":`Other tab (${e})`,...((e,r=(e=>e),...t)=>E(function*(e,r,...t){for(var n of((e,r,...t)=>p(m(e,...t),r))(m(e,...t),r))w(n)?yield*n:v(n)?yield*Object.entries(n):yield n}(e,r,...t)))(S(r),(e=>JSON.parse(e))))),!0)).post([e,r]),t},ve={knownTabs:{},variables:{}},[ge,ye]=R(),he=ue("_t.sr"),we=M((()=>pe(!0)),5e3),be={hearbeat:O()},pe=e=>{var r=O()-1e4;return we.toggle(e,!0),ye("ready",he.update((t=>(I(t?.knownTabs,(([e,n])=>n[0]<r&&x(t.knownTabs,e))),be.hearbeat=O(),N((t??=ve).knownTabs,j,e?be:void 0),t))))};V(((e,r)=>!r&&pe(e)));var me=((e,r=1e3)=>{var i=ue("test_queue_lck",r),o=F();return i.observe((e=>{n(e)&&o.signal()})),Object.assign((async(e,n)=>{for(;i.get();){var s=o.wait(r);if(a(n)){var f=C(n,-1);if(-1===await Promise.race([s,f]))return[void 0,!1]}else await s}var l=M((()=>{i.update((e=>[e?.[0]]))}),{frequency:r/2,trigger:!0}),u=await t(e,!0,(()=>{l.toggle(!1),i.delete()}));return a(n)?[u,!0]:u}),{data:{get:()=>i.get()?.[0],update:e=>i.update((r=>[e(r?.[0])]))}})})(0,2e3),Ae=async()=>{var e=1;P(document.body,"click",(async r=>{(async e=>{(await me((async()=>{var r;await t((async()=>{for(;me.data.update((e=>{r=e})),e&&(r=[...r??[],...e],e=void 0),r;){if(de(["Posting",r]),await C(2e3),.5>Math.random())throw new Error("Eeek!");de(`Posted ${r.length} item(s).`)}}),(async(e,t)=>{if(t)throw ce("Post failed 3 times in a row, events will not be sent.",e),e;r&&me.data.update((e=>((e??=[]).unshift(...r),e))),ce("Post failed, retrying...",e),await C(250)}),void 0,3)}),0))[1]||(me.data.update((r=>((r??=[]).push(...e),r))),de("Another post is active. Queued data."))})(["Test "+e++])}))};window[".tail.js.init"]=e=>{e(Ae)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
