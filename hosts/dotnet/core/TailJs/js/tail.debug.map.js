(()=>{"use strict";var e,r,t,n,a,i,o,s,l,u,c,f,d,v,p,h,g,y,m,b,w,k,S,I,A,E,T,x,N,O,$,j="@info",C="@consent",U="_tail:",M=U+"state",_=U+"push",F=(e,r=e=>Error(e))=>{throw eu(e=ro(e))?r(e):e},P=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(ep(e)&&ep(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!P(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},q=(e,r,...t)=>e===r||t.length>0&&t.some(r=>q(e,r)),z=(e,r)=>null!=e?e:F(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),R=(e,r=!0,t)=>{try{return e()}catch(e){return ew(r)?ed(e=r(e))?F(e):e:et(r)?console.error(r?F(e):e):r}finally{t?.()}},D=e=>{var r,t=()=>t.initialized||r?r:(r=ro(e)).then?r=r.then(e=>(t.initialized=!0,t.resolved=r=e)):(t.initialized=!0,t.resolved=r);return t},V=e=>{var r={initialized:!0,then:B(()=>(r.initialized=!0,ro(e)))};return r},B=e=>{var r=D(e);return(e,t)=>J(r,[e,t])},J=async(e,r=!0,t)=>{try{var n=await ro(e);return ef(r)?r[0]?.(n):n}catch(e){if(et(r)){if(r)throw e;console.error(e)}else{if(ef(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{await t?.()}},W=e=>e,K=void 0,L=Number.MAX_SAFE_INTEGER,G=!1,H=!0,X=()=>{},Y=e=>e,Z=e=>null!=e,Q=Symbol.iterator,ee=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:K,er=(e,r)=>ew(r)?e!==K?r(e):K:e?.[r]!==K?e:K,et=e=>"boolean"==typeof e,en=ee(et,e=>0!=e&&(1==e||"false"!==e&&("true"===e||K))),ea=e=>!!e,ei=e=>e===H,eo=e=>e!==G,es=Number.isSafeInteger,el=e=>"number"==typeof e,eu=e=>"string"==typeof e,ec=ee(eu,e=>e?.toString()),ef=Array.isArray,ed=e=>e instanceof Error,ev=(e,r=!1)=>null==e?K:!r&&ef(e)?e:ek(e)?[...e]:[e],ep=e=>null!==e&&"object"==typeof e,eh=Object.prototype,eg=Object.getPrototypeOf,ey=e=>null!=e&&eg(e)===eh,em=(e,r)=>"function"==typeof e?.[r],eb=e=>"symbol"==typeof e,ew=e=>"function"==typeof e,ek=(e,r=!1)=>!!(e?.[Q]&&("object"==typeof e||r)),eS=e=>e instanceof Map,eI=e=>e instanceof Set,eA=(e,r)=>null==e?K:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,eE=!1,eT=e=>(eE=!0,e),ex=e=>null==e?K:ew(e)?e:r=>r[e],eN=(e,r,t)=>(r??t)!==K?(e=ex(e),r??=0,t??=L,(n,a)=>r--?K:t--?e?e(n,a):n:t):e,eO=e=>e?.filter(Z),e$=(e,r,t,n)=>null==e?[]:!r&&ef(e)?eO(e):e[Q]?function*(e,r){if(null!=e){if(r){r=ex(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),eE){eE=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===K?r:eN(r,t,n)):ep(e)?function*(e,r){r=ex(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),eE){eE=!1;break}}}(e,eN(r,t,n)):e$(ew(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),ej=(e,r)=>r&&!ef(e)?[...e]:e,eC=(e,r,t,n)=>e$(e,r,t,n),eU=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[Q]||n&&ep(r))for(var i of a?e$(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(e$(e,r,a,i),t+1,n,!1),eM=(e,r,t,n)=>{if(r=ex(r),ef(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!eE;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return eE=!1,i}return null!=e?ev(eC(e,r,t,n)):K},e_=(e,r,t,n)=>null!=e?new Set([...eC(e,r,t,n)]):K,eF=(e,r,t=1,n=!1,a,i)=>ev(eU(e,r,t,n,a,i)),eP=(e,r,t)=>null==e?K:ew(r)?rI(eM(eu(e)?[e]:e,r),t??""):eu(e)?e:rI(eM(e,e=>!1===e?K:e),r??""),eq=(...e)=>{var r;return eJ(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...ev(e))),r},ez=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,eE)){eE=!1;break}return a},eR=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,eE)){eE=!1;break}return t},eD=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,eE){eE=!1;break}return t},eV=(e,r,...t)=>null==e?K:ek(e)?eM(e,e=>r(e,...t)):r(e,...t),eB=(e,r,t,n)=>{var a;if(null!=e){if(ef(e))return ez(e,r,t,n);if(t===K){if(e[Q])return eR(e,r);if("object"==typeof e)return eD(e,r)}for(var i of e$(e,r,t,n))null!=i&&(a=i);return a}},eJ=eB,eW=async(e,r,t,n)=>{var a;if(null==e)return K;for(var i of eC(e,r,t,n))if(null!=(i=await i)&&(a=i),eE){eE=!1;break}return a},eK=Object.fromEntries,eL=(e,r,t)=>{if(null==e)return K;if(et(r)||t){var n={};return eJ(e,t?(e,a)=>null!=(e=r(e,a))&&null!=(e[1]=t(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eJ(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eK(eM(e,r?(e,t)=>er(r(e,t),1):e=>er(e,1)))},eG=(e,r,t,n,a)=>{var i=()=>ew(t)?t():t;return eB(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},eH=(e,r=e=>null!=e,t=ef(e),n,a)=>ej(e$(e,(e,t)=>r(e,t)?e:K,n,a),t),eX=(e,r,t,n)=>{var a;if(null==e)return K;if(r)e=eH(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[Q])return Object.keys(e).length}return a=0,eB(e,()=>++a)??0},eY=(e,...r)=>null==e?K:el(e)?Math.max(e,...r):eG(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||el(a)&&a>e?a:e,K,r[2],r[3]),eZ=(e,r,t)=>eM(e,ey(e)?e=>e[1]:e=>e,r,t),eQ=e=>!ef(e)&&ek(e)?eM(e,eS(e)?e=>e:eI(e)?e=>[e,!0]:(e,r)=>[r,e]):ep(e)?Object.entries(e):K,e0=(e,r,t,n)=>null==e?K:(r=ex(r),eB(e,(e,t)=>!r||(e=r(e,t))?eT(e):K,t,n)),e1=(e,r,t,n)=>null==e?K:ef(e)||eu(e)?e[e.length-1]:eB(e,(e,t)=>!r||r(e,t)?e:K,t,n),e2=(e,r,t,n)=>null==e?K:ey(e)&&!r?Object.keys(e).length>0:e.some?.(r??ea)??eB(e,r?(e,t)=>!!r(e,t)&&eT(!0):()=>eT(!0),t,n)??!1,e4=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),e6=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),e5=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=ew(t)?t():t)&&e6(e,r,n),n}},e3=(e,...r)=>(eJ(r,r=>eJ(r,([r,t])=>{null!=t&&(ey(e[r])&&ey(t)?e3(e[r],t):e[r]=t)})),e),e8=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eJ(t,t=>ef(t)?e(r,t[0],t[1]):eJ(t,([t,n])=>e(r,t,n))),r)},e9=e8(e6),e7=e8((e,r,t)=>e6(e,r,ew(t)?t(e5(e,r)):t)),re=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):e5(e,r)!==e9(e,r,!0),rr=(e,r)=>{if((e??r)!=null){var t=e5(e,r);return em(e,"delete")?e.delete(r):delete e[r],t}},rt=(e,...r)=>{var t=[],n=!1,a=(e,i,o,s)=>{if(e){var l=r[i];i===r.length-1?ef(l)?(n=!0,l.forEach(r=>t.push(rr(e,r)))):t.push(rr(e,l)):(ef(l)?(n=!0,l.forEach(r=>a(e5(e,r),i+1,e,r))):a(e5(e,l),i+1,e,l),!eX(e)&&o&&rn(o,s))}};return a(e,0),n?t:t[0]},rn=(e,r)=>{if(e)return ef(r)?(ef(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>rn(e,r)):ef(e)?r<e.length?e.splice(r,1)[0]:void 0:rr(e,r)},ra=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(ef(r)){if(ey(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=eM(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...ey(t)&&("get"in t||"value"in t)?t:ew(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},ri=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>ep(t)?ef(t)?t.map(r=>ef(r)?1===r.length?[r[0],e[r[0]]]:ri(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:ri(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},ro=e=>ew(e)?e():e,rs=(e,r=-1)=>ef(e)?r?e.map(e=>rs(e,r-1)):[...e]:ey(e)?r?eL(e,([e,t])=>[e,rs(t,r-1)]):{...e}:eI(e)?new Set(r?eM(e,e=>rs(e,r-1)):e):eS(e)?new Map(r?eM(e,e=>[e[0],rs(e[1],r-1)]):e):e,rl=(e,...r)=>e?.push(...r),ru=(e,...r)=>e?.unshift(...r),rc=(e,r)=>{if(!ey(r))return[e,e];var t,n,a,i={};if(ey(e))return eJ(e,([e,o])=>{if(o!==r[e]){if(ey(t=o)){if(!(o=rc(o,r[e])))return;[o,t]=o}else el(o)&&el(n)&&(o=(t=o)-n);i[e]=o,(a??=rs(r))[e]=t}}),a?[i,a]:void 0},rf="undefined"!=typeof performance?(e=H)=>e?Math.trunc(rf(G)):performance.timeOrigin+performance.now():Date.now,rd=(e=!0,r=()=>rf())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},rv=(e=0)=>{var r,t,n=(a,i=e)=>{if(void 0===a)return!!t;clearTimeout(r),et(a)?a&&(i<0?eo:ei)(t?.())?n(t):t=void 0:(t=a,r=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},rp=(e,r=0)=>{var t=ew(e)?{frequency:r,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{}}=t;r=t.frequency??0;var l=0,u=rb(!0).resolve(),c=rd(!a),f=c(),d=async e=>{if(!l||!n&&u.pending&&!0!==e)return!1;if(p.busy=!0,!0!==e)for(;u.pending;)await u;return e||u.reset(),(await J(()=>s(c(),-f+(f=c())),!1,()=>!e&&u.resolve())===!1||r<=0||o)&&v(!1),p.busy=!1,!0},v=(e,t=!e)=>(c(e,t),clearInterval(l),p.active=!!(l=e?setInterval(d,r<0?-r:r):0),p),p={active:!1,busy:!1,restart:(e,t)=>(r=e??r,s=t??s,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await d(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class rh{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new rg,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class rg{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===K||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var ry=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),rm=(e,r)=>null==e||isFinite(e)?!e||e<=0?ro(r):new Promise(t=>setTimeout(async()=>t(await ro(r)),e)):F(`Invalid delay ${e}.`),rb=e=>e?new rh:new rg,rw=(...e)=>Promise.race(e.map(e=>ew(e)?e():e)),rk=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rS=()=>{var e,r=new Set;return[(t,n)=>{var a=rk(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rI=(e,r=["and",", "])=>e?1===(e=eM(e)).length?e[0]:ef(r)?[e.slice(0,-1).join(r[1]??", ")," ",r[0]," ",e[e.length-1]].join(""):e.join(r??", "):K,rA=(e,r,t)=>null==e?K:ef(r)?null==(r=r[0])?K:r+" "+rA(e,r,t):null==r?K:1===r?e:t??e+"s",rE=(e,r,t)=>t?(rl(t,"\x1b[",r,"m"),ef(e)?rl(t,...e):rl(t,e),rl(t,"\x1b[m"),t):rE(e,r,[]).join(""),rT=(e,r="'")=>null==e?K:r+e+r,rx=e=>(e=Math.log2(e))===(0|e),rN=(e,r,t,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,r])=>eu(e)&&el(r)).map(([e,r])=>[e.toLowerCase(),r])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,r)=>e|r,0),f=r?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,r])=>[r,e])),v=(e,t)=>es(e)?!r&&t?null!=d[e]?e:K:Number.isSafeInteger(e)?e:K:eu(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),t):K,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,K):(e??0)|t,(p=!1,K)):v(e),(e,r)=>null==(e=h(e,!1))?K:r&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,r])=>r&&e&r&&rx(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:K],y=(e,r)=>null==e?K:null==(e=h(o=e,r))?F(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,m=l.filter(([,e])=>!n||(n&e)===e&&rx(e));return ra(e=>y(e),[{configurable:!1,enumerable:!1},{parse:y,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rI(eM(ev(e),e=>rT(e)),[r])}`},r&&{pure:m,map:(e,r)=>(e=y(e),m.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rO=(...e)=>{var r=eQ(eL(e,!0)),t=e=>(ep(e)&&(ef(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,a=K;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=a)))})),e);return t},r$=Symbol(),rj=(e,r=["|",";",","],t=!0)=>{if(!e)return K;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&e0(r,(e,r,t=n[1].split(e))=>t.length>1?t:K)||(n[1]?[n[1]]:[]),n},rC=(e,r=!0,t)=>null==e?K:rP(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:t,urn:t?!n:!n&&K,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):K,path:c,query:!1===r?f:rU(f,r),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":K),v}),rU=(e,r,t=!0)=>rM(e,"&",r,t),rM=(e,r,t,n=!0)=>{var a=[],i=null==e?K:eL(e?.match(/(?:^.*?\?|^)([^#]*)/)?.[1]?.split(r),(e,r,[i,o,s]=rj(e,!1===t?[]:!0===t?K:t,n)??[],l)=>(l=null!=(i=i?.replace(/\[\]$/,""))?!1!==t?[i,s.length>1?s:o]:[i,o]:K,a.push(l),l),(e,r)=>e?!1!==t?eq(e,r):(e?e+",":"")+r:r);return i[r$]=a,i},r_=(e,r)=>r&&null!=e?r.test(e):K,rF=(e,r,t)=>rP(e,r,t,!0),rP=(t,n,a,i=!1)=>(t??n)==null?K:a?(e=K,i?(r=[],rP(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rq=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rz=/\z./g,rR=(e,r)=>(r=eP(e_(eH(e,e=>e?.length)),"|"))?RegExp(r,"gu"):rz,rD={},rV=e=>e instanceof RegExp,rB=(e,r=[","," "])=>rV(e)?e:ef(e)?rR(eM(e,e=>rB(e,r)?.source)):et(e)?e?/./g:rz:eu(e)?rD[e]??=rP(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rR(eM(rJ(n,RegExp(`(?<!(?<!\\\\)\\\\)[${eP(r,rq)}]`)),e=>e&&`^${eP(rJ(e,/(?<!(?<!\\)\\)\*/),e=>rq(rW(e,/\\(.)/g,"$1")),".*")}$`))):K,rJ=(e,r)=>e?.split(r)??e,rW=(e,r,t)=>e?.replace(r,t)??e,rK=5e3,rL=()=>()=>F("Not initialized."),rG=window,rH=document,rX=rH.body,rY=(e,r)=>!!e?.matches(r),rZ=L,rQ=(e,r,t=(e,r)=>r>=rZ)=>{for(var n,a=0,i=G;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==H&&null!=n),H),a-1)!==G&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},r0=(e,r="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||en(e);case"n":return parseFloat(e);case"j":return R(()=>JSON.parse(e),X);case"h":return R(()=>nl(e),X);case"e":return R(()=>nc?.(e),X);default:return ef(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:r0(e,r[0])):void 0}},r1=(e,r,t)=>r0(e?.getAttribute(r),t),r2=(e,r,t)=>rQ(e,(e,n)=>n(r1(e,r,t))),r4=(e,r)=>r1(e,r)?.trim()?.toLowerCase(),r6=e=>e?.getAttributeNames(),r5=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,r3=e=>null!=e?e.tagName:null,r8=()=>({x:(t=r9(G)).x/(rX.offsetWidth-window.innerWidth)||0,y:t.y/(rX.offsetHeight-window.innerHeight)||0}),r9=e=>({x:eA(scrollX,e),y:eA(scrollY,e)}),r7=(e,r)=>rW(e,/#.*$/,"")===rW(r,/#.*$/,""),te=(e,r,t=H)=>(n=tr(e,r))&&W({xpx:n.x,ypx:n.y,x:eA(n.x/rX.offsetWidth,4),y:eA(n.y/rX.offsetHeight,4),pageFolds:t?n.y/window.innerHeight:void 0}),tr=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:a,y:i}=tt(e),{x:a,y:i}):void 0,tt=e=>e?(o=e.getBoundingClientRect(),t=r9(G),{x:eA(o.left+t.x),y:eA(o.top+t.y),width:eA(o.width),height:eA(o.height)}):void 0,tn=(e,r,t,n={capture:!0,passive:!0})=>(r=ev(r),rk(t,t=>eJ(r,r=>e.addEventListener(r,t,n)),t=>eJ(r,r=>e.removeEventListener(r,t,n)))),ta=e=>{var{host:r,scheme:t,port:n}=rC(e,!1);return{host:r+(n?":"+n:""),scheme:t}},ti=()=>({...t=r9(H),width:window.innerWidth,height:window.innerHeight,totalWidth:rX.offsetWidth,totalHeight:rX.offsetHeight});(I=s||(s={}))[I.Anonymous=0]="Anonymous",I[I.Indirect=1]="Indirect",I[I.Direct=2]="Direct",I[I.Sensitive=3]="Sensitive";var to=rN(s,!1,"data classification"),ts=(e,r)=>to.parse(e?.classification??e?.level)===to.parse(r?.classification??r?.level)&&tu.parse(e?.purposes??e?.purposes)===tu.parse(r?.purposes??r?.purposes),tl=(e,r)=>null==e?void 0:el(e.classification)&&el(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:to.parse(e.classification??e.level??r?.classification??0),purposes:tu.parse(e.purposes??e.purpose??r?.purposes??l.Necessary)};(A=l||(l={}))[A.None=0]="None",A[A.Necessary=1]="Necessary",A[A.Functionality=2]="Functionality",A[A.Performance=4]="Performance",A[A.Targeting=8]="Targeting",A[A.Security=16]="Security",A[A.Infrastructure=32]="Infrastructure",A[A.Anonymous=49]="Anonymous",A[A.Any=63]="Any",A[A.Server=2048]="Server",A[A.Server_Write=4096]="Server_Write";var tu=rN(l,!0,"data purpose",2111),tc=rN(l,!1,"data purpose",0),tf=(e,r)=>((u=e?.metadata)&&(r?(delete u.posted,delete u.queued,Object.entries(u).length||delete e.metadata):delete e.metadata),e),td=e=>!!e?.patchTargetId;(E=c||(c={}))[E.Global=0]="Global",E[E.Entity=1]="Entity",E[E.Session=2]="Session",E[E.Device=3]="Device",E[E.User=4]="User";var tv=rN(c,!1,"variable scope");s.Anonymous,l.Necessary;var tp=e=>`'${e.key}' in ${tv.format(e.scope)} scope`,th={scope:tv,purpose:tc,purposes:tu,classification:to};rO(th);var tg=e=>e?.filter(Z).sort((e,r)=>e.scope===r.scope?e.key.localeCompare(r.key,"en"):e.scope-r.scope);(T=f||(f={}))[T.Add=0]="Add",T[T.Min=1]="Min",T[T.Max=2]="Max",T[T.IfMatch=3]="IfMatch",T[T.IfNoneMatch=4]="IfNoneMatch",rN(f,!1,"variable patch type"),(x=d||(d={}))[x.Success=200]="Success",x[x.Created=201]="Created",x[x.Unchanged=304]="Unchanged",x[x.Denied=403]="Denied",x[x.NotFound=404]="NotFound",x[x.ReadOnly=405]="ReadOnly",x[x.Conflict=409]="Conflict",x[x.Unsupported=501]="Unsupported",x[x.Invalid=400]="Invalid",x[x.Error=500]="Error",rN(d,!1,"variable set status");var ty=(e,r,t)=>{var n,a=e(),i=e=>e,o=(e,t=tk)=>V(async()=>(n=i(t(await a,r)))&&e(n)),s={then:o(e=>e).then,all:o(e=>e,e=>e),changed:o(e=>eH(e,e=>e.status<300)),variables:o(e=>eM(e,tb)),values:o(e=>eM(e,e=>tb(e)?.value)),push:()=>(i=e=>(t?.(eM(tm(e))),e),s),value:o(e=>tb(e[0])?.value),variable:o(e=>tb(e[0])),result:o(e=>e[0])};return s},tm=e=>e?.map(e=>e?.status<400?e:K),tb=e=>tw(e)?e.current??e:K,tw=(e,r=!1)=>r?e?.status<300:e?.status<400||e?.status===404,tk=(e,r,t)=>{var n,a,i=[],o=eM(ev(e),(e,o)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${tp(e.source??e)} could not be ${404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because ${409===e.status?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:403===e.status?e.error??"the operation was denied.":400===e.status?e.error??"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[o])||!1!==n(e,a))&&i.push(a),K)));return i.length?F(i.join("\n")):ef(e)?o:o?.[0]},tS=e=>tk(e,K,!0),tI=e=>e&&"string"==typeof e.type,tA=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),tE=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],tT=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eP(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=tE(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,s,l)=>{var u=o||s||l,c=tE(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),t?.add(tx(n))),""}),a},tx=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,tN=new WeakMap,tO=e=>tN.get(e),t$=(e,r=G)=>(r?"--track-":"track-")+e,tj=(e,r,t,n,a,i)=>r?.[1]&&eJ(r6(e),o=>r[0][o]??=(i=G,eu(n=eJ(r[1],([r,t,n],a)=>r_(o,r)&&(i=void 0,!t||rY(e,t))&&eT(n??o)))&&(!(a=e.getAttribute(o))||en(a))&&tT(a,rW(n,/\-/g,":"),t),i)),tC=()=>{},tU=(e,r)=>{if(v===(v=tR.tags))return tC(e,r);var t=e=>e?rV(e)?[[e]]:ek(e)?eF(e,t):[ey(e)?[rB(e.match),e.selector,e.prefix]:[rB(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eZ(v))]];(tC=(e,r)=>tj(e,n,r))(e,r)},tM=(e,r)=>eP(eq(r5(e,t$(r,H)),r5(e,t$("base-"+r,H)))," "),t_={},tF=(e,r,t=tM(e,"attributes"))=>{t&&tj(e,t_[t]??=[{},rF(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[rB(t||n),,r])],r),tT(tM(e,"tags"),void 0,r)},tP=(e,r,t=G,n)=>(t?rQ(e,(e,t)=>t(tP(e,r,G)),ew(t)?t:void 0):eP(eq(r1(e,t$(r)),r5(e,t$(r,H)))," "))??(n&&(p=tO(e))&&n(p))??null,tq=(e,r,t=G,n)=>""===(h=tP(e,r,t,n))||(null==h?h:en(h)),tz=(e,r,t,n)=>e?(tF(e,n??=new Set),rQ(e,e=>{tU(e,n),tT(eM(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tR={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},tD=[],tV=[],tB=(e,r=0)=>e.charCodeAt(r),tJ=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tD[tV[r]=e.charCodeAt(0)]=r);var tW=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(tV[(16515072&r)>>18],tV[(258048&r)>>12],tV[(4032&r)>>6],tV[63&r]);return a.length+=n-t,tJ(a)},tK=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tD[tB(e,t++)]<<2|(r=tD[tB(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tD[tB(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tD[tB(e,t++)]));return i},tL={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tG=(e=256)=>e*Math.random()|0,tH=e=>{var r,t,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tG()));for(t=0,i[n++]=g(f^16*tG(16)+a);r>t;i[n++]=g(f^e[t++]));for(;a--;)i[n++]=tG();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((f^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=f^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(s=et(r)?64:r,h(),[o,l]=tL[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[t++])))*l));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tX={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(d=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),f(r)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(s(t),s(n))}})(e);break;default:if(!a&&r&&r.invalidTypeReplacement)"function"==typeof r.invalidTypeReplacement?s(r.invalidTypeReplacement(e),!0):s(r.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)s(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function f(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return f(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return d(-1,1);if(200===r)return d(-1,2);if(201===r)return d(-1,4);if(202===r)return s(4);if(203===r)return s(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return d(1);if(213===r)return d(2);if(214===r)return d(4);if(215===r)return d(8);if(216===r)return d(16);if(217===r)return f(-1,1);if(218===r)return f(-1,2);if(219===r)return f(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function s(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function f(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function d(e,r){e<0&&(e=o(r));var t=o(1),a=l(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={serialize:r,deserialize:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tX);var{deserialize:tY,serialize:tZ}=(N=tX.exports)&&N.__esModule&&Object.prototype.hasOwnProperty.call(N,"default")?N.default:N,tQ="$ref",t0=(e,r,t)=>eb(e)?K:t?r!==K:null===r||r,t1=(e,r,{defaultValues:t=!0,prettify:n=!1})=>{var a,i,o,s=(e,r,n=e[r],a=t0(r,n,t)?u(n):K)=>(n!==a&&(a!==K||ef(e)?e[r]=a:delete e[r],l(()=>e[r]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||ew(e)||eb(e))return K;if(!ep(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[tQ]||(e[tQ]=o,l(()=>delete e[tQ])),{[tQ]:o};if(ey(e))for(var r in(i??=new Map).set(e,i.size+1),e)s(e,r);else!ek(e)||e instanceof Uint8Array||(!ef(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?s(e,t):(e[t]=null,l(()=>delete e[t])));return e};return R(()=>r?tZ(u(e)??null):R(()=>JSON.stringify(e,K,n?2:0),()=>JSON.stringify(u(e),K,n?2:0)),!0,()=>a?.forEach(e=>e()))},t2=e=>{var r,t,n=e=>ep(e)?e[tQ]&&(t=(r??=[])[e[tQ]])?t:(e[tQ]&&(r[e[tQ]]=e,delete e[tQ]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return n(eu(e)?JSON.parse(e):null!=e?R(()=>tY(e),()=>(console.error("Invalid message received.",e),K)):e)},t4=(e,r={})=>{var t=(e,{json:r=!1,...t})=>{var n=(e,n)=>el(e)&&!0===n?e:o(e=eu(e)?new Uint8Array(eM(e.length,r=>255&e.charCodeAt(r))):r?R(()=>JSON.stringify(e),()=>JSON.stringify(t1(e,!1,t))):t1(e,!0,t),n);if(r)return[e=>t1(e,!1,t),e=>null==e?K:R(()=>t2(e),K),(e,r)=>n(e,r)];var[a,i,o]=tH(e);return[(e,r)=>(r?Y:tW)(a(t1(e,!0,t))),e=>null!=e?t2(i(e instanceof Uint8Array?e:tK(e))):null,(e,r)=>n(e,r)]};if(!e){var n=+(r.json??0);if(n&&!1!==r.prettify)return(g??=[t(null,{json:!1}),t(null,{json:!0,prettify:!0})])[+n]}return t(e,r)};t4();var[t6,t5]=t4(null,{json:!0,prettify:!0}),t3=rJ(""+rH.currentScript.src,"#"),t8=rJ(""+(t3[1]||""),";"),t9=t3[0],t7=t8[1]||rC(t9,!1)?.host,ne=e=>!!(t7&&rC(e,!1)?.host?.endsWith(t7)===H),nr=(...e)=>rW(eP(e),/(^(?=\?))|(^\.(?=\/))/,t9.split("?")[0]),nt=nr("?","var"),nn=nr("?","mnt");nr("?","usr");var na=Symbol(),ni=Symbol(),no=(e,r,t=H,n=G)=>{r&&(t?console.groupCollapsed:console.group)((n?"":rE("tail.js: ","90;3"))+r);var a=e?.[ni];a&&(e=e[na]),null!=e&&console.log(ep(e)?rE(t6(e),"94"):ew(e)?""+e:e),a&&a.forEach(([e,r,t])=>no(e,r,t,!0)),r&&console.groupEnd()},[ns,nl]=t4(),[nu,nc]=[rL,rL],[nf,nd]=rS(),nv=e=>{nc===rL&&([nu,nc]=t4(e),nd(nu,nc))},np=e=>r=>nh(e,r),nh=(...e)=>{var r=e.shift();console.error(eu(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[ng,ny]=rS(),[nm,nb]=rS(),nw=e=>nS!==(nS=e)&&ny(nS=!1,nE(!0,!0)),nk=e=>nI!==(nI=!!e&&"visible"===document.visibilityState)&&nb(nI,!e,nA(!0,!0));ng(nk);var nS=!0,nI=!1,nA=rd(!1),nE=rd(!1);tn(window,["pagehide","freeze"],()=>nw(!1)),tn(window,["pageshow","resume"],()=>nw(!0)),tn(document,"visibilitychange",()=>(nk(!0),nI&&nw(!0))),ny(nS,nE(!0,!0));var nT=!1,nx=rd(!1),[nN,nO]=rS(),n$=rp({callback:()=>nT&&nO(nT=!1,nx(!1)),frequency:2e4,once:!0,paused:!0}),nj=()=>!nT&&(nO(nT=!0,nx(!0)),n$.restart());tn(window,"focus",nj),tn(window,"blur",()=>n$.trigger()),tn(document.body,["keydown","pointerdown","pointermove","scroll"],nj),nj(),(O=y||(y={}))[O.View=-3]="View",O[O.Tab=-2]="Tab",O[O.Shared=-1]="Shared";var nC=rN(y,!1,"local variable scope"),nU=e=>nC.tryParse(e)??tv(e),nM=e=>nC.format(e)??tv.format(e),n_=e=>!!nC.tryParse(e?.scope),nF=rO({scope:nC},th),nP=e=>null==e?void 0:eu(e)?e:e.source?nP(e.source):`${nU(e.scope)}\0${e.key}\0${e.targetId??""}`,nq=e=>{var r=e.split("\0");return{scope:+r[0],key:r[1],targetId:r[2]}},nz=0,nR=void 0,nD=()=>(nR??rL())+"_"+nV(),nV=()=>++nz,nB=e=>crypto.getRandomValues(e),nJ=()=>rW("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nB(new Uint8Array(1))[0]&15>>e/4).toString(16)),nW={},nK={id:nR,heartbeat:rf()},nL={knownTabs:{[nR]:nK},variables:{}},[nG,nH]=rS(),[nX,nY]=rS(),nZ=rL,nQ=e=>nW[nP(e)],n0=(...e)=>n2(e.map(e=>(e.cache=[rf(),3e3],nF(e)))),n1=e=>eM(e,e=>e&&[e,nW[nP(e)]]),n2=e=>{var r=eM(e,e=>e&&[nP(e),e]);if(r?.length){var t=n1(e);e9(nW,r);var n=eH(r,e=>e[1].scope>y.Tab);n.length&&(e9(nL.variables,n),nZ({type:"patch",payload:eL(n)})),nY(t,nW,!0)}};nf((e,r)=>{ng(t=>{if(t){var n=r(sessionStorage.getItem(M));sessionStorage.removeItem(M),nR=n?.[0]??rf().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nW=eL(eq(eH(nW,([,e])=>e.scope===y.View),eM(n?.[1],e=>[nP(e),e])))}else sessionStorage.setItem(M,e([nR,eM(nW,([,e])=>e.scope!==y.View?e:void 0)]))},!0),nZ=(r,t)=>{e&&(localStorage.setItem(M,e([nR,r,t])),localStorage.removeItem(M))},tn(window,"storage",e=>{if(e.key===M){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===nR)){var[a,{type:i,payload:o}]=n;if("query"===i)t.active||nZ({type:"set",payload:nL},a);else if("set"===i&&t.active)e9(nL,o),e9(nW,o.variables),t.trigger();else if("patch"===i){var s=n1(eM(o,1));e9(nL.variables,o),e9(nW,o),nY(s,nW,!1)}else"tab"===i&&(e9(nL.knownTabs,a,o),o&&nH("tab",o,!1))}}});var t=rp(()=>nH("ready",nL,!0),-25),n=rp({callback(){var e=rf()-1e4;eJ(nL?.knownTabs,([r,t])=>t[0]<e&&rt(nL.knownTabs,r)),nK.heartbeat=rf(),nZ({type:"tab",payload:nK})},frequency:5e3,paused:!0}),a=e=>{nZ({type:"tab",payload:e?nK:void 0}),e?(t.restart(),nZ({type:"query"})):t.toggle(!1),n.toggle(e)};ng(e=>a(e),!0)},!0);var[n4,n6]=rS(),[n5,n3]=rS(),n8=((e,{timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var a=()=>(t?nc:nl)(localStorage.getItem(e)),i=0,o=()=>localStorage.setItem(e,(t?nu:ns)([nR,rf()+r]));return async(t,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<rf())&&(o(),a()?.[0]===nR))return r>0&&(i=setInterval(()=>o(),r/2)),await J(t,!0,()=>{clearInterval(i),localStorage.removeItem(e)});var c=rb(),[f]=tn(window,"storage",r=>{r.key!==e||r.newValue||c.resolve()});await rw(rm(s??r),c),f()}null==s&&F(e+" could not be acquired.")}})(U+"rq"),n9=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=t=>{var s=ew(r)?r?.(a,t):r;return!1!==s&&(null!=s&&!0!==s&&(a=s),n6(e,a,t,e=>(o=a===K,a=e)),!o&&(i=n?nu(a,!0):JSON.stringify(a)))};if(!t)return await n8(()=>eW(1,async r=>{if(!s(r))return eT();var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(t.status>=400)return 0===r?eT(F(`Invalid response: ${await t.text()}`)):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rm((1+r)*200));var o=n?new Uint8Array(await t.arrayBuffer()):await t.text(),l=o?.length?(n?nc:JSON.parse)?.(o):K;return null!=l&&n3(l),eT(l)}));s(0)&&(navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||F("Beacon send failed."))},n7=["scope","key","targetId","version"],ae=[...n7,"created","modified","classification","purposes","tags","readonly","value"],ar=[...n7,"init","purpose","refresh"],at=[...ae,"value","force","patch"],an=new Map,aa=(e,r)=>{var t=rp(async()=>{var e=eM(an,([e,r])=>({...nq(e),result:[...r]}));e.length&&await u.get(...e)},3e3),n=(e,r)=>r&&eV(r,r=>e5(an,e,()=>new Set).add(r)),a=(e,r)=>{if(e){var t,a=nP(e),i=rn(an,a);if(i?.size){if(e?.purposes===r?.purposes&&e?.classification==r?.classification&&P(e?.value,r?.value))return;eJ(i,i=>{t=!1,i?.(e,r,(e=!0)=>t=e),t&&n(a,i)})}}};ng((e,r)=>t.toggle(e,e&&r>=3e3),!0),nX(e=>eJ(e,([e,r])=>a(e,r)));var i=new Map,o=(e,r)=>e9(i,e,et(r)?r?void 0:0:r),u={get:(...t)=>ty(async()=>{(!t[0]||eu(t[0]))&&(a=t[0],t=t.slice(1)),r?.validateKey(a);var a,i=[],s=eM(t,(e,r)=>[e,r]),l=[],u=(await n9(e,()=>!!(s=eM(s,([e,r])=>{if(e){var t=nP(e);n(t,e.result);var a=nQ(t);e.init&&o(t,e.cache);var s=e.purposes;if((s??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.[1]<rf())rl(i,[{...a,status:d.Success},r]);else if(!n_(e))return[ri(e,ar),r];else if(ey(e.init)){var u={...nF(e),status:d.Created,...e.init};null!=u.value&&(rl(l,c(u)),rl(i,[u,r]))}}else rl(i,[{...e,status:d.Denied,error:"No consent for "+tu.logFormat(s)},r])}})).length&&{variables:{get:eM(s,0)},deviceSessionId:r?.deviceSessionId}))?.variables?.get??[];return rl(i,...eM(u,(e,r)=>e&&[e,s[r][1]])),l.length&&n2(l),i.map(([e])=>e)},eM(t,e=>e?.error)),set:(...t)=>ty(async()=>{(!t[0]||eu(t[0]))&&(n=t[0],t=t.slice(1)),r?.validateKey(n);var n,a=[],i=[],u=eM(t,(e,r)=>{if(e){var t=nP(e),n=nQ(t);if(o(t,e.cache),n_(e)){if(null!=e.patch)return F("Local patching is not supported.");var u={value:e.value,classification:s.Anonymous,purposes:l.Necessary,scope:nC(e.scope),key:e.key};return i[r]={status:n?d.Success:d.Created,source:e,current:u},void rl(a,c(u))}return null==e.patch&&e?.version===void 0&&(e.version=n?.version,e.force??=!!e.version),[ri(e,at),r]}}),f=u.length?z((await n9(e,{variables:{set:u.map(e=>e[0])},deviceSessionId:r?.deviceSessionId})).variables?.set,"No result."):[];return a.length&&n2(a),eJ(f,(e,r)=>{var[t,n]=u[r];e.source=t,t.result?.(e),i[n]=e}),i},eM(t,e=>e?.error))},c=(e,r=rf())=>({...ri(e,ae),cache:[r,r+(rn(i,nP(e))??3e3)]});return n5(({variables:e})=>{if(e){var r=rf(),t=eq(eM(e.get,e=>tb(e)),eM(e.set,e=>tb(e)));t?.length&&n2(eV(t,c,r))}}),u},ai=(e,r,t=rK)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.queued?e3(r,{type:e.type+"_patch",patchTargetId:e.clientId}):F("Source event not queued."),s=async(t,n=!0,a)=>{var i;return(!t[0]||eu(t[0]))&&(i=t[0],t=t.slice(1)),no({[ni]:eM(t=t.map(e=>(r?.validateKey(i??e.key),e3(e,{metadata:{posted:!0}}),e3(tf(rs(e),!0),{timestamp:e.timestamp-rf()}))),e=>[e,e.type,G])},"Posting "+rI([rA("new event",[eX(t,e=>!td(e))||void 0]),rA("event patch",[eX(t,e=>td(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),n9(e,{events:t,variables:a,deviceSessionId:r?.deviceSessionId},{beacon:n})},l=async(e,{flush:t=!1,async:a=!0,variables:i}={})=>{if((e=eM(ev(e),e=>e3(r.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eJ(e,e=>no(e,e.type)),!a)return s(e,!1,i);if(!t){e.length&&rl(n,...e);return}n.length&&ru(e,...n.splice(0)),e.length&&await s(e,!0,i)};return t>0&&rp(()=>l([],{flush:!0}),t),nm((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=eM(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&l(eq(n.splice(0),a),{flush:!0})}}),{post:l,postPatch:(e,r,t)=>l(o(e,r),{flush:!0}),registerEventPatchSource(e,r,t=!0){var n=!1,s=()=>n=!0;return a.set(e,rs(e)),i.set(e,()=>{var i=a.get(e),[l,u]=(t?rc(r(i,s),i):r(i,s))??[];return l&&!P(u,i)?(a.set(e,rs(u)),[o(e,l),n]):[void 0,n]}),s}}},ao=Symbol(),as=e=>{var r=new IntersectionObserver(e=>eJ(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[ao]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=eH(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==H))&&eX(a)){var a,i,o,s,l=G,u=0,c=rv(tR.impressionThreshold),f=aA();t[ao]=(r,n,d)=>{f(r=d>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),l!==(l=r)&&(l?c(()=>{++u,o||rl(e,o=eH(eM(a,e=>(e.track?.impressions||tq(t,"impressions",H,e=>e.track?.impressions))&&W({type:"impression",pos:te(t),viewport:ti(),timeOffset:aT(),impressions:u,...aq(t,H)})||null))),o?.length&&(s=eM(o,r=>e.events.registerEventPatchSource(r,()=>({relatedEventId:r.clientId,duration:f(),impressions:u}))))}):(eJ(s,e=>e()),c(!1)))},r.observe(t)}}},al=()=>{nX((e,r,t)=>{var n=eq(tg(eM(e,1))?.map(e=>[e,`${e.key} (${nM(e.scope)}, ${e.scope<0?"client-side memory only":tu.format(e.purposes)})`,G]),[[{[ni]:tg(eM(r,1))?.map(e=>[e,`${e.key} (${nM(e.scope)}, ${e.scope<0?"client-side memory only":tu.format(e.purposes)})`,G])},"All variables",H]]);no({[ni]:n},rE(`Variables changed${t?"":" - merging changes from another tab"} (${e.length} changed, ${eX(r)} in total).`,"2;3"))})},au=()=>{var e=rG?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??rG.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:rG.devicePixelRatio,width:r,height:t,landscape:a}}},ac=e=>rl(e,W({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:b?.clientId,languages:eM(navigator.languages,(e,r,t=e.split("-"))=>W({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...au()})),af=(e,r="A"===r3(e)&&r1(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),ad=(e,r=r3(e),t=tq(e,"button"))=>t!==G&&(q(r,"A","BUTTON")||"INPUT"===r&&q(r4(e,"type"),"button","submit")||t===H),av=e=>{if(m)return m;eu(e)&&([r,e]=nl(e),e=t4(r)[1](e)),e9(tR,e),nv(rn(tR,"encryptionKey"));var r,t=rn(tR,"key"),n=rG[tR.name]??[];if(!ef(n)){F(`The global variable for the tracker "${tR.name}" is used for something else than an array of queued commands.`);return}var a=[],i=[],o=(e,...r)=>{var t=H;i=eH(i,n=>R(()=>(n[e]?.(...r,{tracker:m,unsubscribe:()=>t=G}),t),np(n)))},s=[],l={applyEventExtensions(e){e.clientId??=nD(),e.timestamp??=rf(),v=H;var r=G;return eM(a,([,t])=>{(r||t.decorate?.(e)===G)&&(r=H)}),r?void 0:e},validateKey:(e,r=!0)=>!t&&!e||e===t||!!r&&F(`'${e}' is not a valid key.`)},u=aa(nt,l),c=ai(nt,l),f=null,d=0,v=G,p=G;return Object.defineProperty(rG,tR.name,{value:m=Object.freeze({id:"tracker_"+nD(),events:c,variables:u,push(...e){if(e.length){if(e.length>1&&(!e[0]||eu(e[0]))&&(r=e[0],e=e.slice(1)),eu(e[0])){var r,t=e[0];e=t.match(/^[{[]/)?JSON.parse(t):nl(t)}var n=G;if((e=eH(eF(e,e=>eu(e)?nl(e):e),e=>{if(!e)return G;if(aJ(e))tR.tags=e9({},tR.tags,e.tagAttributes);else if(aW(e))return tR.disabled=e.disable,G;else if(aG(e))return n=H,G;else if(a0(e))return e(m),G;return p||aX(e)||aL(e)?H:(s.push(e),G)})).length||n){var h=e4(e,e=>aL(e)?-100:aX(e)?-50:aQ(e)?-10:tI(e)?90:0);if(!(f&&f.splice(v?d+1:f.length,0,...h))){for(d=0,f=h;d<f.length;d++){var g=f[d];g&&(l.validateKey(r??g.key),R(()=>{var e,r=f[d];if(o("command",r),v=G,tI(r))c.post(r);else if(aH(r))u.get(...ev(r.get));else if(aQ(r))u.set(...ev(r.set));else if(aX(r))rl(i,r.listener);else if(aL(r))(e=R(()=>r.extension.setup(m),e=>nh(r.extension.id,e)))&&(rl(a,[r.priority??100,e,r.extension]),e4(a,([e])=>e));else if(a0(r))r(m);else{var t=G;for(var[,e]of a)if(t=e.processCommand?.(r)??G)break;t||nh("invalid-command",r,"Loaded extensions:",a.map(e=>e[2].id))}},e=>nh(m,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}},__isTracker:H}),configurable:!1,writable:!1}),al(),nG(async(e,r,t,a)=>{if("ready"===e){var i=tS((await u.get({scope:"session",key:j,refresh:!0},{scope:"session",key:C,refresh:!0,cache:L}))[0]).value;l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(ac(m),i.hasUserAgent=!0),p=!0,s.length&&rl(m,s),a(),rl(m,...eM(aR,e=>({extension:e})),...n,{set:{scope:"view",key:"loaded",value:!0}})}},!0),m},ap=()=>b?.clientId,ah={scope:"shared",key:"referrer"},ag=(e,r)=>{m.variables.set({...ah,value:[ap(),e]}),r&&m.variables.get({scope:ah.scope,key:ah.key,result:(t,n,a)=>t?.value?a():n?.value?.[1]===e&&r()})},ay=rd(),am=rd(),ab=rd(),aw=1,ak=()=>am(),[aS,aI]=rS(),aA=e=>{var r=rd(e,ay),t=rd(e,am),n=rd(e,ab),a=rd(e,()=>aw);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),interactiveTime:n(e,i),activations:a(e,i)})},aE=aA(),aT=()=>aE(),[ax,aN]=rS(),aO=(e,r)=>(r&&eJ(aj,r=>e(r,()=>!1)),ax(e)),a$=new WeakSet,aj=document.getElementsByTagName("iframe"),aC=e=>(null==e||(e===H||""===e)&&(e="add"),eu(e)&&q(e,"add","remove","update","clear")?{action:e}:ep(e)?e:void 0);function aU(e){if(e){if(null!=e.units&&q(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aM=e=>tz(e,void 0,e=>eM(ev(e5(tN,e)?.tags))),a_=e=>e?.component||e?.content,aF=e=>tz(e,r=>r!==e&&!!a_(e5(tN,r)),e=>(k=e5(tN,e),(k=e5(tN,e))&&eF(eq(k.component,k.content,k),"tags"))),aP=(e,r)=>r?e:{...e,rect:void 0,content:(S=e.content)&&eM(S,e=>({...e,rect:void 0}))},aq=(e,r=G)=>{var t,n,a,i=[],o=[],s=0;return rQ(e,e=>{var n=e5(tN,e);if(n){if(a_(n)){var a=eH(ev(n.component),e=>0===s||!r&&(1===s&&e.track?.secondary!==H||e.track?.promote));t=e2(a,e=>e.track?.region)&&tt(e)||void 0;var l=aF(e);n.content&&ru(i,...eM(n.content,e=>({...e,rect:t,...l}))),a?.length&&(ru(o,...eM(a,e=>(s=eY(s,e.track?.secondary?1:2),aP({...e,content:i,rect:t,...l},!!t)))),i=[])}var u=n.area||tP(e,"area");u&&ru(o,...eM(u))}}),i.length&&rl(o,aP({id:"",rect:t,content:i})),eJ(o,e=>{eu(e)?rl(n??=[],e):(e.area??=eP(n,"/"),ru(a??=[],e))}),a||n?{components:a,area:eP(n,"/")}:void 0},az=Symbol();$={necessary:1,preferences:2,statistics:4,marketing:8},window.tail.push({consent:{externalSource:{key:"Cookiebot",poll(){var e=rH.cookie.match(/CookieConsent=([^;]*)/)?.[1],r=1;return e?.replace(/([a-z]+):(true|false)/g,(e,t,n)=>("true"===n&&(r|=$[t]??0),"")),{level:r>1?1:0,purposes:r}}}}});var aR=[{id:"context",setup(e){rp(()=>eJ(aj,e=>re(a$,e)&&aN(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result:(t,n,a)=>(null==b||!t?.value||b?.definition?r=t?.value:(b.definition=t.value,b.metadata?.posted&&e.events.postPatch(b,{definition:r})),a())});var r,t=nQ({scope:"tab",key:"viewIndex"})?.value??0,n=nQ({scope:"tab",key:"tabIndex"})?.value;null==n&&n0({scope:"tab",key:"tabIndex",value:n=nQ({scope:"shared",key:"tabIndex"})?.value??nQ({scope:"session",key:j})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:n+1});var a=null,i=(i=G)=>{if(!r7(""+a,a=location.href)||i){var{source:o,scheme:s,host:l}=rC(location.href+"",!0);b={type:"view",timestamp:rf(),clientId:nD(),tab:nR,href:o,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:n+1,tabViewNumber:t+1,viewport:ti(),duration:aE(void 0,!0)},0===n&&(b.firstTab=H),0===n&&0===t&&(b.landingPage=H),n0({scope:"tab",key:"viewIndex",value:++t});var u=rU(location.href);if(eM(["source","medium","campaign","term","content"],(e,r)=>(b.utm??={})[e]=u[`utm_${e}`]?.[0]),!(b.navigationType=w)&&performance&&eM(performance.getEntriesByType("navigation"),e=>{b.redirects=e.redirectCount,b.navigationType=rW(e.type,/\_/g,"-")}),w=void 0,"navigate"===(b.navigationType??="navigate")){var c=nQ(ah)?.value;c&&ne(document.referrer)&&(b.view=c?.[0],b.relatedEventId=c?.[1],e.variables.set({...ah,value:void 0}))}var c=document.referrer||null;c&&!ne(c)&&(b.externalReferrer={href:c,domain:ta(c)}),b.definition=r,r=void 0,e.events.post(b),e.events.registerEventPatchSource(b,()=>({duration:aT()})),aI(b)}};return nN(e=>ab(e)),nm(e=>{e?(am(H),++aw):(am(G),ab(G))}),tn(window,"popstate",()=>(w="back-forward",i())),eM(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),w="navigate",i()}}),i(),{processCommand:r=>aB(r)&&(rl(e,r.username?{type:"login",username:r.username}:{type:"logout"}),H),decorate(e){!b||tA(e)||td(e)||(e.view=b.clientId)}}}},{id:"components",setup(e){var r=as(e),t=e=>null==e?void 0:{...e,component:ev(e.component),content:ev(e.content),tags:ev(e.tags)},n=({boundary:e,...n})=>{e7(tN,e,e=>t("add"in n?{...e,component:eq(e?.component,n.component),content:eq(e?.content,n.content),area:n?.area??e?.area,tags:eq(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,e5(tN,e))};return{decorate(e){eJ(e.components,e=>rn(e,"track"))},processCommand:e=>aK(e)?(n(e),H):aZ(e)?(eM(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e5(n,a))for(var i=[];null!=r1(a,e);){re(n,a);var o=rJ(r1(a,e),"|");r1(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ec(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&r[u]&&(l=r[u]),rl(i,l)}}rl(t,...eM(i,e=>({add:H,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),t})(e.scan.attribute,e.scan.components),n),H):G}}},{id:"navigation",setup(e){var r=r=>{tn(r,["click","contextmenu","auxclick"],t=>{var n,a,i,o,s=G;if(rQ(t.target,e=>{var r;ad(e)&&(o??=e),s=s||"NAV"===r3(e),a??=tq(e,"clicks",H,e=>e.track?.clicks)??((r=ev(tO(e)?.component))&&e2(r,e=>e.track?.clicks!==G)),i??=tq(e,"region",H,e=>e.track?.region)??((r=tO(e)?.component)&&e2(r,e=>e.track?.region))}),o){var l,u=aq(o),c=aM(o);a??=!s;var f={...(i??=H)?{pos:te(o,t),viewport:ti()}:null,...(rQ(t.target??o,e=>"IMG"===r3(e)||e===o?(n={element:{tagName:e.tagName,text:r1(e,"title")||r1(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},G):H),n),...u,timeOffset:aT(),...c};if(af(o)){var d=o.hostname!==location.hostname,{host:v,scheme:p,source:h}=rC(o.href,!1);if(o.host===location.host&&o.pathname===location.pathname&&o.search===location.search){if("#"===o.hash)return;o.hash!==location.hash&&0===t.button&&rl(e,W({type:"anchor_navigation",anchor:o.hash,...f}));return}var g=W({clientId:nD(),type:"navigation",href:d?o.href:h,external:d,domain:{host:v,scheme:p},self:H,anchor:o.hash,...f});if("contextmenu"===t.type){var y=o.href,m=ne(y);if(m){ag(g.clientId,()=>rl(e,g));return}var b=(""+Math.random()).replace(".","").substring(1,8);if(!m){if(!tR.captureContextMenu)return;o.href=nn+"="+b+encodeURIComponent(y),tn(window,"storage",(r,t)=>r.key===_&&(r.newValue&&JSON.parse(r.newValue)?.requestId===b&&rl(e,g),t())),tn(r,["keydown","keyup","visibilitychange","pointermove"],(e,r)=>{r(),o.href=y})}return}t.button<=1&&(1===t.button||t.ctrlKey||t.shiftKey||t.altKey||r1(o,"target")!==window.name?(ag(g.clientId),g.self=G,rl(e,g)):r7(location.href,o.href)||(g.exit=g.external,ag(g.clientId)));return}var w=(rQ(t.target,(e,r)=>!!(l??=aC(tO(e)?.cart??tP(e,"cart")))&&!l.item&&(l.item=e1(tO(e)?.content))&&r(l)),aU(l));(w||a)&&rl(e,w?W({type:"cart_updated",...f,...w}):W({type:"component_click",...f}))}})};r(document),aO(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=r9(H);aS(()=>ry(()=>(r={},t=r9(H)),250)),tn(window,"scroll",()=>{var n=r9(),a=r8();if(n.y>=t.y){var i=[];!r.fold&&n.y>=t.y+200&&(r.fold=H,rl(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=H,rl(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=H,rl(i,"page-end"));var o=eM(i,e=>W({type:"scroll",scrollType:e,offset:a}));o.length&&rl(e,o)}})}},{id:"cart",setup:e=>({processCommand(r){if(aV(r)){var t=r.cart;return"clear"===t?rl(e,{type:"cart_updated",action:"clear"}):(t=aU(t))&&rl(e,{...t,type:"cart_updated"}),H}return aY(r)?(rl(e,{type:"order",...r.order}),H):G}})},{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=r2(i,t$("ref"))||"track_ref",l=()=>i.isConnected&&tt(i).width,u=e5(r,i,()=>{var r,t=new Map,n={type:"form",name:r2(i,t$("form-name"))||r1(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:aT()}));var s=()=>{o(),r[3]>=2&&(n.completed=3===r[3]||!l()),e.events.postPatch(n,{...a,totalTime:rf(H)-r[4]}),r[3]=1},u=rv();return tn(i,"submit",()=>{a=aq(i),r[3]=3,u(()=>{i.isConnected&&tt(i).width>0?(r[3]=2,u()):s()},750)}),r=[n,t,i,0,rf(H),1]});return e5(u[1],n)||eM(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||tq(e,"ref"))&&(e.value||(e.value=nJ()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:rW(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:e.type??"unknown",[az]:t(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(s-(s=ak())),u=-(l-(l=rf(H))),c=r[az];(r[az]=t(n))!==c&&(r.fillOrder??=a[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=H,a[3]=2,eJ(e.fields,([e,t])=>t.lastField=e===r.name)),r.activeTime+=o,r.totalTime+=u,e.activeTime+=o,e.totalTime+=u,i=null}},s=0,l=0,u=e=>e&&tn(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>t&&(i=t,"focusin"===e.type?(l=rf(H),s=ak()):o()));u(document),aO(e=>e.contentDocument&&u(e.contentDocument),!0)}},{id:"consent",setup(e){var r=async r=>await e.variables.get({scope:"session",key:C,result:r}).value,t=async t=>{if(t){var n=await r();if(!n||ts(n,t=tl(t)))return[!1,n];var a={level:to.lookup(t.classification),purposes:tu.lookup(t.purposes)};return await e.events.post(W({type:"consent",consent:a}),{async:!1,variables:{get:[{scope:"session",key:C}]}}),[!0,a]}},n={};return{processCommand(e){if(a1(e)){var a=e.consent.get;a&&r(a);var i=tl(e.consent.set);i&&(async()=>i.callback?.(...await t(i)))();var o=e.consent.externalSource;if(o){var s,l=o.key,u=n[l]??=rp({frequency:o.pollFrequency??1e3}),c=async()=>{if(rH.hasFocus()){var e=tl(o.poll());if(e&&!ts(s,e)){var[r,n]=await t(e);r&&no(n,"Consent was updated from "+l),s=e}}};u.restart(o.pollFrequency,c).trigger()}return H}return G}}}}],aD=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),aV=aD("cart"),aB=aD("username"),aJ=aD("tagAttributes"),aW=aD("disable"),aK=aD("boundary"),aL=aD("extension"),aG=aD(H,"flush"),aH=aD("get"),aX=aD("listener"),aY=aD("order"),aZ=aD("scan"),aQ=aD("set"),a0=e=>"function"==typeof e,a1=aD("consent");Object.defineProperty(rG,".tail.js.init",{writable:!1,configurable:!1,value(e){e(av)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
