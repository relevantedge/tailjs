(()=>{"use strict";var e,r,t,n,a,i,o,s,l,u,c,f,d,v,p,h,g,m,y,b,w,k,S,E,I,A,T,x,N,$,j,O,C="info",_=(e,r=e=>TypeError(e))=>{throw ea(e=rr(e))?r(e):e},M=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(eu(e)&&eu(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!M(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},U=(e,r,...t)=>e===r||t.length>0&&t.some(r=>U(e,r)),F=(e,r)=>null!=e?e:_(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),P=(e,r=!0,t)=>{try{return e()}catch(e){return eh(r)?es(e=r(e))?_(e):e:Z(r)?console.error(r?_(e):e):r}finally{t?.()}},R=e=>{var r=void 0;return()=>r??=rr(e)},q=e=>{var r={initialized:!0,then:D(()=>(r.initialized=!0,rr(e)))};return r},D=e=>{var r=R(e);return(e,t)=>z(r,[e,t])},z=async(e,r=!0,t)=>{try{var n=await rr(e);return eo(r)?r[0]?.(n):n}catch(e){if(Z(r)){if(r)throw e;console.error(e)}else{if(eo(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{await t?.()}},B=e=>e,V=void 0,W=Number.MAX_SAFE_INTEGER,J=!1,G=!0,L=()=>{},H=e=>null!=e,K=Symbol.iterator,X=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:V,Y=(e,r)=>eh(r)?e!==V?r(e):V:e?.[r]!==V?e:V,Z=e=>"boolean"==typeof e,Q=X(Z,e=>0!=e&&(1==e||"false"!==e&&("true"===e||V))),ee=e=>!!e,er=e=>e===G,et=e=>e!==J,en=e=>"number"==typeof e,ea=e=>"string"==typeof e,ei=X(ea,e=>e?.toString()),eo=Array.isArray,es=e=>e instanceof Error,el=(e,r=!1)=>null==e?V:!r&&eo(e)?e:eg(e)?[...e]:[e],eu=e=>null!==e&&"object"==typeof e,ec=Object.prototype,ef=Object.getPrototypeOf,ed=e=>null!=e&&ef(e)===ec,ev=(e,r)=>"function"==typeof e?.[r],ep=e=>"symbol"==typeof e,eh=e=>"function"==typeof e,eg=(e,r=!1)=>!!(e?.[K]&&("object"==typeof e||r)),em=e=>e instanceof Map,ey=e=>e instanceof Set,eb=(e,r)=>null==e?V:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,ew=!1,ek=e=>(ew=!0,e),eS=e=>null==e?V:eh(e)?e:r=>r[e],eE=(e,r,t)=>(r??t)!==V?(e=eS(e),r??=0,t??=W,(n,a)=>r--?V:t--?e?e(n,a):n:t):e,eI=e=>e?.filter(H),eA=(e,r,t,n)=>null==e?[]:!r&&eo(e)?eI(e):e[K]?function*(e,r){if(null!=e){if(r){r=eS(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),ew){ew=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===V?r:eE(r,t,n)):eu(e)?function*(e,r){r=eS(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),ew){ew=!1;break}}}(e,eE(r,t,n)):eA(eh(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),eT=(e,r)=>r&&!eo(e)?[...e]:e,ex=(e,r,t,n)=>eA(e,r,t,n),eN=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[K]||n&&eu(r))for(var i of a?eA(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(eA(e,r,a,i),t+1,n,!1),e$=(e,r,t,n)=>{if(r=eS(r),eo(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!ew;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return ew=!1,i}return null!=e?el(ex(e,r,t,n)):V},ej=(e,r,t,n)=>null!=e?new Set([...ex(e,r,t,n)]):V,eO=(e,r,t=1,n=!1,a,i)=>el(eN(e,r,t,n,a,i)),eC=(e,r,t)=>null==e?V:eh(r)?rb(e$(ea(e)?[e]:e,r),t??""):ea(e)?e:rb(e$(e,e=>!1===e?V:e),r??""),e_=(...e)=>{var r;return eq(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...el(e))),r},eM=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,ew)){ew=!1;break}return a},eU=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,ew)){ew=!1;break}return t},eF=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,ew){ew=!1;break}return t},eP=(e,r,...t)=>null==e?V:eg(e)?e$(e,e=>r(e,...t)):r(e,...t),eR=(e,r,t,n)=>{var a;if(null!=e){if(eo(e))return eM(e,r,t,n);if(t===V){if(e[K])return eU(e,r);if("object"==typeof e)return eF(e,r)}for(var i of eA(e,r,t,n))null!=i&&(a=i);return a}},eq=eR,eD=async(e,r,t,n)=>{var a;if(null==e)return V;for(var i of ex(e,r,t,n))if(null!=(i=await i)&&(a=i),ew){ew=!1;break}return a},ez=Object.fromEntries,eB=(e,r,t)=>{if(null==e)return V;if(Z(r)||t){var n={};return eq(e,t?(e,a)=>null!=(e=r(e,a))&&null!=(e[1]=t(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eq(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return ez(e$(e,r?(e,t)=>Y(r(e,t),1):e=>Y(e,1)))},eV=(e,r,t,n,a)=>{var i=()=>eh(t)?t():t;return eR(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},eW=(e,r=e=>null!=e,t=eo(e),n,a)=>eT(eA(e,(e,t)=>r(e,t)?e:V,n,a),t),eJ=(e,r,t,n)=>{var a;if(null==e)return V;if(r)e=eW(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[K])return Object.keys(e).length}return a=0,eR(e,()=>++a)??0},eG=(e,...r)=>null==e?V:en(e)?Math.max(e,...r):eV(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||en(a)&&a>e?a:e,V,r[2],r[3]),eL=(e,r,t)=>e$(e,ed(e)?e=>e[1]:e=>e,r,t),eH=e=>!eo(e)&&eg(e)?e$(e,em(e)?e=>e:ey(e)?e=>[e,!0]:(e,r)=>[r,e]):eu(e)?Object.entries(e):V,eK=(e,r,t,n)=>null==e?V:(r=eS(r),eR(e,(e,t)=>!r||(e=r(e,t))?ek(e):V,t,n)),eX=(e,r,t,n)=>null==e?V:eo(e)||ea(e)?e[e.length-1]:eR(e,(e,t)=>!r||r(e,t)?e:V,t,n),eY=(e,r,t,n)=>null==e?V:ed(e)&&!r?Object.keys(e).length>0:e.some?.(r??ee)??eR(e,r?(e,t)=>!!r(e,t)&&ek(!0):()=>ek(!0),t,n)??!1,eZ=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),eQ=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),e0=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=eh(t)?t():t)&&eQ(e,r,n),n}},e1=(e,...r)=>(eq(r,r=>eq(r,([r,t])=>{null!=t&&(ed(e[r])&&ed(t)?e1(e[r],t):e[r]=t)})),e),e2=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eq(t,t=>eo(t)?e(r,t[0],t[1]):eq(t,([t,n])=>e(r,t,n))),r)},e4=e2(eQ),e6=e2((e,r,t)=>eQ(e,r,eh(t)?t(e0(e,r)):t)),e5=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):e0(e,r)!==e4(e,r,!0),e3=(e,r)=>{if((e??r)!=null){var t=e0(e,r);return ev(e,"delete")?e.delete(r):delete e[r],t}},e8=(e,...r)=>{var t=[],n=!1,a=(e,i,o,s)=>{if(e){var l=r[i];i===r.length-1?eo(l)?(n=!0,l.forEach(r=>t.push(e3(e,r)))):t.push(e3(e,l)):(eo(l)?(n=!0,l.forEach(r=>a(e0(e,r),i+1,e,r))):a(e0(e,l),i+1,e,l),!eJ(e)&&o&&e9(o,s))}};return a(e,0),n?t:t[0]},e9=(e,r)=>{if(e)return eo(r)?(eo(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>e9(e,r)):eo(e)?r<e.length?e.splice(r,1)[0]:void 0:e3(e,r)},e7=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(eo(r)){if(ed(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=e$(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...ed(t)&&("get"in t||"value"in t)?t:eh(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},re=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>eu(t)?eo(t)?t.map(r=>eo(r)?1===r.length?[r[0],e[r[0]]]:re(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:re(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},rr=e=>eh(e)?e():e,rt=(e,r=-1)=>eo(e)?r?e.map(e=>rt(e,r-1)):[...e]:ed(e)?r?eB(e,([e,t])=>[e,rt(t,r-1)]):{...e}:ey(e)?new Set(r?e$(e,e=>rt(e,r-1)):e):em(e)?new Map(r?e$(e,e=>[e[0],rt(e[1],r-1)]):e):e,rn=(e,...r)=>e?.push(...r),ra=(e,...r)=>e?.unshift(...r),ri=(e,r)=>{if(!ed(r))return[e,e];var t,n,a,i={};if(ed(e))return eq(e,([e,o])=>{if(i[e]!==r[e]){if(ed(t=o)){if(!(o=ri(o,r[e])))return;[o,t]=o}else en(o)&&en(n)&&(o=(t=o)-n);i[e]=o,(a??=rt(r))[e]=t}}),a?[i,a]:void 0},ro="undefined"!=typeof performance?(e=G)=>e?Math.trunc(ro(J)):performance.timeOrigin+performance.now():Date.now,rs=(e=!0,r=()=>ro())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},rl=(e=0)=>{var r,t,n=(a,i=e)=>{if(void 0===a)return!!t;clearTimeout(r),Z(a)?a&&(i<0?et:er)(t?.())?n(t):t=void 0:(t=a,r=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},ru=(e,r=0)=>{var t=eh(e)?{frequency:r,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{}}=t;r=t.frequency??0;var l=0,u=rp(!0).resolve(),c=rs(!a),f=c(),d=async e=>!!l&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await z(()=>s(c(),-f+(f=c())),!1,()=>u.resolve())===!1||r<=0||o)&&v(!1),p.busy=!1,!0),v=(e,t=!e)=>(c(e,t),clearInterval(l),p.active=!!(l=e?setInterval(d,r<0?-r:r):0),p),p={active:!1,busy:!1,restart:(e,t)=>(r=e??r,s=t??s,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await d(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class rc{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new rf,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class rf{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===V||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var rd=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),rv=(e,r)=>null==e||isFinite(e)?!e||e<=0?rr(r):new Promise(t=>setTimeout(async()=>t(await rr(r)),e)):_(`Invalid delay ${e}.`),rp=e=>e?new rc:new rf,rh=(...e)=>Promise.race(e.map(e=>eh(e)?e():e)),rg=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rm=(...e)=>(e=eW(e),[()=>eV(e,(e,r)=>r[0]()||e,!1),()=>eV(e,(e,r)=>r[1]()||e,!1)]),ry=()=>{var e,r=new Set;return[(t,n)=>{var a=rg(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rb=(e,r=["and",", "])=>e?1===(e=e$(e)).length?e[0]:eo(r)?[e.slice(-1).join(r[1]??", ")," ",r[0]," ",e[e.length-1]].join(""):e.join(r??", "):V,rw=(e,r,t)=>null==e?V:eo(r)?null==(r=r[0])?V:r+" "+rw(e,r,t):null==r?V:1===r?e:t??e+"s",rk=(e,r,t)=>t?(rn(t,"\x1b[",r,"m"),eo(e)?rn(t,...e):rn(t,e),rn(t,"\x1b[m"),t):rk(e,r,[]).join(""),rS=(e,r="'")=>null==e?V:r+e+r,rE=e=>(e=Math.log2(e))===(0|e),rI=(e,r,t,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,r])=>ea(e)&&en(r)).map(([e,r])=>[e.toLowerCase(),r])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,r)=>e|r,0),f=r?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,r])=>[r,e])),v=(e,t)=>en(e)?!r&&t?null!=d[e]?e:V:e:ea(e)?f[e]??f[e.toLowerCase()]:V,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,V):(e??0)|t,(p=!1,V)):v(e),(e,r)=>null==(e=h(e,!1))?V:r&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,r])=>r&&e&r&&rE(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:V],m=(e,r)=>null==e?V:null==(e=h(o=e,r))?_(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,y=l.filter(([,e])=>!n||(n&e)===e&&rE(e));return e7(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rb(e$(el(e),e=>rS(e)),[r])}`},r&&{pure:y,map:(e,r)=>(e=m(e),y.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rA=(...e)=>{var r=eH(eB(e,!0)),t=e=>(eu(e)&&(eo(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,a=V;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=a)))})),e);return t},rT=(e,r=["|",";",","],t=!0)=>{if(!e)return V;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&eK(r,(e,r,t=n[1].split(e))=>t.length>1?t:V)||(n[1]?[n[1]]:[]),n},rx=(e,r=!0,t)=>null==e?V:rO(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:t,urn:t?!n:!n&&V,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):V,path:c,query:!1===r?f:rN(f,r),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":V),v}),rN=(e,r,t=!0)=>null==e?V:eB(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=rT(e,!1===r?[]:!0===r?V:r,t)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==r?[a,o.length>1?o:i]:[a,i]:V,(e,t)=>e?!1!==r?e_(e,t):(e?e+",":"")+t:t),r$=(e,r)=>r&&null!=e?r.test(e):V,rj=(e,r,t)=>rO(e,r,t,!0),rO=(t,n,a,i=!1)=>(t??n)==null?V:a?(e=V,i?(r=[],rO(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rC=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),r_=/\z./g,rM=(e,r)=>(r=eC(ej(eW(e,e=>e?.length)),"|"))?RegExp(r,"gu"):r_,rU={},rF=e=>e instanceof RegExp,rP=(e,r=[","," "])=>rF(e)?e:eo(e)?rM(e$(e,e=>rP(e,r)?.source)):Z(e)?e?/./g:r_:ea(e)?rU[e]??=rO(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rM(e$(rR(n,RegExp(`(?<!(?<!\\\\)\\\\)[${eC(r,rC)}]`)),e=>e&&`^${eC(rR(e,/(?<!(?<!\\)\\)\*/),e=>rC(rq(e,/\\(.)/g,"$1")),".*")}$`))):V,rR=(e,r)=>e?.split(r)??e,rq=(e,r,t)=>e?.replace(r,t)??e;(A=t||(t={}))[A.Anonymous=0]="Anonymous",A[A.Indirect=1]="Indirect",A[A.Direct=2]="Direct",A[A.Sensitive=3]="Sensitive";var rD=rI(t,!1,"data classification");(T=n||(n={}))[T.None=0]="None",T[T.Necessary=1]="Necessary",T[T.Functionality=2]="Functionality",T[T.Performance=4]="Performance",T[T.Targeting=8]="Targeting",T[T.Security=17]="Security",T[T.Infrastructure=33]="Infrastructure",T[T.Anonymous=49]="Anonymous",T[T.Any=63]="Any",T[T.Server=2048]="Server",T[T.Server_Write=4096]="Server_Write";var rz=rI(n,!0,"data purpose",2111),rB=rI(n,!1,"data purpose",0),rV=(e,r)=>((a=e?.metadata)&&(r?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e),rW=e=>!!e?.patchTargetId;(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rJ=rI(i,!1,"variable scope");t.Anonymous,n.Necessary;var rG=e=>`'${e.key}' in ${rJ.format(e.scope)} scope`,rL={scope:rJ,purpose:rB,purposes:rz,classification:rD};rA(rL);var rH=e=>e?.filter(H).sort((e,r)=>e.scope===r.scope?e.key.localeCompare(r.key,"en"):e.scope-r.scope);(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",rI(o,!1,"variable set status"),($=s||(s={}))[$.Add=0]="Add",$[$.Min=1]="Min",$[$.Max=2]="Max",$[$.IfMatch=3]="IfMatch",$[$.IfNoneMatch=4]="IfNoneMatch",rI(s,!1,"variable patch type");var rK=e=>!!e?.patch,rX=e=>!!e?.variables,rY=(e,r,t)=>{var n,a=e=>e,i=(t,i=r1)=>q(async()=>(n=a(i(await e(),r)))&&t(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>eW(e,e=>e.status<300)),variables:i(e=>e$(e,rQ)),values:i(e=>e$(e,e=>rQ(e)?.value)),push:()=>(a=e=>(t?.(e$(rZ(e))),e),o),value:i(e=>rQ(e[0])?.value),variable:i(e=>rQ(e[0])),result:i(e=>e[0])};return o},rZ=e=>e?.map(e=>e?.status<400?e:V),rQ=e=>e?.status<400?e?.current??e:V,r0=e=>e?.status<400||e?.status===404,r1=(e,r,t)=>{var n,a,i=[],s=e$(el(e),(e,s)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${rG(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[s])||!1!==n(e,a))&&i.push(a),V)));return i.length?_(i.join("\n")):eo(e)?s:s?.[0]},r2=e=>e&&"string"==typeof e.type,r4=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),r6=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],r5=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eC(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=r6(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,s,l)=>{var u=o||s||l,c=r6(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),t?.add(r3(n))),""}),a},r3=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,r8=2e3,r9="_t:data",r7=()=>()=>_("Not initialized."),te=window,tr=document,tt=tr.body,tn=(e,r)=>!!e?.matches(r),ta=W,ti=(e,r,t=(e,r)=>r>=ta)=>{for(var n,a=0,i=J;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==G&&null!=n),G),a-1)!==J&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},to=(e,r)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Q(e);case"n":return parseFloat(e);case"j":return P(()=>JSON.parse(e),L);case"h":return P(()=>nr(e),L);case"e":return P(()=>nn?.(e),L);default:return eo(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:to(e,r[0])):void 0}},ts=(e,r,t)=>to(e?.getAttribute(r),t),tl=(e,r,t)=>ti(e,(e,n)=>n(ts(e,r,t))),tu=(e,r)=>ts(e,r)?.trim()?.toLowerCase(),tc=e=>e?.getAttributeNames(),tf=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,td=e=>null!=e?e.tagName:null,tv=()=>({x:(l=tp(J)).x/(tt.offsetWidth-window.innerWidth)||0,y:l.y/(tt.offsetHeight-window.innerHeight)||0}),tp=e=>({x:eb(scrollX,e),y:eb(scrollY,e)}),th=(e,r)=>rq(e,/#.*$/,"")===rq(r,/#.*$/,""),tg=(e,r,t=G)=>(u=tm(e,r))&&B({xpx:u.x,ypx:u.y,x:eb(u.x/tt.offsetWidth,4),y:eb(u.y/tt.offsetHeight,4),pageFolds:t?u.y/window.innerHeight:void 0}),tm=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:c,y:f}=ty(e),{x:c,y:f}):void 0,ty=e=>e?(d=e.getBoundingClientRect(),l=tp(J),{x:eb(d.left+l.x),y:eb(d.top+l.y),width:eb(d.width),height:eb(d.height)}):void 0,tb=(e,r,t,n={capture:!0,passive:!0})=>eo(r)?rm(...e$(r,r=>tb(e,r,t,n))):rg(t,t=>e.addEventListener(r,t,n),t=>e.addEventListener(r,t,n)),tw=e=>{var{host:r,scheme:t,port:n}=rx(e,!1);return{host:r+(n?":"+n:""),scheme:t}},tk=()=>({...l=tp(G),width:window.innerWidth,height:window.innerHeight,totalWidth:tt.offsetWidth,totalHeight:tt.offsetHeight}),tS=new WeakMap,tE=e=>tS.get(e),tI=(e,r=J)=>(r?"--track-":"track-")+e,tA=(e,r,t,n,a,i)=>r?.[1]&&eq(tc(e),o=>r[0][o]??=(i=J,ea(n=eq(r[1],([r,t,n],a)=>r$(o,r)&&(i=void 0,!t||tn(e,t))&&ek(n??o)))&&(!(a=e.getAttribute(o))||Q(a))&&r5(a,rq(n,/\-/g,":"),t),i)),tT=()=>{},tx=(e,r)=>{if(v===(v=tM.tags))return tT(e,r);var t=e=>e?rF(e)?[[e]]:eg(e)?eO(e,t):[ed(e)?[rP(e.match),e.selector,e.prefix]:[rP(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eL(v))]];(tT=(e,r)=>tA(e,n,r))(e,r)},tN=(e,r)=>eC(e_(tf(e,tI(r,G)),tf(e,tI("base-"+r,G)))," "),t$={},tj=(e,r,t=tN(e,"attributes"))=>{t&&tA(e,t$[t]??=[{},rj(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[rP(t||n),,r])],r),r5(tN(e,"tags"),void 0,r)},tO=(e,r,t=J,n)=>(t?ti(e,(e,t)=>t(tO(e,r,J)),eh(t)?t:void 0):eC(e_(ts(e,tI(r)),tf(e,tI(r,G)))," "))??(n&&(p=tE(e))&&n(p))??null,tC=(e,r,t=J,n)=>""===(h=tO(e,r,t,n))||(null==h?h:Q(h)),t_=(e,r,t,n)=>e?(tj(e,n??=new Set),ti(e,e=>{tx(e,n),r5(e$(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tM={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},tU=[],tF=[],tP=(e,r=0)=>e.charCodeAt(r),tR=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tU[tF[r]=e.charCodeAt(0)]=r);var tq=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(tF[(16515072&r)>>18],tF[(258048&r)>>12],tF[(4032&r)>>6],tF[63&r]);return a.length+=n-t,tR(a)},tD=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tU[tP(e,t++)]<<2|(r=tU[tP(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tU[tP(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tU[tP(e,t++)]));return i},tz={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tB=(e=256)=>e*Math.random()|0,tV=e=>{var r,t,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tB()));for(t=0,i[n++]=g(f^16*tB(16)+a);r>t;i[n++]=g(f^e[t++]));for(;a--;)i[n++]=tB();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((f^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=f^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(s=Z(r)?64:r,h(),[o,l]=tz[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[t++])))*l));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tW={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(d=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),f(r)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(s(t),s(n))}})(e);break;default:if(!a&&r&&r.invalidTypeReplacement)"function"==typeof r.invalidTypeReplacement?s(r.invalidTypeReplacement(e),!0):s(r.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)s(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function f(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return f(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return d(-1,1);if(200===r)return d(-1,2);if(201===r)return d(-1,4);if(202===r)return s(4);if(203===r)return s(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return d(1);if(213===r)return d(2);if(214===r)return d(4);if(215===r)return d(8);if(216===r)return d(16);if(217===r)return f(-1,1);if(218===r)return f(-1,2);if(219===r)return f(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function s(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function f(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function d(e,r){e<0&&(e=o(r));var t=o(1),a=l(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={serialize:r,deserialize:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tW);var{deserialize:tJ,serialize:tG}=(j=tW.exports)&&j.__esModule&&Object.prototype.hasOwnProperty.call(j,"default")?j.default:j,tL="$ref",tH=(e,r,t)=>ep(e)?V:t?null===r||r:r!==V,tK=(e,r,{defaultValues:t=!0,prettify:n=!1})=>{var a,i,o,s=(e,r,n=e[r],a=tH(r,n,t)?u(n):V)=>(n!==a&&(a!==V||eo(e)?e[r]=a:delete e[r],l(()=>e[r]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||eh(e)||ep(e))return null;if(!eu(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[tL]||(e[tL]=o,l(()=>delete e[tL])),{[tL]:o};if(ed(e))for(var r in(i??=new Map).set(e,i.size+1),e)s(e,r);else eg(e)&&(!eo(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?s(e,t):(e[t]=null,l(()=>delete e[t])));return e};return P(()=>r?tG(u(e)??null):P(()=>JSON.stringify(e,V,n?2:0),()=>JSON.stringify(u(e),V,n?2:0)),!0,()=>a?.forEach(e=>e()))},tX=e=>{var r,t,n=e=>eu(e)?e[tL]&&(t=(r??=[])[e[tL]])?t:(e[tL]&&(r[e[tL]]=e,delete e[tL]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return n(ea(e)?JSON.parse(e):null!=e?P(()=>tJ(e),()=>(console.error("Invalid message received.",e),V)):e)},tY=(e,r={})=>{var t=(e,{json:r=!1,jsonDecodeFallback:t=!0,...n})=>{var a=(e,t)=>en(e)&&!0===t?e:l(e=ea(e)?new Uint8Array(e$(e.length,r=>255&e.charCodeAt(r))):r?P(()=>JSON.stringify(e),()=>JSON.stringify(tK(e,!1,n))):tK(e,!0,n),t),i=e=>null==e?V:P(()=>tX(e),V);if(r)return[e=>tK(e,!1,n),i,(e,r)=>a(e,r)];var[o,s,l]=tV(e);return[e=>tq(o(tK(e,!0,n))),e=>null!=e?t&&(e?.[0]==="{"||e?.[0]==="[")?i(e):tX(s(tD(e))):null,(e,r)=>a(e,r)]};if(!e){var n=+(r.json??0);if(n&&!1!==r.prettify)return(g??=[t(null,{json:!1}),t(null,{json:!0,prettify:!0})])[+n]}return t(e,r)};tY();var[tZ,tQ]=tY(null,{json:!0,prettify:!0}),t0=rR(""+tr.currentScript.src,"#"),t1=rR(""+(t0[1]||""),";"),t2=t0[0],t4=t1[1]||rx(t2,!1)?.host,t6=e=>!!(t4&&rx(e,!1)?.host?.endsWith(t4)===G),t5=(...e)=>rq(eC(e),/(^(?=\?))|(^\.(?=\/))/,t2.split("?")[0]),t3=t5("?","var");t5("?","mnt"),t5("?","usr");var t8=Symbol(),t9=Symbol(),t7=(e,r,t=G,n=J)=>{r&&(t?console.groupCollapsed:console.group)((n?"":"tail.js: ")+r);var a=e?.[t9];a&&(e=e[t8]),null!=e&&console.log(eu(e)?rk(tZ(e),"94"):eh(e)?""+e:e),a&&a.forEach(([e,r,t])=>t7(e,r,t,!0)),r&&console.groupEnd()},[ne,nr]=tY(),[nt,nn]=[r7,r7],[na,ni]=ry(),no=e=>{nn===r7&&([nt,nn]=tY(e),ni(nt=tY(null,{json:!0})[0],nn))},ns=e=>r=>nl(e,r),nl=(...e)=>{var r=e.shift();console.error(ea(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[nu,nc]=ry(),[nf,nd]=ry(),nv=e=>nh!==(nh=e)&&nc(nh=!1,ny(!0,!0)),np=e=>ng!==(ng=!!e&&"visible"===document.visibilityState)&&nd(ng,!e,nm(!0,!0));nu(np);var nh=!0,ng=!1,nm=rs(!1),ny=rs(!1);tb(window,["pagehide","freeze"],()=>nv(!1)),tb(window,["pageshow","resume"],()=>nv(!0)),tb(document,"visibilitychange",()=>(np(!0),ng&&nv(!0))),nc(nh,ny(!0,!0));var nb=!1,nw=rs(!1),[nk,nS]=ry(),nE=ru({callback:()=>nb&&nS(nb=!1,nw(!1)),frequency:2e4,once:!0,paused:!0}),nI=()=>!nb&&(nS(nb=!0,nw(!0)),nE.restart());tb(window,"focus",nI),tb(window,"blur",()=>nE.trigger()),tb(document.body,["keydown","pointerdown","pointermove","scroll"],nI),nI(),(O=m||(m={}))[O.View=-3]="View",O[O.Tab=-2]="Tab",O[O.Shared=-1]="Shared";var nA=rI(m,!1,"local variable scope"),nT=e=>nA.tryParse(e)??rJ(e),nx=e=>nA.format(e)??rJ.format(e),nN=e=>!!nA.tryParse(e?.scope),n$=rA({scope:nA},rL),nj=e=>null==e?void 0:e.source?nj(e.source):`${nT(e.scope)}\0${e.key}\0${e.targetId??""}`,nO=e=>{var r=e.split("\0");return{scope:+r[0],key:r[1],targetId:r[2]}},nC=0,n_=void 0,nM=()=>(n_??r7())+"_"+nU(),nU=()=>++nC,nF=e=>crypto.getRandomValues(e),nP=()=>rq("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nF(new Uint8Array(1))[0]&15>>e/4).toString(16)),nR={},nq={id:n_,heartbeat:ro()},nD={knownTabs:{[n_]:nq},variables:{}},[nz,nB]=ry(),nV=r7,nW=e=>nR[nj(e)],nJ=(...e)=>nH(e.map(e=>(e.timestamp=ro(),e.expires=3e3,n$(e)))),nG=rl(),nL=(e,r=J)=>{nG(()=>{var r=e_(rH(e$(e,1))?.map(e=>[e,`${e.key} (${nx(e.scope)}, ${e.scope<0?"client-side memory only":rz.format(e.purposes)})`,J]),[[{[t9]:rH(e$(nR,1))?.map(e=>[e,`${e.key} (${nx(e.scope)}, ${e.scope<0?"client-side memory only":rz.format(e.purposes)})`,J])},"All variables",G]]);t7({[t9]:r},`Variables changed (${eJ(e)??0} changed, ${eJ(nR)} in total).`)},r?0:250)},nH=e=>{var r=e$(e,e=>e&&[nj(e),e]);if(r?.length){e4(nR,r);var t=eW(r,e=>e[1].scope>m.Tab);t.length&&(e4(nD.variables,t),nV({type:"patch",payload:eB(t)})),nB("variables",eB(r),!0),nL(eB(r))}};na((e,r)=>{nu(t=>{if(t){var n=r(sessionStorage.getItem(r9));sessionStorage.removeItem(r9),n_=n?.[0]??ro().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nL(nR=eB(e_(eW(nR,([,e])=>e.scope===m.View),e$(n?.[1],e=>[nj(e),e]))),!0)}else sessionStorage.setItem(r9,e([n_,e$(nR,([,e])=>e.scope!==m.View?e:void 0)]))},!0),nV=(r,t)=>{e&&(localStorage.setItem(r9,e([n_,r,t])),localStorage.removeItem(r9))},tb(window,"storage",e=>{if(e.key===r9){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===n_)){var[a,{type:i,payload:o}]=n;"query"===i?t.active||nV({type:"set",payload:nD},a):"set"===i&&t.active?(e4(nD,o),e4(nR,o.variables),t.trigger()):"patch"===i?(e4(nD.variables,o),e4(nR,o),nB("variables",o,!1)):"tab"===i&&(e4(nD.knownTabs,a,o),o&&nB("tab",o,!1))}}});var t=ru(()=>nB("ready",nD,!0),-25),n=ru({callback(){var e=ro()-1e4;eq(nD?.knownTabs,([r,t])=>t[0]<e&&e8(nD.knownTabs,r)),nq.heartbeat=ro(),nV({type:"tab",payload:nq})},frequency:5e3,paused:!0}),a=e=>{nV({type:"tab",payload:e?nq:void 0}),e?(t.restart(),nV({type:"query"})):t.toggle(!1),n.toggle(e)};nu(e=>a(e),!0)},!0);var[nK,nX]=ry(),[nY,nZ]=ry(),nQ=((e,{timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var a=()=>(t?nn:nr)(localStorage.getItem(e)),i=()=>localStorage.setItem(e,(t?nt:ne)([n_,ro()+r])),o=rl(r/2);return async(t,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<ro())&&(i(),a()?.[0]===n_))return o(i),await z(t,!0,()=>o(!1)&&localStorage.removeItem(e));var c=rp(),[f]=tb(window,"storage",r=>{r.key!==e||r.newValue||c.resolve()});await rh(rv(s??r),c),f()}null==s&&_(e+" could not be acquired.")}})("_t:rq"),n0=ru(()=>{if(b!==(b=tM.pushCookie)){if(!b)return;y=RegExp(rC(b)+"=([^;]*)")}var e=nn?.(rO(document.cookie,y)?.[1]);rX(e)&&nZ(e)},1e3),n1=0,n2=(e=1e3)=>{var r=()=>{r=L,--n1||(n0.restart(1e3),clearTimeout(0))};return n1++||n0.restart(100),e>0&&setTimeout(r,e),r()},n4=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=t=>{var s=eh(r)?r?.(a,t):r;return!1!==s&&(null!=s&&!0!==s&&(a=s),nX(e,a,t,e=>(o=a===V,a=e)),!o&&(i=(n?nt:JSON.stringify)(a)))};if(!t)return await nQ(()=>eD(1,async r=>{if(!s(r))return ek();var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(t.status>=400)return 0===r?ek(_(`Invalid response: ${await t.text()}`)):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rv((1+r)*200));var o=await t.text(),l=o?.length?(n?nn:JSON.parse)?.(o):V;return null!=l&&nZ(l),ek(l)}));s(0)&&(n2(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||_("Beacon send failed."))},n6=["scope","key","targetId","version"],n5=[...n6,"created","modified","classification","purposes","tags","readonly","value"],n3=[...n6,"init","purpose","refresh"];[...n5];var n8=new Map,n9=(e,r)=>{var a=ru(async()=>{var e=e$(n8,([e,r])=>({...nO(e),result:[...r]}));e.length&&await c.get(...e)},3e3),i=(e,r)=>eP(r,r=>e0(n8,e,()=>new Set).add(r)),s=e=>{if(r0(e)){var r,t=nj(e),n=rQ(e);eq(e9(n8,t),e=>{r=!1,e?.(n,nW(n),(e=!0)=>r=e),r&&i(t,e)})}};nu((e,r)=>a.toggle(e,e&&r>=3e3),!0);var l=new Map,u=(e,r)=>e4(l,e,Z(r)?r?void 0:0:r),c={get:(...t)=>rY(async()=>{var n=[],a=e$(t,(e,r)=>[e,r]),l=[],c=(await n4(e,()=>!!(a=e$(a,([e,r])=>{if(e){var t=nj(e);i(t,e.result);var a=nW(t);e.init&&u(t,e.cache);var s=e.purposes;if((s??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.expires<ro())rn(n,[{...a,status:o.Success},r]);else if(!nN(e))return[re(e,n3),r];else if(ed(e.init)){var c={...n$(e),status:o.Created,...e.init};null!=c.value&&(rn(l,f(c)),rn(n,[c,r]))}}else rn(n,[{...e,status:o.Denied,error:"No consent for "+rz.logFormat(s)},r])}})).length&&{variables:{get:e$(a,0)},deviceSessionId:r?.deviceSessionId})).variables?.get??[];return rn(n,...e$(c,(e,r)=>e&&[e,a[r][1]])),l.length&&nH(l),n.map(([e])=>(s(e),e))},e$(t,e=>e?.error)),set:(...a)=>rY(async()=>{var i=[],l=[],c=e$(a,(e,r)=>{if(e){var a=nj(e),s=nW(a);if(u(a,e.cache),nN(e)){if(null!=e.patch)return _("Local patching is not supported.");var c={value:e.value,classification:t.Anonymous,purposes:n.Necessary,scope:nA(e.scope),key:e.key};return l[r]={status:s?o.Success:o.Created,source:e,current:c},void rn(i,f(c))}return rK(e)||e?.version!==void 0||(e.version=s?.version,e.force??=!!e.version),[e,r]}}),d=c.length>0?[]:F((await n4(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:r?.deviceSessionId})).variables?.set,"No result.");return i.length&&nH(i),eq(d,(e,r)=>{var[t,n]=c[r];e.source=t,s(l[n]=e)}),l},e$(a,e=>e?.error))},f=(e,r=ro())=>({...re(e,n5),timestamp:r,expires:r+(e0(l,nj(e))??3e3)});return nY(({variables:e})=>{if(e){var r=ro(),t=e_(e$(e.get,e=>rQ(e)),e$(e.set,e=>rQ(e)));t?.length&&nH(eP(t,f,r))}}),c},n7=(e,r,t=r8)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.queued?e1(r,{type:e.type+"_patch",patchTargetId:e.clientId}):_("Source event not queued."),s=async(t,a=!1)=>{if((t=e$(el(t),e=>e1(r.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eq(t,e=>t7(e,e.type)),!a){t.length&&rn(n,...t);return}n.length&&ra(t,...n.splice(0)),t.length&&(t7(eC(t,e=>rS(e.type),["and"]),"Posting "+rb([rw("new event",[eJ(t,e=>!rW(e))||void 0]),rw("event update",[eJ(t,e=>rW(e))||void 0])])+"."),n4(e,{events:t.map(e=>(e1(e,{metadata:{posted:!0}}),e1(rV(rt(e),!0),{timestamp:e.timestamp-ro()}))),deviceSessionId:r?.deviceSessionId},{beacon:!0}))};return t>0&&ru(()=>s([],!0),t),nf((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=e$(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&s(e_(n.splice(0),a),!0)}}),{post:s,postPatch:(e,r,t)=>s(o(e,r),t),registerEventPatchSource(e,r,t=!0){var n=!1,s=()=>n=!0;return a.set(e,rt(e)),i.set(e,()=>{var i=a.get(e),[l,u]=(t?ri(r(i,s),i):r(i,s))??[];return l&&!M(u,i)?(a.set(e,rt(u)),[o(e,l),n]):[void 0,n]}),s}}},ae=Symbol(),ar=e=>{var r=new IntersectionObserver(e=>eq(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[ae]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=eW(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==G))&&eJ(a)){var a,i,o,s,l=J,u=0,c=rl(tM.impressionThreshold),f=ag();t[ae]=(r,n,d)=>{f(r=d>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),l!==(l=r)&&(l?c(()=>{++u,o||rn(e,o=eW(e$(a,e=>(e.track?.impressions||tC(t,"impressions",G,e=>e.track?.impressions))&&B({type:"impression",pos:tg(t),viewport:tk(),timeOffset:ay(),impressions:u,...a$(t,G)})||null))),o?.length&&(s=e$(o,r=>e.events.registerEventPatchSource(r,()=>({relatedEventId:r.clientId,duration:f(),impressions:u}))))}):(eq(s,e=>e()),c(!1)))},r.observe(t)}}},at=()=>{var e=te?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??te.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:te.devicePixelRatio,width:r,height:t,landscape:a}}},an=e=>rn(e,B({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:e$(navigator.languages,(e,r,t=e.split("-"))=>B({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...at()})),aa=(e,r="A"===td(e)&&ts(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),ai=(e,r=td(e),t=tC(e,"button"))=>t!==J&&(U(r,"A","BUTTON")||"INPUT"===r&&U(tu(e,"type"),"button","submit")||t===G),ao=()=>w?.clientId,as={scope:"shared",key:"referrer"},al=(e,r)=>{I.variables.set({...as,value:[ao(),e]}),r&&I.variables.get({scope:as.scope,key:as.key,result(t,n,a){t?a():n?.value?.[1]===e&&r()}})},au=rs(),ac=rs(),af=rs(),ad=1,av=()=>ac(),[ap,ah]=ry(),ag=e=>{var r=rs(e,au),t=rs(e,ac),n=rs(e,af),a=rs(e,()=>ad);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),interactiveTime:n(e,i),activations:a(e,i)})},am=ag(),ay=()=>am(),[ab,aw]=ry(),ak=new WeakSet,aS=document.getElementsByTagName("iframe"),aE=e=>(null==e||(e===G||""===e)&&(e="add"),ea(e)&&U(e,"add","remove","update","clear")?{action:e}:eu(e)?e:void 0);function aI(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aA=e=>t_(e,void 0,e=>e$(el(e0(tS,e)?.tags))),aT=e=>e?.component||e?.content,ax=e=>t_(e,r=>r!==e&&!!aT(e0(tS,r)),e=>(S=e0(tS,e),(S=e0(tS,e))&&eO(e_(S.component,S.content,S),"tags"))),aN=(e,r)=>r?e:{...e,rect:void 0,content:(E=e.content)&&e$(E,e=>({...e,rect:void 0}))},a$=(e,r=J)=>{var t,n,a,i=[],o=[],s=0;return ti(e,e=>{var n=e0(tS,e);if(n){if(aT(n)){var a=eW(el(n.component),e=>0===s||!r&&(1===s&&e.track?.secondary!==G||e.track?.promote));t=eY(a,e=>e.track?.region)&&ty(e)||void 0;var l=ax(e);n.content&&ra(i,...e$(n.content,e=>({...e,rect:t,...l}))),a?.length&&(ra(o,...e$(a,e=>(s=eG(s,e.track?.secondary?1:2),aN({...e,content:i,rect:t,...l},!!t)))),i=[])}var u=n.area||tO(e,"area");u&&ra(o,...e$(u))}}),i.length&&rn(o,aN({id:"",rect:t,content:i})),eq(o,e=>{ea(e)?rn(n??=[],e):(e.area??=eC(n,"/"),ra(a??=[],e))}),a||n?{components:a,area:eC(n,"/")}:void 0},aj=Symbol(),aO=[{id:"context",setup(e){ru(()=>eq(aS,e=>e5(ak,e)&&aw(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&t===(t=""+location.href)||(r=n=a?.value),r&&w&&!w.definition&&(w.definition=r,w.metadata?.posted&&e.events.postPatch(w,{definition:r}),r=void 0),o())});var r,t,n,a=nW({scope:"tab",key:"viewIndex"})?.value??0,i=nW({scope:"tab",key:"tabIndex"})?.value;null==i&&nJ({scope:"tab",key:"tabIndex",value:i=nW({scope:"shared",key:"tabIndex"})?.value??nW({scope:"session",key:C})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:i+1});var o=null,s=(t=J)=>{if(!th(""+o,o=location.href)||t){var{source:n,scheme:s,host:l}=rx(location.href+"",!0);w={type:"view",timestamp:ro(),clientId:nM(),tab:n_,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:i+1,tabViewNumber:a+1,viewport:tk(),duration:am(void 0,!0)},0===i&&(w.firstTab=G),0===i&&0===a&&(w.landingPage=G),nJ({scope:"tab",key:"viewIndex",value:++a});var u=rN(location.href);if(e$(["source","medium","campaign","term","content"],(e,r)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&e$(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=rq(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=nW(as)?.value;c&&t6(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...as,value:void 0}))}var c=document.referrer||null;c&&!t6(c)&&(w.externalReferrer={href:c,domain:tw(c)}),w.definition=r,r=void 0,e.events.post(w),e.events.registerEventPatchSource(w,()=>({duration:ay()})),ah(w)}};return nk(e=>af(e)),nf(e=>{e?(ac(G),++ad):(ac(J),af(J))}),tb(window,"popstate",()=>(k="back-forward",s())),e$(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),k="navigate",s()}}),s(),{processCommand:r=>aM(r)&&(rn(e,r.username?{type:"login",username:r.username}:{type:"logout"}),G),decorate(e){!w||r4(e)||rW(e)||(e.view=w.clientId)}}}},{id:"components",setup(e){var r=ar(e),t=e=>null==e?void 0:{...e,component:el(e.component),content:el(e.content),tags:el(e.tags)},n=({boundary:e,...n})=>{e6(tS,e,e=>t("add"in n?{...e,component:e_(e?.component,n.component),content:e_(e?.content,n.content),area:n?.area??e?.area,tags:e_(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,e0(tS,e))};return{decorate(e){eq(e.components,e=>e9(e,"track"))},processCommand:e=>aP(e)?(n(e),G):aV(e)?(e$(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e0(n,a))for(var i=[];null!=ts(a,e);){e5(n,a);var o=rR(ts(a,e),"|");ts(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ei(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&r[u]&&(l=r[u]),rn(i,l)}}rn(t,...e$(i,e=>({add:G,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),t})(e.scan.attribute,e.scan.components),n),G):J}}},{id:"navigation",setup(e){var r=r=>{tb(r,["click","contextmenu","auxclick"],r=>{var t,n,a,i,o,s=null,l=J;if(ti(r.target,e=>{var r;s??=ai(e)?e:null,l=l||"NAV"===td(e),i??=tC(e,"clicks",G,e=>e.track?.clicks)??((r=el(tE(e)?.component))&&eY(r,e=>e.track?.clicks!==J)),o??=tC(e,"region",G,e=>e.track?.region)??((r=tE(e)?.component)&&eY(r,e=>e.track?.region))}),s){var u,c=a$(s),f=aA(s);i??=!l;var d={...(o??=G)?{pos:tg(s,r),viewport:tk()}:null,...(t=r.target,n=s,ti(t??n,e=>"IMG"===td(e)||e===n?(a={element:{tagName:e.tagName,text:ts(e,"title")||ts(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},J):G),a),...c,...f,timing:ay()};if(aa(s)){var v=s.hostname!==location.hostname,{host:p,scheme:h,source:g}=rx(s.href,!1);if(s.host===location.host&&s.pathname===location.pathname&&s.search===location.search){if("#"===s.hash)return;s.hash!==location.hash&&rn(e,B({type:"anchor_navigation",anchor:s.hash,...d}));return}var m=B({clientId:nM(),type:"navigation",href:v?s.href:g,external:v,domain:{host:p,scheme:h},self:G,anchor:s.hash,...d});r.button<=1&&(1===r.button||r.ctrlKey||r.shiftKey||r.altKey||ts(s,"target")!==window.name?(al(m.clientId),m.self=J,rn(e,m)):th(location.href,s.href)||(m.exit=m.external,al(m.clientId)));return}var y=(ti(r.target,(e,r)=>!!(u??=aE(tE(e)?.cart??tO(e,"cart")))&&!u.item&&(u.item=eX(tE(e)?.content))&&r(u)),aI(u));(y||i)&&rn(e,y?B({type:"cart_updated",...d,...y}):B({type:"component_click",...d}))}})};r(document),ab(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=tp(G);ap(()=>rd(()=>(r={},t=tp(G)),250)),tb(window,"scroll",()=>{var n=tp(),a=tv();if(n.y>=t.y){var i=[];!r.fold&&n.y>=t.y+200&&(r.fold=G,rn(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=G,rn(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=G,rn(i,"page-end"));var o=e$(i,e=>B({type:"scroll",scrollType:e,offset:a}));o.length&&rn(e,o)}})}},{id:"cart",setup:e=>({processCommand(r){if(a_(r)){var t=r.cart;return"clear"===t?rn(e,{type:"cart_updated",action:"clear"}):(t=aI(t))&&rn(e,{...t,type:"cart_updated"}),G}return aB(r)?(rn(e,{type:"order",...r.order}),G):J}})},{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=tl(i,tI("ref"))||"track_ref",l=()=>i.isConnected&&ty(i).width,u=e0(r,i,()=>{var r,t=new Map,n={type:"form",name:tl(i,tI("form-name"))||ts(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>n);var s=()=>{o(),r[3]>=2&&(n.completed=3===r[3]||!l()),e.events.postPatch(n,{...a,totalTime:ro(G)-r[4]}),r[3]=1},u=rl();return tb(i,"submit",()=>{a=a$(i),r[3]=3,u(()=>{i.isConnected&&ty(i).width>0?(r[3]=2,u()):s()},750)}),r=[n,t,i,0,ro(G),1]});return e0(u[1],n)||e$(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||tC(e,"ref"))&&(e.value||(e.value=nP()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:rq(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[aj]:t(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(s-(s=av())),u=-(l-(l=ro(G))),c=r[aj];(r[aj]=t(n))!==c&&(r.fillOrder??=a[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=G,a[3]=2,eq(e.fields,([e,t])=>t.lastField=e===r.name||void 0)),r.activeTime+=o,r.totalTime+=u,e.activeTime+=o,i=null}},s=0,l=0,u=e=>{e&&tb(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>{t&&(i=t,"focusin"===e.type?(l=ro(G),s=av()):o())})};u(document),ab(e=>e.contentDocument&&u)}}],aC=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),a_=aC("cart"),aM=aC("username"),aU=aC("tagAttributes"),aF=aC("disable"),aP=aC("boundary"),aR=aC("extension"),aq=aC(G,"flush"),aD=aC("get"),az=aC("listener"),aB=aC("order"),aV=aC("scan"),aW=aC("set"),aJ=e=>"function"==typeof e,aG=e=>{if(I)return I;ea(e)&&(e=nr(e)),e4(tM,e),no(e9(tM,"clientKey"));var r=e9(tM,"apiKey"),t=te[tM.name]??[];if(!eo(t)){_(`The global variable for the tracker "${tM.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...r)=>{var t=G;a=eW(a,n=>P(()=>(n[e]?.(...r,{tracker:I,unsubscribe:()=>t=J}),t),ns(n)))},o=[],s={applyEventExtensions(e){e.clientId??=nM(),e.timestamp??=ro(),d=G;var r=J;return e$(n,([,t])=>{(r||t.decorate?.(e)===J)&&(r=G)}),r?void 0:e}},l=n9(t3,s),u=n7(t3,s),c=null,f=0,d=J,v=J;return e7(te,[{[tM.name]:[I=Object.freeze({id:"tracker_"+nM(),events:u,variables:l,push(...e){if(!c&&r){if(e[0]!==r)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var t=J;if((e=eW(eO(e,e=>ea(e)?nr(e):e),e=>{if(!e)return J;if(aU(e))tM.tags=e4({},tM.tags,e.tagAttributes);else if(aF(e))return tM.disabled=e.disable,J;else if(aq(e))return t=G,J;else if(aJ(e))return e(I),J;return v||az(e)||aR(e)?G:(o.push(e),J)})).length||t){var s=eZ(e,e=>aR(e)?-100:az(e)?-50:aW(e)?-10:r2(e)?90:0);if(!(c&&c.splice(d?f+1:c.length,0,...s))){for(f=0,c=s;f<c.length;f++)c[f]&&P(()=>{var e,r=c[f];if(i("command",r),d=J,r2(r))u.post(r,!1);else if(aD(r))l.get(...el(r.get));else if(aW(r))l.set(...el(r.set));else if(az(r))rn(a,r.listener);else if(aR(r))(e=P(()=>r.extension.setup(I),e=>nl(r.extension.id,e)))&&(rn(n,[r.priority??100,e]),eZ(n,([e])=>e));else if(aJ(r))r(I);else{var t=J;for(var[,e]of n)if(t=e.processCommand?.(r)??J)break;t||nl("invalid-command",r)}},e=>nl(I,"internal-error",e));c=null,t&&u.post([],!0)}}}},__isTracker:G})]}]),nz(async(e,r,n,a)=>{if("ready"===e){var i=F(await l.get({scope:"session",key:C,refresh:!0}).value,"No session data.");s.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(an(I),i.hasUserAgent=!0),v=!0,o.length&&rn(I,o),a(),rn(I,...e$(aO,e=>({extension:e})),...t,{set:{scope:"local",key:"loaded",value:!0}})}},!0),I};te[".tail.js.init"]=e=>{e(aG)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
