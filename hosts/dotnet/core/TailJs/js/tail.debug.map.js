(()=>{"use strict";var e,r,t,n,a,i,o,l,s,u,c,d,f,v,p,h,g,m,y,b,w,k,E,S,A,T,I,x,N,O,$,j,C=(e,r=e=>TypeError(e))=>{throw er(e=e9(e))?r(e):e},M=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(eo(e)&&eo(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!M(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},U=(e,r,...t)=>e===r||t.length>0&&t.some(r=>U(e,r)),_=(e,r)=>null!=e?e:C(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),F=(e,r=!0,t)=>{try{return e()}catch(e){return ef(r)?ea(e=r(e))?C(e):e:Y(r)?console.error(r?C(e):e):r}finally{t?.()}},P=e=>{var r=void 0;return()=>r??=e9(e)},q=e=>{var r={initialized:!0,then:R(()=>(r.initialized=!0,e9(e)))};return r},R=e=>{var r=P(e);return(e,t)=>D(r,[e,t])},D=async(e,r=!0,t)=>{try{var n=await e9(e);return en(r)?r[0]?.(n):n}catch(e){if(Y(r)){if(r)throw e;console.error(e)}else{if(en(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{t?.()}},z=e=>e,B=void 0,V=Number.MAX_SAFE_INTEGER,W=!1,J=!0,G=()=>{},L=e=>null!=e,H=Symbol.iterator,K=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:B,X=(e,r)=>ef(r)?e!==B?r(e):B:e?.[r]!==B?e:B,Y=e=>"boolean"==typeof e,Z=K(Y,e=>0!=e&&(1==e||"false"!==e&&("true"===e||B))),Q=e=>!!e,ee=e=>"number"==typeof e,er=e=>"string"==typeof e,et=K(er,e=>e?.toString()),en=Array.isArray,ea=e=>e instanceof Error,ei=(e,r=!1)=>null==e?B:!r&&en(e)?e:ev(e)?[...e]:[e],eo=e=>null!==e&&"object"==typeof e,el=Object.prototype,es=Object.getPrototypeOf,eu=e=>null!=e&&es(e)===el,ec=(e,r)=>"function"==typeof e?.[r],ed=e=>"symbol"==typeof e,ef=e=>"function"==typeof e,ev=(e,r=!1)=>!!(e?.[H]&&("object"==typeof e||r)),ep=e=>e instanceof Map,eh=e=>e instanceof Set,eg=(e,r)=>null==e?B:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,em=!1,ey=e=>(em=!0,e),eb=e=>null==e?B:ef(e)?e:r=>r[e],ew=(e,r,t)=>(r??t)!==B?(e=eb(e),r??=0,t??=V,(n,a)=>r--?B:t--?e?e(n,a):n:t):e,ek=e=>e?.filter(L),eE=(e,r,t,n)=>null==e?[]:!r&&en(e)?ek(e):e[H]?function*(e,r){if(null!=e){if(r){r=eb(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),em){em=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===B?r:ew(r,t,n)):eo(e)?function*(e,r){r=eb(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),em){em=!1;break}}}(e,ew(r,t,n)):eE(ef(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),eS=(e,r)=>r&&!en(e)?[...e]:e,eA=(e,r,t,n)=>eE(e,r,t,n),eT=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[H]||n&&eo(r))for(var i of a?eE(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(eE(e,r,a,i),t+1,n,!1),eI=(e,r,t,n)=>{if(r=eb(r),en(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!em;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return em=!1,i}return null!=e?ei(eA(e,r,t,n)):B},ex=(e,r,t,n)=>null!=e?new Set([...eA(e,r,t,n)]):B,eN=(e,r,t=1,n=!1,a,i)=>ei(eT(e,r,t,n,a,i)),eO=(e,r,t)=>null==e?B:ef(r)?eI(er(e)?[e]:e,r)?.join(t??""):er(e)?e:eI(e,e=>!1===e?B:e)?.join(r??""),e$=(...e)=>{var r;return eF(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...ei(e))),r},ej=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,em)){em=!1;break}return a},eC=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,em)){em=!1;break}return t},eM=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,em){em=!1;break}return t},eU=(e,r,...t)=>null==e?B:ev(e)?eI(e,e=>r(e,...t)):r(e,...t),e_=(e,r,t,n)=>{var a;if(null!=e){if(en(e))return ej(e,r,t,n);if(t===B){if(e[H])return eC(e,r);if("object"==typeof e)return eM(e,r)}for(var i of eE(e,r,t,n))null!=i&&(a=i);return a}},eF=e_,eP=async(e,r,t,n)=>{var a;if(null==e)return B;for(var i of eA(e,r,t,n))if(null!=(i=await i)&&(a=i),em){em=!1;break}return a},eq=Object.fromEntries,eR=(e,r,t)=>{if(null==e)return B;if(Y(r)||t){var n={};return eF(e,t?(e,a)=>null!=(e=r(e,a))&&null!=(e[1]=t(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eF(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eq(eI(e,r?(e,t)=>X(r(e,t),1):e=>X(e,1)))},eD=(e,r,t,n,a)=>{var i=()=>ef(t)?t():t;return e_(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},ez=(e,r=e=>null!=e,t=en(e),n,a)=>eS(eE(e,(e,t)=>r(e,t)?e:B,n,a),t),eB=(e,r,t,n)=>{var a;if(null==e)return B;if(r)e=ez(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[H])return Object.keys(e).length}return a=0,e_(e,()=>++a)},eV=(e,...r)=>null==e?B:ee(e)?Math.max(e,...r):eD(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||ee(a)&&a>e?a:e,B,r[2],r[3]),eW=(e,r,t)=>eI(e,eu(e)?e=>e[1]:e=>e,r,t),eJ=e=>!en(e)&&ev(e)?eI(e,ep(e)?e=>e:eh(e)?e=>[e,!0]:(e,r)=>[r,e]):eo(e)?Object.entries(e):B,eG=(e,r,t,n)=>null==e?B:(r=eb(r),e_(e,(e,t)=>!r||(e=r(e,t))?ey(e):B,t,n)),eL=(e,r,t,n)=>null==e?B:en(e)?e[e.length-1]:e_(e,(e,t)=>!r||r(e,t)?e:B,t,n),eH=(e,r,t,n)=>null==e?B:eu(e)&&!r?Object.keys(e).length>0:e.some?.(r??Q)??e_(e,r?(e,t)=>!!r(e,t)&&ey(!0):()=>ey(!0),t,n)??!1,eK=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),eX=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),eY=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=ef(t)?t():t)&&eX(e,r,n),n}},eZ=(e,...r)=>(eF(r,r=>eF(r,([r,t])=>{null!=t&&(eu(e[r])&&eu(t)?eZ(e[r],t):e[r]=t)})),e),eQ=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eF(t,t=>en(t)?e(r,t[0],t[1]):eF(t,([t,n])=>e(r,t,n))),r)},e0=eQ(eX),e1=eQ((e,r,t)=>eX(e,r,ef(t)?t(eY(e,r)):t)),e2=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):eY(e,r)!==e0(e,r,!0),e4=(e,r)=>{if((e??r)!=null){var t=eY(e,r);return ec(e,"delete")?e.delete(r):delete e[r],t}},e6=(e,...r)=>{var t=[],n=!1,a=(e,i,o,l)=>{if(e){var s=r[i];i===r.length-1?en(s)?(n=!0,s.forEach(r=>t.push(e4(e,r)))):t.push(e4(e,s)):(en(s)?(n=!0,s.forEach(r=>a(eY(e,r),i+1,e,r))):a(eY(e,s),i+1,e,s),!eB(e)&&o&&e5(o,l))}};return a(e,0),n?t:t[0]},e5=(e,r)=>{if(e)return en(r)?(en(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>e5(e,r)):en(e)?r<e.length?e.splice(r,1)[0]:void 0:e4(e,r)},e3=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(en(r)){if(eu(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=eI(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...eu(t)&&("get"in t||"value"in t)?t:ef(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},e8=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>eo(t)?en(t)?t.map(r=>en(r)?1===r.length?[r[0],e[r[0]]]:e8(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:e8(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},e9=e=>ef(e)?e():e,e7=(e,r=-1)=>eo(e)?en(e)?r?e.map(e=>e7(e,r-1)):[...e]:eh(e)?new Set(r?eI(e,e=>e7(e,r-1)):e):ep(e)?new Map(r?eI(e,e=>[e[0],e7(e[1],r-1)]):e):r?eR(e,([e,t])=>[e,e7(t,r-1)]):{...e}:e,re=(e,...r)=>e?.push(...r),rr=(e,...r)=>e?.unshift(...r),rt="undefined"!=typeof performance?(e=J)=>e?Math.trunc(rt(W)):performance.timeOrigin+performance.now():Date.now,rn=(e=!0,r=()=>rt())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},ra=(e=0)=>{var r,t;return function n(a,i){if(void 0===a)return!!t;clearTimeout(r),Y(a)?(a&&t?.(),t=void 0):(t=a,r=setTimeout(()=>n(!0),i??e))}},ri=(e,r=0)=>{var t=ef(e)?{frequency:r,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:l=()=>{}}=t;r=t.frequency??0;var s=0,u=rc(!0).resolve(),c=rn(!a),d=c(),f=async e=>!!s&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await D(()=>l(c(),-d+(d=c())),!1,()=>u.resolve())===!1||r<=0||o)&&v(!1),p.busy=!1,!0),v=(e,t=!e)=>(c(e,t),clearInterval(s),p.active=!!(s=e?setInterval(f,r<0?-r:r):0),p),p={active:!1,busy:!1,restart:(e,t)=>(r=e??r,l=t??l,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await f(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class ro{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new rl,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class rl{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===B||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var rs=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),ru=(e,r)=>null==e||isFinite(e)?!e||e<=0?e9(r):new Promise(t=>setTimeout(async()=>t(await e9(r)),e)):C(`Invalid delay ${e}.`),rc=e=>e?new ro:new rl,rd=(...e)=>Promise.race(e.map(e=>ef(e)?e():e)),rf=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rv=(...e)=>(e=ez(e),[()=>eD(e,(e,r)=>r[0]()||e,!1),()=>eD(e,(e,r)=>r[1]()||e,!1)]),rp=()=>{var e,r=new Set;return[(t,n)=>{var a=rf(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rh=(e,r="and")=>X(e,e=>0===(e=ev(e)?eI(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:`${e.slice(0,-1).join(", ")} ${r} ${eL(e)}`),rg=e=>X(e,e=>ev(e)?eI(e,e=>"'"+e+"'"):"'"+e+"'"),rm=e=>(e=Math.log2(e))===(0|e),ry=(e,r,t,n)=>{var a,i,o,l=Object.fromEntries(Object.entries(e).filter(([e,r])=>er(e)&&ee(r)).map(([e,r])=>[e.toLowerCase(),r])),s=Object.entries(l),u=Object.values(l),c=l.any??u.reduce((e,r)=>e|r,0),d=r?{...l,any:c,none:0}:l,f=Object.fromEntries(Object.entries(d).map(([e,r])=>[r,e])),v=(e,t)=>ee(e)?!r&&t?null!=f[e]?e:B:e:er(e)?d[e]??d[e.toLowerCase()]:B,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,B):(e??0)|t,(p=!1,B)):v(e),(e,r)=>null==(e=h(e,!1))?B:r&&(i=f[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=s.filter(([,r])=>r&&e&r&&rm(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?f[e]:B],m=(e,r)=>null==e?B:null==(e=h(o=e,r))?C(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,y=s.filter(([,e])=>!n||(n&e)===e&&rm(e));return e3(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:s,values:u,lookup:g,length:s.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rh(rg(e),r)}`},r&&{pure:y,map:(e,r)=>(e=m(e),y.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rb=(...e)=>{var r=eJ(eR(e,!0)),t=e=>(eo(e)&&(en(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,a=B;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=a)))})),e);return t},rw=(e,r=["|",";",","],t=!0)=>{if(!e)return B;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&eG(r,(e,r,t=n[1].split(e))=>t.length>1?t:B)||(n[1]?[n[1]]:[]),n},rk=(e,r=!0,t)=>null==e?B:rT(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,l,s,u,c,d,f)=>{var v={source:e,scheme:t,urn:t?!n:!n&&B,authority:a,user:i,password:o,host:l??s,port:null!=u?parseInt(u):B,path:c,query:!1===r?d:rE(d,r),fragment:f};return v.path=v.path||(v.authority?v.urn?"":"/":B),v}),rE=(e,r,t=!0)=>null==e?B:eR(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=rw(e,!1===r?[]:!0===r?B:r,t)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==r?[a,o.length>1?o:i]:[a,i]:B,(e,t)=>e?!1!==r?e$(e,t):(e?e+",":"")+t:t),rS=(e,r)=>r&&null!=e?r.test(e):B,rA=(e,r,t)=>rT(e,r,t,!0),rT=(t,n,a,i=!1)=>(t??n)==null?B:a?(e=B,i?(r=[],rT(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rI=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rx=/\z./g,rN=(e,r)=>(r=eO(ex(ez(e,e=>e?.length)),"|"))?RegExp(r,"gu"):rx,rO={},r$=e=>e instanceof RegExp,rj=(e,r=[","," "])=>r$(e)?e:en(e)?rN(eI(e,e=>rj(e,r)?.source)):Y(e)?e?/./g:rx:er(e)?rO[e]??=rT(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rN(eI(rC(n,RegExp(`?<!(?<!\\)\\)[${eO(r,rI,",")}]/`)),e=>e&&`^${eO(rC(e,/(?<!(?<!\\)\\)\*/),e=>rI(rM(e,/\\(.)/g,"$1")),".*")}$`))):B,rC=(e,r)=>e?.split(r)??e,rM=(e,r,t)=>e?.replace(r,t)??e;(T=t||(t={}))[T.Anonymous=0]="Anonymous",T[T.Indirect=1]="Indirect",T[T.Direct=2]="Direct",T[T.Sensitive=3]="Sensitive";var rU=ry(t,!1,"data classification");(I=n||(n={}))[I.None=0]="None",I[I.Necessary=1]="Necessary",I[I.Functionality=2]="Functionality",I[I.Performance=4]="Performance",I[I.Targeting=8]="Targeting",I[I.Security=16]="Security",I[I.Infrastructure=32]="Infrastructure",I[I.Anonymous=49]="Anonymous",I[I.Any=63]="Any",I[I.Server=64]="Server";var r_=ry(n,!0,"data purpose",127),rF=ry(n,!1,"data purpose",0),rP=(e,r)=>((a=e?.metadata)&&(r?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e);(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rq=ry(i,!1,"variable scope");t.Anonymous,n.Necessary;var rR=e=>`'${e.key}' in ${rq.format(e.scope)} scope`,rD={scope:rq,purpose:rF,purposes:r_,classification:rU};rb(rD),(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",ry(o,!1,"variable set status"),(O=l||(l={}))[O.Add=0]="Add",O[O.Min=1]="Min",O[O.Max=2]="Max",O[O.IfMatch=3]="IfMatch",O[O.IfNoneMatch=4]="IfNoneMatch",ry(l,!1,"variable patch type");var rz=e=>!!e?.patch,rB=e=>!!e?.variables,rV=(e,r,t)=>{var n,a=e=>e,i=(t,i=rL)=>q(async()=>(n=a(i(await e(),r)))&&t(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>ez(e,e=>e.status<300)),variables:i(e=>eI(e,rJ)),values:i(e=>eI(e,e=>rJ(e)?.value)),push:()=>(a=e=>(t?.(eI(rW(e))),e),o),value:i(e=>rJ(e[0])?.value),variable:i(e=>rJ(e[0])),result:i(e=>e[0])};return o},rW=e=>e?.map(e=>e?.status<400?e:B),rJ=e=>e?.status<400?e?.current??e:B,rG=e=>e?.status<400||e?.status===404,rL=(e,r,t)=>{var n,a,i=[],l=eI(ei(e),(e,l)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${rR(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[l])||!1!==n(e,a))&&i.push(a),B)));return i.length?C(i.join("\n")):en(e)?l:l?.[0]},rH=e=>e&&"string"==typeof e.type,rK=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),rX=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],rY=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eO(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=rX(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,l,s)=>{var u=o||l||s,c=rX(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),t?.add(rZ(n))),""}),a},rZ=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,rQ=2e3,r0="_t:data",r1=()=>()=>C("Not initialized."),r2=window,r4=document,r6=r4.body,r5=(e,r)=>!!e?.matches(r),r3=V,r8=(e,r,t=(e,r)=>r>=r3)=>{for(var n,a=0,i=W;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==J&&null!=n),J),a-1)!==W&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},r9=(e,r)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Z(e);case"n":return parseFloat(e);case"j":return F(()=>JSON.parse(e),G);case"h":return F(()=>tY(e),G);case"e":return F(()=>tQ?.(e),G);default:return en(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:r9(e,r[0])):void 0}},r7=(e,r,t)=>r9(e?.getAttribute(r),t),te=(e,r,t)=>r8(e,(e,n)=>n(r7(e,r,t))),tr=(e,r)=>r7(e,r)?.trim()?.toLowerCase(),tt=e=>e?.getAttributeNames(),tn=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,ta=e=>null!=e?e.tagName:null,ti=()=>({x:(s=to(W)).x/(r6.offsetWidth-window.innerWidth)||0,y:s.y/(r6.offsetHeight-window.innerHeight)||0}),to=e=>({x:eg(scrollX,e),y:eg(scrollY,e)}),tl=(e,r)=>rM(e,/#.*$/,"")===rM(r,/#.*$/,""),ts=(e,r,t=J)=>(u=tu(e,r))&&z({xpx:u.x,ypx:u.y,x:eg(u.x/r6.offsetWidth,4),y:eg(u.y/r6.offsetHeight,4),pageFolds:t?u.y/window.innerHeight:void 0}),tu=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:c,y:d}=tc(e),{x:c,y:d}):void 0,tc=e=>e?(f=e.getBoundingClientRect(),s=to(W),{x:eg(f.left+s.x),y:eg(f.top+s.y),width:eg(f.width),height:eg(f.height)}):void 0,td=(e,r,t,n={capture:!0,passive:!0})=>en(r)?rv(...eI(r,r=>td(e,r,t,n))):rf(t,t=>e.addEventListener(r,t,n),t=>e.addEventListener(r,t,n)),tf=e=>{var{host:r,scheme:t}=rk(e,!1);return{host:r,scheme:t}},tv=()=>({...s=to(J),width:window.innerWidth,height:window.innerHeight,totalWidth:r6.offsetWidth,totalHeight:r6.offsetHeight}),tp=new WeakMap,th=e=>tp.get(e),tg=(e,r=W)=>(r?"--track-":"track-")+e,tm=(e,r,t,n,a,i)=>r?.[1]&&eF(tt(e),o=>r[0][o]??=(i=W,er(n=eF(r[1],([r,t,n],a)=>rS(o,r)&&(i=void 0,!t||r5(e,t))&&ey(n??o)))&&(!(a=e.getAttribute(o))||Z(a))&&rY(a,rM(n,/\-/g,":"),t),i)),ty=()=>{},tb=(e,r)=>{if(v===(v=tI.tags))return ty(e,r);var t=e=>e?r$(e)?[[e]]:ev(e)?eN(e,t):[eu(e)?[rj(e.match),e.selector,e.prefix]:[rj(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eW(v))]];(ty=(e,r)=>tm(e,n,r))(e,r)},tw=(e,r)=>eO(e$(tn(e,tg(r,J)),tn(e,tg("base-"+r,J)))," "),tk={},tE=(e,r,t=tw(e,"attributes"))=>{t&&tm(e,tk[t]??=[{},rA(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[rj(t||n),,r])],r),rY(tw(e,"tags"),void 0,r)},tS=(e,r,t=W,n)=>(t?r8(e,(e,t)=>t(tS(e,r,W)),ef(t)?t:void 0):eO(e$(r7(e,tg(r)),tn(e,tg(r,J)))," "))??(n&&(p=th(e))&&n(p))??null,tA=(e,r,t=W,n)=>""===(h=tS(e,r,t,n))||(null==h?h:Z(h)),tT=(e,r,t,n)=>e?(tE(e,n??=new Set),r8(e,e=>{tb(e,n),rY(eI(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tI={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},tx=rC(""+r4.currentScript.src,"#"),tN=rC(""+(tx[1]||""),";"),tO=tx[0],t$=tN[1]||rk(tO,!1)?.host,tj=e=>!!(t$&&rk(e,!1)?.host?.endsWith(t$)===J),tC=(...e)=>rM(eO(e),/(^(?=\?))|(^\.(?=\/))/,tO.split("?")[0]),tM=tC("?","var");tC("?","mnt"),tC("?","usr");var tU=[],t_=[],tF=(e,r=0)=>e.charCodeAt(r),tP=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tU[t_[r]=e.charCodeAt(0)]=r);var tq=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(t_[(16515072&r)>>18],t_[(258048&r)>>12],t_[(4032&r)>>6],t_[63&r]);return a.length+=n-t,tP(a)},tR=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tU[tF(e,t++)]<<2|(r=tU[tF(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tU[tF(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tU[tF(e,t++)]));return i},tD={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tz=(e=256)=>e*Math.random()|0,tB=e=>{var r,t,n,a,i,o=0n,l=0,s=0n,u=[],c=0,d=0,f=0,v=0,p=[];for(f=0;f<e?.length;v+=p[f]=e.charCodeAt(f++));var h=e?()=>{u=[...p],d=255&(c=v),f=-1}:()=>{},g=e=>(d=255&(c+=-u[f=(f+1)%u.length]+(u[f]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tz()));for(t=0,i[n++]=g(d^16*tz(16)+a);r>t;i[n++]=g(d^e[t++]));for(;a--;)i[n++]=tz();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((d^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=d^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(l=Y(r)?64:r,h(),[o,s]=tD[l],t=0;t<e.length;o=BigInt.asUintN(l,(o^BigInt(d^g(e[t++])))*s));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tV={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return a.subarray(0,i);function l(e,a){var i,o,f,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),d(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(f=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var l=e.charCodeAt(o);if(l<128){i[a++]=l;continue}if(l<2048)i[a++]=l>>6|192;else{if(l>55295&&l<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var s=e.charCodeAt(o);if(s<56320||s>57343)throw Error("UTF-8 encode: second surrogate character 0x"+s.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&s),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+f):f<=255?c([217,f]):f<=65535?c([218,f>>>8,f]):c([219,f>>>24,f>>>16,f>>>8,f]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),d(r)}})(e):Array.isArray(e)?s(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(l(t),l(n))}})(e);break;default:if(!a&&r&&r.invalidTypeReplacement)"function"==typeof r.invalidTypeReplacement?l(r.invalidTypeReplacement(e),!0):l(r.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function s(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)l(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function d(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return s(-1,1);if(197===r)return s(-1,2);if(198===r)return s(-1,4);if(199===r)return f(-1,1);if(200===r)return f(-1,2);if(201===r)return f(-1,4);if(202===r)return l(4);if(203===r)return l(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return f(1);if(213===r)return f(2);if(214===r)return f(4);if(215===r)return f(8);if(216===r)return f(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function l(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function s(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function d(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function f(e,r){e<0&&(e=o(r));var t=o(1),a=s(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={serialize:r,deserialize:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tV);var{deserialize:tW,serialize:tJ}=($=tV.exports)&&$.__esModule&&Object.prototype.hasOwnProperty.call($,"default")?$.default:$,tG="$ref",tL=e=>{var r,t,n,a=(e,r,t=e[r],n=o(t))=>((t!==n||ed(r))&&(e[r]=n,i(()=>e[r]=t)),t),i=e=>(r??=[]).push(e),o=e=>null==e||ef(e)||ed(e)?null:eo(e)?e.toJSON&&e!==(e=e.toJSON())?o(e):null!=(n=(t??=new Map).get(e))?(e[tG]||(e[tG]=n,i(()=>delete e[tG])),{[tG]:n}):(eu(e)?(t.set(e,t.size+1),Object.keys(e).forEach(r=>(a(e,r)===B||ed(r))&&delete e[r])):ev(e)&&(!en(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?a(e,t):(e[t]=null,i(()=>delete e[t]))),e):e,l=tJ(o(e));return r?.forEach(e=>e()),l},tH=e=>{var r,t,n=e=>eo(e)?e[tG]&&(t=(r??=[])[e[tG]])?t:(e[tG]&&(r[e[tG]]=e,delete e[tG]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return null!=e?n(tW(e)):B},tK=(e,r=!1,t=!0)=>{var n=(e,r=!1,t=!0)=>{var n=(e,t)=>ee(e)&&!0===t?e:l(e=er(e)?new Uint8Array(eI(e.length,r=>255&e.charCodeAt(r))):r?JSON.stringify(e):tL(e),t),a=e=>null==e?B:F(()=>JSON.parse(e,B));if(r)return[e=>JSON.stringify(e),a,(e,r)=>n(e,r)];var[i,o,l]=tB(e);return[e=>tq(i(tL(e))),e=>null!=e?t&&(e?.[0]==="{"||e?.[0]==="[")?a(e):tH(o(tR(e))):null,(e,r)=>n(e,r)]};return e?n(e,r,t):(g??=[n(null,!1),n(null,!0)])[+r]};tK(),tK(null,!0);var[tX,tY]=tK(),[tZ,tQ]=[r1,r1],[t0,t1]=rp(),t2=e=>{tQ===r1&&([tZ,tQ]=tK(e),t1(tZ=tK(null,!0)[0],tQ))},t4=e=>r=>t6(e,r),t6=(...e)=>{var r=e.shift();console.error(er(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[t5,t3]=rp(),[t8,t9]=rp(),t7=e=>nr!==(nr=e)&&t3(nr=!1,na(!0,!0)),ne=e=>nt!==(nt=!!e&&"visible"===document.visibilityState)&&t9(nt,!e,nn(!0,!0));t5(ne);var nr=!0,nt=!1,nn=rn(!1),na=rn(!1);td(window,["pagehide","freeze"],()=>t7(!1)),td(window,["pageshow","resume"],()=>t7(!0)),td(document,"visibilitychange",()=>(ne(!0),nt&&t7(!0))),t3(nr,na(!0,!0));var ni=!1,no=rn(!1),[nl,ns]=rp(),nu=ri({callback:()=>ni&&ns(ni=!1,no(!1)),frequency:2e4,once:!0,paused:!0}),nc=()=>!ni&&(ns(ni=!0,no(!0)),nu.restart());td(window,"focus",nc),td(window,"blur",()=>nu.trigger()),td(document.body,["keydown","pointerdown","pointermove","scroll"],nc),nc(),(j=m||(m={}))[j.View=-3]="View",j[j.Tab=-2]="Tab",j[j.Shared=-1]="Shared";var nd=ry(m,!1,"local variable scope"),nf=e=>nd.tryParse(e)??rq(e),nv=e=>!!nd.tryParse(e?.scope),np=rb({scope:nd},rD),nh=e=>null==e?void 0:e.source?nh(e.source):`${nf(e.scope)}\0${e.key}\0${e.targetId??""}`,ng=e=>{var r=e.split("\0");return{scope:+r[0],key:r[1],targetId:r[2]}},nm=0,ny=void 0,nb=()=>(ny??r1())+"_"+nw(),nw=()=>++nm,nk=e=>crypto.getRandomValues(e),nE=()=>rM("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nk(new Uint8Array(1))[0]&15>>e/4).toString(16)),nS=void 0,nA={id:ny,heartbeat:rt()},nT={knownTabs:{[ny]:nA},variables:new Map},[nI,nx]=rp(),nN=r1,nO=e=>nS.get(nh(e)),n$=(...e)=>nj(e.map(e=>(e.timestamp=rt(),e.expires=3e3,e))),nj=e=>{var r=eI(e,e=>e&&[nh(e),e]);if(r?.length){e0(nS,r);var t=ez(r,e=>e[1].scope>m.Tab);t.length&&(e0(nT.variables,r),nN({type:"patch",payload:eR(t)})),nx("variables",eR(r),!0)}};t0((e,r)=>{t5(t=>{if(t){var n=r(sessionStorage.getItem(r0));ny=n?.[0]??rt().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nS=new Map(e$(ez(nS,([,e])=>e.scope===m.View),eI(n?.[1],e=>[nh(e),e]))),sessionStorage.removeItem(r0)}else sessionStorage.setItem(r0,e([ny,ez(nS,([,e])=>e.scope!==m.View)]))},!0),nN=(r,t)=>{e&&(localStorage.setItem(r0,e([ny,r,t])),localStorage.removeItem(r0))},td(window,"storage",e=>{if(e.key===r0){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===ny)){var[a,{type:i,payload:o}]=n;"query"===i?t.active||nN({type:"set",payload:nT},a):"set"===i&&t.active?(e0(nT,o),t.trigger()):"patch"===i?(e0(nT.variables,o),e0(nS,o),nx("variables",o,!1)):"tab"===i&&(e0(nT.knownTabs,a,o),o&&nx("tab",o,!1))}}});var t=ri(()=>nx("ready",nT,!0),-25),n=ri({callback(){var e=rt()-1e4;eF(nT?.knownTabs,([r,t])=>t[0]<e&&e6(nT.knownTabs,r)),nA.heartbeat=rt(),nN({type:"tab",payload:nA})},frequency:5e3,paused:!0}),a=e=>{nN({type:"tab",payload:e?nA:void 0}),e?(t.restart(),nN({type:"query"})):t.toggle(!1),n.toggle(e)};t5(e=>a(e),!0)},!0);var[nC,nM]=rp(),[nU,n_]=rp(),nF=((e,{timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var a=()=>(t?tQ:tY)(localStorage.getItem("rq")),i=()=>localStorage.setItem("rq",(t?tZ:tX)([ny,rt()+r]));return async(t,o,l=null!=o?1:n)=>{for(;l--;){var s=a();if((!s||s[1]<rt())&&(i(),a()?.[0]===ny)){var u=t(),c=setInterval(i,r/2);return await D(u,!0,()=>clearInterval(c))}var d=rc(),[f]=td(window,"storage",r=>{r.key!==e||r.newValue||d.resolve()});await rd(ru(o??r),d),f()}null==o&&C(e+" could not be acquired.")}})("rq"),nP=ri(()=>{if(b!==(b=tI.pushCookie)){if(!b)return;y=RegExp(rI(b)+"=([^;]*)")}var e=tQ?.(rT(document.cookie,y)?.[1]);rB(e)&&n_(e)},1e3),nq=0,nR=(e=1e3)=>{var r=()=>{r=G,--nq||(nP.restart(1e3),clearTimeout(0))};return nq++||nP.restart(100),e>0&&setTimeout(r,e),r()},nD=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,l=t=>{var l=ef(r)?r?.(a,t):r;return!1!==l&&(null!=l&&!0!==l&&(a=l),nM(e,a,t,e=>(o=a===B,a=e)),!o&&(i=(n?tZ:JSON.stringify)(a)))};if(!t)return await nF(()=>eP(1,async r=>{if(!l(r))return ey();var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(t.status>=400)return 3===r?ey(C(`Invalid response: ${await t.text()}`)):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await ru((1+r)*200));var o=await t.text(),s=o?.length?(n?tQ:JSON.parse)?.(o):B;return null!=s&&n_(s),ey(s)}));l(0)&&(nR(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||C("Beacon send failed."))},nz=["scope","key","targetId","version"],nB=[...nz,"created","modified","classification","purposes","tags","readonly","value"],nV=[...nz,"init","purpose","refresh"];[...nB];var nW=new Map,nJ=(e,r)=>{var a=ri(async()=>{var e=eI(nW,([e,r])=>({...ng(e),result:[...r]}));e.length&&await c.get(...e)},3e3),i=(e,r)=>eU(r,r=>eY(nW,e,()=>new Set).add(r)),l=e=>{if(rG(e)){var r,t=nh(e),n=rJ(e);eF(e5(nW,t),e=>{r=!1,e?.(n,nO(n),(e=!0)=>r=e),r&&i(t,e)})}};t5((e,r)=>a.toggle(e,e&&r>=3e3),!0);var s=new Map,u=(e,r)=>e0(s,e,Y(r)?r?void 0:0:r),c={get:(...t)=>rV(async()=>{var n=[],a=eI(t,(e,r)=>[e,r]),s=[],c=(await nD(e,()=>!!(a=eI(a,([e,r])=>{if(e){var t=nh(e);i(t,e.result);var a=nO(t);if(e.init&&u(t,e.cache),!e.refresh&&a?.expires<rt())re(n,[{...a,status:o.Success},r]);else if(!nv(e))return[e8(e,nV),r];else if(eu(e.init)){var l={...np(e),status:o.Created,...e.init};null!=l.value&&(re(s,d(l)),re(n,[l,r]))}}})).length&&{variables:{get:eI(a,0)},deviceSessionId:r?.deviceSessionId})).variables?.get??[];return re(n,...eI(c,(e,r)=>e&&[e,a[r][1]])),s.length&&nj(s),n.map(([e])=>(l(e),e))},eI(t,e=>e?.error)),set:(...a)=>rV(async()=>{var i=[],s=[],c=eI(a,(e,r)=>{if(e){var a=nh(e),l=nO(a);if(u(a,e.cache),nv(e)){if(null!=e.patch)return C("Local patching is not supported.");var c={value:e.value,classification:t.Anonymous,purposes:n.Necessary,scope:nd(e.scope),key:e.key};return s[r]={status:l?o.Success:o.Created,source:e,current:c},void re(i,d(c))}return rz(e)||e?.version!==void 0||(e.version=l?.version,e.force??=!!e.version),[e,r]}}),f=c.length>0?[]:_((await nD(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:r?.deviceSessionId})).variables?.set,"No result.");return i.length&&nj(i),eF(f,(e,r)=>{var[t,n]=c[r];e.source=t,l(s[n]=e)}),s},eI(a,e=>e?.error))},d=(e,r=rt())=>({...e8(e,nB),timestamp:r,expires:r+(eY(s,nh(e))??3e3)});return nU(({variables:e})=>{if(e){var r=rt(),t=e$(eI(e.get,e=>rJ(e)),eI(e.set,e=>rJ(e)));t?.length&&nj(eU(t,d,r))}}),c},nG=(e,r)=>{if(!eu(r))return e;var t,n={};return eu(e)&&eF(e,([e,a])=>n[e]!==r[e]&&(n[e]=eu(a)?nG(a,r[e]):ee(a)&&ee(t=r[e])?a-t:a)),n},nL=(e,r,t=rQ)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.queued?eZ(r,{type:e.type+"_patch",patchTargetId:e.clientId}):C("Source event not queued."),l=async(t,a=!1)=>{if(t=eI(ei(t),e=>eZ(r.applyEventExtensions(e),{metadata:{queued:!0}})),!a){t.length&&re(n,...t);return}n.length&&rr(t,...n.splice(0)),t.length&&await nD(e,{events:t.map(e=>(eZ(e,{metadata:{posted:!0}}),rP(e,!0))),deviceSessionId:r?.deviceSessionId})};return t>0&&ri(()=>l([],!0),t),t8((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=eI(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&l(e$(n.splice(0),a),!0)}}),{post:l,postPatch:(e,r,t)=>l(o(e,r),t),registerEventPatchSource(e,r){var t=!1,n=()=>t=!0;return a.set(e,e7(e)),i.set(e,()=>{var i=o(e,r(a.get(e),n));return!i||a&&M(i,a)?[void 0,t]:(i&&a.set(e,e7(i)),[i,t])}),n}}},nH=Symbol(),nK=e=>{var r=new IntersectionObserver(e=>eF(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[nH]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=ez(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==J))&&eB(a)){var a,i,o,l,s=W,u=0,c=ra(tI.impressionThreshold),d=ae();t[nH]=(r,n,f)=>{d(r=f>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),s!==(s=r)&&(s?c(()=>{++u,o||re(e,o=ez(eI(a,e=>(e.track?.impressions||tA(t,"impressions",J,e=>e.track?.impressions))&&z({type:"impression",pos:ts(t),viewport:tv(),timeOffset:at(),impressions:u,...av(t,J)})||null))),o?.length&&(l=eI(o,r=>e.events.registerEventPatchSource(r,e=>nG({relatedEventId:r.clientId,duration:d(),impressions:u},e))))}):(eF(l,e=>e()),c(!1)))},r.observe(t)}}},nX=()=>{var e=r2?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??r2.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:r2.devicePixelRatio,width:r,height:t,landscape:a}}},nY=e=>re(e,z({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:eI(navigator.languages,(e,r,t=e.split("-"))=>z({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...nX()})),nZ=(e,r="A"===ta(e)&&r7(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),nQ=(e,r=ta(e),t=tA(e,"button"))=>t!==W&&(U(r,"A","BUTTON")||"INPUT"===r&&U(tr(e,"type"),"button","submit")||t===J),n0=()=>w?.clientId,n1={scope:"shared",key:"referrer"},n2=(e,r)=>{A.variables.set({...n1,value:[n0(),e]}),r&&A.variables.get({scope:n1.scope,key:n1.key,result(t,n,a){t?a():n?.value?.[1]===e&&r()}})},n4=rn(),n6=rn(),n5=rn(),n3=1,n8=()=>n6(),[n9,n7]=rp(),ae=e=>{var r=rn(e,n4),t=rn(e,n6),n=rn(e,n5),a=rn(e,()=>n3);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),interactiveTime:n(e,i),activations:a(e,i)})},ar=ae(),at=()=>ar(),[an,aa]=rp(),ai=new WeakSet,ao=document.getElementsByTagName("iframe"),al=e=>(null==e||(e===J||""===e)&&(e="add"),er(e)&&U(e,"add","remove","update","clear")?{action:e}:eo(e)?e:void 0);function as(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var au=e=>tT(e,void 0,e=>eI(ei(eY(tp,e)?.tags))),ac=e=>e?.component||e?.content,ad=e=>tT(e,r=>r!==e&&!!ac(eY(tp,r)),e=>(E=eY(tp,e),(E=eY(tp,e))&&eN(e$(E.component,E.content,E),"tags"))),af=(e,r)=>r?e:{...e,rect:void 0,content:(S=e.content)&&eI(S,e=>({...e,rect:void 0}))},av=(e,r=W)=>{var t,n,a,i=[],o=[],l=0;return r8(e,e=>{var n=eY(tp,e);if(n){if(ac(n)){var a=ez(ei(n.component),e=>0===l||!r&&(1===l&&e.track?.secondary!==J||e.track?.promote));t=eH(a,e=>e.track?.region)&&tc(e)||void 0;var s=ad(e);n.content&&rr(i,...eI(n.content,e=>({...e,rect:t,...s}))),a?.length&&(rr(o,...eI(a,e=>(l=eV(l,e.track?.secondary?1:2),af({...e,content:i,rect:t,...s},!!t)))),i=[])}var u=n.area||tS(e,"area");u&&rr(o,...eI(u))}}),i.length&&re(o,af({id:"",rect:t,content:i})),eF(o,e=>{er(e)?re(n??=[],e):(e.area??=eO(n,"/"),rr(a??=[],e))}),a||n?{components:a,area:eO(n,"/")}:void 0},ap=Symbol(),ah=[{id:"context",setup(e){ri(()=>eF(ao,e=>e2(ai,e)&&aa(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&t===(t=""+location.href)||(r=n=a?.value),r&&w&&!w.definition&&(w.definition=r,w.metadata?.posted&&e.events.postPatch(w,{definition:r}),r=void 0),o())});var r,t,n,a=nO({scope:"tab",key:"index"})?.value??0,i=nO({scope:"tab",key:"index"})?.value;null==i&&(i=nO({scope:"shared",key:"index"})?.value??0,n$({scope:m.Shared,key:"index",value:i+1}));var o=null,l=(t=W)=>{if(!tl(""+o,o=location.href)||t){var{source:n,scheme:l,host:s}=rk(location.href+"",!0);w={type:"view",timestamp:rt(),clientId:nb(),tab:ny,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:s},tabIndex:i,viewport:tv(),duration:ar(void 0,!0)},0===i&&(w.firstTab=J),0===i&&0===a&&(w.landingPage=J);var u=rE(location.href);if(eI(["source","medium","campaign","term","content"],(e,r)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&eI(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=rM(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=nO(n1)?.value;c&&tj(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...n1,value:void 0}))}var c=document.referrer||null;c&&!tj(c)&&(w.externalReferrer={href:c,domain:tf(c)}),w.definition=r,r=void 0,e.events.post(w),e.events.registerEventPatchSource(w,e=>nG({duration:at()},e)),n7(w)}};return nl(e=>n5(e)),t8(e=>{e?(n6(J),++n3):(n6(W),n5(W))}),td(window,"popstate",()=>(k="back-forward",l())),eI(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),k="navigate",l()}}),l(),{processCommand:r=>ay(r)&&(re(e,r.username?{type:"login",username:r.username}:{type:"logout"}),J),decorate(e){w&&!rK(e)&&(e.view=w.clientId)}}}},{id:"components",setup(e){var r=nK(e),t=e=>null==e?void 0:{...e,component:ei(e.component),content:ei(e.content),tags:ei(e.tags)},n=({boundary:e,...n})=>{e1(tp,e,e=>t("add"in n?{...e,component:e$(e?.component,n.component),content:e$(e?.content,n.content),area:n?.area??e?.area,tags:e$(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,eY(tp,e))};return{decorate(e){eF(e.components,e=>e5(e,"track"))},processCommand:e=>ak(e)?(n(e),J):ax(e)?(eI(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!eY(n,a))for(var i=[];null!=r7(a,e);){e2(n,a);var o=rC(r7(a,e),"|");r7(a,e,null);for(var l=0;l<o.length;l++){var s=o[l];if(""!==s){var u="-"===s?-1:parseInt(et(s)??"",36);if(u<0){i.length+=u;continue}if(0===l&&(i.length=0),isNaN(u)&&/^["\[{]/.test(s))for(var c="";l<o.length;l++)try{s=JSON.parse(c+=o[l]);break}catch(e){}u>=0&&r[u]&&(s=r[u]),re(i,s)}}re(t,...eI(i,e=>({add:J,...e,boundary:a})));var d=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=d}}),t})(e.scan.attribute,e.scan.components),n),J):W}}},{id:"navigation",setup(e){var r=r=>{td(r,["click","contextmenu","auxclick"],r=>{var t,n,a,i,o,l=null,s=W;if(r8(r.target,e=>{var r;l??=nQ(e)?e:null,s=s||"NAV"===ta(e),i??=tA(e,"clicks",J,e=>e.track?.clicks)??((r=ei(th(e)?.component))&&eH(r,e=>e.track?.clicks!==W)),o??=tA(e,"region",J,e=>e.track?.region)??((r=th(e)?.component)&&eH(r,e=>e.track?.region))}),l){var u,c=av(l),d=au(l);i??=!s;var f={...(o??=J)?{pos:ts(l,r),viewport:tv()}:null,...(t=r.target,n=l,r8(t??n,e=>"IMG"===ta(e)||e===n?(a={element:{tagName:e.tagName,text:r7(e,"title")||r7(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},W):J),a),...c,...d,timing:at()};if(nZ(l)){var v=l.hostname!==location.hostname,{host:p,scheme:h,source:g}=rk(l.href,!1);if(l.host===location.host&&l.pathname===location.pathname&&l.search===location.search){if("#"===l.hash)return;l.hash!==location.hash&&re(e,z({type:"anchor_navigation",anchor:l.hash,...f}));return}var m=z({clientId:nb(),type:"navigation",href:v?l.href:g,external:v,domain:{host:p,scheme:h},self:J,anchor:l.hash,...f});r.button<=1&&(1===r.button||r.ctrlKey||r.shiftKey||r.altKey||r7(l,"target")!==window.name?(n2(m.clientId),m.self=W,re(e,m)):tl(location.href,l.href)||(m.exit=m.external,n2(m.clientId)));return}var y=(r8(r.target,(e,r)=>!!(u??=al(th(e)?.cart??tS(e,"cart")))&&!u.item&&(u.item=eL(th(e)?.content))&&r(u)),as(u));(y||i)&&re(e,y?z({type:"cart_updated",...f,...y}):z({type:"component_click",...f}))}})};r(document),an(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=to(J);n9(()=>rs(()=>(r={},t=to(J)),250)),td(window,"scroll",()=>{var n=to(),a=ti();if(n.y>=t.y){var i=[];!r.fold&&n.y>=t.y+200&&(r.fold=J,re(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=J,re(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=J,re(i,"page-end"));var o=eI(i,e=>z({type:"scroll",scrollType:e,offset:a}));o.length&&re(e,o)}})}},{id:"cart",setup:e=>({processCommand(r){if(am(r)){var t=r.cart;return"clear"===t?re(e,{type:"cart_updated",action:"clear"}):(t=as(t))&&re(e,{...t,type:"cart_updated"}),J}return aI(r)?(re(e,{type:"order",...r.order}),J):W}})},{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var l=te(i,tg("ref"))||"track_ref",s=()=>i.isConnected&&tc(i).width,u=eY(r,i,()=>{var r,t=new Map,n={type:"form",name:te(i,tg("form-name"))||r7(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,e=>nG(n,e));var l=()=>{o(),r[3]>=2&&(n.completed=3===r[3]||!s()),e.events.postPatch(n,{...a,totalTime:rt(J)-r[4]}),r[3]=1},u=ra();return td(i,"submit",()=>{a=av(i),r[3]=3,u(()=>{i.isConnected&&tc(i).width>0?(r[3]=2,u()):l()},750)}),r=[n,t,i,0,rt(J),1]});return eY(u[1],n)||eI(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===l||tA(e,"ref"))&&(e.value||(e.value=nE()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:rM(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[ap]:t(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(l-(l=n8())),u=-(s-(s=rt(J))),c=r[ap];(r[ap]=t(n))!==c&&(r.fillOrder??=a[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=J,a[3]=2,eF(e.fields,([e,t])=>t.lastField=e===r.name||void 0)),r.activeTime+=o,r.totalTime+=u,e.activeTime+=o,i=null}},l=0,s=0,u=e=>{e&&td(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>{t&&(i=t,"focusin"===e.type?(s=rt(J),l=n8()):o())})};u(document),an(e=>e.contentDocument&&u)}}],ag=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),am=ag("cart"),ay=ag("username"),ab=ag("tagAttributes"),aw=ag("disable"),ak=ag("boundary"),aE=ag("extension"),aS=ag(J,"flush"),aA=ag("get"),aT=ag("listener"),aI=ag("order"),ax=ag("scan"),aN=ag("set"),aO=e=>"function"==typeof e,a$=e=>{if(A)return A;er(e)&&(e=tY(e)),e0(tI,e),t2(e5(tI,"clientKey"));var r=e5(tI,"apiKey"),t=r2[tI.name]??[];if(!en(t)){C(`The global variable for the tracker "${tI.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...r)=>{var t=J;a=ez(a,n=>F(()=>(n[e]?.(...r,{tracker:A,unsubscribe:()=>t=W}),t),t4(n)))},o=[],l={applyEventExtensions(e){e.clientId??=nb(),e.timestamp??=rt(),f=J;var r=W;return eI(n,([,t])=>{(r||t.decorate?.(e)===W)&&(r=J)}),r?void 0:e}},s=nJ(tM,l),u=nL(tM,l),c=null,d=0,f=W,v=W;return e3(r2,[{[tI.name]:[A=Object.freeze({id:"tracker_"+nb(),events:u,variables:s,push(...e){if(!c&&r){if(e[0]!==r)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var t=W;if((e=ez(eN(e,e=>er(e)?tY(e):e),e=>{if(!e)return W;if(ab(e))tI.tags=e0({},tI.tags,e.tagAttributes);else if(aw(e))return tI.disabled=e.disable,W;else if(aS(e))return t=J,W;else if(aO(e))return e(A),W;return v||aT(e)||aE(e)?J:(o.push(e),W)})).length||t){var l=eK(e,e=>aE(e)?-100:aT(e)?-50:aN(e)?-10:rH(e)?90:0);if(!(c&&c.splice(f?d+1:c.length,0,...l))){for(d=0,c=l;d<c.length;d++)c[d]&&F(()=>{var e,r=c[d];if(i("command",r),f=W,rH(r))u.post(r,!1);else if(aA(r))s.get(...ei(r.get));else if(aN(r))s.set(...ei(r.set));else if(aT(r))re(a,r.listener);else if(aE(r))(e=F(()=>r.extension.setup(A),e=>t6(r.extension.id,e)))&&(re(n,[r.priority??100,e]),eK(n,([e])=>e));else if(aO(r))r(A);else{var t=W;for(var[,e]of n)if(t=e.processCommand?.(r)??W)break;t||t6("invalid-command",r)}},e=>t6(A,"internal-error",e));c=null,t&&u.post([],!0)}}}},__isTracker:J})]}]),nI(async(e,r,n,a)=>{if("ready"===e){var i=_(await s.get({scope:"session",key:"info",cache:V}).value,"No session data.");l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(nY(A),i.hasUserAgent=!0),v=!0,o.length&&re(A,o),a(),re(A,...eI(ah,e=>({extension:e})),...t,{set:{scope:"local",key:"loaded",value:!0}})}},!0),A};r2[".tail.js.init"]=e=>{e(a$)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
