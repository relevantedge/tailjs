(()=>{"use strict";var e,t,r,n,a,i,o,s,l,u,d,v,p,h,g,m,y,b,w,k,S,T,E,P=(e,t=e=>Error(e))=>{throw ef(e=ts(e))?t(e):e},R=(e,t,r=-1)=>{if(e===t||null==(e??t))return!0;if(eg(e)&&eg(t)&&e.length===t.length){var a,n=0;for(a in e){if(e[a]!==t[a]&&!R(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},z=(e,t,...r)=>e===t||0<r.length&&r.some(t=>z(e,t)),D=(e,t)=>null!=e?e:P(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),W=(e,t=!0,r)=>{try{return e()}catch(e){return eS(t)?ep(e=t(e))?P(e):e:ea(t)?console.error(t?P(e):e):t}finally{r?.()}},B=e=>{var t,r=()=>r.initialized||t?t:(t=ts(e)).then?t=t.then(e=>(r.initialized=!0,r.resolved=t=e)):(r.initialized=!0,r.resolved=t);return r},L=async(e,t=!0,r)=>{try{var n=await ts(e);return ev(t)?t[0]?.(n):n}catch(e){if(!ea(t)){if(ev(t)){if(t[1])return t[1](e);throw e}var a=await t?.(e);if(a instanceof Error)throw a;return a}if(t)throw e;console.error(e)}finally{await r?.()}},K=e=>e,G=void 0,H=Number.MAX_SAFE_INTEGER,X=!1,Y=!0,Z=()=>{},Q=e=>e,ee=e=>null!=e,et=Symbol.iterator,er=(e,t)=>(r,n=!0)=>e(r)||t&&n&&null!=r&&null!=(r=t(r))?r:G,en=(e,t)=>eS(t)?e!==G?t(e):G:e?.[t]!==G?e:G,ea=e=>"boolean"==typeof e,ei=er(ea,e=>0!=e&&(1==e||"false"!==e&&("true"===e||G))),eo=e=>!!e,eu=Number.isSafeInteger,ec=e=>"number"==typeof e,ef=e=>"string"==typeof e,ed=er(ef,e=>e?.toString()),ev=Array.isArray,ep=e=>e instanceof Error,eh=(e,t=!1)=>null==e?G:!t&&ev(e)?e:eT(e)?[...e]:[e],eg=e=>null!==e&&"object"==typeof e,em=Object.prototype,ey=Object.getPrototypeOf,eb=e=>null!=e&&ey(e)===em,ew=(e,t)=>"function"==typeof e?.[t],ek=e=>"symbol"==typeof e,eS=e=>"function"==typeof e,eT=(e,t=!1)=>!(!e?.[et]||"object"!=typeof e&&!t),eE=e=>e instanceof Map,eI=e=>e instanceof Set,eA=(e,t)=>null==e?G:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,ex=!1,eN=e=>(ex=!0,e),eO=e=>null==e?G:eS(e)?e:t=>t[e],eC=(e,t,r)=>(t??r)!==G?(e=eO(e),t??=0,r??=H,(n,a)=>t--?G:r--?e?e(n,a):n:r):e,ej=e=>e?.filter(ee),e$=(e,t,r,n)=>null==e?[]:!t&&ev(e)?ej(e):e[et]?function*(e,t){if(null!=e)if(t){t=eO(t);var r=0;for(n of e)if(null!=(n=t(n,r++))&&(yield n),ex){ex=!1;break}}else for(var n of e)null!=n&&(yield n)}(e,r===G?t:eC(t,r,n)):eg(e)?function*(e,t){t=eO(t);var n,r=0;for(n in e){var a=[n,e[n]];if(null!=(a=t?t(a,r++):a)&&(yield a),ex){ex=!1;break}}}(e,eC(t,r,n)):e$(eS(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eM=(e,t,r,n)=>e$(e,t,r,n),eU=(e,t,r=1,n=!1,a,i)=>function*e(t,r,n,a){if(null!=t)if(t[et]||n&&eg(t))for(var i of a?e$(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}(e$(e,t,a,i),r+1,n,!1),eF=(e,t,r,n)=>{if(t=eO(t),ev(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!ex;r++){var o=e[r];null!=(t?o=t(o,a++):o)&&i.push(o)}return ex=!1,i}return null!=e?eh(eM(e,t,r,n)):G},eP=(e,t,r=1,n=!1,a,i)=>eh(eU(e,t,r,n,a,i)),eR=(...e)=>{var t;return eJ(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...eh(e))),t},eB=(e,t,...r)=>null==e?G:eT(e)?eF(e,e=>t(e,...r)):t(e,...r),eV=(e,t,r,n)=>{var a;if(null!=e){if(ev(e))return((e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,ex)){ex=!1;break}return a})(e,t,r,n);if(r===G){if(e[et])return((e,t)=>{var r,a,n=0;for(a of e)if(null!=a&&(r=t(a,n++)??r,ex)){ex=!1;break}return r})(e,t);if("object"==typeof e)return((e,t)=>{var r,a,n=0;for(a in e)if(r=t([a,e[a]],n++)??r,ex){ex=!1;break}return r})(e,t)}for(var i of e$(e,t,r,n))null!=i&&(a=i);return a}},eJ=eV,eK=Object.fromEntries,eG=(e,t,r)=>{var n;return null==e?G:ea(t)||r?(n={},eJ(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eJ(e,t?e=>null!=e?.[1]&&((n[e[0]]??=[]).push(e[1]),n):e=>null!=e?.[1]&&(n[e[0]]=e[1],n))),n):eK(eF(e,t?(e,r)=>en(t(e,r),1):e=>en(e,1)))},eX=(e,t=e=>null!=e,r=ev(e),n,a)=>(e=>r&&!ev(e)?[...e]:e)(e$(e,(e,r)=>t(e,r)?e:G,n,a)),eY=(e,t,r,n)=>{var a;if(null==e)return G;if(t)e=eX(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[et])return Object.keys(e).length}return a=0,eV(e,()=>++a)??0},eZ=(e,...t)=>null==e?G:ec(e)?Math.max(e,...t):((e,t,r,n,a)=>{var i=()=>eS(r)?r():r;return eV(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()})(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||ec(a)&&e<a?a:e,G,t[2],t[3]),e4=(e,t,r,n)=>null==e?G:eb(e)&&!t?0<Object.keys(e).length:e.some?.(t??eo)??eV(e,t?(e,r)=>!!t(e,r)&&eN(!0):()=>eN(!0),r,n)??!1,e6=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),e5=(e,t,r)=>(e.constructor===Object||ev(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),e3=(e,t,r)=>{var n;if(e)return e.constructor===Object&&null==r?e[t]:(void 0===(n=e.get?e.get(t):e.has?e.has(t):e[t])&&null!=r&&null!=(n=eS(r)?r():r)&&e5(e,t,n),n)},e8=(e,...t)=>(eJ(t,t=>eJ(t,([t,r])=>{null!=r&&(eb(e[t])&&eb(r)?e8(e[t],r):e[t]=r)})),e),er=e=>(t,r,n,a)=>{if(t)return null!=n?e(t,r,n,a):(eJ(r,r=>ev(r)?e(t,r[0],r[1]):eJ(r,([r,n])=>e(t,r,n))),t)},e7=er(e5),te=er((e,t,r)=>e5(e,t,eS(r)?r(e3(e,t)):r)),tt=(e,t)=>e instanceof Set||e instanceof WeakSet?!e.has(t)&&(e.add(t),!0):e3(e,t)!==e7(e,t,!0),tr=(e,t)=>{var r;if(null!=(e??t))return r=e3(e,t),ew(e,"delete")?e.delete(t):delete e[t],r},ta=(e,t)=>{if(e)return ev(t)?(ev(e)&&1<e.length?t.sort((e,t)=>t-e):t).map(t=>ta(e,t)):ev(e)?t<e.length?e.splice(t,1)[0]:void 0:tr(e,t)},to=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>eg(r)?ev(r)?r.map(t=>ev(t)?1===t.length?[t[0],e[t[0]]]:to(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:to(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},ts=e=>eS(e)?e():e,tl=(e,t=-1)=>ev(e)?t?e.map(e=>tl(e,t-1)):[...e]:eb(e)?t?eG(e,([e,r])=>[e,tl(r,t-1)]):{...e}:eI(e)?new Set(t?eF(e,e=>tl(e,t-1)):e):eE(e)?new Map(t?eF(e,e=>[e[0],tl(e[1],t-1)]):e):e,tu=(e,...t)=>e?.push(...t),tc=(e,...t)=>e?.unshift(...t),tf=(e,t)=>{var r,a,i;if(e)return eb(t)?(i={},eb(e)&&(eJ(e,([e,o])=>{if(o!==t[e]){if(eb(r=o)){if(!(o=tf(o,t[e])))return;[o,r]=o}i[e]=o,(a??=tl(t))[e]=r}}),a)?[i,a]:void 0):[e,e]},td="undefined"!=typeof performance?(e=Y)=>e?Math.trunc(td(X)):performance.timeOrigin+performance.now():Date.now,tv=(e=!0,t=()=>td())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},th=(e,t=0)=>{var e=eS(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{},raf:l}=e,u=(t=e.frequency??0,0),c=(new tg).resolve(),f=tv(!a),d=f(),v=async e=>{if(!u||!n&&c.pending&&!0!==e)return!1;if((m.busy=!0)!==e)for(;c.pending;)await c;return e||c.reset(),(!1===await L(()=>s(f(),-d+(d=f())),!1,()=>!e&&c.resolve())||t<=0||o)&&g(!1),!(m.busy=!1)},p=()=>u=setTimeout(()=>l?requestAnimationFrame(h):h(),t<0?-t:t),h=()=>{m.active&&v(),m.active&&p()},g=(e,t=!e)=>(f(e,t),clearTimeout(u),m.active=!!(u=e?p():0),m),m={active:!1,busy:!1,restart:(e,r)=>(t=e??t,s=r??s,g(!0,!0)),toggle:(e,t)=>e!==m.active?e?t?(g(!0),m.trigger(),m):g(!0):g(!1):m,trigger:async e=>await v(e)&&(g(m.active),!0)};return m.toggle(!a,i)};class tg{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tm,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class tm{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(this.pending)return this.pending=!1,this[t?"error":"value"]=r===G||r,e(r),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var tA,tb=(e,t)=>null==e||isFinite(e)?!e||e<=0?ts(t):new Promise(r=>setTimeout(async()=>r(await ts(t)),e)):P(`Invalid delay ${e}.`),tS=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},er=()=>{var e,t=new Set;return[(r,n)=>{var a=tS(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tE=(e,t=["and",", "])=>e?1===(e=eF(e)).length?e[0]:ev(t)?[e.slice(0,-1).join(t[1]??", ")," ",t[0]," ",e[e.length-1]].join(""):e.join(t??", "):G,tI=(e,t,r)=>null==e?G:ev(t)?null==(t=t[0])?G:t+" "+tI(e,t,r):null==t?G:1===t?e:r??e+"s",tx=(e,t,r)=>r?(tA&&tu(r,"[",t,"m"),ev(e)?tu(r,...e):tu(r,e),tA&&tu(r,"[m"),r):tx(e,t,[]).join(""),tO=(e,t)=>e&&(e.length>t?e.slice(0,-1)+"â€¦":e),tC=(e,t,r)=>null==e?G:eS(t)?tE(eF(ef(e)?[e]:e,t),r??""):ef(e)?e:tE(eF(e,e=>!1===e?G:e),t??""),t$=e=>(e=Math.log2(e))===(0|e),t_=(e,t,r,n)=>{var a,i,o,e=Object.fromEntries(Object.entries(e).filter(([e,t])=>ef(e)&&ec(t)).map(([e,t])=>[e.toLowerCase(),t])),l=Object.entries(e),u=Object.values(e),c=e.any??u.reduce((e,t)=>e|t,0),f=t?{...e,any:c,none:0}:e,d=Object.fromEntries(Object.entries(f).map(([e,t])=>[t,e])),v=(e,r)=>eu(e)?!t&&r?null!=d[e]?e:G:Number.isSafeInteger(e)?e:G:ef(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),r):G,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,G):(e??0)|r,(p=!1,G)):v(e),(e,t)=>null==(e=h(e,!1))?G:t&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,t])=>t&&e&t&&t$(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:G],m=(e,t)=>null==e?G:null==(e=h(o=e,t))?P(TypeError(JSON.stringify(o)+` is not a valid ${r} value.`)):e,y=l.filter(([,e])=>!n||(n&e)===e&&t$(e));return((e,t)=>{var r=(t,n)=>{var a;if(t){if(ev(t)){if(eb(t[0]))return void t.splice(1).forEach(e=>r(e,t[0]));a=t}else a=eF(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...eb(r)&&("get"in r||"value"in r)?r:eS(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e})(e=>m(e),[[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} `+tE(eF(eh(e),e=>(e=>null==e?G:"'"+e+"'")(e)),[t])},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}]])},tM=(...e)=>{var t=(e=>!ev(e)&&eT(e)?eF(e,eE(e)?e=>e:eI(e)?e=>[e,!0]:(e,t)=>[t,e]):eg(e)?Object.entries(e):G)(eG(e,!0)),r=e=>(eg(e)&&(ev(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=G;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tU=Symbol(),tF=(e,t=["|",";",","],r=!0)=>{var n;return e?((n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim()))[1]??="",n[2]=n[1]&&t?.length&&((e,t)=>null==e?G:(t=eO(t),eV(e,(e,r)=>!t||(e=t(e,r))?eN(e):G,void 0,void 0)))(t,(e,t,r=n[1].split(e))=>1<r.length?r:G)||(n[1]?[n[1]]:[]),n):G},tq=(e,t=!0,r)=>null==e?G:tW(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,s,l,u,c,f,d)=>{e={source:e,scheme:r,urn:r?!n:!n&&G,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):G,path:c,query:!1===t?f:tP(f,t),fragment:d};return e.path=e.path||(e.authority?e.urn?"":"/":G),e}),tP=(e,t,r=!0)=>tR(e,"&",t,r),tR=(e,t,r,n=!0)=>{var a=[],e=null==e?G:eG(e?.match(/(?:^.*?\?|^)([^#]*)/)?.[1]?.split(t),(e,t,[i,o,s]=tF(e,!1===r?[]:!0===r?G:r,n)??[],l)=>(l=null!=(i=i?.replace(/\[\]$/,""))?!1!==r?[i,1<s.length?s:o]:[i,o]:G,a.push(l),l),(e,t)=>e?!1!==r?eR(e,t):(e?e+",":"")+t:t);return e&&(e[tU]=a),e},tW=(r,n,a,i=!1)=>null==(r??n)?G:a?(e=G,i?(t=[],tW(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),tB=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tV=/\z./g,tJ=(e,t)=>(t=tC((e=>null!=e?new Set([...eM(e,void 0,void 0,void 0)]):G)(eX(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tV,tL={},tK=e=>e instanceof RegExp,tG=(e,t=[","," "])=>tK(e)?e:ev(e)?tJ(eF(e,e=>tG(e,t)?.source)):ea(e)?e?/./g:tV:ef(e)?tL[e]??=tW(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tJ(eF(tH(n,RegExp(`(?<!(?<!\\\\)\\\\)[${tC(t,tB)}]`)),e=>e&&`^${tC(tH(e,/(?<!(?<!\\)\\)\*/),e=>tB(tX(e,/\\(.)/g,"$1")),".*")}$`))):G,tH=(e,t)=>e?.split(t)??e,tX=(e,t,r)=>e?.replace(t,r)??e,tY=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return e7(r,{push(n,a){for(var i,o=[n,a],s=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,l=0;l<r.length;l++){var u=r[l];if(e(o[1],u[0])<0)return s(r.splice(l,0,o));if(e(o[0],u[1])<=0){if(e(o[0],u[0])<0&&(i=u[0]=o[0]),0<e(o[1],u[1])&&(i=u[1]=o[1]),!(r[l+1]?.[0]<u[1]))return s(null!=i);i=o=r.splice(l--,1)[0]}}return s(o&&(r[r.length]=o))},width:0})},tQ=()=>()=>P("Not initialized."),t0=window,t1=document,t2=t1.body,t6=((e=>tA=e)(!!t0.chrome),H),t5=(e,t,r=(e,t)=>t6<=t)=>{for(var n,a=0,i=X;1===e?.nodeType&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==Y&&null!=n),Y),a-1)!==X&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==t1&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},t3=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||ei(e);case"n":return parseFloat(e);case"j":return W(()=>JSON.parse(e),Z);case"h":return W(()=>np(e),Z);case"e":return W(()=>ng?.(e),Z);default:return ev(t)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:t3(e,t[0])):void 0}},t8=(e,t,r)=>t3(e?.getAttribute(t),r),t9=(e,t,r)=>t5(e,(e,n)=>n(t8(e,t,r))),t7=(e,t)=>t8(e,t)?.trim()?.toLowerCase(),rt=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,rr=e=>null!=e?e.tagName:null,rn=()=>({x:(r=ra(X)).x/(t2.offsetWidth-window.innerWidth)||0,y:r.y/(t2.offsetHeight-window.innerHeight)||0}),ra=e=>({x:eA(scrollX,e),y:eA(scrollY,e)}),ri=(e,t)=>tX(e,/#.*$/,"")===tX(t,/#.*$/,""),ro=(e,t,r=Y)=>(n=rs(e,t))&&K({xpx:n.x,ypx:n.y,x:eA(n.x/t2.offsetWidth,4),y:eA(n.y/t2.offsetHeight,4),pageFolds:r?n.y/window.innerHeight:void 0}),rs=(e,t)=>t?.pointerType&&null!=t?.pageY?{x:t.pageX,y:t.pageY}:e?({x:a,y:i}=rl(e),{x:a,y:i}):void 0,rl=e=>e?(o=e.getBoundingClientRect(),r=ra(X),{x:eA(o.left+r.x),y:eA(o.top+r.y),width:eA(o.width),height:eA(o.height)}):void 0,ru=(e,t,r,n={capture:!0,passive:!0})=>(t=eh(t),tS(r,r=>eJ(t,t=>e.addEventListener(t,r,n)),r=>eJ(t,t=>e.removeEventListener(t,r,n)))),rf=()=>({...r=ra(Y),width:window.innerWidth,height:window.innerHeight,totalWidth:t2.offsetWidth,totalHeight:t2.offsetHeight}),rd=((I=s=s||{})[I.Anonymous=0]="Anonymous",I[I.Indirect=1]="Indirect",I[I.Direct=2]="Direct",I[I.Sensitive=3]="Sensitive",t_(s,!1,"data classification")),rv=(e,t)=>rd.parse(e?.classification??e?.level)===rd.parse(t?.classification??t?.level)&&rh.parse(e?.purposes??e?.purposes)===rh.parse(t?.purposes??t?.purposes),rp=(e,t)=>null==e?void 0:ec(e.classification)&&ec(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:rd.parse(e.classification??e.level??t?.classification??0),purposes:rh.parse(e.purposes??e.purpose??t?.purposes??l.Necessary)},rh=((I=l=l||{})[I.None=0]="None",I[I.Necessary=1]="Necessary",I[I.Functionality=2]="Functionality",I[I.Performance=4]="Performance",I[I.Targeting=8]="Targeting",I[I.Security=16]="Security",I[I.Infrastructure=32]="Infrastructure",I[I.Any_Anonymous=49]="Any_Anonymous",I[I.Any=63]="Any",I[I.Server=2048]="Server",I[I.Server_Write=4096]="Server_Write",t_(l,!0,"data purpose",2111)),I=t_(l,!1,"data purpose",0),rm=(e,t)=>(!(u=e?.metadata)||t&&(delete u.posted,delete u.queued,Object.entries(u).length)||delete e.metadata,e),ry=e=>!!e?.patchTargetId,rb=((x=c={})[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",t_(c,!(x[x.User=4]="User"),"variable scope")),c=(s.Anonymous,l.Necessary,{scope:rb,purpose:I,purposes:rh,classification:rd}),rS=(tM(c),e=>e?.filter(ee).sort((e,t)=>e.scope===t.scope?e.key.localeCompare(t.key,"en"):e.scope-t.scope)),rT=((I=x={})[I.Add=0]="Add",I[I.Min=1]="Min",I[I.Max=2]="Max",I[I.IfMatch=3]="IfMatch",t_(x,!(I[I.IfNoneMatch=4]="IfNoneMatch"),"variable patch type"),(x=d=d||{})[x.Success=200]="Success",x[x.Created=201]="Created",x[x.Unchanged=304]="Unchanged",x[x.Denied=403]="Denied",x[x.NotFound=404]="NotFound",x[x.ReadOnly=405]="ReadOnly",x[x.Conflict=409]="Conflict",x[x.Unsupported=501]="Unsupported",x[x.Invalid=400]="Invalid",x[x.Error=500]="Error",t_(d,!1,"variable set status"),(e,t,r)=>{var n,a=e(),i=e=>e,e=(e,r=rx)=>(e=>{var t={initialized:!0,then:(e=>{var t=B(e);return(e,r)=>L(t,[e,r])})(()=>(t.initialized=!0,ts(e)))};return t})(async()=>(n=i(r(await a,t)))&&e(n)),s={then:e(e=>e).then,all:e(e=>e,e=>e),changed:e(e=>eX(e,e=>e.status<300)),variables:e(e=>eF(e,rI)),values:e(e=>eF(e,e=>rI(e)?.value)),push:()=>(i=e=>(r?.(eF((e=>e?.map(e=>e?.status<400?e:G))(e))),e),s),value:e(e=>rI(e[0])?.value),variable:e(e=>rI(e[0])),result:e(e=>e[0])};return s}),rI=e=>rA(e)?e.current??e:G,rA=(e,t=!1)=>t?e?.status<300:e?.status<400||404===e?.status,rx=(e,t,r)=>{var n,a,i=[],o=eF(eh(e),(e,o)=>e&&(e.status<400||!r&&404===e.status?e:(a=(e=>`'${e.key}' in ${rb.format(e.scope)} scope`)(e.source??e)+" could not be "+(404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because `+(409===e.status?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:403===e.status?e.error??"the operation was denied.":400===e.status?e.error??"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?"of an unexpected error: "+e.error:"of an unknown reason.")),null!=(n=t?.[o])&&!1===n(e,a)||i.push(a),G)));return i.length?P(i.join("\n")):ev(e)?o:o?.[0]},rO=e=>e&&"string"==typeof e.type,rC=(e=>t=>t?.type&&e.some(e=>e===t?.type))(["view"]),rj=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,r$=(e,t)=>t&&(!(p=e.get(v=t.tag+(t.value??"")))||(p.score??1)<(t.score??1))&&e.set(v,t),r_=(e,t="",r=new Map)=>{if(e)return eT(e)?eJ(e,e=>r_(e,t,r)):ef(e)?tW(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,a,i,o,s,l)=>{n={tag:(n?rj(n)+"::":"")+t+rj(a),value:rj(i??o??s)};l&&10!==parseFloat(l)&&(n.score=parseFloat(l)/10),r$(r,n)}):r$(r,e),r},rM=new WeakMap,rU=e=>rM.get(e),rF=(e,t=X)=>(t?"--track-":"track-")+e,rq=(e,t,r,n,a,i)=>t?.[1]&&eJ(e?.getAttributeNames(),o=>t[0][o]??=(i=X,!ef(n=eJ(t[1],([t,r,n],a)=>(t=>t&&null!=o?t.test(o):G)(t)&&(i=void 0,!r||(e=>!!e?.matches(r))(e))&&eN(n??o)))||(a=e.getAttribute(o))&&!ei(a)||r_(a,tX(n,/\-/g,":"),r),i)),rP=()=>{},rR=(e,t)=>{if(h===(h=rL.tags))return rP(e,t);var r=e=>e?tK(e)?[[e]]:eT(e)?eP(e,r):[eb(e)?[tG(e.match),e.selector,e.prefix]:[tG(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eF(h,eb(h)?e=>e[1]:e=>e,void 0,void 0))]];(rP=(e,t)=>rq(e,n,t))(e,t)},rz=(e,t)=>tC(eR(rt(e,rF(t,Y)),rt(e,rF("base-"+t,Y)))," "),rD={},rW=(e,t,r=rz(e,"attributes"))=>{r&&rq(e,rD[r]??=[{},(e=>tW(e,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tG(r||n),,t],!0))(r)],t),r_(rz(e,"tags"),void 0,t)},rB=(e,t,r=X,n)=>(r?t5(e,(e,r)=>r(rB(e,t,X)),eS(r)?r:void 0):tC(eR(t8(e,rF(t)),rt(e,rF(t,Y)))," "))??(n&&(g=rU(e))&&n(g))??null,rV=(e,t,r=X,n)=>""===(m=rB(e,t,r,n))||(null==m?m:ei(m)),rJ=(e,t,r,n)=>e&&(rW(e,n??=new Map),t5(e,e=>{rR(e,n),r_(r?.(e),void 0,n)},t),n.size)?{tags:[...n.values()]}:{},rL={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rK=[],rG=[],rH=(e,t=0)=>e.charCodeAt(t),rY=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>rK[rG[t]=e.charCodeAt(0)]=t),e=>{for(var t,r=0,n=e.length,a=[];r<n;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(rG[(16515072&t)>>18],rG[(258048&t)>>12],rG[(4032&t)>>6],rG[63&t]);return a.length+=n-r,(e=>String.fromCharCode(...e))(a)}),rQ={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},r0=(e=256)=>e*Math.random()|0,r2={exports:{}},{deserialize:r4,serialize:r6}=((()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var d,o;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{var t;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?u(e):0<e&&e<=255?c([204,e]):-128<=e&&e<=127?c([208,e]):0<e&&e<=65535?c([205,e>>>8,e]):-32768<=e&&e<=32767?c([209,e>>>8,e]):0<e&&e<=4294967295?c([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?c([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?c([211,(t=e/4294967296)>>>24,t>>>16,t>>>8,t,(t=e%4294967296)>>>24,t>>>16,t>>>8,t]):-0x8000000000000000<=e&&e<=0x8000000000000000?(u(211),f(e)):c(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(r=new ArrayBuffer(8))).setFloat64(0,e),u(203),c(new Uint8Array(r)))})(e);break;case"string":(d=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var s=e.charCodeAt(o);if(s<128)i[a++]=s;else{if(s<2048)i[a++]=s>>6|192;else{if(55295<s&&s<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||57343<l)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");i[a++]=(s=65536+((1023&s)<<10)+(1023&l))>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):c(d<=255?[217,d]:d<=65535?[218,d>>>8,d]:[219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r,t=e.getTime()/1e3;0===e.getMilliseconds()&&0<=t&&t<4294967296?c([214,255,t>>>24,t>>>16,t>>>8,t]):0<=t&&t<17179869184?c([215,255,(r=1e6*e.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t]):(c([199,12,255,(r=1e6*e.getMilliseconds())>>>24,r>>>16,r>>>8,r]),f(t))})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((o=(d=e).length)<=255?c([196,o]):c(o<=65535?[197,o>>>8,o]:[198,o>>>24,o>>>16,o>>>8,o]),c(d)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l:e=>{var r,t=0;for(r in e)void 0!==e[r]&&t++;for(r in t<=15?u(128+t):c(t<=65535?[222,t>>>8,t]:[223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(s(r),s(n))}})(e);break;default:if(a||!t||!t.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof t.invalidTypeReplacement?s(t.invalidTypeReplacement(e),!0):s(t.invalidTypeReplacement,!0)}}function l(e){var t=e.length;t<=15?u(144+t):c(t<=65535?[220,t>>>8,t]:[221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;r<t;r++)s(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function f(e){var t,e=0<=e?(t=e/4294967296,e%4294967296):(t=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));c([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function r(e,t){var r,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(0<=t&&t<=127)return t;if(128<=t&&t<=143)return u(t-128);if(144<=t&&t<=159)return c(t-144);if(160<=t&&t<=191)return f(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return l(-1,1);if(197===t)return l(-1,2);if(198===t)return l(-1,4);if(199===t)return d(-1,1);if(200===t)return d(-1,2);if(201===t)return d(-1,4);if(202===t)return s(4);if(203===t)return s(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return d(1);if(213===t)return d(2);if(214===t)return d(4);if(215===t)return d(8);if(216===t)return d(16);if(217===t)return f(-1,1);if(218===t)return f(-1,2);if(219===t)return f(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(224<=t&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var i,r=0,a=!0;0<t--;)a?(r+=127&(i=e[n++]),128&i&&(r-=128),a=!1):r=(r*=256)+e[n++];return r}function o(t){for(var r=0;0<t--;)r=256*r+e[n++];return r}function s(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return n+=t,4===t?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function l(t,r){t<0&&(t=o(r));r=e.subarray(n,n+t);return n+=t,r}function u(e,t){e<0&&(e=o(t));for(var r={};0<e--;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];0<e--;)r.push(a());return r}function f(t,r){t<0&&(t=o(r));r=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;n<r;){var i=e[n++];if(127<i)if(191<i&&i<224){if(r<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(223<i&&i<240){if(r<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<i&&i<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(r<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(i<=65535)a+=String.fromCharCode(i);else{if(!(i<=1114111))throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320)}}return a})(e,r,t)}function d(e,t){e<0&&(e=o(t));t=o(1),e=l(e);return 255===t?(e=>{var r,t;if(4===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*t);if(8===e.length)return r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*t+r/1e6);if(12===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,t=i(8),new Date(1e3*t+r/1e6);throw Error("Invalid data length for a date value.")})(e):{type:t,data:e}}}var n={serialize:t,deserialize:r,encode:t,decode:r};r2.exports=n})(),(I=r2.exports)&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I),r5="$ref",r3=(e,t,r)=>ek(e)?G:r?t!==G:null===t||t,r8=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var a,i,o,s=(e,t,n=e[t],a=r3(t,n,r)?u(n):G)=>(n!==a&&(a!==G||ev(e)?e[t]=a:delete e[t],l(()=>e[t]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||eS(e)||ek(e))return G;if(eg(e)){if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[r5]||(e[r5]=o,l(()=>delete e[r5])),{[r5]:o};if(eb(e))for(var t in(i??=new Map).set(e,i.size+1),e)s(e,t);else!eT(e)||e instanceof Uint8Array||(!ev(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?s(e,r):(e[r]=null,l(()=>delete e[r])))}return e};return W(()=>t?r6(u(e)??null):W(()=>JSON.stringify(e,G,n?2:0),()=>JSON.stringify(u(e),G,n?2:0)),!0,()=>a?.forEach(e=>e()))},r9=e=>{var t,r,n=e=>eg(e)?e[r5]&&(r=(t??=[])[e[r5]])?r:(e[r5]&&delete(t[e[r5]]=e)[r5],Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(ef(e)?JSON.parse(e):null!=e?W(()=>r4(e),()=>(console.error("Invalid message received.",e),G)):e)},r7=(e,t={})=>{var r=(e,{json:t=!1,...r})=>{var a,i,o,n=(e,n)=>ec(e)&&!0===n?e:o(e=ef(e)?new Uint8Array(eF(e.length,t=>255&e.charCodeAt(t))):t?W(()=>JSON.stringify(e),()=>JSON.stringify(r8(e,!1,r))):r8(e,!0,r),n);return t?[e=>r8(e,!1,r),e=>null==e?G:W(()=>r9(e),G),(e,t)=>n(e,t)]:([a,i,o]=(e=>{for(var t,r,n,a,i,s,o=0n,l=0n,u=[],c=0,f=0,d=0,v=0,p=[],d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(r0()));for(r=0,i[n++]=g(f^16*r0(16)+a);r<t;i[n++]=g(f^e[r++]));for(;a--;)i[n++]=r0();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((f^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);n<t;i[n++]=f^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(s=ea(t)?64:t,h(),[o,l]=rQ[s],r=0;r<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[r++])))*l));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]})(e),[(e,t)=>(t?Q:rY)(a(r8(e,!0,r))),e=>null!=e?r9(i(e instanceof Uint8Array?e:(e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);r<a;)i[n++]=rK[rH(e,r++)]<<2|(t=rK[rH(e,r++)])>>4,r<a&&(i[n++]=(15&t)<<4|(t=rK[rH(e,r++)])>>2,r<a)&&(i[n++]=(3&t)<<6|rK[rH(e,r++)]);return i})(e))):null,(e,t)=>n(e,t)])};if(!e){var n=+(t.json??0);if(n&&!1!==t.prettify)return(y??=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[n]}return r(e,t)},[ne,,]=(r7(),r7(null,{json:!0,prettify:!0})),x=tH(""+t1.currentScript.src,"#"),I=tH(""+(x[1]||""),";"),na=x[0],ni=I[1]||tq(na,!1)?.host,no=e=>!(!ni||tq(e,!1)?.host?.endsWith(ni)!==Y),x=(...e)=>tX(tC(e),/(^(?=\?))|(^\.(?=\/))/,na.split("?")[0]),nl=x("?","var"),nu=x("?","mnt"),nc=(x("?","usr"),Symbol()),nf=Symbol(),nd=(e,t,r=Y,n=X)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tx("tail.js: ","90;3"))+t);r=e?.[nf];null!=(e=r?e[nc]:e)&&console.log(eg(e)?tx(ne(e),"94"):eS(e)?""+e:e),r&&r.forEach(([e,t,r])=>nd(e,t,r,!0)),t&&console.groupEnd()},[nv,np]=r7(),[nh,ng]=[tQ,tQ],[I,ny]=er(),nk=(...e)=>{var t=e.shift();console.error(ef(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[nS,nT]=er(),[nE,nI]=er(),nA=e=>nN!==(nN=e)&&nT(nN=!1,nj(!0,!0)),nx=e=>nO!==(nO=!!e&&"visible"===document.visibilityState)&&nI(nO,!e,nC(!0,!0)),nN=(nS(nx),!0),nO=!1,nC=tv(!1),nj=tv(!1),n$=(ru(window,["pagehide","freeze"],()=>nA(!1)),ru(window,["pageshow","resume"],()=>nA(!0)),ru(document,"visibilitychange",()=>(nx(!0),nO&&nA(!0))),nT(nN,nj(!0,!0)),!1),n_=tv(!1),[,nU]=er(),nF=th({callback:()=>n$&&nU(n$=!1,n_(!1)),frequency:2e4,once:!0,paused:!0}),x=()=>!n$&&(nU(n$=!0,n_(!0)),nF.restart()),nP=(ru(window,["focus","scroll"],x),ru(window,"blur",()=>nF.trigger()),ru(document.body,["keydown","pointerdown","pointermove","scroll"],x),x(),()=>n_()),nR=((x=b=b||{})[x.View=-3]="View",x[x.Tab=-2]="Tab",x[x.Shared=-1]="Shared",t_(b,!1,"local variable scope")),nD=e=>nR.format(e)??rb.format(e),nW=e=>!!nR.tryParse(e?.scope),nB=tM({scope:nR},c),nV=e=>null==e?void 0:ef(e)?e:e.source?nV(e.source):`${(e=>nR.tryParse(e)??rb(e))(e.scope)} ${e.key} `+(e.targetId??""),nJ=e=>{e=e.split("\0");return{scope:+e[0],key:e[1],targetId:e[2]}},nL=0,nK=void 0,nG=()=>(nK??tQ())+"_"+nH(),nH=()=>(td(!0)-(parseInt(nK.slice(0,-2),36)||0)).toString(36)+"_"+(++nL).toString(36),nZ={},nQ={id:nK,heartbeat:td()},n0={knownTabs:{[nK]:nQ},variables:{}},[n1,n2]=er(),[n4,n6]=er(),n5=tQ,n3=e=>nZ[nV(e)],n8=(...e)=>n7(e.map(e=>(e.cache=[td(),3e3],nB(e)))),n9=e=>eF(e,e=>e&&[e,nZ[nV(e)]]),n7=e=>{var t=eF(e,e=>e&&[nV(e),e]);t?.length&&(e=n9(e),e7(nZ,t),(t=eX(t,e=>e[1].scope>b.Tab)).length&&(e7(n0.variables,t),n5({type:"patch",payload:eG(t)})),n6(e,nZ,!0))},[,at]=(I((e,t)=>{nS(r=>{r?(r=t(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),nK=r?.[0]??td(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nZ=eG(eR(eX(nZ,([,e])=>e.scope===b.View),eF(r?.[1],e=>[nV(e),e])))):sessionStorage.setItem("_tail:state",e([nK,eF(nZ,([,e])=>e.scope!==b.View?e:void 0)]))},!0),n5=(t,r)=>{e&&(localStorage.setItem("_tail:state",e([nK,t,r])),localStorage.removeItem("_tail:state"))},ru(window,"storage",e=>{var i,o,s;"_tail:state"!==e.key||!(e=t?.(e.newValue))||e[2]&&e[2]!==nK||([e,{type:i,payload:o}]=e,"query"===i?r.active||n5({type:"set",payload:n0},e):"set"===i&&r.active?(e7(n0,o),e7(nZ,o.variables),r.trigger()):"patch"===i?(s=n9(eF(o,1)),e7(n0.variables,o),e7(nZ,o),n6(s,nZ,!1)):"tab"===i&&(e7(n0.knownTabs,e,o),o)&&n2("tab",o,!1))});var r=th(()=>n2("ready",n0,!0),-25),n=th({callback(){var e=td()-1e4;eJ(n0?.knownTabs,([t,r])=>r[0]<e&&((e,t)=>{var r=[],n=!1,a=(e,i,o,s)=>{var l;e&&(l=t[i],i===t.length-1?ev(l)?(n=!0,l.forEach(t=>r.push(tr(e,t)))):r.push(tr(e,l)):(ev(l)?(n=!0,l.forEach(t=>a(e3(e,t),i+1,e,t))):a(e3(e,l),i+1,e,l),!eY(e)&&o&&ta(o,s)))};return a(e,0),n?r:r[0]})(n0.knownTabs,[t])),nQ.heartbeat=td(),n5({type:"tab",payload:nQ})},frequency:5e3,paused:!0});nS(e=>(e=>{n5({type:"tab",payload:e?nQ:void 0}),e?(r.restart(),n5({type:"query"})):r.toggle(!1),n.toggle(e)})(e),!0)},!0),er()),[ar,an]=er(),aa=(({timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?ng:np)(localStorage.getItem("_tail:rq")),i=0,o=()=>localStorage.setItem("_tail:rq",(r?nh:nv)([nK,td()+t]));return async(r,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<td())&&(o(),a()?.[0]===nK))return 0<t&&(i=setInterval(()=>o(),t/2)),L(r,!0,()=>{clearInterval(i),localStorage.removeItem("_tail:rq")});var c=new tm,[u]=ru(window,"storage",t=>{"_tail:rq"!==t.key||t.newValue||c.resolve()});e=[tb(s??t),c],await Promise.race(e.map(e=>eS(e)?e():e)),u()}var e;null==s&&P("_tail:rq could not be acquired.")}})(),ai=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=r=>{var s=eS(t)?t?.(a,r):t;return!1!==s&&(at(e,a=null!=s&&!0!==s?s:a,r,e=>(o=a===G,a=e)),!o)&&(i=n?nh(a,!0):JSON.stringify(a))};if(!r)return aa(()=>(async t=>{var a,i;for(i of eM(1,t,void 0,void 0))if(null!=(i=await i)&&(a=i),ex){ex=!1;break}return a})(async t=>{var r;return s(t)?400<=(r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i})).status?0===t?eN(P("Invalid response: "+await r.text())):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tb(200*(1+t))):(null!=(r=(t=n?new Uint8Array(await r.arrayBuffer()):await r.text())?.length?(n?ng:JSON.parse)?.(t):G)&&an(r),eN(r)):eN()}));s(0)&&!navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))&&P("Beacon send failed.")},x=["scope","key","targetId","version"],as=[...x,"created","modified","classification","purposes","tags","readonly","value"],al=[...x,"init","purpose","refresh"],au=[...as,"value","force","patch"],ac=new Map,af=(e,t)=>{var r=th(async()=>{var e=eF(ac,([e,t])=>({...nJ(e),result:[...t]}));e.length&&await u.get(...e)},3e3),n=(e,t)=>t&&eB(t,t=>e3(ac,e,()=>new Set).add(t)),i=(nS((e,t)=>r.toggle(e,e&&3e3<=t),!0),n4(e=>eJ(e,([e,t])=>((e,t)=>{var r,a,i;e&&(a=nV(e),!(i=ta(ac,a))?.size||e?.purposes===t?.purposes&&e?.classification==t?.classification&&R(e?.value,t?.value)||eJ(i,i=>{r=!1,i?.(e,t,(e=!0)=>r=e),r&&n(a,i)}))})(e,t))),new Map),o=(e,t)=>e7(i,e,ea(t)?t?void 0:0:t),u={get:(...r)=>rT(async()=>{r[0]&&!ef(r[0])||(a=r[0],r=r.slice(1)),t?.validateKey(a);var i=[],s=eF(r,(e,t)=>[e,t]),l=[],a=(await ai(e,()=>!!(s=eF(s,([e,t])=>{if(e){var r=nV(e),a=(n(r,e.result),n3(r)),r=(e.init&&o(r,e.cache),e.purposes);if((r??-1)&(a?.purposes??-1))if(!e.refresh&&a?.[1]<td())tu(i,[{...a,status:d.Success},t]);else{if(!nW(e))return[to(e,al),t];eb(e.init)&&null!=(a={...nB(e),status:d.Created,...e.init}).value&&(tu(l,c(a)),tu(i,[a,t]))}else tu(i,[{...e,status:d.Denied,error:"No consent for "+rh.logFormat(r)},t])}})).length&&{variables:{get:eF(s,0)},deviceSessionId:t?.deviceSessionId}))?.variables?.get??[];return tu(i,...eF(a,(e,t)=>e&&[e,s[t][1]])),l.length&&n7(l),i.map(([e])=>e)},eF(r,e=>e?.error)),set:(...r)=>rT(async()=>{r[0]&&!ef(r[0])||(n=r[0],r=r.slice(1)),t?.validateKey(n);var a=[],i=[],u=eF(r,(e,t)=>{var n,r;if(e)return r=nV(e),n=n3(r),o(r,e.cache),nW(e)?null!=e.patch?P("Local patching is not supported."):(r={value:e.value,classification:s.Anonymous,purposes:l.Necessary,scope:nR(e.scope),key:e.key},i[t]={status:n?d.Success:d.Created,source:e,current:r},void tu(a,c(r))):(null==e.patch&&void 0===e?.version&&(e.version=n?.version,e.force??=!!e.version),[to(e,au),t])}),n=u.length?D((await ai(e,{variables:{set:u.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result."):[];return a.length&&n7(a),eJ(n,(e,t)=>{var[t,n]=u[t];(e.source=t).result?.(e),i[n]=e}),i},eF(r,e=>e?.error))},c=(e,t=td())=>({...to(e,as),cache:[t,t+(ta(i,nV(e))??3e3)]});return ar(({variables:e})=>{var t;e&&(t=td(),(e=eR(eF(e.get,e=>rI(e)),eF(e.set,e=>rI(e))))?.length)&&n7(eB(e,c,t))}),u},av=Symbol(),ap=[.75,.33],ah=[.25,.33],ay=()=>{var r,a,n,e=t0?.screen;return e?({width:e,height:r,orientation:n}=e,a=e<r,-90!==(n=n?.angle??t0.orientation??0)&&90!==n||([e,r]=[r,e]),{deviceType:e<480?"mobile":e<=1024?"tablet":"desktop",screen:{dpr:t0.devicePixelRatio,width:e,height:r,landscape:a}}):{}},ab=e=>e(K({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:k?.clientId,languages:eF(navigator.languages,(e,t,r=e.split("-"))=>K({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...ay()})),aw=(e,t="A"===rr(e)&&t8(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),ak=(e,t=rr(e),r=rV(e,"button"))=>r!==X&&(z(t,"A","BUTTON")||"INPUT"===t&&z(t7(e,"type"),"button","submit")||r===Y),aS=(e,t=!1)=>({tagName:e.tagName,text:tO(t8(e,"title")?.trim()||t8(e,"alt")?.trim()||e.innerText?.trim(),100),href:e.href?.toString(),rect:t?rl(e):void 0}),aE=e=>{if(w)return w;ef(e)&&([t,e]=np(e),e=r7(t)[1](e)),e7(rL,e),(e=>{ng===tQ&&([nh,ng]=r7(e),ny(nh,ng))})(ta(rL,"encryptionKey"));var t,a,i,o,s,l,u,c,f,d,v,p,r=ta(rL,"key"),n=t0[rL.name]?._??[];if(ev(n))return a=[],i=[],o=(e,...t)=>{var r=Y;i=eX(i,n=>W(()=>(n[e]?.(...t,{tracker:w,unsubscribe:()=>r=X}),r),(e=>t=>nk(e,t))(n)))},s=[],u=af(nl,l={applyEventExtensions(e){e.clientId??=nG(),e.timestamp??=td(),v=Y;var t=X;return eF(a,([,r])=>{!t&&r.decorate?.(e)!==X||(t=Y)}),t?void 0:e},validateKey:(e,t=!0)=>!r&&!e||e===r||!!t&&P(`'${e}' is not a valid key.`)}),c=((e,t)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?e8(t,{type:e.type+"_patch",patchTargetId:e.clientId}):P("Source event not queued."),s=async(r,n=!0,a)=>{var i;return r[0]&&!ef(r[0])||(i=r[0],r=r.slice(1)),nd({[nf]:eF(r=r.map(e=>(t?.validateKey(i??e.key),e8(e,{metadata:{posted:!0}}),e8(rm(tl(e),!0),{timestamp:e.timestamp-td()}))),e=>[e,e.type,X])},"Posting "+tE([tI("new event",[eY(r,e=>!ry(e))||void 0]),tI("event patch",[eY(r,e=>ry(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),ai(e,{events:r,variables:a,deviceSessionId:t?.deviceSessionId},{beacon:n})},l=async(e,{flush:r=!1,async:a=!0,variables:i}={})=>{if((e=eF(eh(e),e=>e8(t.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eJ(e,e=>nd(e,e.type)),!a)return s(e,!1,i);r?(n.length&&tc(e,...n.splice(0)),e.length&&await s(e,!0,i)):e.length&&tu(n,...e)};return th(()=>l([],{flush:!0}),5e3),nE((e,t,r)=>{!e&&(n.length||t||1500<r)&&(e=eF(i,([e,t])=>{var[t,n]=t();return n&&(i.delete(e),a.delete(e)),t}),n.length||e.length)&&l(eR(n.splice(0),e),{flush:!0})}),{post:l,postPatch:(e,t,r)=>l(o(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var s=!1,u=()=>{s=!0};return a.set(e,tl(e)),i.set(e,()=>{if(!1===n?.isConnected)u();else{var r=a.get(e),[i,l]=tf(t(r,u),r)??[];if(i&&!R(l,r))return a.set(e,tl(l)),[o(e,i),s]}return[void 0,s]}),r&&l(e),u}}})(nl,l),f=null,d=0,p=v=X,w=(...e)=>{if(e.length){1<e.length&&(!e[0]||ef(e[0]))&&(t=e[0],e=e.slice(1)),ef(e[0])&&(e=(r=e[0]).match(/^[{[]/)?JSON.parse(r):np(r));var t,n=X;if((e=eX(eP(e,e=>ef(e)?np(e):e),e=>{if(!e)return X;if(a0(e))rL.tags=e7({},rL.tags,e.tagAttributes);else{if(a1(e))return rL.disabled=e.disable,X;if(a6(e))return n=Y,X;if(ie(e))return e(w),X}return p||a3(e)||a4(e)?Y:(s.push(e),X)})).length||n){var r=e6(e,e=>a4(e)?-100:a3(e)?-50:a7(e)?-10:rO(e)?90:0);if(!f||!f.splice(v?d+1:f.length,0,...r)){for(d=0,f=r;d<f.length;d++){var g=f[d];g&&(l.validateKey(t??g.key),W(()=>{var t=f[d];if(o("command",t),v=X,rO(t))c.post(t);else if(a5(t))u.get(...eh(t.get));else if(a7(t))u.set(...eh(t.set));else if(a3(t))tu(i,t.listener);else if(a4(t))(e=W(()=>t.extension.setup(w),e=>nk(t.extension.id,e)))&&(tu(a,[t.priority??100,e,t.extension]),e6(a,([e])=>e));else if(ie(t))t(w);else{var e,r=X;for([,e]of a)if(r=e.processCommand?.(t)??X)break;r||nk("invalid-command",t,"Loaded extensions:",a.map(e=>e[2].id))}},e=>nk(w,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}},Object.defineProperty(t0,rL.name,{value:Object.freeze(Object.assign(w,{id:"tracker_"+nG(),events:c,variables:u,__isTracker:Y})),configurable:!1,writable:!1}),n4((e,t,r)=>{var n=eR(rS(eF(e,1))?.map(e=>[e,`${e.key} (${nD(e.scope)}, ${e.scope<0?"client-side memory only":rh.format(e.purposes)})`,X]),[[{[nf]:rS(eF(t,1))?.map(e=>[e,`${e.key} (${nD(e.scope)}, ${e.scope<0?"client-side memory only":rh.format(e.purposes)})`,X])},"All variables",Y]]);nd({[nf]:n},tx(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eY(t)} in total).`,"2;3"))}),n1(async(e,t,r,a)=>{"ready"===e&&(e=(e=>rx(e,G,!0))((await u.get({scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:H}))[0]).value,l.deviceSessionId=e.deviceSessionId,e.hasUserAgent||(ab(w),e.hasUserAgent=!0),p=!0,s.length&&w(s),a(),w(...eF(aX,e=>({extension:e})),...n,{set:{scope:"view",key:"loaded",value:!0}}))},!0),w;P(`The global variable for the tracker "${rL.name}" is used for something else than an array of queued commands.`)},aI=()=>k?.clientId,aA={scope:"shared",key:"referrer"},ax=(e,t)=>{w.variables.set({...aA,value:[aI(),e]}),t&&w.variables.get({scope:aA.scope,key:aA.key,result:(r,n,a)=>r?.value?a():n?.value?.[1]===e&&t()})},aN=tv(),aO=tv(),aC=1,[a$,a_]=er(),aM=e=>{var t=tv(e,aN),r=tv(e,aO),n=tv(e,nP),a=tv(e,()=>aC);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),activeTime:n(e,i),activations:a(e,i)})},aU=aM(),[aq,aP]=er(),aR=(e,t)=>(t&&eJ(aD,t=>e(t,()=>!1)),aq(e)),az=new WeakSet,aD=document.getElementsByTagName("iframe");function aB(e){if(e){if(null!=e.units&&z(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var aJ=e=>e?.component||e?.content,aL=e=>rJ(e,t=>t!==e&&!!aJ(e3(rM,t)),e=>(e3(rM,e),(T=e3(rM,e))&&eP(eR(T.component,T.content,T),"tags"))),aK=(e,t)=>t?e:{...e,rect:void 0,content:(E=e.content)&&eF(E,e=>({...e,rect:void 0}))},aG=(e,t=X,r)=>{var n,a,i,o=[],s=[],l=0;return t5(e,e=>{var u,i,a=e3(rM,e);a&&(aJ(a)&&(i=eX(eh(a.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==Y||e.track?.promote)),n=(r??e4(i,e=>e.track?.region))&&rl(e)||void 0,u=aL(e),a.content&&tc(o,...eF(a.content,e=>({...e,rect:n,...u}))),i?.length)&&(tc(s,...eF(i,e=>(l=eZ(l,e.track?.secondary?1:2),aK({...e,content:o,rect:n,...u},!!n)))),o=[]),i=a.area||rB(e,"area"))&&tc(s,...eF(eh(i)))}),o.length&&tu(s,aK({id:"",rect:n,content:o})),eJ(s,e=>{ef(e)?tu(a??=[],e):(e.area??=tC(a,"/"),tc(i??=[],e))}),i||a?{components:i,area:tC(a,"/")}:void 0},aH=Symbol(),$={necessary:1,preferences:2,statistics:4,marketing:8},aX=(window.tail({consent:{externalSource:{key:"Cookiebot",poll(){var t,e=t1.cookie.match(/CookieConsent=([^;]*)/)?.[1];if(e)return t=1,e?.replace(/([a-z]+):(true|false)/g,(e,r,n)=>("true"===n&&(t|=$[r]??0),"")),{level:1<t?1:0,purposes:t}}}}}),[{id:"context",setup(e){th(()=>eJ(aD,e=>tt(az,e)&&aP(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result:(r,n,a)=>(null==k||!r?.value||k?.definition?t=r?.value:(k.definition=r.value,k.metadata?.posted&&e.events.postPatch(k,{definition:t})),a())});var t,r=n3({scope:"tab",key:"viewIndex"})?.value??0,n=n3({scope:"tab",key:"tabIndex"})?.value,a=(null==n&&n8({scope:"tab",key:"tabIndex",value:n=n3({scope:"shared",key:"tabIndex"})?.value??n3({scope:"session",key:"@info"})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:n+1}),null),i=(i=X)=>{var s,l,u,c;ri(""+a,a=location.href)&&!i||({source:i,scheme:s,host:l}=tq(location.href+"",!0),k={type:"view",timestamp:td(),clientId:nG(),tab:nK,href:i,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:n+1,tabViewNumber:r+1,viewport:rf(),duration:aU(void 0,!0)},0===n&&(k.firstTab=Y),0===n&&0===r&&(k.landingPage=Y),n8({scope:"tab",key:"viewIndex",value:++r}),u=tP(location.href),eF(["source","medium","campaign","term","content"],(e,t)=>(k.utm??={})[e]=eh(u["utm_"+e])?.[0]),!(k.navigationType=S)&&performance&&eF(performance.getEntriesByType("navigation"),e=>{k.redirects=e.redirectCount,k.navigationType=tX(e.type,/\_/g,"-")}),S=void 0,"navigate"===(k.navigationType??="navigate")&&(c=n3(aA)?.value)&&no(document.referrer)&&(k.view=c?.[0],k.relatedEventId=c?.[1],e.variables.set({...aA,value:void 0})),(c=document.referrer||null)&&!no(c)&&(k.externalReferrer={href:c,domain:(()=>{var{host:t,scheme:r,port:n}=tq(c,!1);return{host:t+(n?":"+n:""),scheme:r}})()}),k.definition=t,t=void 0,e.events.post(k),e.events.registerEventPatchSource(k,()=>({duration:aU()})),a_(k))};return nE(e=>{e?(aO(Y),++aC):aO(X)}),ru(window,"popstate",()=>(S="back-forward",i())),eF(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),S="navigate",i()}}),i(),{processCommand:t=>aQ(t)&&(e(t.username?{type:"login",username:t.username}:{type:"logout"}),Y),decorate(e){!k||rC(e)||ry(e)||(e.view=k.clientId)}}}},{id:"components",setup(e){var t=(e=>{var t=new IntersectionObserver(e=>eJ(e,e=>e.target[av]?.(e))),r=new Set,n=(th({callback:()=>eJ(r,e=>e()),frequency:250,raf:!0}),(e,t,r=0)=>e<r?r:t<e?t:e),a=t1.createRange();return(i,o)=>{var s,l,u,c,f,d,v,p,h,g,m,y,b,w,k,S;o&&(s=eX(o?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==Y))&&eY(s)&&(p=v=X,g=h=0,m=(e,t,r,n)=>{e=(l??=[])[e]??=[{duration:0,impressions:0},tv(!1,nP),!1,!1,0,0,0,tY()];e[4]=t,e[5]=r,e[6]=n},y=[tY(),tY()],b=aM(!1),w=tv(!1,nP),k=-1,S=()=>{var O,t=i.getBoundingClientRect(),r=window.innerWidth,o=window.innerHeight,S=[n(t.top,o),n(t.right,r),n(t.bottom,o),n(t.left,r)],T=S[2]-S[0],S=S[1]-S[3],I=T/t.height||0,A=S/t.width||0,x=v?ah:ap,I=(x[0]*o<T||x[0]<I)&&(x[0]*r<S||x[0]<A);if(p!==I&&w(p=I,!0),v!==(v=p&&w()>=rL.impressionThreshold-250)&&(++h,b(v),u||e(u=eX(eF(s,e=>(e.track?.impressions||rV(i,"impressions",Y,e=>e.track?.impressions))&&K({type:"impression",pos:ro(i),viewport:rf(),timeOffset:aU(),impressions:h,...aG(i,Y)})||null))),u?.length)&&(O=b(),c=eF(u,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:O,impressions:h,regions:l&&{top:l[0][0],middle:l[1][0],bottom:l[2][0]},seen:g,text:d,read:O.activeTime&&d&&n(O.activeTime/d.readTime,g)})))),t.height!==k){k=t.height;r=i.textContent;if({boundaries:f,...d}=(e=>{for(var r,n,a=/[\p{L}\p{N}][\p{L}\p{N}'â€™]*|([.!?]+)/gu,i=0,o=0,s=0,l=0,u=!1;r=a.exec(e);)r[1]?(u&&++l,u=!1):(u=!0,i+=r[0].length,6<r[0].length&&++s,++o);u&&++l;var a=/[\p{L}\p{N}]|([^\p{L}\p{N}]+)/gu,c=[0,.25,.75,1].map(e=>e*i|0),f=[],v=0,p=!1;do{if((r=a.exec(e))?.[1])p&&++v;else{for(var d=r?.index,h=!1,g=0;g<c.length;g++)c[g]--||(f[g]={offset:n??d,wordsBefore:v,readTime:eA(v/238*6e4)},h=!0);(p=!h)||(v=0),n=d+1}}while(r);return{text:e,length:e.length,characters:i,words:o,sentences:l,lix:eA(o/l+100*s/o),readTime:eA(o/238*6e4),boundaries:f}})(r??""),l||t.height>=1.25*o){var j,$=t1.createTreeWalker(i,NodeFilter.SHOW_TEXT),_=0,M=0;for(l??=[];M<f.length&&(j=$.nextNode());){var F,q,P,U=j.textContent?.length??0;for(_+=U;_>=f[M]?.offset;)a[M%2?"setEnd":"setStart"](j,f[M].offset-_+U),M++%2&&({top:F,bottom:q}=a.getBoundingClientRect(),P=t.top,M<3?m(0,F-P,q-P,f[1].readTime):(m(1,l[0][4],F-P,f[2].readTime),m(2,F-P,q-P,f[3].readTime)))}}}x=t.left<0?-t.left:0,A=t.top<0?-t.top:0,I=t.width*t.height;v&&(g=y[0].push(A,A+T)*y[1].push(x,x+S)/I),l&&eJ(l,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),a=n(t.bottom>o?o:t.bottom,e[5],e[4]),i=v&&0<a-r,s=e[0];s.duration=e[1](i),i&&(e[3]!==(e[3]=i)&&++e[0].impressions,s.seen=e[7].push(r,a)/(e[5]-e[4]),s.read=n(s.duration/e[6],s.seen))})},i[av]=({isIntersecting:e})=>{e7(r,S,e),e||(eJ(c,e=>e()),S())},t.observe(i))}})(e),n=({boundary:e,...n})=>{te(rM,e,e=>(e=>null==e?void 0:{...e,component:eh(e.component),content:eh(e.content),tags:eh(e.tags)})("add"in n?{...e,component:eR(e?.component,n.component),content:eR(e?.content,n.content),area:n?.area??e?.area,tags:eR(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,e3(rM,e))};return{decorate(e){eJ(e.components,e=>ta(e,"track"))},processCommand:e=>a2(e)?(n(e),Y):a9(e)?(eF(((e,t)=>{var r,n;return t?(r=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e3(n,a))for(var i=[];null!=t8(a,e);){tt(n,a);var o=tH(t8(a,e),"|");t8(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ed(l)??"",36);if(u<0)i.length+=u;else{if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}0<=u&&t[u]&&(l=t[u]),tu(i,l)}}}tu(r,...eF(i,e=>({add:Y,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),r):[]})(e.scan.attribute,e.scan.components),n),Y):X}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{ru(r,["click","contextmenu","auxclick"],n=>{var a,i,o,s,l,u=X;if(t5(n.target,e=>{ak(e)&&(o??=e),u=u||"NAV"===rr(e);var r=rU(e)?.component;!n.button&&r?.length&&!l&&(eJ(e.querySelectorAll("a,button"),t=>ak(t)&&(3<(l??=[]).length?eN():l.push({...aS(t,!0),component:t5(t,(e,t,r,n=rU(e)?.component)=>n&&t(n[0]),t=>t===e)}))),l)&&(s??=e),a??=rV(e,"clicks",Y,e=>e.track?.clicks)??(r&&e4(r,e=>e.track?.clicks!==X)),i??=rV(e,"region",Y,e=>e.track?.region)??(r&&e4(r,e=>e.track?.region))}),s??=o){var c,f=l&&!o&&a,d=aG(s,!1,f),v=rJ(s,void 0,e=>eF(eh(e3(rM,e)?.tags))),p=(a??=!u,{...(i??=Y)?{pos:ro(o,n),viewport:rf()}:null,...((e,t)=>{var n;return t5(e??t,e=>"IMG"===rr(e)||e===t?(n={element:aS(e,!1)},X):Y),n})(n.target,s),...d,timeOffset:aU(),...v});if(o)if(aw(o)){var d=o.hostname!==location.hostname,{host:v,scheme:m,source:y}=tq(o.href,!1);if(o.host===location.host&&o.pathname===location.pathname&&o.search===location.search)return"#"===o.hash?void 0:void(o.hash!==location.hash&&0===n.button&&e(K({type:"anchor_navigation",anchor:o.hash,...p})));var w,S,b=K({clientId:nG(),type:"navigation",href:d?o.href:y,external:d,domain:{host:v,scheme:m},self:Y,anchor:o.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||t8(o,"target")!==window.name?(ax(b.clientId),b.self=X,e(b)):ri(location.href,o.href)||(b.exit=b.external,ax(b.clientId))):(w=o.href,(y=no(w))?ax(b.clientId,()=>e(b)):(S=(""+Math.random()).replace(".","").substring(1,8),y||rL.captureContextMenu&&(o.href=nu+"="+S+encodeURIComponent(w),ru(window,"storage",(t,r)=>"_tail:push"===t.key&&(t.newValue&&JSON.parse(t.newValue)?.requestId===S&&e(b),r())),ru(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),o.href=w}))))}else{t5(n.target,(e,t)=>!!(c??=(e=>ef(e=null==e||e!==Y&&""!==e?e:"add")&&z(e,"add","remove","update","clear")?{action:e}:eg(e)?e:void 0)(rU(e)?.cart??rB(e,"cart")))&&!c.item&&(c.item=(e=>null==e?G:ev(e)||ef(e)?e[e.length-1]:eV(e,(e,r)=>e,void 0,void 0))(rU(e)?.content))&&t(c));d=aB(c);(d||a)&&e(K(d?{type:"cart_updated",...p,...d}:{type:"component_click",...p}))}else f&&te(t,s,r=>{var a=rs(s,n);return r?tu(r,a):(a=K({type:"component_click_intent",...p,clicks:r=[a],clickables:l}),e.events.registerEventPatchSource(a,()=>({clicks:e3(t,s)}),!0,s)),r})}})};r(document),aR(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=ra(Y);a$(()=>{return e=()=>(t={},r=ra(Y)),setTimeout(e,250);var e}),ru(window,"scroll",()=>{var i,n=ra(),a=rn();n.y>=r.y&&(i=[],!t.fold&&n.y>=r.y+200&&(t.fold=Y,tu(i,"fold")),!t["page-middle"]&&.5<=a.y&&(t["page-middle"]=Y,tu(i,"page-middle")),!t["page-end"]&&.99<=a.y&&(t["page-end"]=Y,tu(i,"page-end")),(n=eF(i,e=>K({type:"scroll",scrollType:e,offset:a}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(t){var r;return aZ(t)?("clear"===(r=t.cart)?e({type:"cart_updated",action:"clear"}):(r=aB(r))&&e({...r,type:"cart_updated"}),Y):a8(t)?(e({type:"order",...t.order}),Y):X}})},{id:"forms",setup(e){var t=new Map,r=(e,t=!1)=>{var r=!t||t9(e,rF("form-value")),e=(t&&(r=r?ei(r):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return t&&(e=e&&tO(e,200)),r?e:void 0},n=n=>{var a,s,u,i=n.form;if(i)return s=t9(i,rF("ref"))||"track_ref",u=e3(t,i,()=>{var t,r=new Map,n={type:"form",name:t9(i,rF("form-name"))||t8(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}},u=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:aU()})),((e=0)=>{var t,r,n=(a,i=e)=>{if(void 0===a)return!!r;clearTimeout(t),ea(a)?a&&(i<0?e=>e!==X:e=>e===Y)(r?.())?n(r):r=void 0:(r=a,t=setTimeout(()=>n(!0,i),i<0?-i:i))};return n})());return ru(i,"submit",()=>{a=aG(i),t[3]=3,u(()=>{(i.isConnected&&0<rl(i).width?(t[3]=2,u):()=>{o(),2<=t[3]&&(n.completed=3===t[3]||!(i.isConnected&&rl(i).width)),e.events.postPatch(n,{...a,totalTime:td(Y)-t[4]}),t[3]=1})()},750)}),t=[n,r,i,0,td(Y),1]}),e3(u[1],n)||eF(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{var n;e.name&&"hidden"!==e.type?(n=e.name,n=u[0].fields[n]??={id:e.id||n,name:n,label:tX(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:e.type??"unknown",[aH]:r(e),value:r(e,!0)},u[0].fields[n.name]=n,u[1].set(e,n)):"hidden"!==e.type||e.name!==s&&!rV(e,"ref")||(e.value||(e.value=tX("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),u[0].ref=e.value)}),[n,u]},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{var e,t,n,a,o,u,c;i&&([e,t,n,a]=i,o=-(s-(s=aO())),u=-(l-(l=td(Y))),c=t[aH],(t[aH]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=Y,a[3]=2,eJ(e.fields,([e,r])=>r.lastField=e===t.name)),t.value=r(n,!0),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,e.totalTime+=u,i=null)},s=0,l=0,u=e=>e&&ru(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>r&&(i=r,"focusin"===e.type?(l=td(Y),s=aO()):o()));u(document),aR(e=>e.contentDocument&&u(e.contentDocument),!0)}},{id:"consent",setup(e){var t=async t=>e.variables.get({scope:"session",key:"@consent",result:t}).value,r=async r=>{var n;if(r)return!(n=await t())||rv(n,r=rp(r))?[!1,n]:(n={level:rd.lookup(r.classification),purposes:rh.lookup(r.purposes)},await e.events.post(K({type:"consent",consent:n}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,n])},n={};return{processCommand(e){var a,i,o,s,l;return it(e)?((a=e.consent.get)&&t(a),(i=rp(e.consent.set))&&(async()=>i.callback?.(...await r(i)))(),(o=e.consent.externalSource)&&(l=o.key,(n[l]??=th({frequency:o.pollFrequency??1e3})).restart(o.pollFrequency,async()=>{var e,n,a;t1.hasFocus()&&(e=o.poll())&&(e=rp({...s,...e}))&&!rv(s,e)&&([n,a]=await r(e),n&&nd(a,"Consent was updated from "+l),s=e)}).trigger()),Y):X}}}}]),t_=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==t?.[e]),aZ=t_("cart"),aQ=t_("username"),a0=t_("tagAttributes"),a1=t_("disable"),a2=t_("boundary"),a4=t_("extension"),a6=t_(Y,"flush"),a5=t_("get"),a3=t_("listener"),a8=t_("order"),a9=t_("scan"),a7=t_("set"),ie=e=>"function"==typeof e,it=t_("consent");Object.defineProperty(t0,".tail.js.init",{writable:!1,configurable:!1,value(e){e(aE)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
