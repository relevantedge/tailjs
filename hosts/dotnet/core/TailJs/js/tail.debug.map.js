(()=>{"use strict";var o=".tail.rs",u=void 0,c=Number.MAX_SAFE_INTEGER,f=Symbol.iterator,d=e=>e===u,v=e=>e!==u,p=(e,r)=>e!==u?r(e):u,h=e=>null!=e,m=e=>"number"==typeof e,y=e=>"string"==typeof e,b=Array.isArray,w=(e,r=!1)=>null!=e&&"object"==typeof e&&(r||!e[f]),A=e=>"symbol"==typeof e,E=e=>"function"==typeof e,I=(e,r=!1)=>!(!e?.[f]||"object"!=typeof e&&!r),T=!1,k=(e,r,t)=>(r??t)!==u?(r??=0,t??=c,(n,a)=>r--?u:t--?e?e(n,a):n:t):e,x=(e,r,t,n)=>null==e?[]:e[f]?function*(e,r){if(e){var n,t=0;for(n of e)if(r&&(n=r(n,t++)),n!==u&&(yield n),T){T=!1;break}}}(e,t===u?r:k(r,t,n)):"object"==typeof e?function*(e,r){var n,t=0;for(n in e){var a=[n,e[n]];if((a=r?r(a,t++):a)!==u&&(yield a),T){T=!1;break}}}(e,k(r,t,n)):x(E(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(v(r)&&(yield r);t--&&v(r=e(r));)yield r}(e,t,n):function*(e=0,r=0){for(;e--;)yield r++}(e,t),r),S=(e,r,t,n)=>{if(b(e)){var a=0,i=[];for(m(r)&&([r,t,n]=[u,r,t]),t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!T;t++){var o=e[t];(o=r&&o!==u?r(o,a++):o)!==u&&i.push(o)}return T=!1,i}return e!==u?(e=>d(e)?u:b(e)?e:I(e)?[...e]:[e])(((e,r,t,n)=>m(r)?x(e,u,r,t):x(e,r,t,n))(e,r,t,n)):u},N=e=>E(e)?N(e()):e?.then?e.then(e=>N(e)):e,$=(e,r="and")=>p(e,e=>{return 0===(e=I(e)?S(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:e.slice(0,-1).join(", ")+` ${r} `+((e=e)?b(e)?e[e.length-1]:((e,r)=>{if(null!=e){if(b(e))return((e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=e.length;t<n;t++)if(e[t]!==u&&(a=r(e[t],i++)??a,T)){T=!1;break}return a})(e,r,void 0);if(void 0===u){if(e[f])return((e,r)=>{var t,a,n=0;for(a of e)if(a!==u&&(t=r(a,n++)??t,T)){T=!1;break}return t})(e,r);if("object"==typeof e)return((e,r)=>{var t,a,n=0;for(a in e)if(t=r([a,e[a]],n++)??t,T){T=!1;break}return t})(e,r)}var a,i;for(i of x(e,r,void 0,void 0))a=i??a;return a}})(e,(e,r)=>e):u)}),C=(e,r,t,n)=>{var a,e=Object.fromEntries(Object.entries(e).filter(([e,r])=>y(e)&&m(r)).map(([e,r])=>[e.toLowerCase(),r])),o=Object.entries(e),s=Object.values(e),l=s.reduce((e,r)=>e|r,0),c=r?{...e,any:l,none:0}:e,f=Object.fromEntries(o.map(([e,r])=>[r,e])),d=(e,t)=>y(e)?c[e]??c[e.toLowerCase()]:m(e)&&(r||!t||v(f[e]))?e:u,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==(t=d(t,r))?e:(e??0)|t,u):d(e),(e,r)=>null==(e=h(e,!1))?u:r&&(e&l)===l?"any":(e=o.filter(([,r])=>e&r).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[d,e=>null!=(e=d(e))?f[e]:u],A=(e,r)=>null==e?u:null==(e=h(a=e,r))?(e=>{throw y(e=N(e))?(e=>new TypeError(e))(e):e})(new TypeError(JSON.stringify(a)+` is not a valid ${t} value.`)):e,T=o.filter(([,e])=>!n||n&e);return((e,r)=>{var t=(r,n)=>{if(r){var a;if(b(r)){if(w(r[0]))return void r.splice(1).forEach(e=>t(e,r[0]));a=r}else a=S(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...w(t)&&("get"in t||"value"in t)?t:E(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e})(e=>A(e),[[{configurable:!1,enumerable:!1},{parse:A,tryParse:h,entries:o,values:s,lookup:g,length:o.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} `+$((e=>p(e,e=>I(e)?S(e,e=>"'"+e+"'"):"'"+e+"'"))(e),r)},r&&{pure:T,map:(e,r)=>(e=A(e),T.filter(([,r])=>r&e).map(r??(([,e])=>e)))}]])};(e=>{e[e.Anonymous=0]="Anonymous",e[e.Indirect=1]="Indirect",e[e.Direct=2]="Direct",e[e.Sensitive=3]="Sensitive"})(e={}),C(e,!1,"data classification"),(e=>{e[e.None=0]="None",e[e.Necessary=1]="Necessary",e[e.Functionality=2]="Functionality",e[e.Performance=4]="Performance",e[e.Targeting=8]="Targeting",e[e.Security=16]="Security",e[e.Infrastructure=32]="Infrastructure",e[e.Anonymous=49]="Anonymous",e[e.Any=63]="Any"})(r={}),C(r,!0,"data purpose",63),C(r,!1,"data purpose"),Object.freeze({level:e.Anonymous,purposes:r.Anonymous}),Object.freeze({level:e.Sensitive,purposes:r.Any}),(e=>{e[e.Global=0]="Global",e[e.Session=1]="Session",e[e.Device=2]="Device",e[e.User=3]="User",e[e.Entity=4]="Entity"})(e={}),C(e,!1,"variable scope"),(e=>{e[e.Success=200]="Success",e[e.Created=201]="Created",e[e.Unchanged=304]="Unchanged",e[e.Conflict=409]="Conflict",e[e.Unsupported=501]="Unsupported",e[e.Denied=403]="Denied",e[e.ReadOnly=405]="ReadOnly",e[e.NotFound=404]="NotFound",e[e.Invalid=400]="Invalid",e[e.Error=500]="Error"})(r={}),C(r,!1,"variable set status"),(e=>{e[e.Add=0]="Add",e[e.Min=1]="Min",e[e.Max=2]="Max",e[e.IfMatch=3]="IfMatch",e[e.IfNoneMatch=4]="IfNoneMatch"})(e={}),C(e,!1,"variable patch type");var O,M,r=(...e)=>r=>r?.type&&e.some(e=>e===r?.type),R=e=>e&&"string"==typeof e.type,j=r("VIEW"),F=r("VIEW_ENDED"),D=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],_=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=e.join(",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=D(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,s,l)=>{o=o||s||l,s=D(r);return i.length&&(1===s.length&&(o=o||s.pop()),s=i.concat(s)),s.length&&(a.push(n={ranks:s,value:o||void 0}),t?.add((e=>null==e?e:""+e.ranks.join(":")+(e.value?"="+e.value.replace(/,/g,"\\,"):""))(n))),""}),a},q=void 0,z=null,W=!0,L=!1,G=Object.fromEntries,B=Object.assign,V=setTimeout,H=parseInt,J=Number.MAX_SAFE_INTEGER,K="undefined"==typeof window,X=window,Y=document,Z=navigator,Q=Y.body,ee=location,re=performance,te=(e,r,t)=>console.error(...Re([e??t?.message??t??"error",r,t])),ne=(e,r=0)=>(pe(r)?--r:r)<0?e:(r=Math.pow(10,r),Math.round(e*r)/r),ae=e=>e==z?z:decodeURIComponent(e),ie=e=>e==z?z:encodeURIComponent(e),oe={},se=(e,...r)=>r.some(e==z?e=>e==z:r=>e===r),le=e=>e?.toLowerCase()??e,ue=(e,r,t)=>e==z?z:JSON.stringify(e,r,t),ce=(e,r,t=z)=>e&&r?e+" "+r:(e||r)??t,fe=["s","b","n","f","o"],de=(e,r)=>5===e?Array.isArray(r):r!=z&&fe[e]===(typeof r)[0]||6===e&&r.exec,C=(e,r)=>(t,n,...a)=>void 0===n?de(e,t):de(e,t)?t:n?r?.(t,n,...a):void 0,pe=C(1,e=>"0"!==e&&"false"!==e&&"no"!==e&&!!e),he=C(0,e=>e?.toString()),ge=C(3,e=>{}),me=C(4),ye=C(5,e=>be(e)?[...e]:void 0),be=e=>e&&!he(e)&&!!e[Symbol.iterator],we=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),Ae=(e,r,t,...n)=>e&&(t!=z?e.splice(r,t,...n):e.splice(r)),Ee=(e,...r)=>(e?.unshift(...r),e),Ie=e=>e?.shift(),Te=(e,...r)=>(e?.push(...r),e),ke=(...e)=>xe(e=Re(e))<2?Oe(e[0]):[].concat(...Oe(e,Oe)),xe=e=>e==z?0:e.length??e.size??(me(e)?Ne(e).length:0),Se=(e,r)=>e?ye(e)?Oe(e,(e,t)=>r?r(t,e):[t,e]):Oe(e.entries?.()??Object.entries(e),r):[],Ne=(e,r)=>e?Oe(e.keys?.()??Object.keys(e),r):[],$e=(e,r)=>e?Oe(e.values?.()??Object.values(e),r):[],Ce=(e,r,t)=>{if(i!=z&&xe(be(e)?e:e=[e])){var i,n=(...e)=>(a=0,xe(e)?e[0]:t),a=0;for(i of e)if(t=r(i,a++,n,t),!a)break}return t},Oe=(e,r)=>e==z?[]:ge(r)?Oe(e,L).map((e,t)=>r(e,t)):ye(e)&&!r?e:be(e)?[...e]:[e],Me=(e,r=e=>e)=>e==z?[]:Re(Oe(e,L)).flatMap((e,t)=>r(e,t)),Ue=(e,r=0)=>e==z?void 0:((e=null==e.length?Oe(e):e).item,e[r<0?e.length+r:r]),Re=(e,r,t=pe(r)||L)=>(e=Oe(e).filter((e,t)=>(ge(r,!0)??(e=>e!=z))(e,t)),t&&!xe(e)?z:e),je=(e,r=e=>e!=z&&e!==L)=>e!=z&&(be(e)||w(e))&&(r?Ce(e,(e,t,n)=>r(e,t)&&n(W),L):!!xe(e)),Fe=e=>new Set(e),De=(e,...r)=>(e!=z&&(e.clear?e.clear(...r):ye(e)?e.length=0:Ne(e,r=>Pe(e,r))),e),_e=(e,r)=>e.get?.(r)??e?.has(r)??e?.[r],Pe=(e,r)=>e?ye(r)?(Ce(r,r=>e.delete?.(r)??delete e[r]),e):null!=(O=e.has?.(r))?O?(O=e.get?.(r),e.delete(r),O??W):void 0:(O=e[r],delete e[r],O):void 0,qe=(e,r,t=void 0)=>e.add?(O=e.has(r))===(t??=W)?L:(t?e.add(r):Pe(e,r),W):(O=e.get?.(r)??e[r],(t=ge(t)?t(O):t)===O?L:(void 0===t?Pe(e,r):e.set?.(r,t)??(e[r]=t),W)),ze=(e,r,t)=>e.has?.(r)?e.get?.(r):(O=t(r),e.set?.(r,O)?O:e[r]??=t(r)),We=(e,r,t)=>t?B(We(e,r),t):r?G(Re(Se(e,r))):e,Le=(...e)=>e.length?new Promise(e[0]):Promise.resolve(),Ge=Symbol(),Be=Symbol(),Ve=e=>{var r=z,t=z,n=q,a=()=>{n=q;var a=z;t=Le(e=>{r=a=r=>a&&(a=z,e(n=r))}),e&&Or(e).then(()=>a?.(Be))},i=(a(),B((...e)=>xe(e)?(e[0]===Ge?e[1]===W&&n===q||a():r(e[0]),i):n,{then:(...e)=>t.then(...e)}));return i},He=(e,r,t,n)=>e&&r&&(t?(ye(n)?He(e,r,(...e)=>(M=t(...e))!=z&&Te(n,M)):e.replace(r,(...e)=>(n=t(...e),"")),n):e.match(r)),Je=e=>e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),Ke=/\z./g,Xe=(e,r)=>(r=rr((e=>Oe(Fe(Re(ke(...e)))))([Re(e,xe)]),"|"))?new RegExp(r,"gu"):Ke,Ye={},Ze=C(6,(e,r=[","," "])=>Ze(e)?e:ye(e)?Xe(Oe(e,e=>Ze(e,!1,r)?.source)):pe(e)?e?/./g:Ke:he(e)?Ye[e]??=He(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?new RegExp(t,"gu"):Xe(Oe(Qe(n,new RegExp(`?<!(?<!\\)\\)[${rr(Oe(r,Je))}]/`)),e=>e&&`^${rr(Oe(Qe(e,/(?<!(?<!\\)\\)\*/),e=>Je(er(e,/\\(.)/g,"$1"))),".*")}$`))):q),Qe=(e,r)=>e?.split(r)??e,er=(e,r,t)=>e?.replace(r,t)??e,rr=(e,r="")=>e?.join(r)??e,tr=[],nr=[],ar=(e,r=0)=>e.charCodeAt(r),ir=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tr[nr[r]=e.charCodeAt(0)]=r),{32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]}),or=(e=256)=>e*Math.random()|0,e={exports:{}},lr=e;(()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var s=0;s<e.length;s++)l(e[s]);else l(e);return i.subarray(0,o);function l(e,i){switch(typeof e){case"undefined":u();break;case"boolean":(e=>{f(e?195:194)})(e);break;case"number":(e=>{var r;isFinite(e)&&Number.isSafeInteger(e)?!(e<0||127<e)||e<0&&-32<=e?f(e):0<e&&e<=255?d([204,e]):e<-128||127<e?0<e&&e<=65535?d([205,e>>>8,e]):e<-32768||32767<e?0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):e<-2147483648||2147483647<e?0<e&&e<=0x10000000000000000?d([211,(r=e/a)>>>24,r>>>16,r>>>8,r,(r=e%a)>>>24,r>>>16,r>>>8,r]):e<-0x8000000000000000||0x8000000000000000<e?d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(f(211),v(e)):d([210,e>>>24,e>>>16,e>>>8,e]):d([209,e>>>8,e]):d([208,e]):(n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),f(203),d(new Uint8Array(t)))})(e);break;case"string":(e=>{var e=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(127<e.charCodeAt(n)){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128)i[a++]=s;else{if(s<2048)i[a++]=s>>6|192;else{if(55295<s&&s<56320){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||57343<l)throw new Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");i[a++]=(s=65536+((1023&s)<<10)+(1023&l))>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}}return r?i:i.subarray(0,a)})(e),t=e.length;31<t?d(255<t?65535<t?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):f(160+t),d(e)})(e);break;case"object":null===e?u():(e instanceof Date?e=>{var t,r=e.getTime()/1e3;0===e.getMilliseconds()&&0<=r&&r<4294967296?d([214,255,r>>>24,r>>>16,r>>>8,r]):0<=r&&r<17179869184?d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]):(d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r))}:Array.isArray(e)?c:e instanceof Uint8Array||e instanceof Uint8ClampedArray?e=>{var r=e.length;d(255<r?65535<r?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)}:e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?c:e=>{var t,r=0;for(t in e)void 0!==e[t]&&r++;for(t in 15<r?d(65535<r?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):f(128+r),e){var n=e[t];void 0!==n&&(l(t),l(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?l(r.invalidTypeReplacement(e),!0):l(r.invalidTypeReplacement,!0)}}function u(){f(192)}function c(e){var r=e.length;15<r?d(65535<r?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):f(144+r);for(var t=0;t<r;t++)l(e[t])}function f(e){if(i.length<o+1){for(var r=2*i.length;r<o+1;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,e=e<0?(e++,r=~(Math.abs(e)/a),~(Math.abs(e)%a)):(r=e/a,e%a);d([r>>>24,r>>>16,r>>>8,r,e>>>24,e>>>16,e>>>8,e])}}function r(e,r){var t,n=4294967296,a=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(0<=r&&r<=127)return r;if(128<=r&&r<=143)return c(r-128);if(144<=r&&r<=159)return f(r-144);if(160<=r&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return u(-1,1);if(197===r)return u(-1,2);if(198===r)return u(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return l(4);if(203===r)return l(8);if(204===r)return s(1);if(205===r)return s(2);if(206===r)return s(4);if(207===r)return s(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return f(-1,2);if(221===r)return f(-1,4);if(222===r)return c(-1,2);if(223===r)return c(-1,4);if(224<=r&&r<=255)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var i,t=0,n=!0;0<r--;)n?(t+=127&(i=e[a++]),128&i&&(t-=128),n=!1):t=(t*=256)+e[a++];return t}function s(r){for(var t=0;0<r--;)t=256*t+e[a++];return t}function l(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function u(r,t){r<0&&(r=s(t));t=e.subarray(a,a+r);return a+=r,t}function c(e,r){e<0&&(e=s(r));for(var t={};0<e--;)t[i()]=i();return t}function f(e,r){e<0&&(e=s(r));for(var t=[];0<e--;)t.push(i());return t}function d(r,t){r<0&&(r=s(t));t=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;n<t;){var i=e[n++];if(127<i)if(191<i&&i<224){if(t<=n)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(223<i&&i<240){if(t<=n+1)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(i<=239||248<=i)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(t<=n+2)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(65535<i){if(1114111<i)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a=(a+=String.fromCharCode(i>>10|55296))+String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,t,r)}function v(e,r){e<0&&(e=s(r));r=s(1),e=u(e);return 255===r?(e=>{var t,r;if(4===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*r);if(8===e.length)return t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6);if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(e):{type:r,data:e}}}var t={serialize:e,deserialize:r,encode:e,decode:r};lr?lr.exports=t:window[window.msgpackJsName||"msgpack"]=t})();var cr,fr,dr,vr,pr,hr,{deserialize:mr,serialize:yr}=function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(e.exports),br="$ref",wr=e=>{var r,t,n,a=(e,r,t=e[r],n=o(t))=>(t===n&&!A(r)||(e[r]=n,i(()=>e[r]=t)),t),i=e=>(r??=[]).push(e),o=e=>null==e||E(e)||A(e)?null:w(e,!0)?e.toJSON&&e!==(e=e.toJSON())?o(e):v(n=(t??=new Map).get(e))?(e[br]||(e[br]=n,i(()=>delete e[br])),{[br]:n}):(w(e)?(t.set(e,t.size+1),Object.keys(e).forEach(r=>(d(a(e,r))||A(r))&&delete e[r])):I(e)&&(!b(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?a(e,t):(e[t]=null,i(()=>delete e[t]))),e):e,e=yr(o(e));return r?.forEach(e=>e()),e},Ar=(e,r=!1)=>{var[t,n,a]=(e=>{for(var r,t,n,a,i,s,o=0n,l=0n,u=[],c=0,f=0,d=0,v=0,p=[],d=0;d<e.length;v+=p[d]=e.charCodeAt(d++));var m=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},y=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(m(),r=e.length,a=16-(r+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=y(or()));for(i[n++]=y(f^16*or(16)+a),t=0;t<r;i[n++]=y(f^e[t++]));for(;a--;)i[n++]=or();return i}:e=>e,e?e=>{for(m(),t=0;t<3;y(e[t++]));if((r=e.length-4-((f^y(e[t++]))%16||16))<=0)return new Uint8Array(0);for(i=new Uint8Array(r),n=0;n<r;i[n++]=f^y(e[t++]));return i}:e=>e,(e,r=64)=>{if(!h(e))return null;for(s="boolean"==typeof r?64:r,m(),[o,l]=ir[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(f^y(e[t++])))*l));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]})(e??""),i=(e,t)=>m(e)&&!0===t?e:(e=y(e)?new Uint8Array(S(e.length,r=>255&e.charCodeAt(r))):r?JSON.stringify(e):wr(e),a(e,t));return r?[e=>JSON.stringify(e),e=>null==e?u:(e=>{try{return e()}catch(e){throw e}})(()=>JSON.parse(e,u)),(e,r)=>i(e,r)]:[e=>(e=>{for(var r,t=0,n=e.length,a=[];t<n;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(nr[(16515072&r)>>18],nr[(258048&r)>>12],nr[(4032&r)>>6],nr[63&r]);return a.length+=n-t,String.fromCharCode(...a)})(t(wr(e))),e=>{return h(e)?(e=n((e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);t<a;)i[n++]=tr[ar(e,t++)]<<2|(r=tr[ar(e,t++)])>>4,t<a&&(i[n++]=(15&r)<<4|(r=tr[ar(e,t++)])>>2,t<a)&&(i[n++]=(3&r)<<6|tr[ar(e,t++)]);return i})(e)),i=e=>w(e,!0)?e[br]&&(a=(t??=[])[e[br]])?a:(e[br]&&delete(t[e[br]]=e)[br],Object.entries(e).forEach(([r,t])=>t!==(t=i(t))&&(e[r]=t)),e):e,h(e)?i(mr(e)):u):null;var t,a,i},(e,r)=>i(e,r)]},[Ir,,,]=Ar(),[xr,Sr]=Ar(),[Nr,$r]=[null,null],Cr=(e=W,r)=>(r=K?Date.now():re.timeOrigin+re.now(),e?Math.trunc(r):r),Or=e=>Le(r=>V(r,e)),Mr=e=>250<e?(e/1e3).toFixed(2)+"s":Math.round(e)+"ms",Ur=(e,r)=>{var t=0,n=e,a=null,i=()=>(n=q,t<0?clearInterval(-t):clearTimeout(t),t=0),o=(e,r)=>{i(),e&&(n=e,t=r<0?-setInterval(e,-r):V(()=>(n=q,e()),r))};return o.clear=(e,r,n=t)=>t&&(e?V(()=>t===n&&(i(),r?.()),e):(i(),r?.())),o.wait=e=>Le(r=>o(r,e)),o.pulse=()=>(n?.(),o),o.isActive=()=>n!=z,o.finish=()=>(a=n)&&(i(),a()),e&&o(e,r),o},Rr=(e=()=>Cr(),r=W)=>{var t=0,n=r?e():0,r=r=>(n?t+=-n+(n=e()):r===W&&(n=e()),r===L&&(n=0),t);return r.reset=()=>(n=n&&e(),t=0),r},jr=(e,r=0)=>r?V(e,r):window.queueMicrotask(e),Dr=e=>crypto.getRandomValues(e),_r=e=>(Dr(e=new Uint32Array(2)),1048576*e[0]+(e[1]>>>12)),Pr=new Uint32Array(2),qr=()=>_r(Pr).toString(36),zr=(e,r)=>e.localeCompare(r,"en")<0?e:r,Wr=Cr().toString(36)+"-"+_r().toString(36),Gr={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,heartbeatFrequency:0,clientKey:null,apiKey:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},Br=J,Vr=(e,r,t=(e,r)=>Br<=r)=>{for(var n,a=0,i=L;1===e?.nodeType&&!t(e,a++)&&r(e,(e,r)=>(e!=z&&(n=e,i=r!==W&&n!=z),W),a-1)!==L&&!i;){var o=e;(e=e.parentElement)===z&&o?.ownerDocument!==Y&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},Hr=(e,r)=>Vr(e,(e,t)=>t(Kr(e,r))),Kr=(e,r,t)=>e?.getAttribute?t===q?e.getAttribute(r):(t===z?e.removeAttribute(r):e.setAttribute(r,t),t):z,Xr=(e,r)=>getComputedStyle(e).getPropertyValue(r)||z,Yr=(e,r)=>(cr={},Oe(Re(Se(r),([,r])=>r!=z),([e,[r,t=L]=[]])=>cr[e]={writable:t,configurable:t,value:r}),Object.defineProperties(e,cr)),Zr=e=>e!=z?e.tagName:z,Qr=e=>({x:ne(scrollX,e),y:ne(scrollY,e)}),et=(e,r)=>er(e,/#.*$/,"")===er(r,/#.*$/,""),rt=(e,r,t=W)=>(dr=tt(e,r))&&{xpx:dr.x,ypx:dr.y,x:ne(dr.x/Q.offsetWidth,4),y:ne(dr.y/Q.offsetHeight,4),pageFolds:t?dr.y/X.innerHeight:q},tt=(e,r)=>r?.pointerType&&r?.pageY!=z?{x:r.pageX,y:r.pageY}:e?({x:vr,y:pr}=nt(e),{x:vr,y:pr}):q,nt=e=>e?(hr=e.getBoundingClientRect(),fr=Qr(L),{x:ne(hr.left+fr.x),y:ne(hr.top+fr.y),width:ne(hr.width),height:ne(hr.height)}):q,at=(e,r,t,n=W,a=W)=>{var i=[];return Oe(r,(r,o)=>{var s=e=>{t(e,i[o])};return Te(i,()=>e.removeEventListener(r,s,n)),e.addEventListener(r,s,{capture:n,passive:a})}),()=>0<i.length&&Oe(i,e=>e())?(i=[],W):L},it=e=>e==z?q:He(e,/^(?:([a-zA-Z0-9]+):)?(?:\/\/)?([^\s\/]*)/,(r,t,n)=>n?{href:e.substring(r.length),domain:{protocol:t,domainName:n}}:{href:e}),ot=()=>({...fr=Qr(W),width:X.innerWidth,height:X.innerHeight,totalWidth:Q.offsetWidth,totalHeight:Q.offsetHeight}),st=(e,r=e=>te(z,z,e),t)=>{var n=at(X,"error",e=>e.stopImmediatePropagation());try{return e()}catch(e){return r===L?q:ge(r)?r(e):(Te(r,e)??te(z,z,e),q)}finally{n(),t?.()}},r=Qe(""+Y.currentScript.src,"#"),C=Qe(""+(r[1]||""),";"),ct=r[0],ft=C[1]||it(ct)?.domain?.domainName,dt=e=>!(!ft||it(e)?.domain?.domainName.endsWith(ft)!==W),vt=(...e)=>er(rr(e),/(^(?=\?))|(^\.(?=\/))/,ct.split("?")[0]),pt=vt("?","var"),ht=vt("?","mnt"),e=(vt("?","usr"),(e=!1)=>{var r=Fe(),t=e=>()=>Pe(r,e),n=null;return[a=>(e&&n?a(...n,()=>{}):qe(r,a),t(a)),(...e)=>Ce(r,r=>{r(...n=e,t(r))})]}),mt=Ve(),[r,bt]=e(!0);r(()=>mt(!0));var wt,At,Et,It,Tt,kt,xt,St=new WeakMap(void 0),Nt=e=>_e(St,e),$t=(e,r=L)=>(r?"--track-":"track-")+e,Ct=(e,r,t,n,a,i)=>r?.[1]&&Ce(e?.getAttributeNames(),o=>r[0][o]??=(i=L,!he(n=Ce(r[1],([r,t,n],a,s)=>(r=>!(!o||!r)&&r.test(o))(r)&&(i=void 0,!t||(e=>!!e?.matches(t))(e))&&s(n??o)))||(a=e.getAttribute(o))&&!pe(a,!1)||_(a,er(n,/\-/g,":"),t),i)),Ot=()=>{},Mt=(e,r)=>ce(Xr(e,$t(r,W)),Xr(e,$t("base-"+r,W)),""),Ut={},Rt=(e,r,t=L,n)=>(t?Vr(e,(e,t)=>t(Rt(e,r,L)),ge(t,L)):ce(Kr(e,$t(r)),Xr(e,$t(r,W))))??(n&&(At=Nt(e))&&n(At))??z,jt=(e,r,t=L,n)=>""===(Et=Rt(e,r,t,n))||(Et==z?Et:pe(Et,W)),Ft=(e,r,t,n)=>e&&(((e,r,t=Mt(e,"attributes"))=>{Ct(e,Ut[t]??=[{},Re(He(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[Ze(t||n,!1),,r],[]),W)],r),_(Mt(e,"tags"),void 0,r)})(e,n??=Fe()),Vr(e,e=>{((e,r)=>{var t,n;(wt===(wt=Gr.tags)?Ot:(n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...(t=e=>e?Ze(e)?[[e]]:be(e)?Me(e,t):[me(e)?[Ze(e.match,!1),e.selector,e.prefix]:[Ze(e,!1)]]:[])($e(wt))]],Ot=(e,r)=>Ct(e,n,r)))(e,r)})(e,n),_(Oe(t?.(e)),void 0,n)},r),xe(n))?{tags:[...n]}:{},Dt=(e,r,t=!1)=>e?(It=(t?$r:Sr)(e)).$?0<(Tt=+((It=It.$)[1]??0))&&Tt<Cr(L)?(r?.(),z):[It[0],Tt,It[2]]:[It]:z,C=(e,r,t)=>{var n=r?Wr:q,a=r=>()=>r&&e.removeItem(r),i=new Set,o=Object.assign((s,l,u)=>{var c,d,v,p,h,f;return ge(s)?r?([c,f=L]=[s,l],d=(...e)=>c(...e)===L&&p?.(),p=()=>(p=z,r(v,W),i.delete(d)),r(v=({key:e,newValue:r,oldValue:n})=>(kt=Dt(r,a(e),t),xt=Dt(n,q,t),e&&d(e,kt?.[0]??z,xt?.[0]??z,kt?.[2]??z))),f&&i.add(d),p):void 0:([h,f,s=0]=[s,l,u],f===q?Dt(e.getItem(h),a(h),t)?.[0]??z:ge(f)?o(h,f(o(h)),s):((l=f==z||s<0?z:((e,r,t,n=!1)=>e==z?z:(n?Nr:xr)(t||r?{$:[e,r,t]}:e))(f,s&&!e.supportsExpiry?Cr(W)+s:q,n,t))==z?e?.removeItem(h):e?.setItem(h,l,0<s?s:q),i.size&&(kt=Dt(l,q,t),xt=Dt(e.getItem(h),q,t),i.forEach(e=>e(h,kt?.[0]??z,xt?.[0]??z,kt?.[2]??z))),f))});return o},Pt={getItem:e=>(e=ie(e),ae(document.cookie.split(";").map(e=>e.split("=")).find(r=>r[0].trim()===e)?.[1]||z)),setItem:(e,r,t)=>document.cookie=`${ie(e)}=${ie(r??"")}; Path=/; SameSite=Lax`+(r&&t==z?"":"; Max-Age="+Math.round((t??0)/1e3)),removeItem:e=>Pt.setItem(e,"",0),supportsExpiry:!0};C((()=>{var e={};return{getItem:r=>e[r],setItem:(r,t)=>e[r]=t,removeItem:r=>delete e[r]}})());var qt,zt,Wt=C(Pt),Lt=C(Pt,q,!0),Gt=C(sessionStorage),Bt=C(localStorage,(e,r)=>r?window.removeEventListener("storage",e):window.addEventListener("storage",e),!0),Vt=(e,r,t)=>{var n=e="(t~c_"+e,a=r=>e+"!"+r,i=a(Wr),o=(r,...o)=>{var s=W;if(ge(r))return Bt((e,t,a,o)=>{if(t!=z&&o&&(e===n||e===i))return r(t,o,e===i)!==L},(o[0]??t)===W);o=Re(o),Oe(xe(o)?Oe(o,a):[e],e=>{s=L,Bt(e,r),jr(()=>s!==(s=W)&&Bt(e,z))})};return r&&o((e,t,n)=>r[Ie(e)]?.([t,n,t===Wr],...e)),o},Ht=([e,r,t],n)=>{var a=n?n===Wr?" (self)":"":"(local)";e=(n??"")+a+": "+(he(e)?e:ue(e,z,2)),t&&console.groupCollapsed(t+" "+a),console.log((r?r+":":"")+(he(e)?e:ue(e,z,2))),t&&console.groupEnd()},Jt=(...e)=>{if(qt||(qt=Vt("chat"))((e,r)=>Ht(e,r),W),e[0]){for(var r=[e[0],z,z],t=!0,n=1;n<e.length;n++){if(pe(e[n])){t=e[n];break}r[n]=e[n]}(t?qt:Ht)(r)}return W},Kt=Symbol(),Xt=Fe(),Yt=new Map(void 0),Zt=e=>!je(e[Kt],e=>!_e(Xt,e)),rn=Vt("ss"),tn={},[nn,an]=e(!0),on=L,sn=Ur(),ln=(e,r,t)=>(tn[e]?te("key",e):tn[e]=[r,t],r=>rn({[e]:r})),un=(r(()=>{sn(()=>(on=W,an()),75);var e=L;rn((r,t)=>1===r?rn(2,t):2===r?(e!==(e=W)&&rn(3,t),W):3===r?rn(G(Se(tn,([e,[r]])=>[e,r()])),t):(Se(tn,([e,[,t]])=>t(r[e])),sn.finish())),rn(1),at(window,"pageshow",()=>!e&&rn(1)),at(window,"pagehide",()=>e=L)}),{}),cn={},fn={},dn=()=>{var e=fn;return fn={},e},vn={},pn=e=>vn[e]??=[[],Ve(2*Gr.requestTimeout)([W,0])],hn=e=>Se(un,([r,t])=>t&&Date.now()-t>e&&Pe(un,r)),gn=()=>{return[e,...r]=[Wr,...Ne(un)],0===r.length?e:1===r.length?zr(e,r[0]):(t=(e,r)=>zr(r,e),e=e,Oe(r).reduce((e,r)=>t(e,r),e));var r,t,e},mn=Vt("cs",{1([e,r]){un[e]??=z,r||e===Wr||bn||mn([1],e)},2([e],r,t){un[e]=Date.now(),Se(t,([e,r])=>yn(e,r)),r||Ne(cn,e=>!je($e(un),e=>!e)&&gn()===Wr&&mn([5,e,Wr,W]))},3(e,r){Se(r,([e,r])=>yn(e,r))},4(e,r){In(r)},5(e,r,t,n){var[a,i]=pn(r),o=Ae(a,0);Wr===t&&(async()=>{var e=xe(o),t=!e||(await(async e=>{try{return await(ge(e)?e():e)}catch(e){return console.error(e),await(ge(void 0)?(void 0)(e):e)}finally{await 0}})(cn[r]?.[0](o,n))??W);t&&!e||Jt(`The action handler for '${r}' ${t?"completed sucessfully":"rejected"}.`),!t&&(mn([3,{[r]:o}]),n)&&Jt("A critical request to commit got rejected."),i([t,e])})()},6:([e])=>(hn(0),xn(e)),7:()=>xn(z)},W),yn=(e,r)=>Te(pn(e)[0],...r),bn=W,wn=z,An=async()=>{if(await wn,bn!==(bn=L)){wn=Ve();try{De(un),mn([1]),await Or(50)}finally{wn(W)}}},En=async e=>{bn!==(bn=W)&&($e(cn,e=>e[1]?.(W)),mn([2,e,dn()]),$n(L))},In=async e=>{var n,r;return await wn,bn?0:(r=gn())!==Wr?(mn([4,e],r),0):(r=pn(e)[1],n=Cr(L),await r,r(Ge),mn([5,e,Wr,L]),r=await r,Jt(r===Be?`Commit timed out for '${e}.`:!r[0]||r[1]&&`${r[0]?"Successfully comitted":"Failed to commit"} ${r[1]} items for '${e}' after `+Mr(Cr(L)-n)),r[1])},Tn=J,kn=z,xn=e=>Tn=(kn=e??=gn())===Wr?Math.min(Tn,Cr()+25):J,Sn=()=>wn?.()===W&&(hn(500),Cr()>Tn),Nn=L,$n=e=>Nn!==(Nn=e)&&e?mn([6]):!e&&Wr===kn&&mn([7]),Cn=(r(()=>{at(X,"pageshow",()=>An()),at(document,"resume",()=>An()),An(),at(X,["beforeunload","pagehide"],()=>En(L)),at(document,"freeze",()=>En(W)),Ur(()=>Sn()&&Ne(cn,e=>In(e)),-Gr.postFrequency),at(document,"visibilitychange",()=>$n("visible"===document.visibilityState)),at(X,"focus",()=>$n(W)),at(X,"blur",()=>$n(L)),$n("visible"===document.visibilityState)}),Lt),[On,Mn]=e(),Un=Vt("req"),Rn=()=>st(()=>{return r=(e,r,t,n)=>(Cn(o,z),Jt(`Got response for ${r?.[0]} after ${r?.[1]?Mr(Cr()-r[1]):"(unknown)"}.`),Mn(e,n),t?(Un({error:t}),Jt("Response error: "+t)):Un(W),W),(e=Cn(o))&&r(...e);var e,r})||L,jn=Ur(),Fn=()=>(Sn()&&Rn(),jn(Fn,Cn(".tail.rq")?25:500));r(()=>Fn());var Dn,[_n,Pn]=e(),[qn,zn]=e(),[Ln,Gn]=(r=>(cn.events=r,[(...r)=>xe(r)&&(Te(fn.events??=[],...r),!bn)&&jr(()=>xe(fn)&&mn([3,dn()])),()=>In("events")]))([async(e,r)=>xe(e)?(await mt,r&&!Dn&&(Jt("WARN: Force post downgraded to normal post because affinity has not been set."),r=L),Jt("Post started"),Pn(e),await(async r=>{var a=`(${Wr??"(unknown)"})`,s=(Rn(),!!Cn(".tail.rq"));return!r&&s?(Jt("Another request is currently in progress - request cancelled."),L):(r=Cr(),Cn(".tail.rq",[a,r],Gr.requestTimeout),Cn(o,z),(r=>{var t=Cr(),r=Ir([Oe(e,(e,r,n={...e,timestamp:Math.min(0,(e.timestamp??=t)-t)})=>{return(a=e=>Ce(Se(e),([r,t],n)=>t==z||me(t)&&!a(t)?(Pe(e,r),n):W))(n),Jt(n,z,n.type),n;var a}),[Dn,r]]);Z.sendBeacon(pt,new Blob([r],{type:"text/plain"}))||te("post-failed",e)})(s)===L?(Cn(".tail.rq",z),W):await Le(e=>Un(r=>(e(r===W),L),W)))})(r)):L,e=>{e&&zn()}]),Bn=ln("affinity",()=>Dn,e=>Dn=e),Vn=(On(e=>Bn(Dn=e)),Fe()),Hn=L,Jn=()=>{},Kn=e=>{var r=(t=W)=>Pe(Vn,r)&&t&&e(Hn);return Vn.add(r),r};qn(()=>{Hn=W,Oe(Vn,e=>e(W))});var Xn,Yn,C={id:"navigation",setup(e){var r=Ur(),t=Jn,n=n=>{at(n,["click","contextmenu","auxclick"],a=>{t?.(L);var i,o,l=z,u=L;if(Vr(a.target,e=>{var r;l??=((e,r=Zr(e),t=jt(e,"button"))=>t!==L&&(se(r,"A","BUTTON")||"INPUT"===r&&se((e=>le(Kr(e,"type")))(e),"button","submit")||t===W))(e)?e:z,u=u||"NAV"===Zr(e),i??=jt(e,"clicks",W,e=>e.track?.clicks)??((r=Nt(e)?.component)&&je(r,e=>e.track?.clicks!==L)),o??=jt(e,"region",W,e=>e.track?.region)??((r=Nt(e)?.component)&&je(r,e=>e.track?.region))}),l){var c=Ta(l),f=ba(l);i??=!u;var v,p,d={...(o??=W)?{pos:rt(l,a),viewport:ot()}:z,...(d=a.target,v=l,Vr(d??v,e=>se(Zr(e),"IMG")||e===v?(p={element:{tagName:e.tagName,text:Kr(e,"title")||Kr(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},L):W),p),...c,...f,timing:{}};if(((e,r="A"===Zr(e)&&Kr(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"))(l)){var c=l.hostname!==ee.hostname,{domain:f,href:y}=it(l.href);if(l.host===ee.host&&l.pathname===ee.pathname&&l.search===ee.search)return"#"===l.hash?void 0:void(l.hash!==ee.hash&&Te(e,{type:"ANCHOR_NAVIGATION",anchor:l.hash,...d}));var b={clientId:qr(),type:"NAVIGATION",href:c?l.href:y,external:c,domain:f,self:W,anchor:l.hash,...d};if("contextmenu"===a.type){var w=na(b.clientId),A=l.href;if(!dt(A)){if(!Gr.captureContextMenu)return;l.href=vt(ht,"=",ie(A)),st(()=>Z.userActivation?.isActive&&Z.clipboard.writeText(A))}var E=Date.now(),I=(Wt(".tail.cm",E,11e3),r(()=>{l.href=A,w()&&+Wt(".tail.cm")!==E+1||(Wt(".tail.cm",z),b.self=L,Te(e,b),De(r))},-100),at(n,["keydown","keyup","visibilitychange","pointermove"],()=>I()&&De(r,1e4,()=>Wt(".tail.cm",""))))}else a.button<=1&&(1===a.button||a.ctrlKey||a.shiftKey||a.altKey||Kr(l,"target")!==X.name?(na(b.clientId),b.self=L,Te(e,b)):(et(ee.href,l.href)||(b.exit=b.external,na(b.clientId)),t=Kn(()=>Te(e,b))))}else{y=a.target,Vr(y,(e,r)=>!!(k??=va(Nt(e)?.cart??Rt(e,"cart")))&&!k.item&&(k.item=Ue(Nt(e)?.content,-1))&&r(k));var k,c=pa(k);(c||i)&&Te(e,c?{type:"CART_UPDATED",...d,...c}:{type:"COMPONENT_CLICK",...d})}}})};return n(Y),la(e=>e.contentDocument&&n(e.contentDocument)),{decorate(e){F(e)&&t(W)}}}},[ea,ra]=e(),ta=(()=>{[e,r,t=W]=[Bt,"ref",W],t&&(r="(t~"+r);var e,r,t,n=(...t)=>e(r,...t);return(e,t=L)=>{var a,i,o,s;return e===q?(a=z,n(e=>(e=Re(e,e=>e[1]>Cr()),a=Ie(e)?.[0]??z,e)),a):(i=W,(o=t=>n(n=>t?Oe(n,t=>t[0]===e?(i=W,[e,Cr()+1e4]):t):Te(n??[],[e,Cr()+1e4])))(t),(s=Ur())(()=>(o(W),i||s(),i),-5e3),()=>i)}})(),na=e=>ta([Xn.clientId,e]),aa=Rr(),ia=Rr(),oa=Rr(),[la,ua]=e(),ca=new WeakSet,fa=Y.getElementsByTagName("iframe"),Lt={id:"context",setup(e){Ur(()=>Ce(fa,e=>((e,r)=>e.has(r)?L:(e.add(r),W))(ca,e)&&ua(e)),-1e3).pulse();var r=W,t=1,n=L,a=Gt("t",e=>(r=!e)?[qr(),Cr(),Cr(),0]:(e[2]=Cr(),e)),i=W,o=(ln("first",()=>L,e=>{e||(i=L,Xn&&Pe(Xn,["firstTab","landingPage"]))}),Jn),s=Jn,u=z,c=(t=L)=>{var v,f,h,g;et(""+u,u=ee.href)&&!t||(o(),s(),aa.reset(),ia.reset(),oa.reset(),Gt("t",()=>(a[2]=Cr(),++a[3],a)),{href:t,domain:f}=it(ee.href)??{},Xn={type:"VIEW",timestamp:Cr(),clientId:qr(),tab:a[0],href:t,path:ee.pathname,hash:ee.hash||q,domain:f,tabIndex:a[3],viewport:{width:X.innerWidth,height:X.innerHeight}},ra(Xn.clientId),(Xn.firstTab=i)&&1===a[3]&&(Xn.landingPage=W),v=(e,r,t=Qe(e,r))=>1<t.length?t:z,(f=(t=er(ee.href,/^[^?]*\??/,""))==z?t:(oe={},He(t,/([^&=]+)(?:=([^&]+))?/g,(e,r,t)=>Te(oe[le(ae(r))]??=[],ae(he(t,L)))),oe))&&(h=Xn.queryString=We(f,([e,r])=>[e.toLowerCase(),!(1<r.length)&&(v(r[0],"|")||v(r[0],";")||v(r[0],","))||r]),Oe(["source","medium","campaign","term","content"],(e,r)=>(Xn.utm??={})[e]=h["utm_"+e]?.[0])),!(Xn.navigationType=Yn)&&performance&&Oe(performance.getEntriesByType("navigation"),e=>{Xn.redirects=e.redirectCount,Xn.navigationType=er(e.type,/\_/g,"-")}),Yn=q,"navigate"===(Xn.navigationType??="navigate")&&r&&dt(Y.referrer)&&(g=ta(),Xn.view=g?.[0],Xn.relatedEventId=g?.[1]),(g=Y.referrer||z)&&!dt(g)&&(Xn.externalReferrer={href:g,domain:it(g)?.domain}),n=L,o=Kn(()=>(n=W,Te(e,Xn),Xn?.firstTab&&Te(e,{flush:W}))),s=Kn(()=>{Te(e,{type:"VIEW_ENDED",timing:{}},{set:{view:q}}),r=L}),Te(e,{get:{view:e=>Xn.definition=e,rendered(){Ur(o,100)}}}),e.push({get:{qd(r){r&&Sn()&&Te(e,{type:"USER_AGENT",hasTouch:0<Z.maxTouchPoints,userAgent:Z.userAgent,view:Xn?.clientId,languages:Oe(Z.languages,(e,r,t=Qe(e,"-"))=>({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...(()=>{var t,a,n,e=X?.screen;return e?({width:e,height:t,orientation:n}=e,a=e<t,-90!==(n=n?.angle??X.orientation??0)&&90!==n||([e,t]=[t,e]),{deviceType:e<480?"mobile":1024<e?"desktop":"tablet",screen:{dpr:X.devicePixelRatio,width:e,height:t,landscape:a}}):{}})()})}}}))},f=Ur(),d=(at(Y,["pointermove","scroll","pointerdown","keydown"],()=>{oa(W),f(()=>oa(L),1e4)}),at(Y,"visibilitychange",()=>{"hidden"===Y.visibilityState?(ia(L),oa(L)):(ia(W),++t)}),at(X,"popstate",()=>(Yn="back-forward",c())),Oe(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),Yn="navigate",c()}}),c(),Ur()),v=()=>n&&0<Gr.heartbeatFrequency&&d(()=>Sn()&&e.push({type:"HEARTBEAT",timing:{}}),-Gr.heartbeatFrequency);return v(),{processCommand(r){return Ua(r)?(e.push(r.username?{type:"LOGIN",username:r.username}:{type:"LOGOUT"}),W):L},decorate(e){var n;v(),Xn&&!j(e)&&(n={view:Xn?.clientId,timing:e?.timing&&{activations:t,totalTime:aa(),visibleTime:ia(),interactiveTime:oa()}},B(e,n),((e,r)=>{e!==r&&(e[Kt]??=[]).push(r)})(e,Xn))}}}},va=e=>he(e=e==z||e!==W&&""!==e?e:"add")&&se(e,"add","remove","update","clear")?{action:e}:me(e)?e:q;function pa(e){if(!e)return q;if(e.units!=z&&se(e.action,z,"add","remove")){if(0===e.units)return q;e.action=0<e.units?"add":"remove"}return e}var ha,ga,ma,r={id:"cart",setup(e){return{processCommand(r){var t;return Ma(r)?("clear"===(t=r.cart)?Te(e,{type:"CART_UPDATED",action:"clear"}):(t=pa(t))&&Te(e,{...t,type:"CART_UPDATED"}),W):za(r)?(Te(e,{type:"ORDER",...r.order}),W):L}}}},ba=e=>Ft(e,q,e=>Oe(_e(St,e)?.tags)),wa=e=>e?.component||e?.content,Ea=(e,r)=>r?e:{...e,rect:q,content:(ga=e.content)&&Oe(ga,e=>({...e,rect:q}))},Ia=Ur(),Ta=(e,r=L)=>{De(Ia);var t,n,a,i=[],o=[],s=0;return Vr(e,e=>{var l,a,n=_e(St,e);n&&(wa(n)&&(a=Re(n.component,e=>0===s||!r&&(1===s&&e.track?.secondary!==W||e.track?.promote)),t=je(a,e=>e.track?.region)&&nt(e)||q,l=(e=>Ft(e,r=>r!==e&&!!wa(_e(St,r)),e=>(ha=_e(St,e))&&ke(Me([ha.component,ha.content],e=>Me(e,e=>Oe(e.tags,L))),ha.tags)))(e),n.content&&Ee(i,...Oe(n.content,e=>({...e,rect:t,...l}))),a.length)&&(Ee(o,...Oe(a,e=>(s=(e=>Math.max(...e))([s,e.track?.secondary?1:2]),Ea({...e,content:i,rect:t,...l},!!t)))),i=[]),a=n.area||Rt(e,"area"))&&Ee(o,...Oe(a))}),i.length&&Te(o,Ea({id:"",rect:t,content:i})),Ce(o,e=>{he(e)?Te(n??=[],e):(e.area??=rr(n,"/"),Ee(a??=[],e))}),a||n?{components:a,area:rr(n,"/")}:q},ka=Symbol(),e={id:"components",setup(e){var r=new IntersectionObserver(e=>Ce(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[ka]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});function t({boundary:t,...n}){var a,o,s,l,u,c,f,i="add"in n?e=>({...e,component:ke(e?.component,n.component),content:ke(e?.content,n.content),area:n?.area??e?.area,tags:ke(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}):n.update;qe(St,t,i??n),(a=Re(_e(St,t)?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==W))&&xe(a)&&(s=L,l=0,u=z,c=Ur(),f=Rr(()=>ia(),L),t[ka]=(r,n,i)=>{r=.75<=i||n.top<(o=window.innerHeight/2)&&n.bottom>o,f(r),s!==(s=r)&&(s?c(()=>{var r;++l,u||(r=Re(Oe(a,e=>e.track?.impressions||jt(t,"impressions",W,e=>e.track?.impressions)?{type:"IMPRESSION",pos:rt(t),viewport:ot(),...Ta(t,W)}:z)),Te(e,...r),u=Kn(()=>Te(e,...Oe(r,e=>({type:"IMPRESSION_SUMMARY",relatedEventId:e.clientId,duration:f(),impressions:l-1})))))},Gr.impressionThreshold):De(c)),t.isConnected||(u?.(),u=z)},r.observe(t))}return{decorate(e){Ce(e.components,e=>Pe(e,"track"))},processCommand(e){return Fa(e)?(t(e),W):Wa(e)?(Oe(((e,r)=>{var t,n;return r?(t=[],n=Fe(),Y.querySelectorAll(`[${e}]`).forEach(a=>{if(!_e(n,a))for(var i=[];Kr(a,e)!=z;){qe(n,a);var o=Qe(Kr(a,e),"|");Kr(a,e,z);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:H(he(l,L)??"",36);if(u<0)i.length+=u;else{if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}0<=u&&r[u]&&(l=r[u]),i.push(l)}}}Te(t,...Oe(i,e=>({add:W,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),t):[]})(e.scan.attribute,e.scan.components),t),W):L}}}},Sa={id:"scroll",setup(e){var r={},t=Qr(W);ea(()=>jr(()=>(r={},t=Qr(W)),250)),at(X,"scroll",()=>{var i,n=Qr(),a={x:(fr=Qr(L)).x/(Q.offsetWidth-X.innerWidth)||0,y:fr.y/(Q.offsetHeight-X.innerHeight)||0};n.y>=t.y&&(i=[],!r.fold&&n.y>=t.y+200&&(r.fold=W,i.push("fold")),!r["page-middle"]&&.5<=a.y&&(r["page-middle"]=W,i.push("page-middle")),!r["page-end"]&&.99<=a.y&&(r["page-end"]=W,i.push("page-end")),(n=Oe(i,e=>({type:"SCROLL",scrollType:e,offset:a}))).length)&&Te(e,n)})}},Na=Symbol(),Ca=[Lt,e,C,Sa,r,{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=z,a=()=>{var e,r,a,s,l,u,c;n&&([e,r,a,s]=n,l=-(i-(i=ia())),u=-(o-(o=Cr(W))),c=r[Na],(r[Na]=t(a))!==c&&(r.fillOrder??=s[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=W,s[3]=2,Se(e.fields,([e,t])=>t.lastField=e===r.name||q)),r.activeTime+=l,r.totalTime+=u,e.activeTime+=l,n=z)},i=0,o=0,s=s=>{s&&at(s,["focusin","focusout","change"],(s,l,u=((n,[i,o]=(n=>{var o,s,l,i=n.form;if(i)return s=Hr(i,$t("ref"))||"track_ref",l=ze(r,i,()=>{var r,t=new Map,n={type:"FORM",name:Hr(i,$t("form-name"))||Kr(i,"name")||i.id||q,activeTime:0,totalTime:0,fields:{}},s=()=>{a(),2<=r[3]&&(n.completed=3===r[3]||!(i.isConnected&&nt(i).width)),Te(e,{...o,...n,totalTime:Cr(W)-r[4]}),r[3]=1},l=(ea(s),qn(s),Ur());return at(i,"submit",()=>{o=Ta(i),r[3]=3,l(()=>{(i.isConnected&&0<nt(i).width?(r[3]=2,l):s)()},750)}),r=[n,t,i,0,Cr(W),1]}),_e(l[1],n)||Oe(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{var n;e.name&&"hidden"!==e.type?(n=e.name,n=l[0].fields[n]??={id:e.id||n,name:n,label:er(Ue(e.labels,0)?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[Na]:t(e)},l[0].fields[n.name]=n,l[1].set(e,n)):"hidden"!==e.type||e.name!==s&&!jt(e,"ref")||(e.value||(e.value=er([1e7]+-1e3+-4e3+-8e3+-1e11,/[018]/g,e=>((e*=1)^Dr(new Uint8Array(1))[0]&15>>e/4).toString(16))),l[0].ref=e.value)}),[n,l]})(n)??[],s=o?.[1].get(i))=>s&&[o[0],s,i,o])(s.target))=>{u&&(n=u,"focusin"===s.type?(o=Cr(W),i=ia()):a())})};s(Y),la(e=>e.contentDocument&&s)}}],Lt=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&void 0!==r?.[e]),Ma=Lt("cart"),Ua=Lt("username"),Ra=Lt("tagAttributes"),ja=Lt("disable"),Fa=Lt("boundary"),Da=Lt("extension"),_a=Lt(W,"flush"),Pa=Lt("get"),qa=Lt("listener"),za=Lt("order"),Wa=Lt("scan"),La=Lt("set"),Ga=e=>"function"==typeof e,Ba=e=>{var t,r,a,i,o,s,l,u,c,f,d,v,p,h;return ma||(he(e)&&(e=Sr(e)),Oe(["vars","hub"],r=>!ge(e[r])&&(e[r]=vt(e[r]))),B(Gr,e),r=Pe(Gr,"clientKey"),[Nr,$r]=Ar(r),t=Pe(Gr,"apiKey"),r=X[Gr.name]??[],ye(r)?(a=[],i=[],o=(e,...r)=>{var t=W;i=Re(i,n=>st(()=>(n[e]?.(...r,{tracker:ma,unsubscribe:()=>t=L}),t)))},_n(e=>o("post",e)),s=[],nn(()=>s.length&&Te(ma,...s)),u=Object.fromEntries(Oe(["view","tags","rendered","loaded","scripts","qd","mufti"],e=>[e,W])),[c,f]=(e=>{var t={},n={},a=(e,r)=>[n[e]??=[],r?n[e]=[]:n[e]];return[(r,n)=>{if(!r)return t;Oe(Se(r),([r,i])=>{if(!i)return te("invalid-argument",r);var o=i,[s]=a(r,L),l=L;i=(r,t,n)=>(l=W,st(()=>o(r,t,n,e))),t[r]===q&&0!==n?(Te(s,i),n&&0<n&&setTimeout(()=>!l&&i(q,r,W,e)!==W&&(o=()=>{}),n)):i(t[r],r,W,e)===W&&Te(s,i)})},(...r)=>{var n=Ue(r,-1)===W,r=ye(r[0])?r[0]:me(r[0])?Se(r[0]):[[r[0],r[1]]];Oe(r,([r,n])=>{t[r=""+r]=n;var[i,o]=a(r,W);Oe(i,t=>t(n,r,L,e)===W&&Te(o,t))}),n||xe(l=Re(r,([e])=>!u[e]))&&d(l)}]})(ma),On((e,r)=>f(r)),d=ln("vars",()=>Oe(Re(Se(c()),([e])=>!u[e]),([e,r])=>[e,r]),e=>e&&f(e,W)),v=z,p=0,h=L,Yr(X,{[Gr.name]:[ma=Yr({},{id:[qr()],push:[(...e)=>{if(!v&&t){if(e[0]!==t)throw new Error("Invalid API key.");e.splice(0,1)}if(e.length){e=e.flatMap(e=>(e&&"string"==typeof e&&(e=Sr(e)),ye(e)?e:[e]));var r=L;if((e=Re(e,e=>{if(!e)return L;if(Ra(e))Gr.tags=B({},Gr.tags,e.tagAttributes);else{if(ja(e))return Gr.disabled=e.disable,L;if(_a(e))return r=W,L;if(Ga(e))return e(ma),L}return on||qa(e)||Da(e)?W:(s.push(e),L)})).length||r){e=we(e,e=>Da(e)?-100:qa(e)?-50:La(e)?-10:R(e)?90:0);if(!v||!Ae(v,h?p+1:v.length,0,...e)){for(v=e,p=0;p<v.length;p++)v[p]&&st(()=>{var e=v[p];if(o("command",e),h=L,R(e)){e.timestamp??=Cr(),h=W;var r=L;Oe(a,([,t],n)=>{!r&&t.decorate?.(e)!==L||(r=W)}),r||(e=>{for(var r,t=[e],n=[];t.length;)(e=>!Zt(e)&&(Oe(e[Kt],r=>qe(ze(Yt,r,()=>Fe()),e)),W))(e=Ie(t))||((r=(e=>(qe(Xt,e),(zt=Yt.get(e))&&(zt.size||Pe(Yt,e),Re(zt,e=>Zt(e)&&(Pe(zt,e),W)))))(e))&&Ae(t,1,0,...r),Te(n,e));Ln(...n)})(e)}else if(Pa(e))c(e.get,e.timeout);else if(La(e))f(e.set),Oe(Se(e.set),([e,r])=>o("set",e,r));else if(qa(e))Te(i,e.listener);else if(Da(e))(t=st(()=>e.extension.setup(ma),r=>te(z,e.extension,r)))&&(Te(a,[e.priority??100,t]),we(a,([e])=>e));else if(Ga(e))e(ma);else{var t,n=L;for([,t]of a)if(n=t.processCommand?.(e)??L)break;n||te("invalid-command",e)}},e=>te("internal-error",z,e));v=z,r&&Gn()}}}}],__isTracker:[W]})]}),bt(),Te(ma,{set:{loaded:W}},...Oe(Ca,e=>({extension:e})),...r),ma):void te(`The global variable for the tracker "${Gr.name}" is used for something else than an array of queued commands.`))};X[".tail.js.init"]=e=>{e(Ba)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
