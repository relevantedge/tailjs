(()=>{"use strict";var e,t,r,n,a,i,o,l,s,u,c,d,f,v,p,h,g,m,y,b,w,k,E,S,A,T,I,x,N,O,$,j,C=(e,t=e=>TypeError(e))=>{throw et(e=e9(e))?t(e):e},M=(e,t,r=-1)=>{if(e===t||(e??t)==null)return!0;if(eo(e)&&eo(t)&&e.length===t.length){var n=0;for(var a in e){if(e[a]!==t[a]&&!M(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},U=(e,t,...r)=>e===t||r.length>0&&r.some(t=>U(e,t)),_=(e,t)=>null!=e?e:C(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),F=(e,t=!0,r)=>{try{return e()}catch(e){return ef(t)?ea(e=t(e))?C(e):e:Y(t)?console.error(t?C(e):e):t}finally{r?.()}},P=e=>{var t=void 0;return()=>t??=e9(e)},q=e=>{var t={initialized:!0,then:R(()=>(t.initialized=!0,e9(e)))};return t},R=e=>{var t=P(e);return(e,r)=>D(t,[e,r])},D=async(e,t=!0,r)=>{try{var n=await e9(e);return en(t)?t[0]?.(n):n}catch(e){if(Y(t)){if(t)throw e;console.error(e)}else{if(en(t)){if(!t[1])throw e;return t[1](e)}var a=await t?.(e);if(a instanceof Error)throw a;return a}}finally{r?.()}},z=e=>e,B=void 0,V=Number.MAX_SAFE_INTEGER,W=!1,J=!0,G=()=>{},L=e=>null!=e,H=Symbol.iterator,K=(e,t)=>(r,n=!0)=>e(r)?r:t&&n&&null!=r&&null!=(r=t(r))?r:B,X=(e,t)=>ef(t)?e!==B?t(e):B:e?.[t]!==B?e:B,Y=e=>"boolean"==typeof e,Z=K(Y,e=>0!=e&&(1==e||"false"!==e&&("true"===e||B))),Q=e=>!!e,ee=e=>"number"==typeof e,et=e=>"string"==typeof e,er=K(et,e=>e?.toString()),en=Array.isArray,ea=e=>e instanceof Error,ei=(e,t=!1)=>null==e?B:!t&&en(e)?e:ev(e)?[...e]:[e],eo=e=>null!==e&&"object"==typeof e,el=Object.prototype,es=Object.getPrototypeOf,eu=e=>null!=e&&es(e)===el,ec=(e,t)=>"function"==typeof e?.[t],ed=e=>"symbol"==typeof e,ef=e=>"function"==typeof e,ev=(e,t=!1)=>!!(e?.[H]&&("object"==typeof e||t)),ep=e=>e instanceof Map,eh=e=>e instanceof Set,eg=(e,t)=>null==e?B:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,em=!1,ey=e=>(em=!0,e),eb=e=>null==e?B:ef(e)?e:t=>t[e],ew=(e,t,r)=>(t??r)!==B?(e=eb(e),t??=0,r??=V,(n,a)=>t--?B:r--?e?e(n,a):n:r):e,ek=e=>e?.filter(L),eE=(e,t,r,n)=>null==e?[]:!t&&en(e)?ek(e):e[H]?function*(e,t){if(null!=e){if(t){t=eb(t);var r=0;for(var n of e)if(null!=(n=t(n,r++))&&(yield n),em){em=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,r===B?t:ew(t,r,n)):eo(e)?function*(e,t){t=eb(t);var r=0;for(var n in e){var a=[n,e[n]];if(t&&(a=t(a,r++)),null!=a&&(yield a),em){em=!1;break}}}(e,ew(t,r,n)):eE(ef(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eS=(e,t)=>t&&!en(e)?[...e]:e,eA=(e,t,r,n)=>eE(e,t,r,n),eT=(e,t,r=1,n=!1,a,i)=>(function* e(t,r,n,a){if(null!=t){if(t[H]||n&&eo(t))for(var i of a?eE(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}})(eE(e,t,a,i),r+1,n,!1),eI=(e,t,r,n)=>{if(t=eb(t),en(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!em;r++){var o=e[r];(t?o=t(o,a++):o)!=null&&i.push(o)}return em=!1,i}return null!=e?ei(eA(e,t,r,n)):B},ex=(e,t,r,n)=>null!=e?new Set([...eA(e,t,r,n)]):B,eN=(e,t,r=1,n=!1,a,i)=>ei(eT(e,t,r,n,a,i)),eO=(e,t,r)=>null==e?B:ef(t)?eI(et(e)?[e]:e,t)?.join(r??""):et(e)?e:eI(e,e=>!1===e?B:e)?.join(t??""),e$=(...e)=>{var t;return eF(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...ei(e))),t},ej=(e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,em)){em=!1;break}return a},eC=(e,t)=>{var r,n=0;for(var a of e)if(null!=a&&(r=t(a,n++)??r,em)){em=!1;break}return r},eM=(e,t)=>{var r,n=0;for(var a in e)if(r=t([a,e[a]],n++)??r,em){em=!1;break}return r},eU=(e,t,...r)=>null==e?B:ev(e)?eI(e,e=>t(e,...r)):t(e,...r),e_=(e,t,r,n)=>{var a;if(null!=e){if(en(e))return ej(e,t,r,n);if(r===B){if(e[H])return eC(e,t);if("object"==typeof e)return eM(e,t)}for(var i of eE(e,t,r,n))null!=i&&(a=i);return a}},eF=e_,eP=async(e,t,r,n)=>{var a;if(null==e)return B;for(var i of eA(e,t,r,n))if(null!=(i=await i)&&(a=i),em){em=!1;break}return a},eq=Object.fromEntries,eR=(e,t,r)=>{if(null==e)return B;if(Y(t)||r){var n={};return eF(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eF(e,t?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eq(eI(e,t?(e,r)=>X(t(e,r),1):e=>X(e,1)))},eD=(e,t,r,n,a)=>{var i=()=>ef(r)?r():r;return e_(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()},ez=(e,t=e=>null!=e,r=en(e),n,a)=>eS(eE(e,(e,r)=>t(e,r)?e:B,n,a),r),eB=(e,t,r,n)=>{var a;if(null==e)return B;if(t)e=ez(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[H])return Object.keys(e).length}return a=0,e_(e,()=>++a)},eV=(e,...t)=>null==e?B:ee(e)?Math.max(e,...t):eD(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||ee(a)&&a>e?a:e,B,t[2],t[3]),eW=(e,t,r)=>eI(e,eu(e)?e=>e[1]:e=>e,t,r),eJ=e=>!en(e)&&ev(e)?eI(e,ep(e)?e=>e:eh(e)?e=>[e,!0]:(e,t)=>[t,e]):eo(e)?Object.entries(e):B,eG=(e,t,r,n)=>null==e?B:(t=eb(t),e_(e,(e,r)=>!t||(e=t(e,r))?ey(e):B,r,n)),eL=(e,t,r,n)=>null==e?B:en(e)?e[e.length-1]:e_(e,(e,r)=>!t||t(e,r)?e:B,r,n),eH=(e,t,r,n)=>null==e?B:eu(e)&&!t?Object.keys(e).length>0:e.some?.(t??Q)??e_(e,t?(e,r)=>!!t(e,r)&&ey(!0):()=>ey(!0),r,n)??!1,eK=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),eX=(e,t,r)=>(e.constructor===Object?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eY=(e,t,r)=>{if(e){if(e.constructor===Object&&null==r)return e[t];var n=e.get?e.get(t):e.has?e.has(t):e[t];return void 0===n&&null!=r&&null!=(n=ef(r)?r():r)&&eX(e,t,n),n}},eZ=(e,...t)=>(eF(t,t=>eF(t,([t,r])=>{null!=r&&(eu(e[t])&&eu(r)?eZ(e[t],r):e[t]=r)})),e),eQ=e=>(t,r,n,a)=>{if(t)return void 0!=n?e(t,r,n,a):(eF(r,r=>en(r)?e(t,r[0],r[1]):eF(r,([r,n])=>e(t,r,n))),t)},e0=eQ(eX),e1=eQ((e,t,r)=>eX(e,t,ef(r)?r(eY(e,t)):r)),e2=(e,t)=>e instanceof Set?!e.has(t)&&(e.add(t),!0):eY(e,t)!==e0(e,t,!0),e4=(e,t)=>{if((e??t)!=null){var r=eY(e,t);return ec(e,"delete")?e.delete(t):delete e[t],r}},e6=(e,...t)=>{var r=[],n=!1,a=(e,i,o,l)=>{if(e){var s=t[i];i===t.length-1?en(s)?(n=!0,s.forEach(t=>r.push(e4(e,t)))):r.push(e4(e,s)):(en(s)?(n=!0,s.forEach(t=>a(eY(e,t),i+1,e,t))):a(eY(e,s),i+1,e,s),!eB(e)&&o&&e5(o,l))}};return a(e,0),n?r:r[0]},e5=(e,t)=>{if(e)return en(t)?(en(e)&&e.length>1?t.sort((e,t)=>t-e):t).map(t=>e5(e,t)):en(e)?t<e.length?e.splice(t,1)[0]:void 0:e4(e,t)},e3=(e,...t)=>{var r=(t,n)=>{var a;if(t){if(en(t)){if(eu(t[0])){t.splice(1).forEach(e=>r(e,t[0]));return}a=t}else a=eI(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...eu(r)&&("get"in r||"value"in r)?r:ef(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e},e8=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>eo(r)?en(r)?r.map(t=>en(t)?1===t.length?[t[0],e[t[0]]]:e8(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:e8(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},e9=e=>ef(e)?e():e,e7=(e,t=-1)=>eo(e)?en(e)?t?e.map(e=>e7(e,t-1)):[...e]:eh(e)?new Set(t?eI(e,e=>e7(e,t-1)):e):ep(e)?new Map(t?eI(e,e=>[e[0],e7(e[1],t-1)]):e):t?eR(e,([e,r])=>[e,e7(r,t-1)]):{...e}:e,te=(e,...t)=>e?.push(...t),tt=(e,...t)=>e?.unshift(...t),tr="undefined"!=typeof performance?(e=J)=>e?Math.trunc(tr(W)):performance.timeOrigin+performance.now():Date.now,tn=(e=!0,t=()=>tr())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},ta=(e=0)=>{var t,r;return function n(a,i){if(void 0===a)return!!r;clearTimeout(t),Y(a)?(a&&r?.(),r=void 0):(r=a,t=setTimeout(()=>n(!0),i??e))}},ti=(e,t=0)=>{var r=ef(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:l=()=>{}}=r;t=r.frequency??0;var s=0,u=tc(!0).resolve(),c=tn(!a),d=c(),f=async e=>!!s&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await D(()=>l(c(),-d+(d=c())),!1,()=>u.resolve())===!1||t<=0||o)&&v(!1),p.busy=!1,!0),v=(e,r=!e)=>(c(e,r),clearInterval(s),p.active=!!(s=e?setInterval(f,t<0?-t:t):0),p),p={active:!1,busy:!1,restart:(e,r)=>(t=e??t,l=r??l,v(!0,!0)),toggle:(e,t)=>e!==p.active?e?t?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await f(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class to{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tl,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class tl{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[t?"error":"value"]=r===B||r,e(r),this})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var ts=(e,t=0)=>t>0?setTimeout(e,t):window.queueMicrotask(e),tu=(e,t)=>null==e||isFinite(e)?!e||e<=0?e9(t):new Promise(r=>setTimeout(async()=>r(await e9(t)),e)):C(`Invalid delay ${e}.`),tc=e=>e?new to:new tl,td=(...e)=>Promise.race(e.map(e=>ef(e)?e():e)),tf=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},tv=(...e)=>(e=ez(e),[()=>eD(e,(e,t)=>t[0]()||e,!1),()=>eD(e,(e,t)=>t[1]()||e,!1)]),tp=()=>{var e,t=new Set;return[(r,n)=>{var a=tf(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},th=(e,t="and")=>X(e,e=>0===(e=ev(e)?eI(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:`${e.slice(0,-1).join(", ")} ${t} ${eL(e)}`),tg=e=>X(e,e=>ev(e)?eI(e,e=>"'"+e+"'"):"'"+e+"'"),tm=e=>(e=Math.log2(e))===(0|e),ty=(e,t,r,n)=>{var a,i,o,l=Object.fromEntries(Object.entries(e).filter(([e,t])=>et(e)&&ee(t)).map(([e,t])=>[e.toLowerCase(),t])),s=Object.entries(l),u=Object.values(l),c=l.any??u.reduce((e,t)=>e|t,0),d=t?{...l,any:c,none:0}:l,f=Object.fromEntries(Object.entries(d).map(([e,t])=>[t,e])),v=(e,r)=>ee(e)?!t&&r?null!=f[e]?e:B:e:et(e)?d[e]??d[e.toLowerCase()]:B,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,B):(e??0)|r,(p=!1,B)):v(e),(e,t)=>null==(e=h(e,!1))?B:t&&(i=f[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=s.filter(([,t])=>t&&e&t&&tm(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?f[e]:B],m=(e,t)=>null==e?B:null==(e=h(o=e,t))?C(TypeError(`${JSON.stringify(o)} is not a valid ${r} value.`)):e,y=s.filter(([,e])=>!n||(n&e)===e&&tm(e));return e3(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:s,values:u,lookup:g,length:s.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} ${th(tg(e),t)}`},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}])},tb=(...e)=>{var t=eJ(eR(e,!0)),r=e=>(eo(e)&&(en(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=B;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tw=(e,t=["|",";",","],r=!0)=>{if(!e)return B;var n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&t?.length&&eG(t,(e,t,r=n[1].split(e))=>r.length>1?r:B)||(n[1]?[n[1]]:[]),n},tk=(e,t=!0,r)=>null==e?B:tT(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,l,s,u,c,d,f)=>{var v={source:e,scheme:r,urn:r?!n:!n&&B,authority:a,user:i,password:o,host:l??s,port:null!=u?parseInt(u):B,path:c,query:!1===t?d:tE(d,t),fragment:f};return v.path=v.path||(v.authority?v.urn?"":"/":B),v}),tE=(e,t,r=!0)=>null==e?B:eR(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=tw(e,!1===t?[]:!0===t?B:t,r)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==t?[a,o.length>1?o:i]:[a,i]:B,(e,r)=>e?!1!==t?e$(e,r):(e?e+",":"")+r:r),tS=(e,t)=>t&&null!=e?t.test(e):B,tA=(e,t,r)=>tT(e,t,r,!0),tT=(r,n,a,i=!1)=>(r??n)==null?B:a?(e=B,i?(t=[],tT(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),tI=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tx=/\z./g,tN=(e,t)=>(t=eO(ex(ez(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tx,tO={},t$=e=>e instanceof RegExp,tj=(e,t=[","," "])=>t$(e)?e:en(e)?tN(eI(e,e=>tj(e,t)?.source)):Y(e)?e?/./g:tx:et(e)?tO[e]??=tT(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tN(eI(tC(n,RegExp(`?<!(?<!\\)\\)[${eO(t,tI,",")}]/`)),e=>e&&`^${eO(tC(e,/(?<!(?<!\\)\\)\*/),e=>tI(tM(e,/\\(.)/g,"$1")),".*")}$`))):B,tC=(e,t)=>e?.split(t)??e,tM=(e,t,r)=>e?.replace(t,r)??e;(T=r||(r={}))[T.Anonymous=0]="Anonymous",T[T.Indirect=1]="Indirect",T[T.Direct=2]="Direct",T[T.Sensitive=3]="Sensitive";var tU=ty(r,!1,"data classification");(I=n||(n={}))[I.None=0]="None",I[I.Necessary=1]="Necessary",I[I.Functionality=2]="Functionality",I[I.Performance=4]="Performance",I[I.Targeting=8]="Targeting",I[I.Security=16]="Security",I[I.Infrastructure=32]="Infrastructure",I[I.Anonymous=49]="Anonymous",I[I.Any=63]="Any",I[I.Server=64]="Server";var t_=ty(n,!0,"data purpose",127),tF=ty(n,!1,"data purpose",0),tP=(e,t)=>((a=e?.metadata)&&(t?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e);(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var tq=ty(i,!1,"variable scope");r.Anonymous,n.Necessary;var tR=e=>`'${e.key}' in ${tq.format(e.scope)} scope`,tD={scope:tq,purpose:tF,purposes:t_,classification:tU};tb(tD),(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",ty(o,!1,"variable set status"),(O=l||(l={}))[O.Add=0]="Add",O[O.Min=1]="Min",O[O.Max=2]="Max",O[O.IfMatch=3]="IfMatch",O[O.IfNoneMatch=4]="IfNoneMatch",ty(l,!1,"variable patch type");var tz=e=>!!e?.patch,tB=e=>!!e?.variables,tV=(e,t,r)=>{var n,a=e=>e,i=(r,i=tL)=>q(async()=>(n=a(i(await e(),t)))&&r(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>ez(e,e=>e.status<300)),variables:i(e=>eI(e,tJ)),values:i(e=>eI(e,e=>tJ(e)?.value)),push:()=>(a=e=>(r?.(eI(tW(e))),e),o),value:i(e=>tJ(e[0])?.value),variable:i(e=>tJ(e[0])),result:i(e=>e[0])};return o},tW=e=>e?.map(e=>e?.status<400?e:B),tJ=e=>e?.status<400?e?.current??e:B,tG=e=>e?.status<400||e?.status===404,tL=(e,t,r)=>{var n,a,i=[],l=eI(ei(e),(e,l)=>e&&(e.status<400||!r&&404===e.status?e:(a=`${tR(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=t?.[l])||!1!==n(e,a))&&i.push(a),B)));return i.length?C(i.join("\n")):en(e)?l:l?.[0]},tH=e=>e&&"string"==typeof e.type,tK=((...e)=>t=>t?.type&&e.some(e=>e===t?.type))("view"),tX=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],tY=(e,t,r)=>{if(!e)return[];if(Array.isArray(e)&&(e=eO(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,t,r,n)=>[t,r&&`="${r.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=tX(t);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,t,o,l,s)=>{var u=o||l||s,c=tX(t);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),r?.add(tZ(n))),""}),a},tZ=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,tQ=2e3,t0="_t:data",t1=()=>()=>C("Not initialized."),t2=window,t4=document,t6=t4.body,t5=(e,t)=>!!e?.matches(t),t3=V,t8=(e,t,r=(e,t)=>t>=t3)=>{for(var n,a=0,i=W;e?.nodeType===1&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==J&&null!=n),J),a-1)!==W&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},t9=(e,t)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Z(e);case"n":return parseFloat(e);case"j":return F(()=>JSON.parse(e),G);case"h":return F(()=>rY(e),G);case"e":return F(()=>rQ?.(e),G);default:return en(t)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:t9(e,t[0])):void 0}},t7=(e,t,r)=>t9(e?.getAttribute(t),r),re=(e,t,r)=>t8(e,(e,n)=>n(t7(e,t,r))),rt=(e,t)=>t7(e,t)?.trim()?.toLowerCase(),rr=e=>e?.getAttributeNames(),rn=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,ra=e=>null!=e?e.tagName:null,ri=()=>({x:(s=ro(W)).x/(t6.offsetWidth-window.innerWidth)||0,y:s.y/(t6.offsetHeight-window.innerHeight)||0}),ro=e=>({x:eg(scrollX,e),y:eg(scrollY,e)}),rl=(e,t)=>tM(e,/#.*$/,"")===tM(t,/#.*$/,""),rs=(e,t,r=J)=>(u=ru(e,t))&&z({xpx:u.x,ypx:u.y,x:eg(u.x/t6.offsetWidth,4),y:eg(u.y/t6.offsetHeight,4),pageFolds:r?u.y/window.innerHeight:void 0}),ru=(e,t)=>t?.pointerType&&t?.pageY!=null?{x:t.pageX,y:t.pageY}:e?({x:c,y:d}=rc(e),{x:c,y:d}):void 0,rc=e=>e?(f=e.getBoundingClientRect(),s=ro(W),{x:eg(f.left+s.x),y:eg(f.top+s.y),width:eg(f.width),height:eg(f.height)}):void 0,rd=(e,t,r,n={capture:!0,passive:!0})=>en(t)?tv(...eI(t,t=>rd(e,t,r,n))):tf(r,r=>e.addEventListener(t,r,n),r=>e.addEventListener(t,r,n)),rf=e=>{var{host:t,scheme:r,port:n}=tk(e,!1);return{host:t+(n?":"+n:""),scheme:r}},rv=()=>({...s=ro(J),width:window.innerWidth,height:window.innerHeight,totalWidth:t6.offsetWidth,totalHeight:t6.offsetHeight}),rp=new WeakMap,rh=e=>rp.get(e),rg=(e,t=W)=>(t?"--track-":"track-")+e,rm=(e,t,r,n,a,i)=>t?.[1]&&eF(rr(e),o=>t[0][o]??=(i=W,et(n=eF(t[1],([t,r,n],a)=>tS(o,t)&&(i=void 0,!r||t5(e,r))&&ey(n??o)))&&(!(a=e.getAttribute(o))||Z(a))&&tY(a,tM(n,/\-/g,":"),r),i)),ry=()=>{},rb=(e,t)=>{if(v===(v=rI.tags))return ry(e,t);var r=e=>e?t$(e)?[[e]]:ev(e)?eN(e,r):[eu(e)?[tj(e.match),e.selector,e.prefix]:[tj(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eW(v))]];(ry=(e,t)=>rm(e,n,t))(e,t)},rw=(e,t)=>eO(e$(rn(e,rg(t,J)),rn(e,rg("base-"+t,J)))," "),rk={},rE=(e,t,r=rw(e,"attributes"))=>{r&&rm(e,rk[r]??=[{},tA(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tj(r||n),,t])],t),tY(rw(e,"tags"),void 0,t)},rS=(e,t,r=W,n)=>(r?t8(e,(e,r)=>r(rS(e,t,W)),ef(r)?r:void 0):eO(e$(t7(e,rg(t)),rn(e,rg(t,J)))," "))??(n&&(p=rh(e))&&n(p))??null,rA=(e,t,r=W,n)=>""===(h=rS(e,t,r,n))||(null==h?h:Z(h)),rT=(e,t,r,n)=>e?(rE(e,n??=new Set),t8(e,e=>{rb(e,n),tY(eI(r?.(e)),void 0,n)},t),n.size?{tags:[...n]}:{}):{},rI={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rx=tC(""+t4.currentScript.src,"#"),rN=tC(""+(rx[1]||""),";"),rO=rx[0],r$=rN[1]||tk(rO,!1)?.host,rj=e=>!!(r$&&tk(e,!1)?.host?.endsWith(r$)===J),rC=(...e)=>tM(eO(e),/(^(?=\?))|(^\.(?=\/))/,rO.split("?")[0]),rM=rC("?","var");rC("?","mnt"),rC("?","usr");var rU=[],r_=[],rF=(e,t=0)=>e.charCodeAt(t),rP=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>rU[r_[t]=e.charCodeAt(0)]=t);var rq=e=>{for(var t,r=0,n=e.length,a=[];n>r;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(r_[(16515072&t)>>18],r_[(258048&t)>>12],r_[(4032&t)>>6],r_[63&t]);return a.length+=n-r,rP(a)},rR=e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>r;)i[n++]=rU[rF(e,r++)]<<2|(t=rU[rF(e,r++)])>>4,a>r&&(i[n++]=(15&t)<<4|(t=rU[rF(e,r++)])>>2,a>r&&(i[n++]=(3&t)<<6|rU[rF(e,r++)]));return i},rD={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},rz=(e=256)=>e*Math.random()|0,rB=e=>{var t,r,n,a,i,o=0n,l=0,s=0n,u=[],c=0,d=0,f=0,v=0,p=[];for(f=0;f<e?.length;v+=p[f]=e.charCodeAt(f++));var h=e?()=>{u=[...p],d=255&(c=v),f=-1}:()=>{},g=e=>(d=255&(c+=-u[f=(f+1)%u.length]+(u[f]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(rz()));for(r=0,i[n++]=g(d^16*rz(16)+a);t>r;i[n++]=g(d^e[r++]));for(;a--;)i[n++]=rz();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((d^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);t>n;i[n++]=d^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(l=Y(t)?64:t,h(),[o,s]=rD[l],r=0;r<e.length;o=BigInt.asUintN(l,(o^BigInt(d^g(e[r++])))*s));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},rV={exports:{}};(e=>{(()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return a.subarray(0,i);function l(e,a){var i,o,f,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var t=e/4294967296,a=e%4294967296;c([211,t>>>24,t>>>16,t>>>8,t,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),d(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(r=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(r))})(e);break;case"string":(f=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(e.charCodeAt(n)>127){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var l=e.charCodeAt(o);if(l<128){i[a++]=l;continue}if(l<2048)i[a++]=l>>6|192;else{if(l>55295&&l<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var s=e.charCodeAt(o);if(s<56320||s>57343)throw Error("UTF-8 encode: second surrogate character 0x"+s.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&s),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+f):f<=255?c([217,f]):f<=65535?c([218,f>>>8,f]):c([219,f>>>24,f>>>16,f>>>8,f]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var t=e.getTime()/1e3;if(0===e.getMilliseconds()&&t>=0&&t<4294967296)c([214,255,t>>>24,t>>>16,t>>>8,t]);else if(t>=0&&t<17179869184){var r=1e6*e.getMilliseconds();c([215,255,r>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t])}else{var r=1e6*e.getMilliseconds();c([199,12,255,r>>>24,r>>>16,r>>>8,r]),d(t)}})(e):Array.isArray(e)?s(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s(e):(e=>{var t=0;for(var r in e)void 0!==e[r]&&t++;for(var r in t<=15?u(128+t):t<=65535?c([222,t>>>8,t]):c([223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(l(r),l(n))}})(e);break;default:if(!a&&t&&t.invalidTypeReplacement)"function"==typeof t.invalidTypeReplacement?l(t.invalidTypeReplacement(e),!0):l(t.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function s(e){var t=e.length;t<=15?u(144+t):t<=65535?c([220,t>>>8,t]):c([221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;t>r;r++)l(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function d(e){var t,r;e>=0?(t=e/4294967296,r=e%4294967296):(t=~(t=Math.abs(++e)/4294967296),r=~(r=Math.abs(e)%4294967296)),c([t>>>24,t>>>16,t>>>8,t,r>>>24,r>>>16,r>>>8,r])}}function r(e,t){var r,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(t>=0&&t<=127)return t;if(t>=128&&t<=143)return u(t-128);if(t>=144&&t<=159)return c(t-144);if(t>=160&&t<=191)return d(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return s(-1,1);if(197===t)return s(-1,2);if(198===t)return s(-1,4);if(199===t)return f(-1,1);if(200===t)return f(-1,2);if(201===t)return f(-1,4);if(202===t)return l(4);if(203===t)return l(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return f(1);if(213===t)return f(2);if(214===t)return f(4);if(215===t)return f(8);if(216===t)return f(16);if(217===t)return d(-1,1);if(218===t)return d(-1,2);if(219===t)return d(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(t>=224&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var r=0,a=!0;t-- >0;)if(a){var i=e[n++];r+=127&i,128&i&&(r-=128),a=!1}else r*=256,r+=e[n++];return r}function o(t){for(var r=0;t-- >0;)r*=256,r+=e[n++];return r}function l(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return(n+=t,4===t)?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function s(t,r){t<0&&(t=o(r));var a=e.subarray(n,n+t);return n+=t,a}function u(e,t){e<0&&(e=o(t));for(var r={};e-- >0;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];e-- >0;)r.push(a());return r}function d(t,r){t<0&&(t=o(r));var a=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;r>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=r)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=r)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=r)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,t)}function f(e,t){e<0&&(e=o(t));var r=o(1),a=s(e);return 255===r?(e=>{if(4===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*t)}if(8===e.length){var r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*t+r/1e6)}if(12===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var t=i(8);return new Date(1e3*t+r/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:r,data:a}}}var n={serialize:t,deserialize:r,encode:t,decode:r};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(rV);var{deserialize:rW,serialize:rJ}=($=rV.exports)&&$.__esModule&&Object.prototype.hasOwnProperty.call($,"default")?$.default:$,rG="$ref",rL=e=>{var t,r,n,a=(e,t,r=e[t],n=o(r))=>((r!==n||ed(t))&&(e[t]=n,i(()=>e[t]=r)),r),i=e=>(t??=[]).push(e),o=e=>null==e||ef(e)||ed(e)?null:eo(e)?e.toJSON&&e!==(e=e.toJSON())?o(e):null!=(n=(r??=new Map).get(e))?(e[rG]||(e[rG]=n,i(()=>delete e[rG])),{[rG]:n}):(eu(e)?(r.set(e,r.size+1),Object.keys(e).forEach(t=>(a(e,t)===B||ed(t))&&delete e[t])):ev(e)&&(!en(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?a(e,r):(e[r]=null,i(()=>delete e[r]))),e):e,l=rJ(o(e));return t?.forEach(e=>e()),l},rH=e=>{var t,r,n=e=>eo(e)?e[rG]&&(r=(t??=[])[e[rG]])?r:(e[rG]&&(t[e[rG]]=e,delete e[rG]),Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return null!=e?n(rW(e)):B},rK=(e,t=!1,r=!0)=>{var n=(e,t=!1,r=!0)=>{var n=(e,r)=>ee(e)&&!0===r?e:l(e=et(e)?new Uint8Array(eI(e.length,t=>255&e.charCodeAt(t))):t?JSON.stringify(e):rL(e),r),a=e=>null==e?B:F(()=>JSON.parse(e,B));if(t)return[e=>JSON.stringify(e),a,(e,t)=>n(e,t)];var[i,o,l]=rB(e);return[e=>rq(i(rL(e))),e=>null!=e?r&&(e?.[0]==="{"||e?.[0]==="[")?a(e):rH(o(rR(e))):null,(e,t)=>n(e,t)]};return e?n(e,t,r):(g??=[n(null,!1),n(null,!0)])[+t]};rK(),rK(null,!0);var[rX,rY]=rK(),[rZ,rQ]=[t1,t1],[r0,r1]=tp(),r2=e=>{rQ===t1&&([rZ,rQ]=rK(e),r1(rZ=rK(null,!0)[0],rQ))},r4=e=>t=>r6(e,t),r6=(...e)=>{var t=e.shift();console.error(et(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[r5,r3]=tp(),[r8,r9]=tp(),r7=e=>nt!==(nt=e)&&r3(nt=!1,na(!0,!0)),ne=e=>nr!==(nr=!!e&&"visible"===document.visibilityState)&&r9(nr,!e,nn(!0,!0));r5(ne);var nt=!0,nr=!1,nn=tn(!1),na=tn(!1);rd(window,["pagehide","freeze"],()=>r7(!1)),rd(window,["pageshow","resume"],()=>r7(!0)),rd(document,"visibilitychange",()=>(ne(!0),nr&&r7(!0))),r3(nt,na(!0,!0));var ni=!1,no=tn(!1),[nl,ns]=tp(),nu=ti({callback:()=>ni&&ns(ni=!1,no(!1)),frequency:2e4,once:!0,paused:!0}),nc=()=>!ni&&(ns(ni=!0,no(!0)),nu.restart());rd(window,"focus",nc),rd(window,"blur",()=>nu.trigger()),rd(document.body,["keydown","pointerdown","pointermove","scroll"],nc),nc(),(j=m||(m={}))[j.View=-3]="View",j[j.Tab=-2]="Tab",j[j.Shared=-1]="Shared";var nd=ty(m,!1,"local variable scope"),nf=e=>nd.tryParse(e)??tq(e),nv=e=>!!nd.tryParse(e?.scope),np=tb({scope:nd},tD),nh=e=>null==e?void 0:e.source?nh(e.source):`${nf(e.scope)}\0${e.key}\0${e.targetId??""}`,ng=e=>{var t=e.split("\0");return{scope:+t[0],key:t[1],targetId:t[2]}},nm=0,ny=void 0,nb=()=>(ny??t1())+"_"+nw(),nw=()=>++nm,nk=e=>crypto.getRandomValues(e),nE=()=>tM("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nk(new Uint8Array(1))[0]&15>>e/4).toString(16)),nS=void 0,nA={id:ny,heartbeat:tr()},nT={knownTabs:{[ny]:nA},variables:new Map},[nI,nx]=tp(),nN=t1,nO=e=>nS.get(nh(e)),n$=(...e)=>nj(e.map(e=>(e.timestamp=tr(),e.expires=3e3,e))),nj=e=>{var t=eI(e,e=>e&&[nh(e),e]);if(t?.length){e0(nS,t);var r=ez(t,e=>e[1].scope>m.Tab);r.length&&(e0(nT.variables,t),nN({type:"patch",payload:eR(r)})),nx("variables",eR(t),!0)}};r0((e,t)=>{r5(r=>{if(r){var n=t(sessionStorage.getItem(t0));console.log(n),ny=n?.[0]??tr().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nS=new Map(e$(ez(nS,([,e])=>e.scope===m.View),eI(n?.[1],e=>[nh(e),e]))),sessionStorage.removeItem(t0)}else sessionStorage.setItem(t0,e([ny,ez(nS,([,e])=>e.scope!==m.View)]))},!0),nN=(t,r)=>{e&&(localStorage.setItem(t0,e([ny,t,r])),localStorage.removeItem(t0))},rd(window,"storage",e=>{if(e.key===t0){var n=t?.(e.newValue);if(n&&(!n[2]||n[2]===ny)){var[a,{type:i,payload:o}]=n;"query"===i?r.active||nN({type:"set",payload:nT},a):"set"===i&&r.active?(e0(nT,o),r.trigger()):"patch"===i?(e0(nT.variables,o),e0(nS,o),nx("variables",o,!1)):"tab"===i&&(e0(nT.knownTabs,a,o),o&&nx("tab",o,!1))}}});var r=ti(()=>nx("ready",nT,!0),-25),n=ti({callback(){var e=tr()-1e4;eF(nT?.knownTabs,([t,r])=>r[0]<e&&e6(nT.knownTabs,t)),nA.heartbeat=tr(),nN({type:"tab",payload:nA})},frequency:5e3,paused:!0}),a=e=>{nN({type:"tab",payload:e?nA:void 0}),e?(r.restart(),nN({type:"query"})):r.toggle(!1),n.toggle(e)};r5(e=>a(e),!0)},!0);var[nC,nM]=tp(),[nU,n_]=tp(),nF=((e,{timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?rQ:rY)(localStorage.getItem("rq")),i=()=>localStorage.setItem("rq",(r?rZ:rX)([ny,tr()+t]));return async(r,o,l=null!=o?1:n)=>{for(;l--;){var s=a();if((!s||s[1]<tr())&&(i(),a()?.[0]===ny)){var u=r(),c=setInterval(i,t/2);return await D(u,!0,()=>clearInterval(c))}var d=tc(),[f]=rd(window,"storage",t=>{t.key!==e||t.newValue||d.resolve()});await td(tu(o??t),d),f()}null==o&&C(e+" could not be acquired.")}})("rq"),nP=ti(()=>{if(b!==(b=rI.pushCookie)){if(!b)return;y=RegExp(tI(b)+"=([^;]*)")}var e=rQ?.(tT(document.cookie,y)?.[1]);tB(e)&&n_(e)},1e3),nq=0,nR=(e=1e3)=>{var t=()=>{t=G,--nq||(nP.restart(1e3),clearTimeout(0))};return nq++||nP.restart(100),e>0&&setTimeout(t,e),t()},nD=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,l=r=>{var l=ef(t)?t?.(a,r):t;return!1!==l&&(null!=l&&!0!==l&&(a=l),nM(e,a,r,e=>(o=a===B,a=e)),!o&&(i=(n?rZ:JSON.stringify)(a)))};if(!r)return await nF(()=>eP(1,async t=>{if(!l(t))return ey();var r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(r.status>=400)return 3===t?ey(C(`Invalid response: ${await r.text()}`)):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tu((1+t)*200));var o=await r.text(),s=o?.length?(n?rQ:JSON.parse)?.(o):B;return null!=s&&n_(s),ey(s)}));l(0)&&(nR(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||C("Beacon send failed."))},nz=["scope","key","targetId","version"],nB=[...nz,"created","modified","classification","purposes","tags","readonly","value"],nV=[...nz,"init","purpose","refresh"];[...nB];var nW=new Map,nJ=(e,t)=>{var a=ti(async()=>{var e=eI(nW,([e,t])=>({...ng(e),result:[...t]}));e.length&&await c.get(...e)},3e3),i=(e,t)=>eU(t,t=>eY(nW,e,()=>new Set).add(t)),l=e=>{if(tG(e)){var t,r=nh(e),n=tJ(e);eF(e5(nW,r),e=>{t=!1,e?.(n,nO(n),(e=!0)=>t=e),t&&i(r,e)})}};r5((e,t)=>a.toggle(e,e&&t>=3e3),!0);var s=new Map,u=(e,t)=>e0(s,e,Y(t)?t?void 0:0:t),c={get:(...r)=>tV(async()=>{var n=[],a=eI(r,(e,t)=>[e,t]),s=[],c=(await nD(e,()=>!!(a=eI(a,([e,t])=>{if(e){var r=nh(e);i(r,e.result);var a=nO(r);if(e.init&&u(r,e.cache),!e.refresh&&a?.expires<tr())te(n,[{...a,status:o.Success},t]);else if(!nv(e))return[e8(e,nV),t];else if(eu(e.init)){var l={...np(e),status:o.Created,...e.init};null!=l.value&&(te(s,d(l)),te(n,[l,t]))}}})).length&&{variables:{get:eI(a,0)},deviceSessionId:t?.deviceSessionId})).variables?.get??[];return te(n,...eI(c,(e,t)=>e&&[e,a[t][1]])),s.length&&nj(s),n.map(([e])=>(l(e),e))},eI(r,e=>e?.error)),set:(...a)=>tV(async()=>{var i=[],s=[],c=eI(a,(e,t)=>{if(e){var a=nh(e),l=nO(a);if(u(a,e.cache),nv(e)){if(null!=e.patch)return C("Local patching is not supported.");var c={value:e.value,classification:r.Anonymous,purposes:n.Necessary,scope:nd(e.scope),key:e.key};return s[t]={status:l?o.Success:o.Created,source:e,current:c},void te(i,d(c))}return tz(e)||e?.version!==void 0||(e.version=l?.version,e.force??=!!e.version),[e,t]}}),f=c.length>0?[]:_((await nD(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result.");return i.length&&nj(i),eF(f,(e,t)=>{var[r,n]=c[t];e.source=r,l(s[n]=e)}),s},eI(a,e=>e?.error))},d=(e,t=tr())=>({...e8(e,nB),timestamp:t,expires:t+(eY(s,nh(e))??3e3)});return nU(({variables:e})=>{if(e){var t=tr(),r=e$(eI(e.get,e=>tJ(e)),eI(e.set,e=>tJ(e)));r?.length&&nj(eU(r,d,t))}}),c},nG=(e,t)=>{if(!eu(t))return e;var r,n={};return eu(e)&&eF(e,([e,a])=>n[e]!==t[e]&&(n[e]=eu(a)?nG(a,t[e]):ee(a)&&ee(r=t[e])?a-r:a)),n},nL=(e,t,r=tQ)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?eZ(t,{type:e.type+"_patch",patchTargetId:e.clientId}):C("Source event not queued."),l=async(r,a=!1)=>{if(r=eI(ei(r),e=>eZ(t.applyEventExtensions(e),{metadata:{queued:!0}})),!a){r.length&&te(n,...r);return}n.length&&tt(r,...n.splice(0)),r.length&&await nD(e,{events:r.map(e=>(eZ(e,{metadata:{posted:!0}}),eZ(tP(e7(e),!0),{timestamp:e.timestamp-tr()}))),deviceSessionId:t?.deviceSessionId})};return r>0&&ti(()=>l([],!0),r),r8((e,t,r)=>{if(!e&&(n.length||t||r>1500)){var a=eI(i,([e,t])=>{var[r,n]=t();return n&&i.delete(e),r});(n.length||a.length)&&l(e$(n.splice(0),a),!0)}}),{post:l,postPatch:(e,t,r)=>l(o(e,t),r),registerEventPatchSource(e,t){var r=!1,n=()=>r=!0;return a.set(e,e7(e)),i.set(e,()=>{var i=o(e,t(a.get(e),n));return!i||a&&M(i,a)?[void 0,r]:(i&&a.set(e,e7(i)),[i,r])}),n}}},nH=Symbol(),nK=e=>{var t=new IntersectionObserver(e=>eF(e,({target:e,isIntersecting:t,boundingClientRect:r,intersectionRatio:n})=>e[nH]?.(t,r,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(r,n)=>{if(n&&(a=ez(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==J))&&eB(a)){var a,i,o,l,s=W,u=0,c=ta(rI.impressionThreshold),d=ae();r[nH]=(t,n,f)=>{d(t=f>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),s!==(s=t)&&(s?c(()=>{++u,o||te(e,o=ez(eI(a,e=>(e.track?.impressions||rA(r,"impressions",J,e=>e.track?.impressions))&&z({type:"impression",pos:rs(r),viewport:rv(),timeOffset:ar(),impressions:u,...av(r,J)})||null))),o?.length&&(l=eI(o,t=>e.events.registerEventPatchSource(t,e=>nG({relatedEventId:t.clientId,duration:d(),impressions:u},e))))}):(eF(l,e=>e()),c(!1)))},t.observe(r)}}},nX=()=>{var e=t2?.screen;if(!e)return{};var{width:t,height:r,orientation:n}=e,a=t<r,i=n?.angle??t2.orientation??0;return(-90===i||90===i)&&([t,r]=[r,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:t2.devicePixelRatio,width:t,height:r,landscape:a}}},nY=e=>te(e,z({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:eI(navigator.languages,(e,t,r=e.split("-"))=>z({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...nX()})),nZ=(e,t="A"===ra(e)&&t7(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),nQ=(e,t=ra(e),r=rA(e,"button"))=>r!==W&&(U(t,"A","BUTTON")||"INPUT"===t&&U(rt(e,"type"),"button","submit")||r===J),n0=()=>w?.clientId,n1={scope:"shared",key:"referrer"},n2=(e,t)=>{A.variables.set({...n1,value:[n0(),e]}),t&&A.variables.get({scope:n1.scope,key:n1.key,result(r,n,a){r?a():n?.value?.[1]===e&&t()}})},n4=tn(),n6=tn(),n5=tn(),n3=1,n8=()=>n6(),[n9,n7]=tp(),ae=e=>{var t=tn(e,n4),r=tn(e,n6),n=tn(e,n5),a=tn(e,()=>n3);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),interactiveTime:n(e,i),activations:a(e,i)})},at=ae(),ar=()=>at(),[an,aa]=tp(),ai=new WeakSet,ao=document.getElementsByTagName("iframe"),al=e=>(null==e||(e===J||""===e)&&(e="add"),et(e)&&U(e,"add","remove","update","clear")?{action:e}:eo(e)?e:void 0);function as(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var au=e=>rT(e,void 0,e=>eI(ei(eY(rp,e)?.tags))),ac=e=>e?.component||e?.content,ad=e=>rT(e,t=>t!==e&&!!ac(eY(rp,t)),e=>(E=eY(rp,e),(E=eY(rp,e))&&eN(e$(E.component,E.content,E),"tags"))),af=(e,t)=>t?e:{...e,rect:void 0,content:(S=e.content)&&eI(S,e=>({...e,rect:void 0}))},av=(e,t=W)=>{var r,n,a,i=[],o=[],l=0;return t8(e,e=>{var n=eY(rp,e);if(n){if(ac(n)){var a=ez(ei(n.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==J||e.track?.promote));r=eH(a,e=>e.track?.region)&&rc(e)||void 0;var s=ad(e);n.content&&tt(i,...eI(n.content,e=>({...e,rect:r,...s}))),a?.length&&(tt(o,...eI(a,e=>(l=eV(l,e.track?.secondary?1:2),af({...e,content:i,rect:r,...s},!!r)))),i=[])}var u=n.area||rS(e,"area");u&&tt(o,...eI(u))}}),i.length&&te(o,af({id:"",rect:r,content:i})),eF(o,e=>{et(e)?te(n??=[],e):(e.area??=eO(n,"/"),tt(a??=[],e))}),a||n?{components:a,area:eO(n,"/")}:void 0},ap=Symbol(),ah=[{id:"context",setup(e){ti(()=>eF(ao,e=>e2(ai,e)&&aa(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&r===(r=""+location.href)||(t=n=a?.value),t&&w&&!w.definition&&(w.definition=t,w.metadata?.posted&&e.events.postPatch(w,{definition:t}),t=void 0),o())});var t,r,n,a=nO({scope:"tab",key:"index"})?.value??0,i=nO({scope:"tab",key:"index"})?.value;null==i&&(i=nO({scope:"shared",key:"index"})?.value??0,n$({scope:m.Shared,key:"index",value:i+1}));var o=null,l=(r=W)=>{if(!rl(""+o,o=location.href)||r){var{source:n,scheme:l,host:s}=tk(location.href+"",!0);w={type:"view",timestamp:tr(),clientId:nb(),tab:ny,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:s},tabIndex:i,viewport:rv(),duration:at(void 0,!0)},0===i&&(w.firstTab=J),0===i&&0===a&&(w.landingPage=J);var u=tE(location.href);if(eI(["source","medium","campaign","term","content"],(e,t)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&eI(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=tM(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=nO(n1)?.value;c&&rj(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...n1,value:void 0}))}var c=document.referrer||null;c&&!rj(c)&&(w.externalReferrer={href:c,domain:rf(c)}),w.definition=t,t=void 0,e.events.post(w),e.events.registerEventPatchSource(w,e=>nG({duration:ar()},e)),n7(w)}};return nl(e=>n5(e)),r8(e=>{e?(n6(J),++n3):(n6(W),n5(W))}),rd(window,"popstate",()=>(k="back-forward",l())),eI(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),k="navigate",l()}}),l(),{processCommand:t=>ay(t)&&(te(e,t.username?{type:"login",username:t.username}:{type:"logout"}),J),decorate(e){w&&!tK(e)&&(e.view=w.clientId)}}}},{id:"components",setup(e){var t=nK(e),r=e=>null==e?void 0:{...e,component:ei(e.component),content:ei(e.content),tags:ei(e.tags)},n=({boundary:e,...n})=>{e1(rp,e,e=>r("add"in n?{...e,component:e$(e?.component,n.component),content:e$(e?.content,n.content),area:n?.area??e?.area,tags:e$(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,eY(rp,e))};return{decorate(e){eF(e.components,e=>e5(e,"track"))},processCommand:e=>ak(e)?(n(e),J):ax(e)?(eI(((e,t)=>{if(!t)return[];var r=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!eY(n,a))for(var i=[];null!=t7(a,e);){e2(n,a);var o=tC(t7(a,e),"|");t7(a,e,null);for(var l=0;l<o.length;l++){var s=o[l];if(""!==s){var u="-"===s?-1:parseInt(er(s)??"",36);if(u<0){i.length+=u;continue}if(0===l&&(i.length=0),isNaN(u)&&/^["\[{]/.test(s))for(var c="";l<o.length;l++)try{s=JSON.parse(c+=o[l]);break}catch(e){}u>=0&&t[u]&&(s=t[u]),te(i,s)}}te(r,...eI(i,e=>({add:J,...e,boundary:a})));var d=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=d}}),r})(e.scan.attribute,e.scan.components),n),J):W}}},{id:"navigation",setup(e){var t=t=>{rd(t,["click","contextmenu","auxclick"],t=>{var r,n,a,i,o,l=null,s=W;if(t8(t.target,e=>{var t;l??=nQ(e)?e:null,s=s||"NAV"===ra(e),i??=rA(e,"clicks",J,e=>e.track?.clicks)??((t=ei(rh(e)?.component))&&eH(t,e=>e.track?.clicks!==W)),o??=rA(e,"region",J,e=>e.track?.region)??((t=rh(e)?.component)&&eH(t,e=>e.track?.region))}),l){var u,c=av(l),d=au(l);i??=!s;var f={...(o??=J)?{pos:rs(l,t),viewport:rv()}:null,...(r=t.target,n=l,t8(r??n,e=>"IMG"===ra(e)||e===n?(a={element:{tagName:e.tagName,text:t7(e,"title")||t7(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},W):J),a),...c,...d,timing:ar()};if(nZ(l)){var v=l.hostname!==location.hostname,{host:p,scheme:h,source:g}=tk(l.href,!1);if(l.host===location.host&&l.pathname===location.pathname&&l.search===location.search){if("#"===l.hash)return;l.hash!==location.hash&&te(e,z({type:"anchor_navigation",anchor:l.hash,...f}));return}var m=z({clientId:nb(),type:"navigation",href:v?l.href:g,external:v,domain:{host:p,scheme:h},self:J,anchor:l.hash,...f});t.button<=1&&(1===t.button||t.ctrlKey||t.shiftKey||t.altKey||t7(l,"target")!==window.name?(n2(m.clientId),m.self=W,te(e,m)):rl(location.href,l.href)||(m.exit=m.external,n2(m.clientId)));return}var y=(t8(t.target,(e,t)=>!!(u??=al(rh(e)?.cart??rS(e,"cart")))&&!u.item&&(u.item=eL(rh(e)?.content))&&t(u)),as(u));(y||i)&&te(e,y?z({type:"cart_updated",...f,...y}):z({type:"component_click",...f}))}})};t(document),an(e=>e.contentDocument&&t(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=ro(J);n9(()=>ts(()=>(t={},r=ro(J)),250)),rd(window,"scroll",()=>{var n=ro(),a=ri();if(n.y>=r.y){var i=[];!t.fold&&n.y>=r.y+200&&(t.fold=J,te(i,"fold")),!t["page-middle"]&&a.y>=.5&&(t["page-middle"]=J,te(i,"page-middle")),!t["page-end"]&&a.y>=.99&&(t["page-end"]=J,te(i,"page-end"));var o=eI(i,e=>z({type:"scroll",scrollType:e,offset:a}));o.length&&te(e,o)}})}},{id:"cart",setup:e=>({processCommand(t){if(am(t)){var r=t.cart;return"clear"===r?te(e,{type:"cart_updated",action:"clear"}):(r=as(r))&&te(e,{...r,type:"cart_updated"}),J}return aI(t)?(te(e,{type:"order",...t.order}),J):W}})},{id:"forms",setup(e){var t=new Map,r=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var l=re(i,rg("ref"))||"track_ref",s=()=>i.isConnected&&rc(i).width,u=eY(t,i,()=>{var t,r=new Map,n={type:"form",name:re(i,rg("form-name"))||t7(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,e=>nG(n,e));var l=()=>{o(),t[3]>=2&&(n.completed=3===t[3]||!s()),e.events.postPatch(n,{...a,totalTime:tr(J)-t[4]}),t[3]=1},u=ta();return rd(i,"submit",()=>{a=av(i),t[3]=3,u(()=>{i.isConnected&&rc(i).width>0?(t[3]=2,u()):l()},750)}),t=[n,r,i,0,tr(J),1]});return eY(u[1],n)||eI(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===l||rA(e,"ref"))&&(e.value||(e.value=nE()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:tM(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[ap]:r(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{if(i){var[e,t,n,a]=i,o=-(l-(l=n8())),u=-(s-(s=tr(J))),c=t[ap];(t[ap]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=J,a[3]=2,eF(e.fields,([e,r])=>r.lastField=e===t.name||void 0)),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,i=null}},l=0,s=0,u=e=>{e&&rd(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>{r&&(i=r,"focusin"===e.type?(s=tr(J),l=n8()):o())})};u(document),an(e=>e.contentDocument&&u)}}],ag=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&t?.[e]!==void 0),am=ag("cart"),ay=ag("username"),ab=ag("tagAttributes"),aw=ag("disable"),ak=ag("boundary"),aE=ag("extension"),aS=ag(J,"flush"),aA=ag("get"),aT=ag("listener"),aI=ag("order"),ax=ag("scan"),aN=ag("set"),aO=e=>"function"==typeof e,a$=e=>{if(A)return A;et(e)&&(e=rY(e)),e0(rI,e),r2(e5(rI,"clientKey"));var t=e5(rI,"apiKey"),r=t2[rI.name]??[];if(!en(r)){C(`The global variable for the tracker "${rI.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...t)=>{var r=J;a=ez(a,n=>F(()=>(n[e]?.(...t,{tracker:A,unsubscribe:()=>r=W}),r),r4(n)))},o=[],l={applyEventExtensions(e){e.clientId??=nb(),e.timestamp??=tr(),f=J;var t=W;return eI(n,([,r])=>{(t||r.decorate?.(e)===W)&&(t=J)}),t?void 0:e}},s=nJ(rM,l),u=nL(rM,l),c=null,d=0,f=W,v=W;return e3(t2,[{[rI.name]:[A=Object.freeze({id:"tracker_"+nb(),events:u,variables:s,push(...e){if(!c&&t){if(e[0]!==t)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var r=W;if((e=ez(eN(e,e=>et(e)?rY(e):e),e=>{if(!e)return W;if(ab(e))rI.tags=e0({},rI.tags,e.tagAttributes);else if(aw(e))return rI.disabled=e.disable,W;else if(aS(e))return r=J,W;else if(aO(e))return e(A),W;return v||aT(e)||aE(e)?J:(o.push(e),W)})).length||r){var l=eK(e,e=>aE(e)?-100:aT(e)?-50:aN(e)?-10:tH(e)?90:0);if(!(c&&c.splice(f?d+1:c.length,0,...l))){for(d=0,c=l;d<c.length;d++)c[d]&&F(()=>{var e,t=c[d];if(i("command",t),f=W,tH(t))u.post(t,!1);else if(aA(t))s.get(...ei(t.get));else if(aN(t))s.set(...ei(t.set));else if(aT(t))te(a,t.listener);else if(aE(t))(e=F(()=>t.extension.setup(A),e=>r6(t.extension.id,e)))&&(te(n,[t.priority??100,e]),eK(n,([e])=>e));else if(aO(t))t(A);else{var r=W;for(var[,e]of n)if(r=e.processCommand?.(t)??W)break;r||r6("invalid-command",t)}},e=>r6(A,"internal-error",e));c=null,r&&u.post([],!0)}}}},__isTracker:J})]}]),nI(async(e,t,n,a)=>{if("ready"===e){var i=_(await s.get({scope:"session",key:"info",cache:V}).value,"No session data.");l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(nY(A),i.hasUserAgent=!0),v=!0,o.length&&te(A,o),a(),te(A,...eI(ah,e=>({extension:e})),...r,{set:{scope:"local",key:"loaded",value:!0}})}},!0),A};t2[".tail.js.init"]=e=>{e(a$)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
