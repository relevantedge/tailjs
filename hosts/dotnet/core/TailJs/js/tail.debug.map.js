(()=>{"use strict";Array.isArray;var e=e=>e&&"object"==typeof e,r=r=>e(r)&&!t(r),t=e=>e?.[Symbol.iterator]&&!("string"==typeof e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>(r,e.charCodeAt(0),r));var f={32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},o={exports:{}},l=((()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var f=0;f<e.length;f++)u(e[f]);else u(e);return i.subarray(0,o);function u(e,i){switch(typeof e){case"undefined":l();break;case"boolean":(e=>{c(e?195:194)})(e);break;case"number":(e=>{var r;isFinite(e)&&Math.floor(e)===e?!(e<0||127<e)||e<0&&-32<=e?c(e):0<e&&e<=255?d([204,e]):e<-128||127<e?0<e&&e<=65535?d([205,e>>>8,e]):e<-32768||32767<e?0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):e<-2147483648||2147483647<e?0<e&&e<=0x10000000000000000?d([211,(r=e/a)>>>24,r>>>16,r>>>8,r,(r=e%a)>>>24,r>>>16,r>>>8,r]):e<-0x8000000000000000||0x8000000000000000<e?d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(c(211),v(e)):d([210,e>>>24,e>>>16,e>>>8,e]):d([209,e>>>8,e]):d([208,e]):(n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),c(203),d(new Uint8Array(t)))})(e);break;case"string":(e=>{var e=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(127<e.charCodeAt(n)){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var f=e.charCodeAt(o);if(f<128)i[a++]=f;else{if(f<2048)i[a++]=f>>6|192;else{if(55295<f&&f<56320){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(o);if(u<56320||57343<u)throw new Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+o+" out of range");i[a++]=(f=65536+((1023&f)<<10)+(1023&u))>>18|240,i[a++]=f>>12&63|128}else i[a++]=f>>12|224;i[a++]=f>>6&63|128}i[a++]=63&f|128}}return r?i:i.subarray(0,a)})(e),t=e.length;31<t?d(255<t?65535<t?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):c(160+t),d(e)})(e);break;case"object":null===e?l():(e instanceof Date?e=>{var t,r=e.getTime()/1e3;0===e.getMilliseconds()&&0<=r&&r<4294967296?d([214,255,r>>>24,r>>>16,r>>>8,r]):0<=r&&r<17179869184?d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]):(d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r))}:Array.isArray(e)?s:e instanceof Uint8Array||e instanceof Uint8ClampedArray?e=>{var r=e.length;d(15<r?65535<r?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)}:e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s:e=>{var t,r=0;for(t in e)void 0!==e[t]&&r++;for(t in 15<r?d(65535<r?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):c(128+r),e){var n=e[t];void 0!==n&&(u(t),u(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?u(r.invalidTypeReplacement(e),!0):u(r.invalidTypeReplacement,!0)}}function l(){c(192)}function s(e){var r=e.length;15<r?d(65535<r?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):c(144+r);for(var t=0;t<r;t++)u(e[t])}function c(e){if(i.length<o+1){for(var r=2*i.length;r<o+1;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,e=e<0?(e++,r=~(Math.abs(e)/a),~(Math.abs(e)%a)):(r=e/a,e%a);d([r>>>24,r>>>16,r>>>8,r,e>>>24,e>>>16,e>>>8,e])}}function r(e,r){var t,n=4294967296,a=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(0<=r&&r<=127)return r;if(128<=r&&r<=143)return s(r-128);if(144<=r&&r<=159)return c(r-144);if(160<=r&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return u(4);if(203===r)return u(8);if(204===r)return f(1);if(205===r)return f(2);if(206===r)return f(4);if(207===r)return f(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return s(-1,2);if(223===r)return s(-1,4);if(224<=r&&r<=255)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var i,t=0,n=!0;0<r--;)n?(t+=127&(i=e[a++]),128&i&&(t-=128),n=!1):t=(t*=256)+e[a++];return t}function f(r){for(var t=0;0<r--;)t=t*256+e[a++];return t}function u(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=f(t));t=e.subarray(a,a+r);return a+=r,t}function s(e,r){e<0&&(e=f(r));for(var t={};0<e--;)t[i()]=i();return t}function c(e,r){e<0&&(e=f(r));for(var t=[];0<e--;)t.push(i());return t}function d(r,t){r<0&&(r=f(t));t=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;n<t;){var i=e[n++];if(127<i)if(191<i&&i<224){if(t<=n)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(223<i&&i<240){if(t<=n+1)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(i<=239||248<=i)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(t<=n+2)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(65535<i){if(1114111<i)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a=(a+=String.fromCharCode(i>>10|55296))+String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,t,r)}function v(e,r){e<0&&(e=f(r));r=f(1),e=l(e);return 255===r?(e=>{var t,r;if(4===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*r);if(8===e.length)return t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6);if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(e):{type:r,data:e}}}var t={serialize:e,deserialize:r,encode:e,decode:r};o?o.exports=t:window[window.msgpackJsName||"msgpack"]=t})(),new ArrayBuffer(8));new DataView(l),(()=>{var[,,,]=(()=>{for(var t,l=0n,s=0n,c=[],d=0,v=0,g=0,g=0;g<"".length;((e,r)=>e.charCodeAt(r))("",g++));var h=()=>{},p=e=>(v=255&(d+=-c[g=(g+1)%c.length]+(c[g]=e)),e);return[e=>e,e=>e,(e,r=64)=>{if(null==e)return null;var n="boolean"==typeof r?64:r;for(h(),[l,s]=f[n],t=0;t<e.length;l=BigInt.asUintN(n,(l^BigInt(v^p(e[t++])))*s));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+l%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):l.toString(36)}]})()})();var s,c,d,v,g=()=>Math.trunc(performance.timeOrigin+performance.now()),w=g().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),y=(e,r,t,n={capture:!0,passive:!0})=>(t=>{var o=!1,f=()=>{return o!==(o=!1)&&(e.addEventListener(r,l,n),!0)},u=()=>{return o!==(o=!0)&&(e.addEventListener(r,l,n),!0)},l=e=>t(e,f);return u(),[f,u]})(t),h=JSON.stringify,p=e=>{if(null==e)return null;try{return JSON.parse(e)}catch(e){}},m=(d=0,{get(e){return s.getItem(e)?.[0]??null},set:c=(e,r,t)=>(null==r?s.removeItem(e):s.setItem(e,[r,w,t]),r),delete(e){return c(e,null)},update:v=(e,r,t)=>{3<d++&&b(`Lost race ('${e}').`,!0);var n=c(e,r(s.getItem(e)?.[0]??null)),a=s.getItem(e);return a?.[1]&&a?.[1]!==w?v(e,r):(d=0,n)},observe:(s={getItem(e){return p(localStorage.getItem(e))},setItem(e,r){return localStorage.setItem(e,h(r.filter(e=>null!=e)))},removeItem(e){return localStorage.removeItem(e)},observe(e,r){var[t,n]=y(window,"storage",({key:t,newValue:n,oldValue:a})=>e==t&&r(p(n),p(a),e)),[a,i]=y(window,"pageshow",n),[o,f]=y(window,"pagehide",t);return[()=>(o(),a(),t()),()=>(f(),i(),n())]}}).observe?s.observe.bind(s):void 0}),b=(e,r,t=!1)=>{if("boolean"==typeof r&&(t=r,r=null),r?.message&&(e+="("+r.message,r.stack&&(e+="\n\n"+r.stack),e+=")"),console.error(e),t)throw new Error(e)},A=((r=m)=>({get:()=>r.get("active2"),set:(t,n)=>r.set("active2",t,n),delete:()=>r.delete("active2"),update:(t,n)=>r.update("active2",t,n),observe:r.observe?t=>r.observe("active2",t):void 0}))(),E=async()=>{y(window,"pageshow",()=>A.update(e=>((e=r(e)?e:{})[w]=g(),e))),y(window,"pagehide",()=>A.update(e=>(r(e)&&delete e[w],e)))};window[".tail.js.init"]=e=>{e(E)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
