(()=>{var e,t,r,n,i,l,a,o,u,s,d,v,c,f,p,h,g,y,m,w,k,S,T,x;function j(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var C=(e,t=e=>Error(e))=>{throw el(e=e2(e))?t(e):e},M=(e,t,r=-1)=>{if(e===t||null==(null!=e?e:t))return!0;if(ed(e)&&ed(t)&&e.length===t.length){var i,n=0;for(i in e){if(e[i]!==t[i]&&!M(e[i],t[i],r-1))return!1;++n}return n===Object.keys(t).length}return!1},U=(e,t,...r)=>e===t||0<r.length&&r.some(t=>U(e,t)),F=(e,t)=>null!=e?e:C(null!=t?t:"A required value is missing",e=>TypeError(e.replace("..."," is required."))),q=(e,t=!0,r)=>{try{return e()}catch(e){return ep(t)?eu(e=t(e))?C(e):e:et(t)?console.error(t?C(e):e):t}finally{null!=r&&r()}};class z extends Promise{get initialized(){return null!=this._result}then(e,t){var r;return(null!=(r=this._result)?r:this._result=this._action()).then(e,t)}catch(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).catch(e)}finally(e){var t;return(null!=(t=this._result)?t:this._result=this._action()).finally(e)}constructor(e){super(()=>{}),j(this,"_action",void 0),j(this,"_result",void 0),this._action=e}}var R=e=>new z(async()=>e2(e)),P=async(e,t=!0,r)=>{try{return await e2(e)}catch(e){if(!et(t))return await t(e);if(t)throw e;console.error(e)}finally{await(null==r?void 0:r())}},W=e=>e,B=e=>!!e,D=e=>e===K,J=void 0,L=Number.MAX_SAFE_INTEGER,V=!1,K=!0,H=()=>{},G=e=>e,X=e=>null!=e,Z=Symbol.iterator,Y=Symbol.asyncIterator,Q=(e,t)=>(r,n=!0)=>e(r)||t&&n&&null!=r&&null!=(r=t(r))?r:J,ee=(e,t)=>ep(t)?e!==J?t(e):J:(null==e?void 0:e[t])!==J?e:J,et=e=>"boolean"==typeof e,er=Q(et,e=>0!=e&&(1==e||"false"!==e&&("true"===e||J))),en=e=>e!==V,ei=e=>"number"==typeof e,el=e=>"string"==typeof e,ea=Q(el,e=>null==e?void 0:e.toString()),eo=Array.isArray,eu=e=>e instanceof Error,es=(e,t=!1)=>null==e?J:!t&&eo(e)?e:eh(e)?[...e]:[e],ed=e=>e&&"object"==typeof e,ev=e=>(null==e?void 0:e.constructor)===Object,ec=(e,t)=>"function"==typeof(null==e?void 0:e[t]),ef=e=>"symbol"==typeof e,ep=e=>"function"==typeof e,eh=(e,t=!1)=>!(null==e||!e[Z]||"string"==typeof e&&!t),eg=e=>e instanceof Map,ey=e=>e instanceof Set,em=(e,t)=>null==e?J:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,eb=(e,t,r)=>e[0]===t&&e[e.length-1]===r,ew=e=>el(e)&&(eb(e,"{","}")||eb(e,"[","]")),ek=!1,eS=e=>(ek=!0,e),eT=e=>null==e?J:ep(e)?e:t=>t[e],ex=(e,t,r)=>(null!=t?t:r)!==J?(e=eT(e),null==t&&(t=0),null==r&&(r=L),(n,i)=>t--?J:r--?e?e(n,i):n:r):e,eI=e=>null==e?void 0:e.filter(X),eA=(e,t,r,n)=>null==e?[]:!t&&eo(e)?eI(e):e[Z]?function*(e,t){if(null!=e)if(t){t=eT(t);var r=0;for(n of e)if(null!=(n=t(n,r++))&&(yield n),ek){ek=!1;break}}else for(var n of e)null!=n&&(yield n)}(e,r===J?t:ex(t,r,n)):ed(e)?function*(e,t){t=eT(t);var n,r=0;for(n in e){var i=[n,e[n]];if(null!=(i=t?t(i,r++):i)&&(yield i),ek){ek=!1;break}}}(e,ex(t,r,n)):eA(ep(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(null==t&&(t=-e-1);e++;)yield t--;else for(null==t&&(t=0);e--;)yield t++}(e,r),t),eE=(e,t,r,n)=>eA(e,t,r,n),eN=(e,t,r=1,n=!1,i,l)=>function*e(t,r,n,i){if(null!=t)if(t[Z]||n&&ed(t))for(var l of i?eA(t):t)1!==r?yield*e(l,r-1,n,!0):yield l;else yield t}(eA(e,t,i,l),r+1,n,!1),eO=(e,t,r,n)=>{if(t=eT(t),eo(e)){var i=0,l=[];for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n&&!ek;r++){var a=e[r];null!=(t?a=t(a,i++):a)&&l.push(a)}return ek=!1,l}return null!=e?es(eE(e,t,r,n)):J},e$=(e,t,r,n)=>null!=e?new Set([...eE(e,t,r,n)]):J,e_=(e,t,r=1,n=!1,i,l)=>es(eN(e,t,r,n,i,l)),ej=(...e)=>{var t;return eq(1===e.length?e[0]:e,e=>null!=e&&(null!=t?t:t=[]).push(...es(e))),t},eC=(e,t,r,n)=>{var i,l,a=0;for(r=r<0?e.length+r:null!=r?r:0,n=n<0?e.length+n:null!=n?n:e.length;r<n;r++)if(null!=e[r]&&(i=null!=(l=t(e[r],a++))?l:i,ek)){ek=!1;break}return i},eM=(e,t)=>{var r,n,l,i=0;for(l of e)if(null!=l&&(r=null!=(n=t(l,i++))?n:r,ek)){ek=!1;break}return r},eU=(e,t)=>{var r,n,l,i=0;for(l in e)if(r=null!=(n=t([l,e[l]],i++))?n:r,ek){ek=!1;break}return r},eF=(e,t,r,n)=>{var i;if(null!=e){if(eo(e))return eC(e,t,r,n);if(r===J){if(e[Z])return eM(e,t);if("object"==typeof e)return eU(e,t)}for(var l of eA(e,t,r,n))null!=l&&(i=l);return i}},eq=eF,ez=async(e,t,r,n)=>{var i,l;if(null==e)return J;for(l of eE(e,t,r,n))if(null!=(l=await l)&&(i=l),ek){ek=!1;break}return i},eR=(e,t)=>{if(null==e)return J;var r={};if(t){var n,l,i=0;for(l in e)(n=t([l,e[l]],i++))&&(r[n[0]]=n[1])}else for(var a of e)a&&(r[a[0]]=a[1]);return r},eP=(e,t,r)=>{var n,i,l;return null==e?J:et(t)||r?(l={},eq(e,r?(e,n)=>null!=(e=t(e,n))&&null!=(e[1]=r(l[e[0]],e[1]))&&(l[e[0]]=e[1]):e=>eq(e,t?e=>{var t;return null!=(null==e?void 0:e[1])&&((null!=(t=(n=l)[i=e[0]])?t:n[i]=[]).push(e[1]),l)}:e=>null!=(null==e?void 0:e[1])&&(l[e[0]]=e[1],l))),l):eR(eO(e,t?(e,r)=>ee(t(e,r),1):e=>ee(e,1)))},eW=(e,t,r,n,i)=>{var a=()=>ep(r)?r():r;return null!=(e=eF(e,(e,n)=>r=null!=(e=t(r,e,n))?e:a(),n,i))?e:a()},eB=(e,t,r,n)=>eO(e,(e,r)=>e&&null!=t&&t(e,r)?e:J,r,n),eD=(e,t)=>{var r,n;if(null==e)return J;if(!t){if(null!=(r=null!=(n=e.length)?n:e.size))return r;if(!e[Z])return Object.keys(e).length}return r=0,null!=(n=eF(e,t?(e,n)=>t(e,n)?++r:r:()=>++r))?n:0},eJ=(e,...t)=>null==e?J:ei(e)?Math.max(e,...t):eW(e,(e,r,n,i=t[1]?t[1](r,n):r)=>null==e||ei(i)&&e<i?i:e,J,t[2],t[3]),eV=(e,t,r,n)=>{var i;return null==e?J:ev(e)&&!t?0<Object.keys(e).length:null!=(i=null!=(i=null==(i=e.some)?void 0:i.call(e,null!=t?t:B))?i:eF(e,t?(e,r)=>!!t(e,r)&&eS(!0):()=>eS(!0),r,n))&&i},eK=(e,t=e=>e)=>{var r;return null!=(r=es(e))&&r.sort((e,r)=>t(e)-t(r)),e},eH=(e,t,r)=>(e.constructor===Object||eo(e)?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eG=(e,t,r)=>{var n;if(e)return void 0===(n=e.get?e.get(t):e.has?e.has(t):e[t])&&null!=r&&null!=(n=ep(r)?r():r)&&eH(e,t,n),n},eX=(e,...t)=>(eq(t,t=>eq(t,([t,r])=>{null!=r&&(ev(e[t])&&ev(r)?eX(e[t],r):e[t]=r)})),e),eZ=(e,t,r,n)=>{if(e)return null!=r?eH(e,t,r,n):(eq(t,t=>eo(t)?eH(e,t[0],t[1]):eq(t,([t,r])=>eH(e,t,r))),e)},eY=(e,t,r)=>{var n;return ec(e,"set")?void 0===(n=r(e.get(t)))?e.delete(t):e.set(t,n):ec(e,"add")?r(n=e.has(t))?e.add(t):e.delete(t):e&&void 0===(n=e[t]=r(e[t]))&&ev(e)&&delete e[t],e},eQ=(e,t)=>e instanceof Set||e instanceof WeakSet?!e.has(t)&&(e.add(t),!0):!eG(e,t)&&(eH(e,t,!0),!0),e0=(e,t)=>{var r;if(null!=(null!=e?e:t))return r=eG(e,t),ec(e,"delete")?e.delete(t):delete e[t],r},e1=(e,t)=>{if(e)return eo(t)?(eo(e)&&1<e.length?t.sort((e,t)=>t-e):t).map(t=>e1(e,t)):eo(e)?t<e.length?e.splice(t,1)[0]:void 0:e0(e,t)},e2=e=>ep(e)?e():e,e6=(e,t)=>null==e?e:ep(e)?(...r)=>t(e,...r):t(()=>e),e4=(e,t=-1)=>eo(e)?t?e.map(e=>e4(e,t-1)):[...e]:ev(e)?t?eP(e,([e,r])=>[e,e4(r,t-1)]):{...e}:ey(e)?new Set(t?eO(e,e=>e4(e,t-1)):e):eg(e)?new Map(t?eO(e,e=>[e[0],e4(e[1],t-1)]):e):e,e5=(e,...t)=>null==e?void 0:e.push(...t),e3=(e,...t)=>null==e?void 0:e.unshift(...t),e8=(e,t)=>{var r,i,l;if(e)return ev(t)?(l={},ev(e)&&(eq(e,([e,a])=>{if(a!==t[e]){if(ev(r=a)){if(!(a=e8(a,t[e])))return;[a,r]=a}else ei(a)&&ei(void 0)&&(a=(r=a)-void 0);l[e]=a,(null!=i?i:i=e4(t))[e]=r}}),i)?[l,i]:void 0):[e,e]},e9="undefined"!=typeof performance?(e=K)=>e?Math.trunc(e9(V)):performance.timeOrigin+performance.now():Date.now,e7=(e=!0,t=()=>e9())=>{var r,n=+e*t(),i=0;return(l=e,a)=>(r=e?i+=-n+(n=t()):i,a&&(i=0),(e=l)&&(n=t()),r)},tt=(e,t=0)=>{var e=ep(e)?{frequency:t,callback:e}:e,{queue:i=!0,paused:l=!1,trigger:a=!1,once:o=!1,callback:u=()=>{},raf:s}=e,d=(t=null!=(e=e.frequency)?e:0,0),v=to(!0).resolve(),c=e7(!l),f=c(),p=async e=>{if(!d||!i&&v.pending&&!0!==e)return!1;if((m.busy=!0)!==e)for(;v.pending;)await v;return e||v.reset(),(!1===await P(()=>u(c(),-f+(f=c())),!1,()=>!e&&v.resolve())||t<=0||o)&&y(!1),!(m.busy=!1)},h=()=>d=setTimeout(()=>s?requestAnimationFrame(g):g(),t<0?-t:t),g=()=>{m.active&&p(),m.active&&h()},y=(e,t=!e)=>(c(e,t),clearTimeout(d),m.active=!!(d=e?h():0),m),m={active:!1,busy:!1,restart:(e,r)=>(t=null!=e?e:t,u=null!=r?r:u,y(!0,!0)),toggle:(e,t)=>e!==m.active?e?t?(y(!0),m.trigger(),m):y(!0):y(!1):m,trigger:async e=>await p(e)&&(y(m.active),!0)};return m.toggle(!l,a)};function tr(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}class tn{get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new ti,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}constructor(){tr(this,"_promise",void 0),this.reset()}}class ti{then(e,t){return this._promise.then(e,t)}constructor(){var e;tr(this,"_promise",void 0),tr(this,"resolve",void 0),tr(this,"reject",void 0),tr(this,"value",void 0),tr(this,"error",void 0),tr(this,"pending",!0),this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(this.pending)return this.pending=!1,this[t?"error":"value"]=r===J||r,e(r),this;if(n)return this;throw TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}}var ta=(e,t)=>null==e||isFinite(e)?!e||e<=0?e2(t):new Promise(r=>setTimeout(async()=>r(await e2(t)),e)):C(`Invalid delay ${e}.`),to=e=>new(e?tn:ti),ts=(e,t,r)=>{var n=!1,i=(...t)=>e(...t,l),l=()=>n!==(n=!1)&&(r(i),!0),a=()=>n!==(n=!0)&&(t(i),!0);return a(),[l,a]},Q=()=>{var e,t=new Set;return[(r,n)=>{var i=ts(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,i[0]),i},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tv=(e,t,r)=>null==e?J:eo(t)?null==(t=t[0])?J:t+" "+tv(e,t,r):null==t?J:1===t?e:null!=r?r:"is"===e?"are":e+"s",tc=!0,tf=(e,t,r)=>r?(tc&&e5(r,"[",t,"m"),eo(e)?e5(r,...e):e5(r,e),tc&&e5(r,"[m"),r):tf(e,t,[]).join(""),tp=(e,t,r=!1)=>e&&(e.length>t?r?`${e.slice(0,t)}... [and ${e.length-t} more]`:e.slice(0,t-1)+"â€¦":e),tg=(e,t)=>{var a,r=[],n={},i={},l=0;for(a in t)a===t[a]&&(Object.defineProperty(i,a,{value:a,writable:!1,enumerable:!0,configurable:!1}),n[a]=l++,r.push(a));var o=(t,r=!0)=>null==t?J:null!=n[t]?t:r?C(`The ${e} "${t}" is not defined.`):J,u={writable:!1,enumerable:!1,configurable:!1};return Object.defineProperties(i,{parse:{value:o,...u},ranks:{value:n,...u},levels:{value:r,...u},compare:{value(e,t){e=n[o(e)],t=n[o(t)];return e<t?-1:t<e?1:0},...u}}),i},ty=Symbol(),tm=(e,{delimiters:t=["|",";",","],decode:r=!0,lowerCase:n}={})=>{var i,a;return e?(null==(a=e.split("=").map(e=>(e=r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim(),n?e.toLowerCase():e)))[1]&&(a[1]=""),a[2]=a[1]&&(el(t)?t=[t]:eo(t))&&tD(t,e=>1<(i=a[1].split(e)).length?tF(i):J)||(a[1]?[a[1]]:[]),a):J},tb=(e,{delimiters:t=!0,requireAuthority:r,...n}={})=>null==e?J:tx(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,i,l,a,o,u,s,d,v,c,f)=>{e={source:e,scheme:r,urn:r?!i:!i&&J,authority:l,user:a,password:o,host:null!=u?u:s,port:null!=d?parseInt(d):J,path:v,query:!1===t?c:c?tw(c,{...n,delimiters:t}):J,fragment:f};return e.path=e.path||(e.authority?e.urn?"":"/":J),e}),tw=(e,t)=>tk(e,"&",t),tk=(e,t,{delimiters:r=!0,...n}={})=>{e=tJ(null==e||null==(e=e.match(/(?:^.*?\?|^)([^#]*)/))||null==(e=e[1])?void 0:e.split(t),e=>{var[e,l,a]=null!=(e=tm(e,{...n,delimiters:!1===r?[]:!0===r?J:r}))?e:[];return null!=(e=null==e?void 0:e.replace(/\[\]$/,""))?!1!==r?[e,1<a.length?a:l]:[e,l]:tU}),t=t8(tK(e,!1),([e,t])=>[e,!1!==r?1<t.length?tX(t):t[0]:t.join(",")]);return t&&(t[ty]=e),t},tS=(e,t)=>t&&null!=e?t.test(e):J,tT=(e,t,r)=>tx(e,t,r,!0),tx=(e,t,i,l=!1)=>null==(null!=e?e:t)?J:i?(r=J,l?(n=[],tx(e,t,(...e)=>null!=(r=i(...e))&&n.push(r))):e.replace(t,(...e)=>r=i(...e)),r):null!=(l=e.match(t))?l:J,tI=e=>null==e?void 0:e.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tA=/\z./g,tE=(e,t)=>(t=rt(e$(eB(e,e=>null==e?void 0:e.length)),"|"))?RegExp(t,"gu"):tA,tN={},tO=e=>e instanceof RegExp,t$=(r,n=[","," "])=>{var i;return tO(r)?r:eo(r)?tE(eO(r,e=>null==(e=t$(e,n))?void 0:e.source)):et(r)?r?/./g:tA:el(r)?null!=(i=(e=tN)[t=r])?i:e[t]=tx(r||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,r)=>t?RegExp(t,"gu"):tE(eO(t_(r,RegExp(`(?<!(?<!\\\\)\\\\)[${rt(n,tI)}]`)),e=>e&&`^${rt(t_(e,RegExp("(?<!(?<!\\\\)\\\\)\\*")),e=>tI(tj(e,/\\(.)/g,"$1")),".*")}$`))):J},t_=(e,t,r=!0)=>null==e?J:r?t_(e,t,!1).filter(G):e.split(t),tj=(e,t,r)=>null!=(t=null==e?void 0:e.replace(t,r))?t:e,tC=(e=(e,t)=>e-t,t=e=>e[1]-e[0])=>{var r=[];return eZ(r,{push(n,i){for(var l=[n,i],a=(e=!0)=>e?r.width=r.reduce((e,r)=>e+t(r),0):r.width,o=0;o<r.length;o++){var u,s,d=r[o];if(e(l[1],d[0])<0)return a(r.splice(o,0,l));if(e(l[0],d[1])<=0){if(e(l[0],d[0])<0&&(u=d[0]=l[0]),0<e(l[1],d[1])&&(u=d[1]=l[1]),!((null==(s=r[o+1])?void 0:s[0])<d[1]))return a(null!=u);u=l=r.splice(o--,1)[0]}}return a(l&&(r[r.length]=l))},width:0})},tM=!1,tU=Symbol(),tF=e=>(tM=!0,e),tq=Symbol(),tz=Symbol(),tR=Symbol.iterator,tP=e=>{tP=e=>e;var n,t=()=>(e,t,r,n,i)=>{var l,o,a=0;for(o of e)if((l=t?t(o,a++,n,i):o)!==tU){if(l===tF)break;if(n=l,r&&r.push(l),tM){tM=!1;break}}return r||n},r=(Array.prototype[tq]=(e,t,r,n,i)=>{for(var a,o=0,u=e.length;o<u;o++)if(a=e[o],(a=t?t(a,o,n,i):a)!==tU){if(a===tF)break;if(n=a,r&&r.push(a),tM){tM=!1;break}}return r||n},t());for(n of(Object.prototype[tq]=(e,n,i,l,a)=>{if(e[tR])return(e.constructor===Object?r:Object.getPrototypeOf(e)[tq]=t())(e,n,i,l,a);var u,d,s=0;for(d in e)if(u=[d,e[d]],(u=n?n(u,s++,l,a):u)!==tU){if(u===tF)break;if(l=u,i&&i.push(u),tM){tM=!1;break}}return i||l},Object.prototype[tz]=function(){var t,e;return this[tR]||this[Y]?this.constructor===Object?null!=(e=this[Y]())?e:this[tR]():((e=Object.getPrototypeOf(this))[tz]=null!=(t=e[Y])?t:e[tR],this[tz]()):function*(e){for(var t in e)yield[t,e[t]]}(this)},[Map.prototype,WeakMap.prototype,Set.prototype,WeakSet.prototype,Object.getPrototypeOf(function*(){})]))n[tq]=t(),n[tz]=n[tR];return Number.prototype[tq]=(e,t,n,i,l)=>r(tW(e),t,n,i,l),Number.prototype[tz]=tW,Function.prototype[tq]=(e,t,n,i,l)=>r(tB(e),t,n,i,l),Function.prototype[tz]=tB,e};function*tW(e=this){for(var t=0;t<e;t++)yield t}function*tB(e=this){for(var t=void 0;void 0!==(t=e(t));)yield t}var tD=(e,t,r,n)=>(tD=tP((e,t,r,n=e)=>e?e[tq](e,t,void 0,r,n):null==e?e:void 0))(e,t,r,n),tJ=(e,t,r=[],n,i=e)=>(tJ=tP((e,t,r=[],n,i=e)=>e||0===e||""===e?e[tq](e,t,r,n,i):null==e?e:void 0))(e,t,r,i,n),tL=(e,t=!0,r=!1)=>tJ(e,!0===t?e=>null!=e?e:tU:t?t.has?e=>null==e||t.has(e)===r?tU:e:(e,n,i)=>!t(e,n,i)===r?e:tU:e=>e||tU),tV=(e,t,r=-1,n=[],i,l=e)=>tJ(e,(e,i,l)=>null!=(t?e=t(e,i,l):e)&&e[Symbol.iterator]&&"string"!=typeof e&&r?(tV(e,void 0,r-1,n,e),tU):e,n,i,l),tK=(e,t,r)=>{var n,i,l,a;return null!=t&&"function"!=typeof t&&([t,r]=[void 0,t]),tD(e,!1!==r?(l=new Map,(e,r,n)=>{void 0!==(a=t?t(e,r,n):e)[0]&&t4(l,a[0],()=>[]).push(a[1])}):(l={},(e,r,o)=>(a=t?t(e,r,o):e)&&void 0!==a[0]&&(null!=(r=(n=l)[i=a[0]])?r:n[i]=[]).push(a[1]))),l},tG=e=>null==e||eo(e)?e:e[tR]&&"string"!=typeof e?[...e]:[e],tX=(e,...t)=>{var r,n;for(n of e=!t.length&&eh(e)?e:[e,...t])if(null!=n){if(eh(n)){(null!=r?r:r=[]).push(...n);continue}(null!=r?r:r=[]).push(n)}return r},tZ=(e,t,r)=>(r?-1:1)*(e===t?0:"string"==typeof e?"string"==typeof t?e.localeCompare(t):1:"string"==typeof t?-1:null==e?null==t?0:-1:null==t?1:e-t),tY=(e,t,r)=>tG(e).sort("function"==typeof t?(e,n)=>tZ(t(e),t(n),r):eo(t)?t.length?(e,n)=>{for(var i=0,l=0;l<t.length&&!i;l++)i=tZ(t[l](e),t[l](n),r);return i}:(e,t)=>tZ(e,t,r):(e,r)=>tZ(e,r,t)),tQ=Object.keys,t0=Symbol(),t1=Symbol(),t2=Symbol(),t6=e=>{for(var{prototype:t}of(t6=e=>e,[Map,WeakMap]))t[t0]=function(e,t){return void 0===t?this.delete(e):this.get(e)!==t&&!!this.set(e,t)},t[t1]=t.get;for(var{prototype:t}of[Set,WeakSet])t[t0]=function(e,t){t||void 0===t?this.has(e)||this.add(e):this.delete(e)},t[t1]=t.has,t[t2]=function(e){for(var t of e)void 0!==t&&this.add(t);return this};for(var{prototype:t}of(Array.prototype[t2]=function(e){return this.push(...e),this},[Object,Array]))t[t0]=function(e,t){return void 0===t?void 0!==this[e]&&(delete this[e],!0):(this[e]=t)!==t},t[t1]=function(e){return this[e]};return e},t4=(e,t,r)=>(t4=t6((e,t,r)=>{if(null==e)return e;var n=e[t1](t);if(void 0===n&&void 0!==(n="function"==typeof r?r():r)){if(null!=n&&n.then)return n.then(r=>void 0===r?r:e[t0](t,r));e[t0](t,n)}return n}))(e,t,r),t5=(e,t,r)=>(t5=t6((e,t,r)=>(e[t0](t,r),r)))(e,t,r),t3=(e,...t)=>(t3=t6((e,...t)=>null==e?e:e[t2](t)))(e,...t),t8=(e,t)=>{var r={};return tD(e,t?(e,n,i)=>(e=t(e,n,i))&&("symbol"!=typeof e||e!==tU&&e!==tF)?r[e[0]]=e[1]:e:e=>e&&("symbol"!=typeof e||e!==tU&&e!==tF)?r[e[0]]=e[1]:e),r},t9=(e,...t)=>(t9=t6((e,...t)=>((null==e?void 0:e.constructor)===Object?tD(t,t=>tD(t,t=>t&&(e[t[0]]=t[1]))):tD(t,t=>tD(t,t=>t&&e[t0](t[0],t[1]))),e)))(e,...t),t7=(e,t)=>null==e?e:t8(t,t=>null!=e[t]||t in e?[t,e[t]]:tU),re=e=>null==e||"boolean"==typeof e||""===e.toString(),rt=(e,t,r)=>null==e?e:eh(e)?tL("function"==typeof t?tJ(e,t):(r=t,e),re,!0).join(null!=r?r:""):re(e)?"":null==e?void 0:e.toString(),rr=(e,t,r,n)=>{var i,o;return e||0===e?"function"==typeof t?rr(tJ(e,t),r,n):(i=[],n=tD(e,(e,t,r)=>re(e)?tU:(r&&i.push(r),e.toString())),[t,o]=eo(t)?t:[,t],o=(null!=o?o:o="and")[0]===(t=null==t?",":t)?o+" ":" "+(o?o+" ":""),t=i.length?""+i.join(t+" ")+o+n:null!=n?n:"",r?r(t,i.length+ +(null!=n)):t):null==e?e:void 0},rn=tg("data classification",{never:"never",anonymous:"anonymous",indirect:"indirect",direct:"direct",sensitive:"sensitive"}),ri=["necessary","performance","functionality","marketing","personalization","security"],rl=t8(ri,e=>[e,e]),ra=(Object.freeze(eR(ri.map(e=>[e,!0]))),(e,t)=>"personalization"===e&&!0!==(null==t?void 0:t.personalization)?"functionality":"security"===e&&!0!==(null==t?void 0:t.security)?"necessary":e),ro=(e,t)=>{var r=e;return!0!==(null==t?void 0:t.personalization)&&null!=r.personalization&&(null!=(r=r===e?{...e}:r).functionality?r.personalization=r.functionality:r.functionality=r.personalization,delete r.personalization),!0!==(null==t?void 0:t.security)&&null!=r.security&&delete(r=r===e?{...e}:r).security,r},ru_parse=function(e,{names:t=!1,validate:r=!0}={}){if(null==e)return e;if(e.purposes&&(e=e.purposes),el(e)&&(e=e.split(",")),eo(e)){var i,n={};for(i of e)rl[i]?"necessary"!==i&&(n[i]=!0):r&&C(`The purpose name '${i}' is not defined.`);e=n}return t?(t=tQ(e)).length?t:["necessary"]:e},ru_test=function(e,t,{intersect:r,optionalPurposes:n,targetPurpose:i}){if("boolean"==typeof n&&(n={personalization:n,security:n}),i&&"necessary"!==(i=ra(i,n))&&!t[ra(i,n)])return!1;if(e=ro(e,n),t=ro(t,n),r){for(var l in t)if(t[l]&&!e[l])return!1;if("all"===r)for(var l in e)if(e[l]&&!t[l])return!1;return!0}var a=!1;for(l in e)if(e[l]){if(t[l])return!0;a=!0}return!a},rs=(tg("data restriction",{public:"public","trusted-write":"trusted-write","trusted-only":"trusted-only"}),e=>{var t;return`${null!=(t=null==e?void 0:e.classification)?t:"anonymous"} data for ${rr(ru_parse(null==e?void 0:e.purposes,{names:!0}))}  purposes.`}),rd={anonymous:{classification:"anonymous",purposes:{}},clone:e=>e&&{classification:e.classification,purposes:{...e.purposes}},equals:(e,t)=>e===t||e&&t&&e.classification===t.classification&&ru_test(e.purposes,t.purposes,{intersect:"all",optionalPurposes:!0}),serialize(e){var t=ru_parse(e.purposes,{names:!0});return e.classification&&"anonymous"!==e.classification||null!=t&&t.length?e.classification+":"+t:null},deserialize(e,t){var l;return e?([e,l]=e.split(":"),{classification:null!=(e=rn.parse(e,!1))?e:"anonymous",purposes:null!=(e=ru_parse(l,{validate:!1}))?e:{}}):t?rd.clone(t):{classification:"anonymous",purposes:{}}}},rv=(e,t)=>(!(i=null==e?void 0:e.metadata)||t&&(delete i.posted,delete i.queued,Object.entries(i).length)||delete e.metadata,e),rc=e=>!(null==e||!e.patchTargetId),rf=Symbol(),rp=e=>void 0===e?"undefined":tp(JSON.stringify(e),40,!0),rh=/^\d{4}-\d{2}-\d{2}(?:T00:00:00(?:\.000)?)?Z$/,rg=/^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{1,7})?)?Z$/,ry=/^\{?([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\}?$/,rm=/^(?:(?:([\w+.-]+):)(\/\/)?)((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))(?::(\d*))?)(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/,rb=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:(\[(([0-9.]+)|([0-9a-f:]+))\])|(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9]))?$/,rw=(e,t,r)=>(e.push({path:"",type:null,source:t,message:rp(t)+` ${r}.`}),rf),rk=(e,t,r)=>"number"==typeof e&&(!t&&Number.isFinite(e)&&!Number.isNaN(e)||Number.isInteger(e))||r&&"string"==typeof e&&rk((t?parseInt:parseFloat)(e),t,!1),rS={},ri=((e=>{null==e.primitive&&(e.primitive=typeof(null!=(r=null==(r=e.enum)?void 0:r[0])?r:""));var r,u,o=null!=(o=rS[r=e.primitive+"-"+(null!=(r=e.format)?r:"")+"-"+!1])?o:rS[r]=(e=>{switch(e.primitive){case"boolean":return(e,t)=>"boolean"==typeof e?e:rw(t,e,"is not a Boolean");case"date":return(e,t)=>e&&rh.test(e)&&!isNaN(+new Date(e))?e:rw(t,e,"is not a valid ISO 8601 UTC date (time is not allowed, and the 'Z' postfix must be added to indicate Coordinated Universal Time)");case"timestamp":case"datetime":var r="format"in e?"unix"!==e.format:"datetime"===e.primitive;return(e,n)=>{if(!e||rk(e,!1,!1)){if(!rk(e,!0,!1))return rw(n,e,"is not a valid UNIX timestamp");e=+e}else if(!rg.test(e)||isNaN(+new Date(e)))return rw(n,e,"is not a valid ISO 8601 UTC date/time (the 'Z' postfix must be added to indicate Coordinated Universal Time)");return e=new Date(e),r?new Date(e).toISOString():+e};case"duration":return(e,r)=>rk(e,!0,!1)?+e:rw(r,e,"is not a valid duration (must be provided as milliseconds)");case"integer":return(e,r)=>rk(e,!0,!1)?+e:rw(r,e,"is not a valid integer");case"number":return(e,r)=>rk(e,!1,!1)?e:rw(r,e,"is not a number");case"string":switch(e.format){case"uri":return(e,t)=>"string"==typeof e&&rm.test(e)?e:rw(t,e,"is not a valid URI");case"url":return(e,t)=>{var r="string"==typeof e&&rm.exec(e);return r?r[2]?e:rw(t,e,"is not a valid URL (it is a URI, but a URL is required)"):rw(t,e,"is not a valid URL")};case"urn":return(e,t)=>{var r="string"==typeof e&&rm.exec(e);return r?"urn"!==r[1]||r[2]?rw(t,e,"is not a valid URN (it is a URI, but a URN is required)"):e:rw(t,e,"is not a valid URN")};case"email":return(e,t)=>"string"==typeof e&&rb.test(e)?e.toLowerCase():rw(t,e,"is not a valid email address")}return(e,t)=>"string"==typeof e?e:rw(t,e,"is not a string");case"uuid":return(e,t)=>{var r;return null!=(r="string"==typeof e?null==(r=ry.exec(e))?void 0:r[1].toLowerCase():null)?r:rw(t,e,"is not a valid UUID")};default:throw TypeError(`'${rp(e)}' is not a supported primitive type.`)}})(e),d=e.maxLength,c=(null!=d&&(v=o,o=(e,t)=>(e=v(e,t))!==rf&&e.length>d?rw(t,e,`exceeds the maximum allowed ${d} number of characters`):e),e.min),f=e.max;if(null==c&&null==f||(p=null!=c?null!=f?`between ${c} and `+f:"at least "+c:"at most "+f,v=o,o=(e,t)=>(e=v(e,t))===rf||(null==c||c<=e)&&(null==f||e<=f)?e:rw(t,e,p)),"enum"in e){var v=o;if(!(u=new Set((Array.isArray(e.enum)?e.enum:[e.enum]).map(e=>{var t=[];if((e=v(e,t))===rf)throw TypeError(t[0]);return e}))).size)throw TypeError("At least one enum value to test against is required.");var p="is not the constant value "+rr(e.enum.map(e=>JSON.stringify(e)),"or"),o=(e,t)=>(e=v(e,t))===rf||u.has(e)?e:rw(t,e,p)}(e=>e instanceof Set||null==e||new Set(e[tR]&&"string"!=typeof e?e:[e]))(u)})({primitive:"string",format:"uri"}),tg("variable scope",{global:"global",session:"session",device:"device",user:"user"})),rx=({key:e,scope:t="",entityId:r="",source:n=""},i="")=>["'"+e+"'",n&&"from '"+n+"'",i,t&&"in "+t+" scope",r&&"for '"+r+"'"].filter(e=>e).join(" "),rI=e=>null==e?e:{source:e.source,key:e.key,scope:e.scope,entityId:e.entityId},rA=((I=l=l||{})[I.Success=200]="Success",I[I.Created=201]="Created",I[I.NotModified=304]="NotModified",I[I.Forbidden=403]="Forbidden",I[I.NotFound=404]="NotFound",I[I.BadRequest=405]="BadRequest",I[I.Conflict=409]="Conflict",I[I.Error=500]="Error",(e,t=!0)=>e&&(e.status<400||!t&&404===e.status));function rE(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}var rN=e=>{var t=rx(e),r=e.error;return e.status<400?`${t} succeeded with status ${e.status} - ${l[e.status]}.`:`${t} failed with status ${e.status} - ${l[e.status]}${r?` (${r})`:""}.`};class rO extends Error{constructor(e,t){super(null!=t?t:"One or more operations failed."),rE(this,"succeeded",void 0),rE(this,"failed",void 0),this.succeeded=null!=(t=null==e?void 0:e.filter(e=>rA(e,!1)))?t:[],this.failed=null!=(t=null==e?void 0:e.filter(e=>!rA(e,!1)))?t:[]}}var r$=(e,t,r)=>{var n=async(n,i)=>{var v,f,c,h,a=eo(t)?t:[t],o=await r(a.filter(e=>e)),u=[],s=[],d=[];for(v of a)v?(c=null!=(c=o.get(v))?c:C(`No result for ${rx(v)}.`),v.source=c,v.callback&&d.push(v.callback(c)),c.success=rA(c,i||"set"===e),!n||c.success?u.push(n&&c.status===l.NotFound?void 0:1<n?null!=(f=c.value)?f:void 0:c):s.push(rN(c))):u.push(void 0);if(s.length)throw 10<s.length&&s.push(`
(and ${s.splice(10).length} more...)`),new rO(u,s.join("\n"));for(h of d)await h();return a===t?u:u[0]};return Object.assign(R(()=>n(1,!1)),{as:()=>n(1,!1),all:()=>n(0,!1),require:()=>n(1,!0),value:(e=!1)=>n(2,e),values:(e=!1)=>n(2,e)})},r_=e=>e&&"string"==typeof e.type,rj=(e=>t=>(null==t?void 0:t.type)&&e.some(e=>e===(null==t?void 0:t.type)))(["view"]),rC=e=>e&&/^(%[A-F0-9]{2}|[^%])*$/gi.test(e)&&/[A-F0-9]{2}/gi.test(e)?decodeURIComponent(e):e,rM=(e,t)=>{var r;return t&&(!(o=e.get(a=t.tag+(null!=(r=t.value)?r:"")))||(null!=(r=o.score)?r:1)<(null!=(r=t.score)?r:1))&&e.set(a,t)},rU=(e,t="",r=new Map)=>{if(e)return eh(e)?eq(e,e=>rU(e,t,r)):el(e)?tx(e,/(?:([^\s:~]+)::(?![ :=]))?([^\s~]+?)(?:\s*[:=]\s*(?:"((?:"[^"]*|.)*?)(?:"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\s~])))*))\s*)?(?: *~ *(\d*(?:\.\d*)?))?(?:[\s,&;#~]+|$)/g,(e,n,i,l,a,o,u)=>{i={tag:(n?rC(n)+"::":"")+t+rC(i),value:rC(null!=(n=null!=l?l:a)?n:o)};u&&10!==parseFloat(u)&&(i.score=parseFloat(u)/10),rM(r,i)}):rM(r,e),r},rF=tg("local variable scope",{view:"view",tab:"tab",shared:"shared"}),rq=tg("variable scope",{...rF,...ri}),rz=e=>("global"!==e.scope&&e.entityId&&(e.entityId=void 0),e),rR=e=>null!=e&&!!e.scope&&null!=rF.ranks[e.scope],rP=e=>null==e?e:[e.scope,e.key,e.targetId].join("\0"),rW=e=>{e=e.split("\0");return{scope:e[0],key:e[1],targetId:e[2]}},rD=()=>()=>C("Not initialized."),rJ=window,rL=document,rV=rL.body,rK=(e,t)=>!(null==e||!e.matches(t)),rH=((e=>tc=e)(!!rJ.chrome),L),rG=(e,t,r=(e,t)=>rH<=t)=>{for(var n=0,i=V;1===(null==e?void 0:e.nodeType)&&!r(e,n++)&&t(e,(e,t)=>(null!=e&&(l=e,i=t!==K&&null!=l),K),n-1)!==V&&!i;){var l,o=e;null===(e=e.parentElement)&&(null==o?void 0:o.ownerDocument)!==rL&&(e=null==o||null==(o=o.ownerDocument.defaultView)?void 0:o.frameElement)}return l},rX=(e,t="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":var r;return null==(r=(""+e).trim())?void 0:r.toLowerCase();case!1:case"r":case"b":return""===e||er(e);case"n":return parseFloat(e);case"j":return q(()=>JSON.parse(e),H);case"h":return q(()=>nV(e),H);case"e":return q(()=>null==nH?void 0:nH(e),H);default:return eo(t)&&""!==e?(""+e).split(",").map(e=>""===e.trim()?void 0:rX(e,t[0])):void 0}},rZ=(e,t,r)=>rX(null==e?void 0:e.getAttribute(t),r),rY=(e,t,r)=>rG(e,(e,n)=>n(rZ(e,t,r))),rQ=(e,t)=>null==(e=rZ(e,t))||null==(t=e.trim())?void 0:t.toLowerCase(),r0=e=>null==e?void 0:e.getAttributeNames(),r1=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,r2=e=>null!=e?e.tagName:null,r4=e=>({x:em(scrollX,e),y:em(scrollY,e)}),r5=(e,t)=>tj(e,/#.*$/,"")===tj(t,/#.*$/,""),r3=(e,t,r=K)=>(s=r8(e,t))&&W({xpx:s.x,ypx:s.y,x:em(s.x/rV.offsetWidth,4),y:em(s.y/rV.offsetHeight,4),pageFolds:r?s.y/window.innerHeight:void 0}),r8=(e,t)=>null!=t&&t.pointerType&&null!=(null==t?void 0:t.pageY)?{x:t.pageX,y:t.pageY}:e?({x:d,y:v}=r9(e),{x:d,y:v}):void 0,r9=e=>e?(c=e.getBoundingClientRect(),u=r4(V),{x:em(c.left+u.x),y:em(c.top+u.y),width:em(c.width),height:em(c.height)}):void 0,r7=(e,t,r,n={capture:!0,passive:!0})=>(t=es(t),ts(r,r=>eq(t,t=>e.addEventListener(t,r,n)),r=>eq(t,t=>e.removeEventListener(t,r,n)))),nt=()=>({...u=r4(K),width:window.innerWidth,height:window.innerHeight,totalWidth:rV.offsetWidth,totalHeight:rV.offsetHeight}),nr=new WeakMap,nn=e=>nr.get(e),ni=(e,t=V)=>(t?"--track-":"track-")+e,nl=(e,t,r,n,i,l)=>(null==t?void 0:t[1])&&eq(r0(e),a=>{var o;return null!=(o=(f=t[0])[p=a])?o:f[p]=(l=V,!el(n=eq(t[1],([t,r,n],i)=>tS(a,t)&&(l=void 0,!r||rK(e,r))&&eS(null!=n?n:a)))||(i=e.getAttribute(a))&&!er(i)||rU(i,tj(n,/\-/g,":"),r),l)}),na=()=>{},no=(e,t)=>{if(h===(h=np.tags))return na(e,t);var r=e=>e?tO(e)?[[e]]:eh(e)?e_(e,r):[ev(e)?[t$(e.match),e.selector,e.prefix]:[t$(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(tV(h,([,e])=>e,1))]];(na=(e,t)=>nl(e,n,t))(e,t)},nu=(e,t)=>rt(ej(r1(e,ni(t,K)),r1(e,ni("base-"+t,K)))," "),ns={},nd=(e,t,r=nu(e,"attributes"))=>{var n;r&&nl(e,null!=(n=ns[r])?n:ns[r]=[{},tT(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[t$(r||n),,t])],t),rU(nu(e,"tags"),void 0,t)},nv=(e,t,r=V,n)=>null!=(r=null!=(r=r?rG(e,(e,r)=>r(nv(e,t,V)),ep(r)?r:void 0):rt(ej(rZ(e,ni(t)),r1(e,ni(t,K)))," "))?r:n&&(g=nn(e))&&n(g))?r:null,nc=(e,t,r=V,n)=>""===(y=nv(e,t,r,n))||(null==y?y:er(y)),nf=(e,t,r,n)=>e&&(null==n&&(n=new Map),nd(e,n),rG(e,e=>{no(e,n),rU(null==r?void 0:r(e),void 0,n)},t),n.size)?{tags:[...n.values()]}:{},np={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,encryptionKey:null,key:null,apiKey:null,json:!1,impressionThreshold:1e3,captureContextMenu:!0,tags:{default:["data-id","data-name"]}},nh=[],ng=[],ny=(e,t=0)=>e.charCodeAt(t),nb=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>nh[ng[t]=e.charCodeAt(0)]=t),e=>{for(var t,r=0,n=e.length,i=[];r<n;)t=e[r++]<<16|e[r++]<<8|e[r++],i.push(ng[(16515072&t)>>18],ng[(258048&t)>>12],ng[(4032&t)>>6],ng[63&t]);return i.length+=n-r,(e=>String.fromCharCode(...e))(i)}),nw=e=>{for(var t,r=0,n=0,i=e.length,l=new Uint8Array(3*(i/4|0)+(i+3&3)%3);r<i;)l[n++]=nh[ny(e,r++)]<<2|(t=nh[ny(e,r++)])>>4,r<i&&(l[n++]=(15&t)<<4|(t=nh[ny(e,r++)])>>2,r<i)&&(l[n++]=(3&t)<<6|nh[ny(e,r++)]);return l},nk={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},nS=(e=256)=>e*Math.random()|0,nx={exports:{}},{deserialize:nI,serialize:nA}=((()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,i=new Uint8Array(128),l=0;if(t&&t.multiple)for(var a=0;a<e.length;a++)o(e[a]);else o(e);return i.subarray(0,l);function o(e,i){var c,a;switch(typeof e){case"undefined":s(192);break;case"boolean":s(e?195:194);break;case"number":(e=>{var t;isFinite(e)&&Number.isSafeInteger(e)?0<=e&&e<=127||e<0&&-32<=e?s(e):0<e&&e<=255?d([204,e]):-128<=e&&e<=127?d([208,e]):0<e&&e<=65535?d([205,e>>>8,e]):-32768<=e&&e<=32767?d([209,e>>>8,e]):0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):-2147483648<=e&&e<=2147483647?d([210,e>>>24,e>>>16,e>>>8,e]):0<e&&e<=0x10000000000000000?d([211,(t=e/4294967296)>>>24,t>>>16,t>>>8,t,(t=e%4294967296)>>>24,t>>>16,t>>>8,t]):-0x8000000000000000<=e&&e<=0x8000000000000000?(s(211),v(e)):d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):((n=n||new DataView(r=new ArrayBuffer(8))).setFloat64(0,e),s(203),d(new Uint8Array(r)))})(e);break;case"string":(c=(a=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(127<e.charCodeAt(n)){t=!1;break}for(var i=0,l=new Uint8Array(e.length*(t?1:4)),a=0;a!==r;a++){var o=e.charCodeAt(a);if(o<128)l[i++]=o;else{if(o<2048)l[i++]=o>>6|192;else{if(55295<o&&o<56320){if(++a>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(a);if(u<56320||57343<u)throw Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+a+" out of range");l[i++]=(o=65536+((1023&o)<<10)+(1023&u))>>18|240,l[i++]=o>>12&63|128}else l[i++]=o>>12|224;l[i++]=o>>6&63|128}l[i++]=63&o|128}}return t?l:l.subarray(0,i)})(e)).length)<=31?s(160+c):d(c<=255?[217,c]:c<=65535?[218,c>>>8,c]:[219,c>>>24,c>>>16,c>>>8,c]),d(a);break;case"object":null===e?s(192):e instanceof Date?(e=>{var r,t=e.getTime()/1e3;0===e.getMilliseconds()&&0<=t&&t<4294967296?d([214,255,t>>>24,t>>>16,t>>>8,t]):0<=t&&t<17179869184?d([215,255,(r=1e6*e.getMilliseconds())>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t]):(d([199,12,255,(r=1e6*e.getMilliseconds())>>>24,r>>>16,r>>>8,r]),v(t))})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((a=(c=e).length)<=255?d([196,a]):d(a<=65535?[197,a>>>8,a]:[198,a>>>24,a>>>16,a>>>8,a]),d(c)):(e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u:e=>{var r,t=0;for(r in e)void 0!==e[r]&&t++;for(r in t<=15?s(128+t):d(t<=65535?[222,t>>>8,t]:[223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(o(r),o(n))}})(e);break;default:if(i||!t||!t.invalidTypeReplacement)throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof t.invalidTypeReplacement?o(t.invalidTypeReplacement(e),!0):o(t.invalidTypeReplacement,!0)}}function u(e){var t=e.length;t<=15?s(144+t):d(t<=65535?[220,t>>>8,t]:[221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;r<t;r++)o(e[r])}function s(e){if(i.length<l+1){for(var t=2*i.length;t<l+1;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i[l]=e,l++}function d(e){if(i.length<l+e.length){for(var t=2*i.length;t<l+e.length;)t*=2;var r=new Uint8Array(t);r.set(i),i=r}i.set(e,l),l+=e.length}function v(e){var t,e=0<=e?(t=e/4294967296,e%4294967296):(t=~(Math.abs(++e)/4294967296),~(Math.abs(e)%4294967296));d([t>>>24,t>>>16,t>>>8,t,e>>>24,e>>>16,e>>>8,e])}}function r(e,t){var r,n=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(i());else r=i();return r;function i(){var t=e[n++];if(0<=t&&t<=127)return t;if(128<=t&&t<=143)return s(t-128);if(144<=t&&t<=159)return d(t-144);if(160<=t&&t<=191)return v(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return u(-1,1);if(197===t)return u(-1,2);if(198===t)return u(-1,4);if(199===t)return c(-1,1);if(200===t)return c(-1,2);if(201===t)return c(-1,4);if(202===t)return o(4);if(203===t)return o(8);if(204===t)return a(1);if(205===t)return a(2);if(206===t)return a(4);if(207===t)return a(8);if(208===t)return l(1);if(209===t)return l(2);if(210===t)return l(4);if(211===t)return l(8);if(212===t)return c(1);if(213===t)return c(2);if(214===t)return c(4);if(215===t)return c(8);if(216===t)return c(16);if(217===t)return v(-1,1);if(218===t)return v(-1,2);if(219===t)return v(-1,4);if(220===t)return d(-1,2);if(221===t)return d(-1,4);if(222===t)return s(-1,2);if(223===t)return s(-1,4);if(224<=t&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function l(t){for(var l,r=0,i=!0;0<t--;)i?(r+=127&(l=e[n++]),128&l&&(r-=128),i=!1):r=(r*=256)+e[n++];return r}function a(t){for(var r=0;0<t--;)r=256*r+e[n++];return r}function o(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return n+=t,4===t?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function u(t,r){t<0&&(t=a(r));r=e.subarray(n,n+t);return n+=t,r}function s(e,t){e<0&&(e=a(t));for(var r={};0<e--;)r[i()]=i();return r}function d(e,t){e<0&&(e=a(t));for(var r=[];0<e--;)r.push(i());return r}function v(t,r){t<0&&(t=a(r));r=n;return n+=t,((e,t,r)=>{var n=t,i="";for(r+=t;n<r;){var l=e[n++];if(127<l)if(191<l&&l<224){if(r<=n)throw Error("UTF-8 decode: incomplete 2-byte sequence");l=(31&l)<<6|63&e[n++]}else if(223<l&&l<240){if(r<=n+1)throw Error("UTF-8 decode: incomplete 3-byte sequence");l=(15&l)<<12|(63&e[n++])<<6|63&e[n++]}else{if(!(239<l&&l<248))throw Error("UTF-8 decode: unknown multibyte start 0x"+l.toString(16)+" at index "+(n-1));if(r<=n+2)throw Error("UTF-8 decode: incomplete 4-byte sequence");l=(7&l)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(l<=65535)i+=String.fromCharCode(l);else{if(!(l<=1114111))throw Error("UTF-8 decode: code point 0x"+l.toString(16)+" exceeds UTF-16 reach");l-=65536,i+=String.fromCharCode(l>>10|55296)+String.fromCharCode(1023&l|56320)}}return i})(e,r,t)}function c(e,t){e<0&&(e=a(t));t=a(1),e=u(e);return 255===t?(e=>{var r,t;if(4===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*t);if(8===e.length)return r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=4294967296*(3&e[3])+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*t+r/1e6);if(12===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],n-=8,t=l(8),new Date(1e3*t+r/1e6);throw Error("Invalid data length for a date value.")})(e):{type:t,data:e}}}var n={serialize:t,deserialize:r,encode:t,decode:r};nx.exports=n})(),(I=nx.exports)&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I),nE="$ref",nN=(e,t,r)=>ef(e)?J:r?t!==J:null===t||t,nO=(e,t,{defaultValues:r=!0,prettify:n=!1})=>{var i,l,a,o=(e,t,n=e[t],i=nN(t,n,r)?s(n):J)=>(n!==i&&(i!==J||eo(e)?e[t]=i:delete e[t],u(()=>e[t]=n)),i),u=e=>(null!=i?i:i=[]).push(e),s=e=>{if(null==e||ep(e)||ef(e))return J;if(ed(e)){if(e.toJSON&&e!==(e=e.toJSON()))return s(e);if(null!=(a=null==l?void 0:l.get(e)))return e[nE]||(e[nE]=a,u(()=>delete e[nE])),{[nE]:a};if(ev(e))for(var t in(null!=l?l:l=new Map).set(e,l.size+1),e)o(e,t);else!eh(e)||e instanceof Uint8Array||(!eo(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?o(e,r):(e[r]=null,u(()=>delete e[r])))}return e};return q(()=>{var r;return t?nA(null!=(r=s(e))?r:null):q(()=>JSON.stringify(e,J,n?2:0),()=>JSON.stringify(s(e),J,n?2:0))},!0,()=>null==i?void 0:i.forEach(e=>e()))},n$=e=>{var t,r,n=e=>ed(e)?e[nE]&&(r=(null!=t?t:t=[])[e[nE]])?r:(e[nE]&&delete(t[e[nE]]=e)[nE],Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return n(el(e)?q(()=>JSON.parse(e),()=>console.error("Invalid JSON received.",e)):null!=e?q(()=>nI(e),()=>(console.error("Invalid message received.",e),J)):e)},n_=(e,t={})=>{var r=(e,{json:t=!1,decodeJson:r=!1,...n})=>{var a,o,u,i=(e,r)=>ei(e)&&!0===r?e:u(e=el(e)?new Uint8Array(eO(e.length,t=>255&e.charCodeAt(t))):t?q(()=>JSON.stringify(e),()=>JSON.stringify(nO(e,!1,n))):nO(e,!0,n),r),l=e=>null==e?J:q(()=>n$(e),J);return t?[e=>nO(e,!1,n),l,(e,t)=>i(e,t)]:([a,o,u]=(e=>{for(var t,r,n,i,l,o,a=0n,u=0n,s=[],d=0,v=0,c=0,f=0,p=[],c=0;c<(null==e?void 0:e.length);f+=p[c]=e.charCodeAt(c++));var h=e?()=>{s=[...p],v=255&(d=f),c=-1}:()=>{},g=e=>(v=255&(d+=-s[c=(c+1)%s.length]+(s[c]=e)),e);return[e?e=>{for(h(),i=16-((t=e.length)+4)%16,l=new Uint8Array(4+t+i),n=0;n<3;l[n++]=g(nS()));for(r=0,l[n++]=g(v^16*nS(16)+i);r<t;l[n++]=g(v^e[r++]));for(;i--;)l[n++]=nS();return l}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((v^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,l=new Uint8Array(t);n<t;l[n++]=v^g(e[r++]));return l}:e=>e,(e,t=64)=>{if(null==e)return null;for(o=et(t)?64:t,h(),[a,u]=nk[o],r=0;r<e.length;a=BigInt.asUintN(o,(a^BigInt(v^g(e[r++])))*u));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+a%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):a.toString(36)}]})(e),[(e,t)=>(t?G:nb)(a(nO(e,!0,n))),e=>null!=e?n$(o(e instanceof Uint8Array?e:(r&&ew(e)?l:nw)(e))):null,(e,t)=>i(e,t)])};if(!e){var n=+(null!=(n=t.json)?n:0);if(n&&!1!==t.prettify)return(null!=m?m:m=[r(null,{json:!1}),r(null,{json:!0,prettify:!0})])[n]}return r(e,t)},[nj,,]=(n_(),n_(null,{json:!0,decodeJson:!0}),n_(null,{json:!0,prettify:!0})),tg=t_(""+rL.currentScript.src,"#"),ri=t_(""+(tg[1]||""),";"),nF=tg[0],nq=ri[1]||(null==(I=tb(nF,{delimiters:!1}))?void 0:I.host),nz=e=>!(!nq||(null==(e=tb(e,{delimiters:!1}))||null==(e=e.host)?void 0:e.endsWith(nq))!==K),tg=(...e)=>tj(rt(e),/(^(?=\?))|(^\.(?=\/))/,nF.split("?")[0]),nP=tg("?","var"),nW=tg("?","mnt"),nB=(tg("?","usr"),Symbol()),nD=Symbol(),nJ=(e,t,r=K,n=V)=>{t&&(r?console.groupCollapsed:console.group)((n?"":tf("tail.js: ","90;3"))+t);r=null==e?void 0:e[nD];null!=(e=r?e[nB]:e)&&console.log(ed(e)?tf(nj(e),"94"):ep(e)?""+e:e),r&&r.forEach(([e,t,r])=>nJ(e,t,r,!0)),t&&console.groupEnd()},[nL,nV]=n_(),[nK,nH]=[rD,rD],nG=!0,[ri,nZ]=Q(),n0=(...e)=>{var t,i=e.shift();console.error(el(e[1])?e.shift():null!=(t=null==(t=e[1])?void 0:t.message)?t:"An error occurred",null!=(t=i.id)?t:i,...e)},[n1,n2]=Q(),[n6,n4]=Q(),n5=e=>n8!==(n8=e)&&n2(n8=!1,ie(!0,!0)),n3=e=>n9!==(n9=!!e&&"visible"===document.visibilityState)&&n4(n9,!e,n7(!0,!0)),n8=(n1(n3),!0),n9=!1,n7=e7(!1),ie=e7(!1),it=(r7(window,["pagehide","freeze"],()=>n5(!1)),r7(window,["pageshow","resume"],()=>n5(!0)),r7(document,"visibilitychange",()=>(n3(!0),n9&&n5(!0))),n2(n8,ie(!0,!0)),!1),ir=e7(!1),[,il]=Q(),ia=tt({callback:()=>it&&il(it=!1,ir(!1)),frequency:2e4,once:!0,paused:!0}),I=()=>!it&&(il(it=!0,ir(!0)),ia.restart()),iu=(r7(window,["focus","scroll"],I),r7(window,"blur",()=>ia.trigger()),r7(document.body,["keydown","pointerdown","pointermove","scroll"],I),I(),()=>ir()),is=0,id=void 0,iv=()=>(null!=id?id:rD())+"_"+ic(),ic=()=>(e9(!0)-(parseInt(id.slice(0,-2),36)||0)).toString(36)+"_"+(++is).toString(36),ig=new Map,iy={id:id,heartbeat:e9()},im={knownTabs:new Map([[id,iy]]),variables:new Map},[ib,iw]=Q(),[ik,iS]=Q(),iT=rD,ix=(e,t=e9())=>{e=ig.get(el(e)?e:rP(e));return null!=e&&e.cache&&e.cache[0]+e.cache[1]<=t?void 0:e},iI=(...e)=>{var t=e9();return iE(tJ(e,e=>(e.cache=[t],[rI(e),{...e,created:t,modified:t,version:"0"}])))},iA=e=>null!=(e=tJ(e,e=>{var t,r;return e&&(t=rP(e[0]),(r=ig.get(t))!==e[1])?[t,e[1],r,e[0]]:tU}))?e:[],iE=e=>{var r,n,e=iA(e);null!=e&&e.length&&(r=e9(),tD(e,([,e,t])=>{e&&!e.cache&&(e.cache=null!=(e=null==t?void 0:t.cache)?e:[r,3e3])}),t9(ig,e),(n=tL(e,([,,,e])=>0<rq.compare(e.scope,"tab"))).length&&iT({type:"patch",payload:t8(n)}),iS(tJ(e,([,e,t,r])=>[r,e,t]),ig,!0))},[,iO]=(ri((e,t)=>{n1(r=>{var n;r?(r=t(sessionStorage.getItem("_tail:state")),sessionStorage.removeItem("_tail:state"),id=null!=(n=null==r?void 0:r[0])?n:e9(!0).toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),ig=new Map(tX(tL(ig,([,e])=>"view"===(null==e?void 0:e.scope)),tJ(null==r?void 0:r[1],e=>[rP(e),e])))):sessionStorage.setItem("_tail:state",e([id,tJ(ig,([,e])=>e&&"view"!==e.scope?e:tU)]))},!0),iT=(t,r)=>{e&&(localStorage.setItem("_tail:state",e([id,t,r])),localStorage.removeItem("_tail:state"))},r7(window,"storage",e=>{var l,a,o;"_tail:state"!==e.key||!(e=null==t?void 0:t(e.newValue))||e[2]&&e[2]!==id||([e,{type:l,payload:a}]=e,"query"===l?r.active||iT({type:"set",payload:[tJ(im.knownTabs),tJ(im.variables)]},e):"set"===l&&r.active?(im.knownTabs=new Map(a[0]),im.variables=new Map(a[1]),ig=new Map(a[1]),r.trigger()):"patch"===l?(o=iA(tJ(a,([e,t])=>[rW(e),t])),t9(im.variables,a),t9(ig,a),iS(tJ(o,([,e,t,r])=>[r,e,t]),ig,!1)):"tab"===l&&(t5(im.knownTabs,e,a),a)&&iw("tab",a,!1))});var r=tt(()=>iw("ready",im,!0),-25),n=tt({callback(){var e=e9()-1e4;eq(im.knownTabs,([t,r])=>r[0]<e&&t5(im.knownTabs,t,void 0)),iy.heartbeat=e9(),iT({type:"tab",payload:iy})},frequency:5e3,paused:!0});n1(e=>(e=>{iT({type:"tab",payload:e?iy:void 0}),e?(r.restart(),iT({type:"query"})):r.toggle(!1),n.toggle(e)})(e),!0)},!0),Q()),[i$,i_]=Q(),ij=(({timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var i=()=>(r?nH:nV)(localStorage.getItem("_tail:rq")),l=0,a=()=>localStorage.setItem("_tail:rq",(r?nK:nL)([id,e9()+t]));return async(r,o,u=null!=o?1:n)=>{for(;u--;){var d=i();if((!d||d[1]<e9())&&(a(),(null==(d=i())?void 0:d[0])===id))return 0<t&&(l=setInterval(()=>a(),t/2)),P(r,!0,()=>{clearInterval(l),localStorage.removeItem("_tail:rq")});var v=to(),[d]=r7(window,"storage",t=>{"_tail:rq"!==t.key||t.newValue||v.resolve()});e=[ta(null!=o?o:t),v],await Promise.race(e.map(e=>ep(e)?e():e)),d()}var e;null==o&&C("_tail:rq could not be acquired.")}})(),iC=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{n=n&&nG;var i,l,a=!1,o=r=>{var o=ep(t)?null==t?void 0:t(i,r):t;return!1!==o&&(iO(e,i=null!=o&&!0!==o?o:i,r,e=>(a=i===J,i=e)),!a)&&(l=n?nK(i,!0):JSON.stringify(i))};if(!r)return ij(()=>ez(1,async t=>{var a;return o(t)?400<=(a=await fetch(e,{method:null!=i?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain; charset=iso-8859-1"},body:l})).status?0===t?eS(C("Invalid response: "+await a.text())):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await ta(200*(1+t))):(null!=(a=null!=(t=n?new Uint8Array(await a.arrayBuffer()):await a.text())&&t.length?null==(a=n?nH:JSON.parse)?void 0:a(t):J)&&i_(a),eS(a)):eS()}));o(0)&&!navigator.sendBeacon(e,new Blob(null!=i?[l]:[],{type:"text/plain; charset=iso-8859-1"}))&&C("Beacon send failed.")},tg=["scope","key","entityId","source"],iU=[...tg,"purpose","ifModifiedSince","ifNoneMatch"],iF=[...tg,"value","force","ttl","version"],iq=new Map,iz=(e,t)=>{var r=tt(async()=>{var e=eO(iq,([e,t])=>({...rW(e),result:[...t]}));e.length&&await a.get(e)},3e3),n=(e,t)=>t&&t4(iq,e,()=>new Set).add(t),a=(n1((e,t)=>r.toggle(e,e&&3e3<=t),!0),ik(e=>eq(e,([e,t])=>(e=>{var t,r;e&&(t=rP(e),null!=(r=e1(iq,t)))&&r.size&&tD(r,r=>!0===r(e)&&n(t,r))})(t?{status:l.Success,success:!0,...t}:{status:l.NotFound,success:!0,...e}))),{get:r=>r$("get",r,async r=>{r[0]&&!el(r[0])||(u=r[0],r=r.slice(1)),null!=t&&t.validateKey(u);var s=new Map,d=[],v=tJ(r,e=>{var t=ix(rP(e)),r=e.purpose;if(r&&!0!==(null==t||null==(i=t.schema)?void 0:i.usage.purposes[r]))s.set(e,{...e,status:l.Forbidden,success:!1,error:`No consent for '${r}'.`});else if(!e.refresh&&t)s.set(e,{status:l.Success,success:!0,...t});else{if(!rR(e))return[t7(e,iU),e];var i,r=null==(i=e.init)?void 0:i.call(e);r&&(r={...rI(e),version:"1",created:c,modified:c,value:r,cache:[c,null!=(i=e.ttl)?i:null==t?void 0:t.ttl]},t3(d,[rI(r),r]),s.set(e,{status:l.Success,success:!0,...r}))}return tU}),c=e9(),u=v.length&&(null==(u=await iC(e,{variables:{get:tJ(v,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId}))||null==(r=u.variables)?void 0:r.get)||[],p=[];return tD(u,(e,t)=>{var n,r;(null==e?void 0:e.status)===l.NotFound?null!=(r=null==(r=(n=v[t][1]).init)?void 0:r.call(n))&&p.push([n,{...rI(n),value:r}]):s.set(v[t][1],rz(e))}),p.length&&tD(await a.set(tJ(p,([,e])=>e)).all(),(e,t)=>s.set(p[t][0],rz(e.status===l.Conflict?{...e,status:l.Success,success:!0}:e))),d.length&&iE(d),tD(s,([e])=>{e.callback&&(e.callback=e6(e.callback,(t,r)=>{P(async()=>!0===await t(r)&&n(rP(e),e.callback),!1)}))}),s}),set:r=>r$("set",r,async r=>{r[0]&&!el(r[0])||(v=r[0],r=r.slice(1)),null!=t&&t.validateKey(v);for(var n=[],i=new Map,o=e9(),u=[],s=tJ(r,e=>{var s,r,t=ix(rP(e));return rR(e)?((r=null==(s=e.patch?e.patch(null==t?void 0:t.value):e.value)?void 0:{...rI(e),created:null!=(r=null==t?void 0:t.created)?r:o,modified:o,version:null!=t&&t.version?""+(parseInt(t.version)+1):"1",scope:e.scope,key:e.key,value:s,cache:[o,e.ttl]})&&(r.cache=[o,null!=(s=e.ttl)?s:3e3]),i.set(e,r?{status:t?l.Success:l.Created,success:!0,...r}:{status:l.Success,success:!0,...rI(e)}),t3(n,[rI(e),r]),tU):e.patch?(u.push(e),tU):(void 0===(null==e?void 0:e.version)&&(e.version=null==t?void 0:t.version),[t7(e,iF),e])}),d=0;!d++||u.length;){var v,f=await a.get(tJ(u,e=>rI(e))).all();tD(f,(e,t)=>{var r=u[t];rA(e,!1)?t3(s,[{...r,patch:void 0,value:u[t].patch(null==e?void 0:e.value),version:e.version},r]):i.set(r,e)}),u=[],eq(s.length?F(null==(f=(await iC(e,{variables:{set:tJ(s,([e])=>e)},deviceSessionId:null==t?void 0:t.deviceSessionId})).variables)?void 0:f.set,"No result."):[],(e,t)=>{var[,t]=s[t];d<=3&&t.patch&&((null==e?void 0:e.status)===l.Conflict||(null==e?void 0:e.status)===l.NotFound)?t3(u,t):i.set(t,rz(e))})}return n.length&&iE(n),i})});return i$(({variables:e})=>{e&&null!=(e=tX(tJ(e.get,e=>null!=e&&e.success?e:tU),tJ(e.set,e=>null!=e&&e.success?e:tU)))&&e.length&&iE(tJ(e,e=>[rI(e),e.success?e.value:void 0]))}),a},iR=Symbol(),iW=Symbol(),iB=[.75,.33],iD=[.25,.33],iL=e=>tJ(tY(e,[e=>e.scope,e=>e.key]),e=>e?[e,`${rx(e)}, ${rR(e)?"client-side memory only":rs(null==(e=e.schema)?void 0:e.usage)})`,V]:tU),iK=()=>{var i,a,l,r=null==rJ?void 0:rJ.screen;return r?({width:r,height:i,orientation:l}=r,a=r<i,-90!==(l=null!=(l=null!=(l=null==l?void 0:l.angle)?l:rJ.orientation)?l:0)&&90!==l||([r,i]=[i,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:rJ.devicePixelRatio,width:r,height:i,landscape:a}}):{}},iH=e=>e(W({type:"user_agent",hasTouch:0<navigator.maxTouchPoints,userAgent:navigator.userAgent,view:null==k?void 0:k.clientId,languages:eO(navigator.languages,(e,t,r=e.split("-"))=>W({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:(new Date).getTimezoneOffset()},...iK()})),iG=(e,t="A"===r2(e)&&rZ(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),iX=(e,t=r2(e),r=nc(e,"button"))=>r!==V&&(U(t,"A","BUTTON")||"INPUT"===t&&U(rQ(e,"type"),"button","submit")||r===K),iZ=(e,t=!1)=>{var r;return{tagName:e.tagName,text:tp((null==(r=rZ(e,"title"))?void 0:r.trim())||(null==(r=rZ(e,"alt"))?void 0:r.trim())||(null==(r=e.innerText)?void 0:r.trim()),100),href:null==(r=e.href)?void 0:r.toString(),rect:t?r9(e):void 0}},iQ=e=>{if(w)return w;el(e)&&([r,e]=nV(e),e=n_(r,{decodeJson:!0})[1](e)),eZ(np,e),(e=>{nH===rD&&([nK,nH]=n_(e,{json:!e,prettify:!1}),nG=!!e,nZ(nK,nH))})(e1(np,"encryptionKey"));var r,a,o,u,s,d,v,c,f,p,h,g,y,i=e1(np,"key"),l=null!=(e=null==(r=rJ[np.name])?void 0:r._)?e:[];if(eo(l))return a=[],o=[],u=(e,...t)=>{var r=K;o=eB(o,n=>q(()=>{var i;return null!=(i=n[e])&&i.call(n,...t,{tracker:w,unsubscribe:()=>r=V}),r},(e=>t=>n0(e,t))(n)))},s=[],v=iz(nP,d={applyEventExtensions(e){null==e.clientId&&(e.clientId=iv()),null==e.timestamp&&(e.timestamp=e9()),h=K;var n=V;return eO(a,([,t])=>{var r;!n&&(null==(r=t.decorate)?void 0:r.call(t,e))!==V||(n=K)}),n?void 0:e},validateKey:(e,t=!0)=>!i&&!e||e===i||!!t&&C(`'${e}' is not a valid key.`)}),c=((e,t)=>{var n=[],i=new WeakMap,l=new Map,a=(e,t)=>{var r;return null!=(r=e.metadata)&&r.queued?eX(t,{type:e.type+"_patch",patchTargetId:e.clientId}):C("Source event not queued.")},o=async(r,n=!0,i)=>{var l;return r[0]&&!el(r[0])||(l=r[0],r=r.slice(1)),r=eO(r,e=>{if(null!=t&&t.validateKey(null!=l?l:e.key),eX(e,{metadata:{posted:!0}}),e[iR]){if(!1===e[iR](e))return;delete e[iR]}return eX(rv(e4(e),!0),{timestamp:e.timestamp-e9()})}),nJ({[nD]:eO(r,e=>[e,e.type,V])},"Posting "+rr([tv("new event",[eD(r,e=>!rc(e))||void 0]),tv("event patch",[eD(r,e=>rc(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),iC(e,{events:r,variables:i,deviceSessionId:null==t?void 0:t.deviceSessionId},{beacon:n})},u=async(e,{flush:r=!1,async:i=!0,variables:l}={})=>{var a=[];if(e=eO(es(e),e=>{var r;return null!=(r=e.metadata)&&r.queued||e5(a,e),eX(t.applyEventExtensions(e),{metadata:{queued:!0}})}),eq(a,e=>nJ(e,e.type)),!i)return o(e,!1,l);r?(n.length&&e3(e,...n.splice(0)),e.length&&await o(e,!0,l)):e.length&&e5(n,...e)};return tt(()=>u([],{flush:!0}),5e3),n6((e,t,r)=>{!e&&(n.length||t||1500<r)&&(e=eO(l,([e,t])=>{var[t,n]=t();return n&&(l.delete(e),i.delete(e)),t}),n.length||e.length)&&u(ej(n.splice(0),e),{flush:!0})}),{post:u,postPatch:(e,t,r)=>u(a(e,t),{flush:!0}),registerEventPatchSource(e,t,r=!1,n){var o=!1,s=()=>{o=!0};return i.set(e,e4(e)),l.set(e,()=>{if(!1===(null==n?void 0:n.isConnected))s();else{var l=i.get(e),[r,d]=null!=(r=e8(t(l,s),l))?r:[];if(r&&!M(d,l))return i.set(e,e4(d)),[a(e,r),o]}return[void 0,o]}),r&&u(e),s}}})(nP,d),f=null,p=0,g=h=V,y=!1,w=(...e)=>{if(y){if(e.length){1<e.length&&(!e[0]||el(e[0]))&&(t=e[0],e=e.slice(1)),el(e[0])&&(r=e[0],e=ew(r)?JSON.parse(r):nV(r));var t,n=V;if((e=eB(e_(e,e=>el(e)?nV(e):e),e=>{if(!e)return V;if(lb(e))np.tags=eZ({},np.tags,e.tagAttributes);else{if(lw(e))return np.disabled=e.disable,V;if(lT(e))return n=K,V;if(lO(e))return e(w),V}return g||lI(e)||lS(e)?K:(s.push(e),V)})).length||n){var r=eK(e,e=>lS(e)?-100:lI(e)?-50:lN(e)?-10:r_(e)?90:0);if(!f||!f.splice(h?p+1:f.length,0,...r)){for(p=0,f=r;p<f.length;p++){var m=f[p];m&&(d.validateKey(null!=t?t:m.key),q(()=>{var e=f[p];if(u("command",e),h=V,r_(e))c.post(e);else if(lx(e))v.get(tG(e.get));else if(lN(e))v.set(tG(e.set));else if(lI(e))e5(o,e.listener);else if(lS(e))(t=q(()=>e.extension.setup(w),t=>n0(e.extension.id,t)))&&(e5(a,[null!=(r=e.priority)?r:100,t,e.extension]),eK(a,([e])=>e));else if(lO(e))e(w);else{var r,n,t,l=V;for([,t]of a)if(l=null!=(n=null==(n=t.processCommand)?void 0:n.call(t,e))?n:V)break;l||n0("invalid-command",e,"Loaded extensions:",a.map(e=>e[2].id))}},e=>n0(w,"internal-error",e)))}f=null,n&&c.post([],{flush:n})}}}}else l.push(...e)},Object.defineProperty(rJ,np.name,{value:Object.freeze(Object.assign(w,{id:"tracker_"+iv(),events:c,variables:v,__isTracker:K})),configurable:!1,writable:!1}),ik((e,t,r)=>{var n=ej(iL(tJ(e,([,e])=>e||tU)),[[{[nD]:iL(tJ(t,([,e])=>e||tU))},"All variables",K]]);nJ({[nD]:n},tf(`Variables changed${r?"":" - merging changes from another tab"} (${e.length} changed, ${eD(t)} in total).`,"2;3"))}),ib(async(e,t,r,n)=>{var a;"ready"===e&&([e,a]=await v.get([{scope:"session",key:"@info",refresh:!0},{scope:"session",key:"@consent",refresh:!0,cache:L}]).values(!0),d.deviceSessionId=e.deviceSessionId,e.hasUserAgent||(iH(w),e.hasUserAgent=!0),g=!0,s.length&&w(s),n(),y=!0,w(...eO(lh,e=>({extension:e})),...l),w({set:{scope:"view",key:"loaded",value:!0}}))},!0),w;C(`The global variable for the tracker "${np.name}" is used for something else than an array of queued commands.`)},i0=()=>null==k?void 0:k.clientId,i1={scope:"shared",key:"referrer"},i2=(e,t)=>{w.variables.set({...i1,value:[i0(),e]}),t&&w.variables.get({scope:i1.scope,key:i1.key,result(r,n,i){return null!=r&&r.value?i():(null==n||null==(r=n.value)?void 0:r[1])===e&&t()}})},i6=e7(),i4=e7(),i5=1,[i8,i9]=Q(),i7=e=>{var t=e7(e,i6),r=e7(e,i4),n=e7(e,iu),i=e7(e,()=>i5);return(e,l)=>({totalTime:t(e,l),visibleTime:r(e,l),activeTime:n(e,l),activations:i(e,l)})},le=i7(),[lr,ln]=Q(),li=(e,t)=>(t&&tD(la,t=>e(t,()=>!1)),lr(e)),ll=new WeakSet,la=document.getElementsByTagName("iframe");function lu(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=0<e.units?"add":"remove"}return e}}var ld=e=>(null==e?void 0:e.component)||(null==e?void 0:e.content),lv=e=>nf(e,t=>t!==e&&!!ld(nr.get(t)),e=>(T=nr.get(e),(T=nr.get(e))&&e_(ej(T.component,T.content,T),"tags"))),lc=(e,t)=>t?e:{...e,rect:void 0,content:(x=e.content)&&eO(x,e=>({...e,rect:void 0}))},lf=(e,t=V,r)=>{var n,i,l,a=[],o=[],u=0;return rG(e,e=>{var s,l,i=nr.get(e);i&&(ld(i)&&(l=eB(es(i.component),e=>{var r;return 0===u||!t&&(1===u&&(null==(r=e.track)?void 0:r.secondary)!==K||(null==(r=e.track)?void 0:r.promote))}),n=(null!=r?r:eV(l,e=>null==(e=e.track)?void 0:e.region))&&r9(e)||void 0,s=lv(e),i.content&&e3(a,...eO(i.content,e=>({...e,rect:n,...s}))),null!=l)&&l.length&&(e3(o,...eO(l,e=>{var t;return u=eJ(u,null!=(t=e.track)&&t.secondary?1:2),lc({...e,content:a.length?a:void 0,rect:n,...s},!!n)})),a=[]),l=i.area||nv(e,"area"))&&e3(o,...eO(es(l)))}),a.length&&e5(o,lc({id:"",rect:n,content:a})),tD(o,e=>{el(e)?e5(null!=i?i:i=[],e):(null==e.area&&(e.area=rt(i,"/")),e3(null!=l?l:l=[],e))}),l||i?{components:l,area:rt(i,"/")}:void 0},lp=Symbol(),lh=[{id:"context",setup(e){tt(()=>tD(la,e=>eQ(ll,e)&&ln(e)),1e3).trigger(),e.variables.get({scope:"view",key:"view",result(t,r,i){var l;return null==k||null==t||!t.value||null!=k&&k.definition?(n=null==t?void 0:t.value,null!=t&&null!=(l=t.value)&&l.navigation&&f(!0)):(k.definition=t.value,null!=(l=k.metadata)&&l.posted?e.events.postPatch(k,{definition:n}):nJ(k,k.type+" (definition updated)")),i()}});var n,t,d=null!=(t=null==(t=ix({scope:"tab",key:"viewIndex"}))?void 0:t.value)?t:0,v=null==(t=ix({scope:"tab",key:"tabIndex"}))?void 0:t.value,c=(null==v&&iI({scope:"tab",key:"tabIndex",value:v=null!=(t=null!=(t=null==(t=ix({scope:"shared",key:"tabIndex"}))?void 0:t.value)?t:null==(t=ix({scope:"session",key:"@info"}))||null==(t=t.value)?void 0:t.tabs)?t:0},{scope:"shared",key:"tabIndex",value:v+1}),null),f=(t=V)=>{var l,a,o,i,p;r5(""+c,c=location.href)&&!t||({source:t,scheme:i,host:l}=tb(location.href+"",{requireAuthority:!0}),k={type:"view",timestamp:e9(),clientId:iv(),tab:id,href:t,path:location.pathname,hash:location.hash||void 0,domain:{scheme:i,host:l},tabNumber:v+1,tabViewNumber:d+1,viewport:nt(),duration:le(void 0,!0)},0===v&&(k.firstTab=K),0===v&&0===d&&(k.landingPage=K),iI({scope:"tab",key:"viewIndex",value:++d}),a=tw(location.href),eO(["source","medium","campaign","term","content"],(e,t)=>{var n;return(null!=(n=(o=k).utm)?n:o.utm={})[e]=null==(n=es(a["utm_"+e]))?void 0:n[0]}),!(k.navigationType=S)&&performance&&eO(performance.getEntriesByType("navigation"),e=>{k.redirects=e.redirectCount,k.navigationType=tj(e.type,/\_/g,"-")}),S=void 0,"navigate"===(null!=(t=k.navigationType)?t:k.navigationType="navigate")&&(p=null==(i=ix(i1))?void 0:i.value)&&nz(document.referrer)&&(k.view=null==p?void 0:p[0],k.relatedEventId=null==p?void 0:p[1],e.variables.set({...i1,value:void 0})),(p=document.referrer||null)&&!nz(p)&&(k.externalReferrer={href:p,domain:(()=>{var{host:t,scheme:r,port:n}=tb(p,{delimiters:!1,requireAuthority:!0});return{host:t+(n?":"+n:""),scheme:r}})()}),k.definition=n,n=void 0,e.events.post(k),e.events.registerEventPatchSource(k,()=>({duration:le()})),i9(k))};return n6(e=>{e?(i4(K),++i5):i4(V)}),r7(window,"popstate",()=>(S="back-forward",f())),eO(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),S="navigate",f()}}),f(),{processCommand:t=>lm(t)&&(e(t.username?{type:"login",username:t.username}:{type:"logout"}),K),decorate(e){!k||rj(e)||rc(e)||(e.view=k.clientId)}}}},{id:"components",setup(e){var t=(e=>{var t=new IntersectionObserver(e=>tD(e,e=>{var t,r;return null==(t=(r=e.target)[iW])?void 0:t.call(r,e)})),r=new Set,n=(tt({callback:()=>tD(r,e=>e()),frequency:250,raf:!0}),(e,t,r=0)=>e<r?r:t<e?t:e),i=rL.createRange();return(l,a)=>{var o,u,s,d,v,c,f,p,h,g,y,m,b,w,k,S;a&&(o=eB(null==a?void 0:a.component,e=>{var t;return(null==(t=e.track)?void 0:t.impressions)||(null!=(t=null==(t=e.track)?void 0:t.secondary)?t:e.inferred)!==K}))&&eD(o)&&(p=f=V,g=h=0,y=(e,t,r,n)=>{var i,l=null!=(l=(i=null!=u?u:u=[])[e])?l:i[e]=[{duration:0,impressions:0},e7(!1,iu),!1,!1,0,0,0,tC()];l[4]=t,l[5]=r,l[6]=n},m=[tC(),tC()],b=i7(!1),w=e7(!1,iu),k=-1,S=()=>{var O,t=l.getBoundingClientRect(),r=window.innerWidth,a=window.innerHeight,S=[n(t.top,a),n(t.right,r),n(t.bottom,a),n(t.left,r)],T=S[2]-S[0],S=S[1]-S[3],E=f?iD:iB,r=(E[0]*a<T||E[0]<(T/t.height||0))&&(E[0]*r<S||E[0]<(S/t.width||0));if(p!==r&&w(p=r,!0),f!==(f=p&&w()>=np.impressionThreshold-250)&&(++h,b(f),s||e(s=eB(eO(o,e=>((null==(e=e.track)?void 0:e.impressions)||nc(l,"impressions",K,e=>null==(e=e.track)?void 0:e.impressions))&&W({type:"impression",pos:r3(l),viewport:nt(),timeOffset:le(),impressions:h,...lf(l,K)})||null))),null!=s)&&s.length&&(O=b(),d=eO(s,t=>e.events.registerEventPatchSource(t,()=>({relatedEventId:t.clientId,duration:O,impressions:h,regions:u&&{top:u[0][0],middle:u[1][0],bottom:u[2][0]},seen:g,text:c,read:O.activeTime&&c&&n(O.activeTime/c.readTime,g)})))),t.height!==k){k=t.height;E=l.textContent;if({boundaries:v,...c}=(e=>{for(var r,n,i=RegExp("[\\p{L}\\p{N}][\\p{L}\\p{N}'â€™]*|([.!?]+)","gu"),l=0,a=0,o=0,u=0,s=!1;r=i.exec(e);)r[1]?(s&&++u,s=!1):(s=!0,l+=r[0].length,6<r[0].length&&++o,++a);s&&++u;var i=RegExp("[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)","gu"),d=[0,.25,.75,1].map(e=>e*l|0),v=[],f=0,p=!1;do{if(null!=(r=i.exec(e))&&r[1])p&&++f;else{for(var c=null==r?void 0:r.index,h=!1,g=0;g<d.length;g++)d[g]--||(v[g]={offset:null!=n?n:c,wordsBefore:f,readTime:em(f/238*6e4)},h=!0);(p=!h)||(f=0),n=c+1}}while(r);return{text:e,length:e.length,characters:l,words:a,sentences:u,lix:em(a/u+100*o/a),readTime:em(a/238*6e4),boundaries:v}})(null!=E?E:""),u||t.height>=1.25*a){var _=rL.createTreeWalker(l,NodeFilter.SHOW_TEXT),j=0,C=0;for(null==u&&(u=[]);C<v.length&&(M=_.nextNode());){var M,U,F,P,B,z=null!=(U=null==(U=M.textContent)?void 0:U.length)?U:0;for(j+=z;j>=(null==(F=v[C])?void 0:F.offset);)i[C%2?"setEnd":"setStart"](M,v[C].offset-j+z),C++%2&&({top:F,bottom:P}=i.getBoundingClientRect(),B=t.top,C<3?y(0,F-B,P-B,v[1].readTime):(y(1,u[0][4],F-B,v[2].readTime),y(2,F-B,P-B,v[3].readTime)))}}}var r=t.left<0?-t.left:0,E=t.top<0?-t.top:0,L=t.width*t.height;f&&(g=m[0].push(E,E+T)*m[1].push(r,r+S)/L),u&&tD(u,e=>{var r=n(t.top<0?-t.top:0,e[5],e[4]),i=n(t.bottom>a?a:t.bottom,e[5],e[4]),l=f&&0<i-r,o=e[0];o.duration=e[1](l),l&&(e[3]!==(e[3]=l)&&++e[0].impressions,o.seen=e[7].push(r,i)/(e[5]-e[4]),o.read=n(o.duration/e[6],o.seen))})},l[iW]=({isIntersecting:e})=>{eZ(r,S,e),e||(tD(d,e=>e()),S())},t.observe(l))}})(e),n=({boundary:e,...n})=>{eY(nr,e,e=>{var t;return(e=>null==e?void 0:{...e,component:es(e.component),content:es(e.content),tags:es(e.tags)})("add"in n?{...e,component:ej(null==e?void 0:e.component,n.component),content:ej(null==e?void 0:e.content,n.content),area:null!=(t=null==n?void 0:n.area)?t:null==e?void 0:e.area,tags:ej(null==e?void 0:e.tags,n.tags),cart:null!=(t=n.cart)?t:null==e?void 0:e.cart,track:null!=(t=n.track)?t:null==e?void 0:e.track}:"update"in n?n.update(e):n)}),t(e,nr.get(e))};return{decorate(e){tD(e.components,e=>t5(e,"track",void 0))},processCommand:e=>lk(e)?(n(e),K):lE(e)?(eO(((e,t)=>{var r,n;return t?(r=[],n=new Set,document.querySelectorAll(`[${e}]`).forEach(i=>{if(!n.has(i))for(var l=[];null!=rZ(i,e);){eQ(n,i);var a,o=t_(rZ(i,e),"|");rZ(i,e,null);for(var u=0;u<o.length;u++){var d=o[u];if(""!==d){var s="-"===d?-1:parseInt(null!=(s=ea(d))?s:"",36);if(s<0)l.length+=s;else{if(0===u&&(l.length=0),isNaN(s)&&/^["\[{]/.test(d))for(var c="";u<o.length;u++)try{d=JSON.parse(c+=o[u]);break}catch(e){}0<=s&&t[s]&&(d=t[s]),e5(l,d)}}}e5(r,...eO(l,e=>({add:K,...e,boundary:i})));var f=i.nextElementSibling;"WBR"===i.tagName&&null!=(a=i.parentNode)&&a.removeChild(i),i=f}}),r):[]})(e.scan.attribute,e.scan.components),n),K):V}}},{id:"navigation",setup(e){var t=new WeakMap,r=r=>{r7(r,["click","contextmenu","auxclick"],n=>{var i,l,a,o,u,s=V;if(rG(n.target,e=>{iX(e)&&null==a&&(a=e),s=s||"NAV"===r2(e);var t,d=nn(e),d=null==d?void 0:d.component;!n.button&&null!=d&&d.length&&!u&&(tD(e.querySelectorAll("a,button"),t=>iX(t)&&(3<(null!=u?u:u=[]).length?eS():u.push({...iZ(t,!0),component:rG(t,(e,t,r,n=null==(i=nn(e))?void 0:i.component)=>n&&t(n[0]),t=>t===e)}))),u)&&null==o&&(o=e),null==i&&(i=null!=(t=nc(e,"clicks",K,e=>null==(e=e.track)?void 0:e.clicks))?t:d&&eV(d,e=>(null==(e=e.track)?void 0:e.clicks)!==V)),null==l&&(l=null!=(t=nc(e,"region",K,e=>null==(e=e.track)?void 0:e.region))?t:d&&eV(d,e=>null==(e=e.track)?void 0:e.region))}),null!=o?o:o=a){var d,v=u&&!a&&i,c=lf(null!=a?a:o,!1,v),f=nf(null!=a?a:o,void 0,e=>eO(es(null==(e=nr.get(e))?void 0:e.tags))),p=(null==i&&(i=!s),{...(l=null==l?K:l)?{pos:r3(a,n),viewport:nt()}:null,...((e,t)=>{var n;return rG(null!=e?e:t,e=>"IMG"===r2(e)||e===t?(n={element:iZ(e,!1)},V):K),n})(n.target,null!=a?a:o),...c,timeOffset:le(),...f});if(a)if(iG(a)){var h=a,c=h.hostname!==location.hostname,{host:f,scheme:m,source:b}=tb(h.href,{delimiters:!1,requireAuthority:!0});if(h.host===location.host&&h.pathname===location.pathname&&h.search===location.search)return"#"===h.hash?void 0:void(h.hash!==location.hash&&0===n.button&&e(W({type:"anchor_navigation",anchor:h.hash,...p})));var k,T,w=W({clientId:iv(),type:"navigation",href:c?h.href:b,external:c,domain:{host:f,scheme:m},self:K,anchor:h.hash,...p});"contextmenu"!==n.type?n.button<=1&&(1===n.button||n.ctrlKey||n.shiftKey||n.altKey||rZ(h,"target")!==window.name?(i2(w.clientId),w.self=V,e(w)):r5(location.href,h.href)||(w.exit=w.external,i2(w.clientId))):(k=h.href,(b=nz(k))?i2(w.clientId,()=>e(w)):(T=(""+Math.random()).replace(".","").substring(1,8),b||np.captureContextMenu&&(h.href=nW+"="+T+encodeURIComponent(k),r7(window,"storage",(t,r)=>"_tail:push"===t.key&&(t.newValue&&(null==(t=JSON.parse(t.newValue))?void 0:t.requestId)===T&&e(w),r())),r7(r,["keydown","keyup","visibilitychange","pointermove"],(e,t)=>{t(),h.href=k}))))}else{rG(n.target,(e,t)=>{var r;return!!(null!=d?d:d=(e=>el(e=null==e||e!==K&&""!==e?e:"add")&&U(e,"add","remove","update","clear")?{action:e}:ed(e)?e:void 0)(null!=(r=null==(r=nn(e))?void 0:r.cart)?r:nv(e,"cart")))&&!d.item&&(d.item=(e=>null==e?J:eo(e)||el(e)?e[e.length-1]:eF(e,(e,r)=>e,void 0,void 0))(null==(r=nn(e))?void 0:r.content))&&t(d)});c=lu(d);(c||i)&&e(W(c?{type:"cart_updated",...p,...c}:{type:"component_click",...p}))}else v&&eY(t,o,r=>{var i=r8(o,n);return r?e5(r,i):(i=W({type:"component_click_intent",...p,clicks:r=[i],clickables:u}),e.events.registerEventPatchSource(i,()=>({clicks:t.get(o)}),!0,o)),r})}})};r(document),li(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=r4(K);i8(()=>{return e=()=>(t={},r=r4(K)),setTimeout(e,250);var e}),r7(window,"scroll",()=>{var l,n=r4(),i={x:(u=r4(V)).x/(rV.offsetWidth-window.innerWidth)||0,y:u.y/(rV.offsetHeight-window.innerHeight)||0};n.y>=r.y&&(l=[],!t.fold&&n.y>=r.y+200&&(t.fold=K,e5(l,"fold")),!t["page-middle"]&&.5<=i.y&&(t["page-middle"]=K,e5(l,"page-middle")),!t["page-end"]&&.99<=i.y&&(t["page-end"]=K,e5(l,"page-end")),(n=eO(l,e=>W({type:"scroll",scrollType:e,offset:i}))).length)&&e(n)})}},{id:"cart",setup:e=>({processCommand(t){var r;return ly(t)?("clear"===(r=t.cart)?e({type:"cart_updated",action:"clear"}):(r=lu(r))&&e({...r,type:"cart_updated"}),K):lA(t)?(e({type:"order",...t.order}),K):V}})},{id:"forms",setup(e){var t,r=new Map,n=(e,t=!1)=>{var r=!t||rY(e,ni("form-value")),e=(t&&(r=r?er(r):"checkbox"===e.type),e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"true":"false":e.value);return t&&(e=e&&tp(e,200)),r?e:void 0},i=t=>{var i,a,s,l=t.form;if(l)return a=rY(l,ni("ref"))||"track_ref",(s=t4(r,l,()=>{var t,r=new Map,n={type:"form",name:rY(l,ni("form-name"))||rZ(l,"name")||l.id||void 0,activeTime:0,totalTime:0,fields:{}},s=(e.events.post(n),e.events.registerEventPatchSource(n,()=>({...n,timeOffset:le()})),((e=0)=>{var t,r,n=(i,l=e)=>{if(void 0===i)return!!r;clearTimeout(t),et(i)?i&&(l<0?en:D)(null==r?void 0:r())?n(r):r=void 0:(r=i,t=setTimeout(()=>n(!0,l),l<0?-l:l))};return n})());return r7(l,"submit",()=>{i=lf(l),t[3]=3,s(()=>{(l.isConnected&&0<r9(l).width?(t[3]=2,s):()=>{o(),2<=t[3]&&(n.completed=3===t[3]||!(l.isConnected&&r9(l).width)),e.events.postPatch(n,{...i,totalTime:e9(K)-t[4]}),t[3]=1})()},750)}),t=[n,r,l,0,e9(K),1]}))[1].get(t)||eO(l.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{var d,v,l;e.name&&"hidden"!==e.type?(l=null!=(d=(l=s[0].fields)[v=e.name])?d:l[v]={id:e.id||v,name:v,label:tj(null!=(v=null==(d=e.labels)||null==(l=d[0])?void 0:l.innerText)?v:e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,totalTime:0,type:null!=(d=e.type)?d:"unknown",[lp]:n(e),value:n(e,!0)},s[0].fields[l.name]=l,s[1].set(e,l)):"hidden"!==e.type||e.name!==a&&!nc(e,"ref")||(e.value||(e.value=tj("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^(e=>crypto.getRandomValues(e))(new Uint8Array(1))[0]&15>>e/4).toString(16))),s[0].ref=e.value)}),[t,s]},l=(e,[r,n]=null!=(t=i(e))?t:[],l=null==n?void 0:n[1].get(r))=>l&&[n[0],l,r,n],a=null,o=()=>{var r,i,l,o,d,v,c;a&&([r,i,l,o]=a,d=-(u-(u=i4())),v=-(s-(s=e9(K))),c=i[lp],(i[lp]=n(l))!==c&&(null==i.fillOrder&&(i.fillOrder=o[5]++),i.filled&&(i.corrections=(null!=(c=i.corrections)?c:0)+1),i.filled=K,o[3]=2,tD(r.fields,([e,t])=>t.lastField=e===i.name)),i.value=n(l,!0),i.activeTime+=d,i.totalTime+=v,r.activeTime+=d,r.totalTime+=v,a=null)},u=0,s=0,d=e=>e&&r7(e,["focusin","focusout","change"],(e,t,r=e.target&&l(e.target))=>r&&(a=r,"focusin"===e.type?(s=e9(K),u=i4()):o()));d(document),li(e=>e.contentDocument&&d(e.contentDocument),!0)}},{id:"consent",setup(e){var t,n=async t=>e.variables.get({scope:"session",key:"@consent",callback:t}).value(),i=async t=>{var r;if(t)return!(r=await n())||rd.equals(r,t)?[!1,r]:(await e.events.post(W({type:"consent",consent:t}),{async:!1,variables:{get:[{scope:"session",key:"@consent"}]}}),[!0,t])},r={analytics_storage:"performance",functionality_storage:"functionality",personalization_storage:"personalization",ad_storage:"marketing",security_storage:"security"},l=(e({consent:{externalSource:{key:"Google Consent Mode v2",frequency:250,poll(){var e,n=rJ.dataLayer,i=t,l=null==n?void 0:n.length;if(l&&(t!==(t=n[l-1])||!t))for(;l--&&((e=n[l])!==i||!i);){var a={},o=!1;if("consent"===(null==e?void 0:e[0])&&"update"===e[1])return tJ(r,([t,r])=>"granted"===e[2][t]&&(a[r]=o=!0)),{classification:o?"indirect":"anonymous",purposes:a}}}}}}),{});return{processCommand(e){var r,a,t,s,d;return l$(e)?((t=e.consent.get)&&n(t),(r=e.consent.set)&&(async()=>{var e;return(null!=(e=r.callback)?e:()=>{})(...await i(r))})(),(a=e.consent.externalSource)&&(d=a.key,(null!=(t=l[d])?t:l[d]=tt({frequency:null!=(e=a.frequency)?e:1e3})).restart(a.frequency,async()=>{var e,t,r;rL.hasFocus()&&(e=a.poll(s))&&!rd.equals(s,e)&&([t,r]=await i(e),t&&nJ(r,"Consent was updated from "+d),s=e)}).trigger()),K):V}}}}],I=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&void 0!==(null==t?void 0:t[e])),ly=I("cart"),lm=I("username"),lb=I("tagAttributes"),lw=I("disable"),lk=I("boundary"),lS=I("extension"),lT=I(K,"flush"),lx=I("get"),lI=I("listener"),lA=I("order"),lE=I("scan"),lN=I("set"),lO=e=>"function"==typeof e,l$=I("consent");Object.defineProperty(rJ,".tail.js.init",{writable:!1,configurable:!1,value(e){e(iQ)}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
