(()=>{"use strict";var e=void 0,r=(r,t=!0,n)=>{try{return r()}catch(r){if(!i(t))return t?.(r);if(t)throw r;return console.error(r),e}finally{n?.()}},t=r=>r===e,n=r=>r!==e,a=e=>null!=e,i=e=>"boolean"==typeof e,o=e=>!!e,l=Array.isArray,f=e=>l(e),s=(e,r=!1)=>null==e?[]:!r&&f(e)?e:g(e,!0)?[...e]:[e],u=(e,r=!1)=>e&&"object"==typeof e&&(r||!g(e)),c=(e,r)=>"function"==typeof e?.[r],d=e=>"symbol"==typeof e,v=e=>"function"==typeof e,g=(e,r=!1)=>!!e?.[Symbol.iterator]&&(r||!(e=>"string"==typeof e)(e)),y=(e,r=0,t)=>r||n(t)?e.slice?e.slice(r,t):0>r||0>t?y([...e],r,t):function*(){for(var n of(t??=Number.MAX_SAFE_INTEGER,e))if(!r--){if(!t--)break;yield n}}():e;function*h(e,r=(e=>e),t){var a,i=0,o=0,l={prev:void 0,source:e,skip:()=>o=1,end:e=>(o=n(e)?2:3,e)};for(var f of e){if(void 0===(a=r(f,i++,l))||o%2||(t?t(a):yield a,l.prev=f),o>1)break;o=0}}var w,b=(e,r,t)=>g(e,!0)?r||t?y(b(e),r,t):e:n(e)?u(e)?b(Object.entries(e),r,t):v(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(n(r)&&(yield r);t--&&n(r=e(r));)yield r}(e,r,t):function*(e=0,r=0){for(;e--;)yield r++}(e,r):[],m=(e,r,...t)=>{var a,i=void 0;if(e=b(e,...t),3>r.length&&c(e,"forEach"))e.forEach(((e,t)=>n(a=r(e,t))&&(i=a)));else for(var o of h(e,r,(e=>i=e)));return i},p=(e,r=o,t,...n)=>t?s(r(e,r,!1,...n)):((e,r)=>f(e)?e.filter(r):function*(){var t=0;for(var n of e)r(n,t++)&&(yield n)}())(b(e,...n),r),A=p,E=(e,r,...t)=>c(e,"some")?e.some(r?(e,t)=>r(e,t):o):r?E(A(e,r,!1,...t)):m(e,((e,r,{end:t})=>t(!0)))??!1,I=(e,r,t)=>{var a=c(e,"get")?e.get(r):c(e,"has")?e.has(r):e[r];return!n(a)&&n(t)&&n(a=v(t)?t():t)&&k(e,r,a),a},k=(!0,(e,...r)=>{var a,[i,o]=r,l=([r,n])=>t(n)?U(e,r):((a||I(e,r)!==n)&&(c(e,"set")?e.set(r,n):c(e,"add")?n?e.add(r):e.delete(r):e[r]=n),n);return(a=1===r.length)?(f(i)&&i.every((e=>u(e)))&&(i=Object.assign({},...i)),u(i)?(Object.assign(e,i),Object.entries(i).forEach((([r,t])=>!n(t)&&delete e[r])),e):(u(i)?m(i,l):m(i,(e=>u(e)?m(e,l):l(e))),e)):l([i,o])}),U=(e,r,...t)=>{if(t.length)return t.map((r=>U(e,r)));var n=I(e,r);return c(e,"delete")?e.delete(r):f(e)?e.splice(r,1):delete e[r],n},S=()=>Math.trunc(performance.timeOrigin+performance.now()),T=(r,t)=>{var{queue:a=!0,paused:o=!1,frequency:l}="number"==typeof t?{frequency:t}:t,f=0,s=(e=>{var r,t,a,i={resolved:void 0,reset(){return i.resolved=void 0,a=new Promise(((e,a)=>(r=r=>{i.resolved=!n(r)||r,e(r)},t=a))),i},resolve(e){return r(e),i},reject(e){return t(e),i},signal(e){return r(e),i.reset()},then(...e){return a.then(...e)},wait(e){return Promise.race([x(e),a])}};return i.reset(),e?i.resolve(e):i})().resolve(),u=async t=>!(!f||!a&&!s.resolved&&!0!==t||(d.busy=!0,!0!==t&&await s,s.reset(),(!1===await(async(r,t=!0,n)=>{try{return await r()}catch(r){if(!i(t))return await t(r);if(t)throw r;return console.error(r),e}finally{n?.()}})(r,!1,(()=>s.resolve()))||0>l)&&c(!0),d.busy=!1,0)),c=e=>(clearInterval(f),d.active=!!(f=e?setInterval(u,0>l?-l:l):0),d),d={active:!1,busy:!1,restart:(e,t)=>(r=e??r,l=t??l,e||t||!f?c(!0):d),toggle:(e,r)=>e!==d.active?e?r?(d.trigger(),d):c(!0):c(!1):d,trigger:async e=>await u(e)&&(c(!0),!0)};return d.toggle(!o)},x=(e=0)=>new Promise((r=>e?setTimeout(r,e):r())),F=S().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),N=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},M=(...e)=>(e=p(e),[()=>E(e,(e=>e[0]())),()=>E(e,(e=>e[1]()))]),C=()=>{var e=new Set;return[r=>N(r,(r=>e.add(r)),(r=>e.delete(r))),(...r)=>e.forEach((e=>e(...r)))]},[O,j]=C(),_=(e,r,t,i={capture:!0,passive:!0})=>f(r)?M(...((e,r,...t)=>(!v(r)&&a(r)&&(t.unshift(r),r=null),e=b(e,...t),r?3>r.length&&c(e,"map")?e.map(r).filter(n):[...h(e,r)]:s(e,!0)))(r,(r=>_(e,r,t,i)))):N(t,(t=>e.addEventListener(r,t,i)),(t=>e.addEventListener(r,t,i))),z=(e,r=!0)=>(w=O(e),V&&r&&e(R,!1,w[0]),w),R=!0,V=!1,q=()=>(!V||!R)&&j(R=!0,V||!(V=!0));_(window,"pagehide",(()=>(R||V)&&j(R=!1,V=!1))),_(window,"pageshow",q),_(document,"visibilitychange",(()=>"visible"===document.visibilityState?q():R&&j(R=!1,V)));var D=[],B=[],G=(e,r=0)=>e.charCodeAt(r);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach(((e,r)=>D[B[r]=e.charCodeAt(0)]=r));var J,P={32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},X=(e=256)=>e*Math.random()|0,$={exports:{}};J=$,(()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var l=0;l<e.length;l++)f(e[l]);else f(e);return i.subarray(0,o);function f(e,i){switch(typeof e){case"undefined":s();break;case"boolean":(e=>{c(e?195:194)})(e);break;case"number":(e=>{if(isFinite(e)&&Math.floor(e)===e)if(0>e||e>127)if(0>e&&e>=-32)c(e);else if(e>0&&255>=e)d([204,e]);else if(-128>e||e>127)if(e>0&&65535>=e)d([205,e>>>8,e]);else if(-32768>e||e>32767)if(e>0&&4294967295>=e)d([206,e>>>24,e>>>16,e>>>8,e]);else if(-2147483648>e||e>2147483647)if(e>0&&0x10000000000000000>=e){var r=e/a,i=e%a;d([211,r>>>24,r>>>16,r>>>8,r,i>>>24,i>>>16,i>>>8,i])}else-0x8000000000000000>e||e>0x8000000000000000?d(0>e?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(c(211),v(e));else d([210,e>>>24,e>>>16,e>>>8,e]);else d([209,e>>>8,e]);else d([208,e]);else c(e);else n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),c(203),d(new Uint8Array(t))})(e);break;case"string":(e=>{var r=(e=>{for(var r=!0,t=e.length,n=0;t>n;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var l=e.charCodeAt(o);if(128>l)i[a++]=l;else{if(2048>l)i[a++]=l>>6|192;else{if(l>55295&&56320>l){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var f=e.charCodeAt(o);if(56320>f||f>57343)throw new Error("UTF-8 encode: second surrogate character 0x"+f.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&f),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}}return r?i:i.subarray(0,a)})(e),t=r.length;t>31?d(t>255?t>65535?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):c(160+t),d(r)})(e);break;case"object":null===e?s():e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&4294967296>r)d([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&17179869184>r)d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]);else{var t;d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r)}})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?(e=>{var r=e.length;d(r>15?r>65535?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)})(e):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r>15?d(r>65535?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):c(128+r),e){var n=e[t];void 0!==n&&(f(t),f(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?f(r.invalidTypeReplacement(e),!0):f(r.invalidTypeReplacement,!0)}}function s(e){c(192)}function u(e){var r=e.length;r>15?d(r>65535?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):c(144+r);for(var t=0;r>t;t++)f(e[t])}function c(e){if(i.length<o+1){for(var r=2*i.length;o+1>r;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,t;0>e?(e++,r=~(r=Math.abs(e)/a),t=~(t=Math.abs(e)%a)):(r=e/a,t=e%a),d([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function r(e,r){var t,n=4294967296,a=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(r>=0&&127>=r)return r;if(r>=128&&143>=r)return u(r-128);if(r>=144&&159>=r)return c(r-144);if(r>=160&&191>=r)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return s(-1,1);if(197===r)return s(-1,2);if(198===r)return s(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return f(4);if(203===r)return f(8);if(204===r)return l(1);if(205===r)return l(2);if(206===r)return l(4);if(207===r)return l(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&255>=r)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var t=0,n=!0;r-- >0;)if(n){var i=e[a++];t+=127&i,128&i&&(t-=128),n=!1}else t*=256,t+=e[a++];return t}function l(r){for(var t=0;r-- >0;)t*=256,t+=e[a++];return t}function f(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function s(r,t){0>r&&(r=l(t));var n=e.subarray(a,a+r);return a+=r,n}function u(e,r){0>e&&(e=l(r));for(var t={};e-- >0;)t[i()]=i();return t}function c(e,r){0>e&&(e=l(r));for(var t=[];e-- >0;)t.push(i());return t}function d(r,t){0>r&&(r=l(t));var n=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127)if(i>191&&224>i){if(n>=t)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&240>i){if(n+1>=t)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(239>=i||i>=248)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(n+2>=t)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(i>65535){if(i>1114111)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a+=String.fromCharCode(i>>10|55296),a+=String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,n,r)}function v(e,r){0>e&&(e=l(r));var t=l(1),i=s(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2);return r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6)}if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(i):{type:t,data:i}}}var t={serialize:e,deserialize:r,encode:e,decode:r};J?J.exports=t:window[window.msgpackJsName||"msgpack"]=t})();var L=$.exports,K="$ref",H=new ArrayBuffer(8),Q=new DataView(H),W=e=>{var r,a,i,o=(e,r,t=e[r],n=s(t))=>((t!==n||d(r))&&(e[r]=n,l((()=>e[r]=t))),t),l=e=>(r??=[]).push(e),s=e=>null==e||v(e)||d(e)?null:Number.isFinite(e)&&!Number.isSafeInteger(e)?(Q.setFloat64(0,e,!0),{"":[...new Uint32Array(H)]}):u(e,!0)?e.toJSON&&e!==(e=e.toJSON())?s(e):n(i=(a??=new Map).get(e))?(e[K]||(e[K]=i,l((()=>delete e[K]))),{[K]:i}):(u(e)?(a.set(e,a.size+1),Object.keys(e).forEach((r=>(t(o(e,r))||d(r))&&delete e[r]))):g(e)&&(!f(e)||Object.keys(e).length<e.length?[...e]:e).forEach(((r,t)=>t in e?o(e,t):(e[t]=null,l((()=>delete e[t]))))),e):e,c=L.serialize(s(e));return r?.forEach((e=>e())),c},Y=(e,t=!1)=>{var[n,o,l]=((e="")=>{var r,t,n,o,l,f=0n,s=0n,u=[],c=0,d=0,v=0,g=0,y=[];for(v=0;v<e.length;g+=y[v]=e.charCodeAt(v++));var h=e?()=>{u=[...y],d=255&(c=g),v=-1}:()=>{},w=e=>(d=255&(c+=-u[v=(v+1)%u.length]+(u[v]=e)),e);return[e?e=>{for(h(),r=e.length,o=16-(r+4)%16,l=new Uint8Array(4+r+o),n=0;3>n;l[n++]=w(X()));for(l[n++]=w(d^16*X(16)+o),t=0;r>t;l[n++]=w(d^e[t++]));for(;o--;)l[n++]=X();return l}:e=>e,e?e=>{for(h(),t=0;3>t;w(e[t++]));if(0>=(r=e.length-4-((d^w(e[t++]))%16||16)))return new Uint8Array(0);for(l=new Uint8Array(r),n=0;r>n;l[n++]=d^w(e[t++]));return l}:e=>e,(e,r=64)=>{if(!a(e))return null;var n=i(r)?64:r;for(h(),[f,s]=P[n],t=0;t<e.length;f=BigInt.asUintN(n,(f^BigInt(d^w(e[t++])))*s));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+f%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):f.toString(36)}]})(e??"");return t?[e=>JSON.stringify(e),e=>null==e?void 0:r((()=>JSON.parse(e,void 0))),(e,r)=>l(L.serialize(e),r)]:[e=>(e=>{for(var r,t,n=0,a=e.length,i=[];a>n;)r=e[n++]<<16|e[n++]<<8|e[n++],i.push(B[(16515072&r)>>18],B[(258048&r)>>12],B[(4032&r)>>6],B[63&r]);return i.length+=a-n,t=i,String.fromCharCode(...t)})(n(W(e))),e=>{return a(e)?(t=o((e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=D[G(e,t++)]<<2|(r=D[G(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=D[G(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|D[G(e,t++)]));return i})(e)),l=e=>u(e,!0)?f(e[""])&&2===(e=e[""]).length?new DataView(new Uint32Array(e).buffer).getFloat64(0,!0):e[K]&&(i=(n??=[])[e[K]])?i:(e[K]&&(n[e[K]]=e,delete e[K]),Object.entries(e).forEach((([r,t])=>t!==(t=l(t))&&(e[r]=t))),e):e,a(t)?r((()=>l(L.deserialize(t))),(()=>{})):void 0):null;var t,n,i,l},(e,r)=>l(W(e),r)]};Y();var[Z,ee]=Y("foo",!0),re=(e=>{var[r,n]=C(),a=r=>e.getItem(r)?.[0],i=(r,i,o)=>{var l=a(r);return t(i)?(e.removeItem(r),n(void 0,{key:r,oldValue:l,source:F,self:!0})):(e.setItem(r,[i,F,o]),n(i,{key:r,oldValue:l,source:F,self:!0})),i},o=0,l=(r,t,n)=>{o++>3&&te(`Race condition ('${r}').`,!0);var a=i(r,t(e.getItem(r)?.[0])),f=e.getItem(r);return f?.[1]&&f?.[1]!==F?l(r,t):(o=0,a)};return{get:a,set:i,delete:e=>i(e,void 0),update:l,observe:e.observe?(t,n,a)=>{var[i,o]=M(e.observe(t,((e,r,t)=>n(e?.[0],{key:t,oldValue:r?.[0],source:e?.[1]},i))),a?r(((e,r,a)=>r.key===t&&n(e,r,a))):void 0);return[i,o]}:void 0}})({getItem:e=>ee(localStorage.getItem(e))??null,setItem:(e,r)=>localStorage.setItem(e,Z(r.filter((e=>null!=e)))),removeItem:e=>localStorage.removeItem(e),observe(e,r){var[t,n]=_(window,"storage",(({key:t,newValue:n,oldValue:a})=>e==t&&r(ee(n),ee(a),e)));return M([t,n],z(((e,r)=>!r&&(e?n():t()))))}}),te=(e,r,t=!1)=>{if("boolean"==typeof r&&(t=r,r=null),r?.message&&(e+="("+r.message,r.stack&&(e+="\n\n"+r.stack),e+=")"),console.error(e),t)throw new Error(e)},ne={knownTabs:{},variables:{}},[ae,ie]=C(),oe=((e,r=re)=>({get:()=>r.get(e),set:(t,n)=>r.set(e,t,n),delete:()=>r.delete(e),update:(t,n)=>r.update(e,t,n),observe:r.observe?(t,n)=>r.observe(e,t,n):void 0}))("_t.sr",re),le=T((()=>se(!0)),5e3),fe={hearbeat:S()},se=e=>{var r=S()-1e4;return le.toggle(e,!0),ie("ready",oe.update((t=>(m(t?.knownTabs,(([e,n])=>n[0]<r&&U(t.knownTabs,e))),fe.hearbeat=S(),k((t??=ne).knownTabs,F,e?fe:void 0),t))))};z(((e,r)=>!r&&se(e)));var ue=async()=>{var e=0,r=!1,t=T((async()=>{var t=r;r||e%2!=1||await x(1500),console.log(`${++e}, clicked: ${t}.`)}),{frequency:1e3,queue:!1});_(document.body,"click",(async e=>{r=!0,console.log(t.active,t.busy),e.shiftKey&&t.toggle(!t.active),console.log(await t.trigger(!0)),(async()=>{r=!1})()}))};window[".tail.js.init"]=e=>{e(ue)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
