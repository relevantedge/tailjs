!function(){"use strict";var e,r=void 0,t=Number.MAX_SAFE_INTEGER,n=Symbol.iterator,a=Symbol(),i=(e,t=!0,n)=>{try{return e()}catch(e){if(!l(t)){var a=t?.(e);if(a instanceof Error)throw a;return a}if(t)throw e;return console.error(e),r}finally{n?.()}},o=e=>e===r,s=e=>e!==r,u=e=>null!=e,l=e=>"boolean"==typeof e,f=e=>"string"==typeof e,c=Array.isArray,d=(e,r=!1)=>null!=e&&"object"==typeof e&&(r||!e[n]),v=e=>"symbol"==typeof e,h=e=>"function"==typeof e,g=(e,r=!1)=>!(!e?.[n]||"object"!=typeof e&&!r),y=!1,p=(e,n,a)=>(n??a)!==r?(n??=0,a??=t,(t,i)=>n--?r:a--?e?e(t,i):t:a):e,b=(e,t,a,i)=>null==e?[]:e[n]?function*(e,t){if(e){var a,n=0;for(a of e)if(t&&(a=t(a,n++)),a!==r&&(yield a),y){y=!1;break}}}(e,a===r?t:p(t,a,i)):"object"==typeof e?function*(e,t){var a,n=0;for(a in e){var i=[a,e[a]];if((i=t?t(i,n++):i)!==r&&(yield i),y){y=!1;break}}}(e,p(t,a,i)):b(h(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(s(r)&&(yield r);t--&&s(r=e(r));)yield r}(e,a,i):function*(e=0,r=0){for(;e--;)yield r++}(e,a),t),w=(e,t,n=r,a)=>{if(n===r&&c(e)){for(var i=0,s=[],u=0,l=e.length;u<l&&!y;u++){var f=e[u];(f=t&&f!==r?t(f,i++):f)!==r&&s.push(f)}return y=!1,s}return e!==r?(e=>o(e)?r:c(e)?e:g(e)?[...e]:[e])(((e,t,n,a)=>null==t||h(t)?b(e,t,n,a):b(e,r,t,n))(e,t,n,a)):r},m=(e,t,a=r,i)=>{if(null!=e){var o,s;if(a===r){if(c(e))return((e,t)=>{for(var n,a=0,i=0,o=e.length;i<o;i++)if(e[i]!==r&&(n=t(e[i],a++)??n,y)){y=!1;break}return n})(e,t);if(e[n])return((e,t)=>{var n,i,a=0;for(i of e)if(i!==r&&(n=t(i,a++)??n,y)){y=!1;break}return n})(e,t);if("object"==typeof e)return((e,r)=>{var t,a,n=0;for(a in e)if(t=r([a,e[a]],n++)??t,y){y=!1;break}return t})(e,t)}for(s of b(e,t,a,i))o=s??o;return o}},A=m,E=(e,r,t,n,a)=>{var i=()=>h(t)?t():t;return m(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},I=(e,t=e=>null!=e,n=c(e),a,i)=>(e=>n&&!c(e)?[...e]:e)(b(e,(e,n)=>t(e,n)?e:r,a,i)),k=(e,r,t)=>(void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),S=(e,r,t)=>{var n;if(e)return n=e.get?e.get(r):e.has?e.has(r):e[r],o(n)&&s(t)&&s(n=h(t)?t():t)&&k(e,r,n),n},U=(e=k,(r,t,n=a,i)=>{if(r)return n!==a?e(r,t,n,i):(A(t,t=>c(t)?e(r,t[0],t[1]):A(t,([t,n])=>e(r,t,n))),r)}),T=(e,r)=>{var n;if(!o(e??r))return n=S(e,r),"function"==typeof e?.delete?e.delete(r):delete e[r],n},N=(e,...t)=>{var a=[],i=!1,o=(e,u,l,f)=>{var d,h;e&&(d=t[u],u===t.length-1?c(d)?(i=!0,d.forEach(r=>a.push(T(e,r)))):a.push(T(e,d)):(c(d)?(i=!0,d.forEach(r=>o(S(e,r),u+1,e,r))):o(S(e,d),u+1,e,d),!((d=e)?s(h=d.length??d.size)?h:d[n]?(h=0,m(d,()=>++h)):Object.keys(d).length:r)&&l&&x(l,f)))};return o(e,0),i?a:a[0]},x=(e,r,...t)=>{if(e)return t.length?(c(e)?t.sort((e,r)=>r-e):t).map(r=>x(e,r)):c(e)?r<e.length?e.splice(r,1)[0]:void 0:T(e,r)},_=()=>"undefined"!=typeof performance?Math.trunc(performance.timeOrigin+performance.now()):Date.now(),F=(e,t=0)=>{var e=h(e)?{frequency:t,callback:e}:e,{queue:a=!0,paused:i=!1,trigger:o=!1,once:s=!1,callback:u=()=>{}}=e,f=(t=e.frequency??0,0),c=(new M).resolve(),d=async e=>{if(!f||!a&&c.pending&&!0!==e)return!1;(g.busy=!0)!==e&&await c,c.reset();var n=t<0||s;return await(async(a=1)=>{for(;a--;)try{return await u(()=>n=!0)}catch(e){if(!l(!1)){var i=await(!1)(e,!a);if(i instanceof Error)throw i;return i}console.error(e)}finally{c.resolve()}return r})(),n&&v(!1),!(g.busy=!1)},v=e=>(clearInterval(f),g.active=!!(f=e?setInterval(d,t<0?-t:t):0),g),g={active:!1,busy:!1,restart:(e,r)=>(t=e??t,u=r??u,v(!0)),toggle:(e,r)=>e!==g.active?e?r?(v(!0),g.trigger(),g):v(!0):v(!1):g,trigger:async e=>await d(e)&&(v(g.active),!0)};return g.toggle(!i,o)};class M{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new j,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class j{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(this.pending)return this.pending=!1,this[r?"error":"value"]=!s(t)||t,e(t),this;if(n)return this;throw new TypeError("Promise already resolved/rejected.")})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var C=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},z=(...e)=>(e=I(e),[()=>E(e,(e,r)=>r[0]()||e,!1),()=>E(e,(e,r)=>r[1]()||e,!1)]),q=()=>{var e,r=new Set;return[(t,n)=>{var a=C(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},R=_().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),D=(e,r,t,n={capture:!0,passive:!0})=>c(r)?z(...w(r,r=>D(e,r,t,n))):C(t,t=>e.addEventListener(r,t,n),t=>e.addEventListener(r,t,n)),[J,V]=q(),B=!0,G=(D(window,"pagehide",()=>B&&V(B=!1)),D(window,"pageshow",()=>!B&&V(B=!0)),D(document,"visibilitychange",()=>"visible"===document.visibilityState&&!B&&V(B=!0)),V(B),!1),P=(()=>{var r=!1,t=0;return e=>(r&&(t+=_()-r),s(e)&&(r=e&&_()),t)})(),[$,X]=q(),L=F({callback:()=>G&&X(G=!1,P(!1)),frequency:2e4,once:!0,paused:!0}),H=()=>!G&&(X(G=!0,P(!0)),L.restart()),K=(D(window,"focus",H),D(window,"blur",()=>L.trigger()),D(document.body,"keydown",H),D(document.body,"pointermove",H),D(window,"scroll",H),H(),[]),Q=[],W=(e,r=0)=>e.charCodeAt(r),Y=([..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>K[Q[r]=e.charCodeAt(0)]=r),{32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]}),Z=(e=256)=>e*Math.random()|0,H={exports:{}},re=H,{deserialize:ae,serialize:ie}=((()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var s=0;s<e.length;s++)u(e[s]);else u(e);return i.subarray(0,o);function u(e,i){switch(typeof e){case"undefined":l();break;case"boolean":(e=>{c(e?195:194)})(e);break;case"number":(e=>{var r;isFinite(e)&&Math.floor(e)===e?!(e<0||127<e)||e<0&&-32<=e?c(e):0<e&&e<=255?d([204,e]):e<-128||127<e?0<e&&e<=65535?d([205,e>>>8,e]):e<-32768||32767<e?0<e&&e<=4294967295?d([206,e>>>24,e>>>16,e>>>8,e]):e<-2147483648||2147483647<e?0<e&&e<=0x10000000000000000?d([211,(r=e/a)>>>24,r>>>16,r>>>8,r,(r=e%a)>>>24,r>>>16,r>>>8,r]):e<-0x8000000000000000||0x8000000000000000<e?d(e<0?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(c(211),v(e)):d([210,e>>>24,e>>>16,e>>>8,e]):d([209,e>>>8,e]):d([208,e]):(n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),c(203),d(new Uint8Array(t)))})(e);break;case"string":(e=>{var e=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(127<e.charCodeAt(n)){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128)i[a++]=s;else{if(s<2048)i[a++]=s>>6|192;else{if(55295<s&&s<56320){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var u=e.charCodeAt(o);if(u<56320||57343<u)throw new Error("UTF-8 encode: second surrogate character 0x"+u.toString(16)+" at index "+o+" out of range");i[a++]=(s=65536+((1023&s)<<10)+(1023&u))>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}}return r?i:i.subarray(0,a)})(e),t=e.length;31<t?d(255<t?65535<t?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):c(160+t),d(e)})(e);break;case"object":null===e?l():(e instanceof Date?e=>{var t,r=e.getTime()/1e3;0===e.getMilliseconds()&&0<=r&&r<4294967296?d([214,255,r>>>24,r>>>16,r>>>8,r]):0<=r&&r<17179869184?d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]):(d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r))}:Array.isArray(e)?f:e instanceof Uint8Array||e instanceof Uint8ClampedArray?e=>{var r=e.length;d(15<r?65535<r?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)}:e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?f:e=>{var t,r=0;for(t in e)void 0!==e[t]&&r++;for(t in 15<r?d(65535<r?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):c(128+r),e){var n=e[t];void 0!==n&&(u(t),u(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?u(r.invalidTypeReplacement(e),!0):u(r.invalidTypeReplacement,!0)}}function l(){c(192)}function f(e){var r=e.length;15<r?d(65535<r?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):c(144+r);for(var t=0;t<r;t++)u(e[t])}function c(e){if(i.length<o+1){for(var r=2*i.length;r<o+1;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,e=e<0?(e++,r=~(Math.abs(e)/a),~(Math.abs(e)%a)):(r=e/a,e%a);d([r>>>24,r>>>16,r>>>8,r,e>>>24,e>>>16,e>>>8,e])}}function r(e,r){var t,n=4294967296,a=0;if("object"!=typeof(e=e instanceof ArrayBuffer?new Uint8Array(e):e)||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(0<=r&&r<=127)return r;if(128<=r&&r<=143)return f(r-128);if(144<=r&&r<=159)return c(r-144);if(160<=r&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return u(4);if(203===r)return u(8);if(204===r)return s(1);if(205===r)return s(2);if(206===r)return s(4);if(207===r)return s(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return f(-1,2);if(223===r)return f(-1,4);if(224<=r&&r<=255)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var i,t=0,n=!0;0<r--;)n?(t+=127&(i=e[a++]),128&i&&(t-=128),n=!1):t=(t*=256)+e[a++];return t}function s(r){for(var t=0;0<r--;)t=256*t+e[a++];return t}function u(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=s(t));t=e.subarray(a,a+r);return a+=r,t}function f(e,r){e<0&&(e=s(r));for(var t={};0<e--;)t[i()]=i();return t}function c(e,r){e<0&&(e=s(r));for(var t=[];0<e--;)t.push(i());return t}function d(r,t){r<0&&(r=s(t));t=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;n<t;){var i=e[n++];if(127<i)if(191<i&&i<224){if(t<=n)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(223<i&&i<240){if(t<=n+1)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(i<=239||248<=i)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(t<=n+2)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(65535<i){if(1114111<i)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a=(a+=String.fromCharCode(i>>10|55296))+String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,t,r)}function v(e,r){e<0&&(e=s(r));r=s(1),e=l(e);return 255===r?(e=>{var t,r;if(4===e.length)return r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],new Date(1e3*r);if(8===e.length)return t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6);if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(e):{type:r,data:e}}}var t={serialize:e,deserialize:r,encode:e,decode:r};re?re.exports=t:window[window.msgpackJsName||"msgpack"]=t})(),function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(H.exports)),oe="$ref",se=new ArrayBuffer(8),ue=new DataView(se),le=e=>{var r,t,n,a=(e,r,t=e[r],n=u(t))=>(t===n&&!v(r)||(e[r]=n,i(()=>e[r]=t)),t),i=e=>(r??=[]).push(e),u=e=>null==e||h(e)||v(e)?null:Number.isFinite(e)&&!Number.isSafeInteger(e)?(ue.setFloat64(0,e,!0),{"":[...new Uint32Array(se)]}):d(e,!0)?e.toJSON&&e!==(e=e.toJSON())?u(e):s(n=(t??=new Map).get(e))?(e[oe]||(e[oe]=n,i(()=>delete e[oe])),{[oe]:n}):(d(e)?(t.set(e,t.size+1),Object.keys(e).forEach(r=>(o(a(e,r))||v(r))&&delete e[r])):g(e)&&(!c(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?a(e,t):(e[t]=null,i(()=>delete e[t]))),e):e,e=ie(u(e));return r?.forEach(e=>e()),e},H=(e,r=!1)=>{var[t,n,a]=(e=>{for(var r,t,n,a,i,s,o=0n,f=0n,c=[],d=0,v=0,h=0,g=0,y=[],h=0;h<e.length;g+=y[h]=e.charCodeAt(h++));var p=e?()=>{c=[...y],v=255&(d=g),h=-1}:()=>{},b=e=>(v=255&(d+=-c[h=(h+1)%c.length]+(c[h]=e)),e);return[e?e=>{for(p(),r=e.length,a=16-(r+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=b(Z()));for(i[n++]=b(v^16*Z(16)+a),t=0;t<r;i[n++]=b(v^e[t++]));for(;a--;)i[n++]=Z();return i}:e=>e,e?e=>{for(p(),t=0;t<3;b(e[t++]));if((r=e.length-4-((v^b(e[t++]))%16||16))<=0)return new Uint8Array(0);for(i=new Uint8Array(r),n=0;n<r;i[n++]=v^b(e[t++]));return i}:e=>e,(e,r=64)=>{if(!u(e))return null;for(s=l(r)?64:r,p(),[o,f]=Y[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(v^b(e[t++])))*f));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]})(e??""),o=(e,t)=>"number"==typeof e&&!0===t?e:(e=f(e)?new Uint8Array(w(e.length,r=>255&e.charCodeAt(r))):r?JSON.stringify(e):le(e),a(e,t));return r?[e=>JSON.stringify(e),e=>null==e?void 0:i(()=>JSON.parse(e,void 0)),(e,r)=>o(e,r)]:[e=>(e=>{for(var r,t=0,n=e.length,a=[];t<n;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(Q[(16515072&r)>>18],Q[(258048&r)>>12],Q[(4032&r)>>6],Q[63&r]);return a.length+=n-t,String.fromCharCode(...a)})(t(le(e))),e=>{return u(e)?(r=n((e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);t<a;)i[n++]=K[W(e,t++)]<<2|(r=K[W(e,t++)])>>4,t<a&&(i[n++]=(15&r)<<4|(r=K[W(e,t++)])>>2,t<a)&&(i[n++]=(3&r)<<6|K[W(e,t++)]);return i})(e)),o=e=>d(e,!0)?c(e[""])&&2===(e=e[""]).length?new DataView(new Uint32Array(e).buffer).getFloat64(0,!0):e[oe]&&(a=(t??=[])[e[oe]])?a:(e[oe]&&delete(t[e[oe]]=e)[oe],Object.entries(e).forEach(([r,t])=>t!==(t=o(t))&&(e[r]=t)),e):e,u(r)?i(()=>o(ae(r)),()=>{}):void 0):null;var r,t,a,o},(e,r)=>o(e,r)]},[ce,de]=(H(),H("foo",!0)),ve=e=>{var r,t;return f(e)?([,r,t]=e.match(/(.*?)(?:@:([0-9a-z]+))?$/),[r,s(t)?parseInt(t,36):void 0]):[e]},he=(e,r)=>{var[r,n]=ve(r);if(!n||0<=n-_())return r;N(localStorage,e)},ge=(e=>{var[r,t]=q(),n=r=>e.getItem(r)?.[0],a=(r,a,i)=>{var s=n(r);return o(a)?(e.removeItem(r),t(void 0,{key:r,oldValue:s,source:R,self:!0})):(e.setItem(r,a,R,i),t(a,{key:r,oldValue:s,source:R,self:!0})),0<i||e.removeItem(r),a},i=0,s=(r,t,n)=>{3<i++&&we(`Race condition ('${r}').`,!0);var o=a(r,t(e.getItem(r)?.[0]),n),u=e.getItem(r);return u?.[1]&&u?.[1]!==R?s(r,t,n):(i=0,o)};return{get:n,set:a,delete:e=>a(e,void 0),update:s,observe:e.observe?(t,n,a)=>{var[i,a]=z(e.observe(t,(e,r,t)=>n(e?.[0],{key:t,oldValue:r?.[0],source:e?.[1]},i)),a?r((e,r,a)=>r.key===t&&n(e,r,a)):void 0);return[i,a]}:void 0}})({getItem:e=>de(he(e,localStorage.getItem(e))),setItem:(e,r,t,n)=>localStorage.setItem(e,ce([r,t])+(0<n?"@:"+(_()+n).toString(36):"")),removeItem:e=>localStorage.removeItem(e),observe(e,r){var[t,n]=D(window,"storage",({key:t,newValue:n,oldValue:a})=>e==t&&r(de(ve(n)[0]),de(ve(a)[0]),e));return z([t,n],J(e=>(e?n:t)()))}}),ye=F({frequency:2e3,callback:()=>A(localStorage,([e,r])=>!he(e,r)),trigger:!0});J(e=>ye.toggle(e));var pe,be=(e,r,t=!1,n=ge)=>{var a=((e,t=ge)=>({get(){return t.get(e)},set(n,a){return t.set(e,n,a??0)},delete(){return t.delete(e)},update(n,a){return t.update(e,n,a??0)},observe:t.observe?(r,n)=>t.observe(e,r,n):void 0}))(e,n);return{post:(e,r)=>a.set([R,e,r]),unsubscribe:a.observe(e=>s(e)&&(!e[2]||e[2]===R)&&r(e[0],e[1],s(e[2])),t)[0]}},we=(e,r,t=!1)=>{if("boolean"==typeof r&&(t=r,r=null),me(r?e:null,r??e),t)throw new Error(e)},me=(e,r)=>{var t=e;return r=r&&JSON.stringify(r=d(r)?{message:r.message??r,stack:r.stack}:r),e=JSON.stringify(e),(pe??=be("chat",(e,r)=>console[r[1]?"error":"log"](e===R?"This tab":`Other tab (${e})`,...w(I(r),e=>JSON.parse(e))),!0)).post([e,r]),t},Ae={id:R,hearbeat:_()},Ee={knownTabs:{[R]:Ae},variables:{}},Ie=F(()=>Ue("ready",{state:Ee}),-25),ke=be("state",(e,{type:r,data:t})=>{"query"===r?Ie.active||ke.post({type:"set",data:Ee},e):"set"===r&&Ie.active?(U(Ee,t),Ie.trigger()):"patch"===r?(U(Ee,t),Ue("update",{state:Ee,variables:t})):"tab"===r&&(U(Ee.knownTabs,e,t),Ue("update",{state:Ee,tab:t}))}),[Se,Ue]=q(),Te=F(()=>{var e=_()-1e4;A(Ee.knownTabs,([r,t])=>t[0]<e&&N(Ee.knownTabs,r)),Ae.hearbeat=_(),ke.post({type:"tab",data:Ae})},5e3),Ne=(J(e=>{ke.post({type:"tab",data:e?Ae:void 0}),e?(Ie.restart(),ke.post({type:"query"})):Ie.toggle(!1),Te.toggle(e)},!0),F(()=>{},5e3)),xe=(D(document,"visibilitychange",()=>"hidden"===document.visibilityState&&Ne.trigger()),async()=>{$(e=>{},!0),Se((e,r)=>{me(r.tab)}),D(document.body,"click",()=>{})});window[".tail.js.init"]=e=>{e(xe)}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
