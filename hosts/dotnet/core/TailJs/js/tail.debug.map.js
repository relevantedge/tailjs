(()=>{"use strict";var e,t,r,n,a,i,o,l,s,u,c,d,f,v,p,h,g,m,y,b,w,k,E,S,A,T,I,x,N,O,j,$,C=(e,t=e=>TypeError(e))=>{throw en(e=te(e))?t(e):e},M=(e,t,r=-1)=>{if(e===t||(e??t)==null)return!0;if(es(e)&&es(t)&&e.length===t.length){var n=0;for(var a in e){if(e[a]!==t[a]&&!M(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},U=(e,t,...r)=>e===t||r.length>0&&r.some(t=>U(e,t)),_=(e,t)=>null!=e?e:C(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),F=(e,t=!0,r)=>{try{return e()}catch(e){return ep(t)?eo(e=t(e))?C(e):e:Y(t)?console.error(t?C(e):e):t}finally{r?.()}},P=e=>{var t=void 0;return()=>t??=te(e)},R=e=>{var t={initialized:!0,then:q(()=>(t.initialized=!0,te(e)))};return t},q=e=>{var t=P(e);return(e,r)=>D(t,[e,r])},D=async(e,t=!0,r)=>{try{var n=await te(e);return ei(t)?t[0]?.(n):n}catch(e){if(Y(t)){if(t)throw e;console.error(e)}else{if(ei(t)){if(!t[1])throw e;return t[1](e)}var a=await t?.(e);if(a instanceof Error)throw a;return a}}finally{await r?.()}},z=e=>e,B=void 0,J=Number.MAX_SAFE_INTEGER,V=!1,W=!0,G=()=>{},L=e=>null!=e,H=Symbol.iterator,K=(e,t)=>(r,n=!0)=>e(r)?r:t&&n&&null!=r&&null!=(r=t(r))?r:B,X=(e,t)=>ep(t)?e!==B?t(e):B:e?.[t]!==B?e:B,Y=e=>"boolean"==typeof e,Z=K(Y,e=>0!=e&&(1==e||"false"!==e&&("true"===e||B))),Q=e=>!!e,ee=e=>e===W,et=e=>e!==V,er=e=>"number"==typeof e,en=e=>"string"==typeof e,ea=K(en,e=>e?.toString()),ei=Array.isArray,eo=e=>e instanceof Error,el=(e,t=!1)=>null==e?B:!t&&ei(e)?e:eh(e)?[...e]:[e],es=e=>null!==e&&"object"==typeof e,eu=Object.prototype,ec=Object.getPrototypeOf,ed=e=>null!=e&&ec(e)===eu,ef=(e,t)=>"function"==typeof e?.[t],ev=e=>"symbol"==typeof e,ep=e=>"function"==typeof e,eh=(e,t=!1)=>!!(e?.[H]&&("object"==typeof e||t)),eg=e=>e instanceof Map,em=e=>e instanceof Set,ey=(e,t)=>null==e?B:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,eb=!1,ew=e=>(eb=!0,e),ek=e=>null==e?B:ep(e)?e:t=>t[e],eE=(e,t,r)=>(t??r)!==B?(e=ek(e),t??=0,r??=J,(n,a)=>t--?B:r--?e?e(n,a):n:r):e,eS=e=>e?.filter(L),eA=(e,t,r,n)=>null==e?[]:!t&&ei(e)?eS(e):e[H]?function*(e,t){if(null!=e){if(t){t=ek(t);var r=0;for(var n of e)if(null!=(n=t(n,r++))&&(yield n),eb){eb=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,r===B?t:eE(t,r,n)):es(e)?function*(e,t){t=ek(t);var r=0;for(var n in e){var a=[n,e[n]];if(t&&(a=t(a,r++)),null!=a&&(yield a),eb){eb=!1;break}}}(e,eE(t,r,n)):eA(ep(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eT=(e,t)=>t&&!ei(e)?[...e]:e,eI=(e,t,r,n)=>eA(e,t,r,n),ex=(e,t,r=1,n=!1,a,i)=>(function* e(t,r,n,a){if(null!=t){if(t[H]||n&&es(t))for(var i of a?eA(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}})(eA(e,t,a,i),r+1,n,!1),eN=(e,t,r,n)=>{if(t=ek(t),ei(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!eb;r++){var o=e[r];(t?o=t(o,a++):o)!=null&&i.push(o)}return eb=!1,i}return null!=e?el(eI(e,t,r,n)):B},eO=(e,t,r,n)=>null!=e?new Set([...eI(e,t,r,n)]):B,ej=(e,t,r=1,n=!1,a,i)=>el(ex(e,t,r,n,a,i)),e$=(e,t,r)=>null==e?B:ep(t)?tm(eN(en(e)?[e]:e,t),r??""):en(e)?e:tm(eN(e,e=>!1===e?B:e),t??""),eC=(...e)=>{var t;return eR(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...el(e))),t},eM=(e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,eb)){eb=!1;break}return a},eU=(e,t)=>{var r,n=0;for(var a of e)if(null!=a&&(r=t(a,n++)??r,eb)){eb=!1;break}return r},e_=(e,t)=>{var r,n=0;for(var a in e)if(r=t([a,e[a]],n++)??r,eb){eb=!1;break}return r},eF=(e,t,...r)=>null==e?B:eh(e)?eN(e,e=>t(e,...r)):t(e,...r),eP=(e,t,r,n)=>{var a;if(null!=e){if(ei(e))return eM(e,t,r,n);if(r===B){if(e[H])return eU(e,t);if("object"==typeof e)return e_(e,t)}for(var i of eA(e,t,r,n))null!=i&&(a=i);return a}},eR=eP,eq=async(e,t,r,n)=>{var a;if(null==e)return B;for(var i of eI(e,t,r,n))if(null!=(i=await i)&&(a=i),eb){eb=!1;break}return a},eD=Object.fromEntries,ez=(e,t,r)=>{if(null==e)return B;if(Y(t)||r){var n={};return eR(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eR(e,t?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eD(eN(e,t?(e,r)=>X(t(e,r),1):e=>X(e,1)))},eB=(e,t,r,n,a)=>{var i=()=>ep(r)?r():r;return eP(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()},eJ=(e,t=e=>null!=e,r=ei(e),n,a)=>eT(eA(e,(e,r)=>t(e,r)?e:B,n,a),r),eV=(e,t,r,n)=>{var a;if(null==e)return B;if(t)e=eJ(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[H])return Object.keys(e).length}return a=0,eP(e,()=>++a)},eW=(e,...t)=>null==e?B:er(e)?Math.max(e,...t):eB(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||er(a)&&a>e?a:e,B,t[2],t[3]),eG=(e,t,r)=>eN(e,ed(e)?e=>e[1]:e=>e,t,r),eL=e=>!ei(e)&&eh(e)?eN(e,eg(e)?e=>e:em(e)?e=>[e,!0]:(e,t)=>[t,e]):es(e)?Object.entries(e):B,eH=(e,t,r,n)=>null==e?B:(t=ek(t),eP(e,(e,r)=>!t||(e=t(e,r))?ew(e):B,r,n)),eK=(e,t,r,n)=>null==e?B:ei(e)?e[e.length-1]:eP(e,(e,r)=>!t||t(e,r)?e:B,r,n),eX=(e,t,r,n)=>null==e?B:ed(e)&&!t?Object.keys(e).length>0:e.some?.(t??Q)??eP(e,t?(e,r)=>!!t(e,r)&&ew(!0):()=>ew(!0),r,n)??!1,eY=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),eZ=(e,t,r)=>(e.constructor===Object?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eQ=(e,t,r)=>{if(e){if(e.constructor===Object&&null==r)return e[t];var n=e.get?e.get(t):e.has?e.has(t):e[t];return void 0===n&&null!=r&&null!=(n=ep(r)?r():r)&&eZ(e,t,n),n}},e0=(e,...t)=>(eR(t,t=>eR(t,([t,r])=>{null!=r&&(ed(e[t])&&ed(r)?e0(e[t],r):e[t]=r)})),e),e1=e=>(t,r,n,a)=>{if(t)return void 0!=n?e(t,r,n,a):(eR(r,r=>ei(r)?e(t,r[0],r[1]):eR(r,([r,n])=>e(t,r,n))),t)},e2=e1(eZ),e4=e1((e,t,r)=>eZ(e,t,ep(r)?r(eQ(e,t)):r)),e6=(e,t)=>e instanceof Set?!e.has(t)&&(e.add(t),!0):eQ(e,t)!==e2(e,t,!0),e5=(e,t)=>{if((e??t)!=null){var r=eQ(e,t);return ef(e,"delete")?e.delete(t):delete e[t],r}},e3=(e,...t)=>{var r=[],n=!1,a=(e,i,o,l)=>{if(e){var s=t[i];i===t.length-1?ei(s)?(n=!0,s.forEach(t=>r.push(e5(e,t)))):r.push(e5(e,s)):(ei(s)?(n=!0,s.forEach(t=>a(eQ(e,t),i+1,e,t))):a(eQ(e,s),i+1,e,s),!eV(e)&&o&&e8(o,l))}};return a(e,0),n?r:r[0]},e8=(e,t)=>{if(e)return ei(t)?(ei(e)&&e.length>1?t.sort((e,t)=>t-e):t).map(t=>e8(e,t)):ei(e)?t<e.length?e.splice(t,1)[0]:void 0:e5(e,t)},e9=(e,...t)=>{var r=(t,n)=>{var a;if(t){if(ei(t)){if(ed(t[0])){t.splice(1).forEach(e=>r(e,t[0]));return}a=t}else a=eN(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...ed(r)&&("get"in r||"value"in r)?r:ep(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e},e7=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>es(r)?ei(r)?r.map(t=>ei(t)?1===t.length?[t[0],e[t[0]]]:e7(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:e7(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},te=e=>ep(e)?e():e,tt=(e,t=-1)=>es(e)?ei(e)?t?e.map(e=>tt(e,t-1)):[...e]:em(e)?new Set(t?eN(e,e=>tt(e,t-1)):e):eg(e)?new Map(t?eN(e,e=>[e[0],tt(e[1],t-1)]):e):t?ez(e,([e,r])=>[e,tt(r,t-1)]):{...e}:e,tr=(e,...t)=>e?.push(...t),tn=(e,...t)=>e?.unshift(...t),ta="undefined"!=typeof performance?(e=W)=>e?Math.trunc(ta(V)):performance.timeOrigin+performance.now():Date.now,ti=(e=!0,t=()=>ta())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},to=(e=0)=>{var t,r,n=(a,i=e)=>{if(void 0===a)return!!r;clearTimeout(t),Y(a)?a&&(i<0?et:ee)(r?.())?n(r):r=void 0:(r=a,t=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},tl=(e,t=0)=>{var r=ep(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:l=()=>{}}=r;t=r.frequency??0;var s=0,u=tf(!0).resolve(),c=ti(!a),d=c(),f=async e=>!!s&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await D(()=>l(c(),-d+(d=c())),!1,()=>u.resolve())===!1||t<=0||o)&&v(!1),p.busy=!1,!0),v=(e,r=!e)=>(c(e,r),clearInterval(s),p.active=!!(s=e?setInterval(f,t<0?-t:t):0),p),p={active:!1,busy:!1,restart:(e,r)=>(t=e??t,l=r??l,v(!0,!0)),toggle:(e,t)=>e!==p.active?e?t?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await f(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class ts{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new tu,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class tu{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[t?"error":"value"]=r===B||r,e(r),this})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var tc=(e,t=0)=>t>0?setTimeout(e,t):window.queueMicrotask(e),td=(e,t)=>null==e||isFinite(e)?!e||e<=0?te(t):new Promise(r=>setTimeout(async()=>r(await te(t)),e)):C(`Invalid delay ${e}.`),tf=e=>e?new ts:new tu,tv=(...e)=>Promise.race(e.map(e=>ep(e)?e():e)),tp=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},th=(...e)=>(e=eJ(e),[()=>eB(e,(e,t)=>t[0]()||e,!1),()=>eB(e,(e,t)=>t[1]()||e,!1)]),tg=()=>{var e,t=new Set;return[(r,n)=>{var a=tp(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tm=(e,t=["and",", "])=>e?1===e.length?e[0]:ei(t)?[e.slice(-1).join(t[1]??", ")," ",t[0]," ",e[e.length-1]].join(""):e.join(t??", "):void 0,ty=(e,t,r)=>null==e?void 0:(ei(t)?(t=t[0])+" ":"")+(1===t?e:r??e+"s"),tb=(e,t,r)=>r?(tr(r,"\x1b[",t,"m"),ei(e)?tr(r,...e):tr(r,e),tr(r,"\x1b[m"),r):tb(e,t,[]).join(""),tw=(e,t="and")=>X(e,e=>0===(e=eh(e)?eN(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:`${e.slice(0,-1).join(", ")} ${t} ${eK(e)}`),tk=e=>X(e,e=>eh(e)?eN(e,e=>"'"+e+"'"):"'"+e+"'"),tE=e=>(e=Math.log2(e))===(0|e),tS=(e,t,r,n)=>{var a,i,o,l=Object.fromEntries(Object.entries(e).filter(([e,t])=>en(e)&&er(t)).map(([e,t])=>[e.toLowerCase(),t])),s=Object.entries(l),u=Object.values(l),c=l.any??u.reduce((e,t)=>e|t,0),d=t?{...l,any:c,none:0}:l,f=Object.fromEntries(Object.entries(d).map(([e,t])=>[t,e])),v=(e,r)=>er(e)?!t&&r?null!=f[e]?e:B:e:en(e)?d[e]??d[e.toLowerCase()]:B,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,B):(e??0)|r,(p=!1,B)):v(e),(e,t)=>null==(e=h(e,!1))?B:t&&(i=f[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=s.filter(([,t])=>t&&e&t&&tE(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?f[e]:B],m=(e,t)=>null==e?B:null==(e=h(o=e,t))?C(TypeError(`${JSON.stringify(o)} is not a valid ${r} value.`)):e,y=s.filter(([,e])=>!n||(n&e)===e&&tE(e));return e9(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:s,values:u,lookup:g,length:s.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} ${tw(tk(e),t)}`},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}])},tA=(...e)=>{var t=eL(ez(e,!0)),r=e=>(es(e)&&(ei(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=B;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tT=(e,t=["|",";",","],r=!0)=>{if(!e)return B;var n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&t?.length&&eH(t,(e,t,r=n[1].split(e))=>r.length>1?r:B)||(n[1]?[n[1]]:[]),n},tI=(e,t=!0,r)=>null==e?B:tj(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,l,s,u,c,d,f)=>{var v={source:e,scheme:r,urn:r?!n:!n&&B,authority:a,user:i,password:o,host:l??s,port:null!=u?parseInt(u):B,path:c,query:!1===t?d:tx(d,t),fragment:f};return v.path=v.path||(v.authority?v.urn?"":"/":B),v}),tx=(e,t,r=!0)=>null==e?B:ez(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=tT(e,!1===t?[]:!0===t?B:t,r)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==t?[a,o.length>1?o:i]:[a,i]:B,(e,r)=>e?!1!==t?eC(e,r):(e?e+",":"")+r:r),tN=(e,t)=>t&&null!=e?t.test(e):B,tO=(e,t,r)=>tj(e,t,r,!0),tj=(r,n,a,i=!1)=>(r??n)==null?B:a?(e=B,i?(t=[],tj(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),t$=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tC=/\z./g,tM=(e,t)=>(t=e$(eO(eJ(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tC,tU={},t_=e=>e instanceof RegExp,tF=(e,t=[","," "])=>t_(e)?e:ei(e)?tM(eN(e,e=>tF(e,t)?.source)):Y(e)?e?/./g:tC:en(e)?tU[e]??=tj(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tM(eN(tP(n,RegExp(`?<!(?<!\\)\\)[${e$(t,t$,",")}]/`)),e=>e&&`^${e$(tP(e,/(?<!(?<!\\)\\)\*/),e=>t$(tR(e,/\\(.)/g,"$1")),".*")}$`))):B,tP=(e,t)=>e?.split(t)??e,tR=(e,t,r)=>e?.replace(t,r)??e;(T=r||(r={}))[T.Anonymous=0]="Anonymous",T[T.Indirect=1]="Indirect",T[T.Direct=2]="Direct",T[T.Sensitive=3]="Sensitive";var tq=tS(r,!1,"data classification");(I=n||(n={}))[I.None=0]="None",I[I.Necessary=1]="Necessary",I[I.Functionality=2]="Functionality",I[I.Performance=4]="Performance",I[I.Targeting=8]="Targeting",I[I.Security=16]="Security",I[I.Infrastructure=32]="Infrastructure",I[I.Anonymous=49]="Anonymous",I[I.Any=63]="Any",I[I.Server=64]="Server";var tD=tS(n,!0,"data purpose",127),tz=tS(n,!1,"data purpose",0),tB=(e,t)=>((a=e?.metadata)&&(t?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e);(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var tJ=tS(i,!1,"variable scope");r.Anonymous,n.Necessary;var tV=e=>`'${e.key}' in ${tJ.format(e.scope)} scope`,tW={scope:tJ,purpose:tz,purposes:tD,classification:tq};tA(tW),(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",tS(o,!1,"variable set status"),(O=l||(l={}))[O.Add=0]="Add",O[O.Min=1]="Min",O[O.Max=2]="Max",O[O.IfMatch=3]="IfMatch",O[O.IfNoneMatch=4]="IfNoneMatch",tS(l,!1,"variable patch type");var tG=e=>!!e?.patch,tL=e=>!!e?.variables,tH=(e,t,r)=>{var n,a=e=>e,i=(r,i=tZ)=>R(async()=>(n=a(i(await e(),t)))&&r(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>eJ(e,e=>e.status<300)),variables:i(e=>eN(e,tX)),values:i(e=>eN(e,e=>tX(e)?.value)),push:()=>(a=e=>(r?.(eN(tK(e))),e),o),value:i(e=>tX(e[0])?.value),variable:i(e=>tX(e[0])),result:i(e=>e[0])};return o},tK=e=>e?.map(e=>e?.status<400?e:B),tX=e=>e?.status<400?e?.current??e:B,tY=e=>e?.status<400||e?.status===404,tZ=(e,t,r)=>{var n,a,i=[],l=eN(el(e),(e,l)=>e&&(e.status<400||!r&&404===e.status?e:(a=`${tV(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=t?.[l])||!1!==n(e,a))&&i.push(a),B)));return i.length?C(i.join("\n")):ei(e)?l:l?.[0]},tQ=e=>e&&"string"==typeof e.type,t0=((...e)=>t=>t?.type&&e.some(e=>e===t?.type))("view"),t1=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],t2=(e,t,r)=>{if(!e)return[];if(Array.isArray(e)&&(e=e$(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,t,r,n)=>[t,r&&`="${r.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=t1(t);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,t,o,l,s)=>{var u=o||l||s,c=t1(t);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),r?.add(t4(n))),""}),a},t4=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,t6=2e3,t5="_t:data",t3=()=>()=>C("Not initialized."),t8=window,t9=document,t7=t9.body,re=(e,t)=>!!e?.matches(t),rt=J,rr=(e,t,r=(e,t)=>t>=rt)=>{for(var n,a=0,i=V;e?.nodeType===1&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==W&&null!=n),W),a-1)!==V&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},rn=(e,t)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Z(e);case"n":return parseFloat(e);case"j":return F(()=>JSON.parse(e),G);case"h":return F(()=>r4(e),G);case"e":return F(()=>r5?.(e),G);default:return ei(t)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:rn(e,t[0])):void 0}},ra=(e,t,r)=>rn(e?.getAttribute(t),r),ri=(e,t,r)=>rr(e,(e,n)=>n(ra(e,t,r))),ro=(e,t)=>ra(e,t)?.trim()?.toLowerCase(),rl=e=>e?.getAttributeNames(),rs=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,ru=e=>null!=e?e.tagName:null,rc=()=>({x:(s=rd(V)).x/(t7.offsetWidth-window.innerWidth)||0,y:s.y/(t7.offsetHeight-window.innerHeight)||0}),rd=e=>({x:ey(scrollX,e),y:ey(scrollY,e)}),rf=(e,t)=>tR(e,/#.*$/,"")===tR(t,/#.*$/,""),rv=(e,t,r=W)=>(u=rp(e,t))&&z({xpx:u.x,ypx:u.y,x:ey(u.x/t7.offsetWidth,4),y:ey(u.y/t7.offsetHeight,4),pageFolds:r?u.y/window.innerHeight:void 0}),rp=(e,t)=>t?.pointerType&&t?.pageY!=null?{x:t.pageX,y:t.pageY}:e?({x:c,y:d}=rh(e),{x:c,y:d}):void 0,rh=e=>e?(f=e.getBoundingClientRect(),s=rd(V),{x:ey(f.left+s.x),y:ey(f.top+s.y),width:ey(f.width),height:ey(f.height)}):void 0,rg=(e,t,r,n={capture:!0,passive:!0})=>ei(t)?th(...eN(t,t=>rg(e,t,r,n))):tp(r,r=>e.addEventListener(t,r,n),r=>e.addEventListener(t,r,n)),rm=e=>{var{host:t,scheme:r,port:n}=tI(e,!1);return{host:t+(n?":"+n:""),scheme:r}},ry=()=>({...s=rd(W),width:window.innerWidth,height:window.innerHeight,totalWidth:t7.offsetWidth,totalHeight:t7.offsetHeight}),rb=new WeakMap,rw=e=>rb.get(e),rk=(e,t=V)=>(t?"--track-":"track-")+e,rE=(e,t,r,n,a,i)=>t?.[1]&&eR(rl(e),o=>t[0][o]??=(i=V,en(n=eR(t[1],([t,r,n],a)=>tN(o,t)&&(i=void 0,!r||re(e,r))&&ew(n??o)))&&(!(a=e.getAttribute(o))||Z(a))&&t2(a,tR(n,/\-/g,":"),r),i)),rS=()=>{},rA=(e,t)=>{if(v===(v=r$.tags))return rS(e,t);var r=e=>e?t_(e)?[[e]]:eh(e)?ej(e,r):[ed(e)?[tF(e.match),e.selector,e.prefix]:[tF(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eG(v))]];(rS=(e,t)=>rE(e,n,t))(e,t)},rT=(e,t)=>e$(eC(rs(e,rk(t,W)),rs(e,rk("base-"+t,W)))," "),rI={},rx=(e,t,r=rT(e,"attributes"))=>{r&&rE(e,rI[r]??=[{},tO(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tF(r||n),,t])],t),t2(rT(e,"tags"),void 0,t)},rN=(e,t,r=V,n)=>(r?rr(e,(e,r)=>r(rN(e,t,V)),ep(r)?r:void 0):e$(eC(ra(e,rk(t)),rs(e,rk(t,W)))," "))??(n&&(p=rw(e))&&n(p))??null,rO=(e,t,r=V,n)=>""===(h=rN(e,t,r,n))||(null==h?h:Z(h)),rj=(e,t,r,n)=>e?(rx(e,n??=new Set),rr(e,e=>{rA(e,n),t2(eN(r?.(e)),void 0,n)},t),n.size?{tags:[...n]}:{}):{},r$={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rC=tP(""+t9.currentScript.src,"#"),rM=tP(""+(rC[1]||""),";"),rU=rC[0],r_=rM[1]||tI(rU,!1)?.host,rF=e=>!!(r_&&tI(e,!1)?.host?.endsWith(r_)===W),rP=(...e)=>tR(e$(e),/(^(?=\?))|(^\.(?=\/))/,rU.split("?")[0]),rR=rP("?","var");rP("?","mnt"),rP("?","usr");var rq=(e,t,r=W)=>{t&&(r?console.groupCollapsed:console.group)("tail.js: "+t),null!=e&&console.log(es(e)?tb(JSON.stringify(e,null,2),"94"):e),t&&console.groupEnd()},rD=[],rz=[],rB=(e,t=0)=>e.charCodeAt(t),rJ=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>rD[rz[t]=e.charCodeAt(0)]=t);var rV=e=>{for(var t,r=0,n=e.length,a=[];n>r;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(rz[(16515072&t)>>18],rz[(258048&t)>>12],rz[(4032&t)>>6],rz[63&t]);return a.length+=n-r,rJ(a)},rW=e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>r;)i[n++]=rD[rB(e,r++)]<<2|(t=rD[rB(e,r++)])>>4,a>r&&(i[n++]=(15&t)<<4|(t=rD[rB(e,r++)])>>2,a>r&&(i[n++]=(3&t)<<6|rD[rB(e,r++)]));return i},rG={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},rL=(e=256)=>e*Math.random()|0,rH=e=>{var t,r,n,a,i,o=0n,l=0,s=0n,u=[],c=0,d=0,f=0,v=0,p=[];for(f=0;f<e?.length;v+=p[f]=e.charCodeAt(f++));var h=e?()=>{u=[...p],d=255&(c=v),f=-1}:()=>{},g=e=>(d=255&(c+=-u[f=(f+1)%u.length]+(u[f]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(rL()));for(r=0,i[n++]=g(d^16*rL(16)+a);t>r;i[n++]=g(d^e[r++]));for(;a--;)i[n++]=rL();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((d^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);t>n;i[n++]=d^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(l=Y(t)?64:t,h(),[o,s]=rG[l],r=0;r<e.length;o=BigInt.asUintN(l,(o^BigInt(d^g(e[r++])))*s));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},rK={exports:{}};(e=>{(()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return a.subarray(0,i);function l(e,a){var i,o,f,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var t=e/4294967296,a=e%4294967296;c([211,t>>>24,t>>>16,t>>>8,t,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),d(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(r=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(r))})(e);break;case"string":(f=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(e.charCodeAt(n)>127){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var l=e.charCodeAt(o);if(l<128){i[a++]=l;continue}if(l<2048)i[a++]=l>>6|192;else{if(l>55295&&l<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var s=e.charCodeAt(o);if(s<56320||s>57343)throw Error("UTF-8 encode: second surrogate character 0x"+s.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&s),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+f):f<=255?c([217,f]):f<=65535?c([218,f>>>8,f]):c([219,f>>>24,f>>>16,f>>>8,f]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var t=e.getTime()/1e3;if(0===e.getMilliseconds()&&t>=0&&t<4294967296)c([214,255,t>>>24,t>>>16,t>>>8,t]);else if(t>=0&&t<17179869184){var r=1e6*e.getMilliseconds();c([215,255,r>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t])}else{var r=1e6*e.getMilliseconds();c([199,12,255,r>>>24,r>>>16,r>>>8,r]),d(t)}})(e):Array.isArray(e)?s(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s(e):(e=>{var t=0;for(var r in e)void 0!==e[r]&&t++;for(var r in t<=15?u(128+t):t<=65535?c([222,t>>>8,t]):c([223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(l(r),l(n))}})(e);break;default:if(!a&&t&&t.invalidTypeReplacement)"function"==typeof t.invalidTypeReplacement?l(t.invalidTypeReplacement(e),!0):l(t.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function s(e){var t=e.length;t<=15?u(144+t):t<=65535?c([220,t>>>8,t]):c([221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;t>r;r++)l(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function d(e){var t,r;e>=0?(t=e/4294967296,r=e%4294967296):(t=~(t=Math.abs(++e)/4294967296),r=~(r=Math.abs(e)%4294967296)),c([t>>>24,t>>>16,t>>>8,t,r>>>24,r>>>16,r>>>8,r])}}function r(e,t){var r,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(t>=0&&t<=127)return t;if(t>=128&&t<=143)return u(t-128);if(t>=144&&t<=159)return c(t-144);if(t>=160&&t<=191)return d(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return s(-1,1);if(197===t)return s(-1,2);if(198===t)return s(-1,4);if(199===t)return f(-1,1);if(200===t)return f(-1,2);if(201===t)return f(-1,4);if(202===t)return l(4);if(203===t)return l(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return f(1);if(213===t)return f(2);if(214===t)return f(4);if(215===t)return f(8);if(216===t)return f(16);if(217===t)return d(-1,1);if(218===t)return d(-1,2);if(219===t)return d(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(t>=224&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var r=0,a=!0;t-- >0;)if(a){var i=e[n++];r+=127&i,128&i&&(r-=128),a=!1}else r*=256,r+=e[n++];return r}function o(t){for(var r=0;t-- >0;)r*=256,r+=e[n++];return r}function l(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return(n+=t,4===t)?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function s(t,r){t<0&&(t=o(r));var a=e.subarray(n,n+t);return n+=t,a}function u(e,t){e<0&&(e=o(t));for(var r={};e-- >0;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];e-- >0;)r.push(a());return r}function d(t,r){t<0&&(t=o(r));var a=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;r>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=r)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=r)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=r)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,t)}function f(e,t){e<0&&(e=o(t));var r=o(1),a=s(e);return 255===r?(e=>{if(4===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*t)}if(8===e.length){var r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*t+r/1e6)}if(12===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var t=i(8);return new Date(1e3*t+r/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:r,data:a}}}var n={serialize:t,deserialize:r,encode:t,decode:r};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(rK);var{deserialize:rX,serialize:rY}=(j=rK.exports)&&j.__esModule&&Object.prototype.hasOwnProperty.call(j,"default")?j.default:j,rZ="$ref",rQ=e=>{var t,r,n,a=(e,t,r=e[t],n=o(r))=>((r!==n||ev(t))&&(e[t]=n,i(()=>e[t]=r)),r),i=e=>(t??=[]).push(e),o=e=>null==e||ep(e)||ev(e)?null:es(e)?e.toJSON&&e!==(e=e.toJSON())?o(e):null!=(n=(r??=new Map).get(e))?(e[rZ]||(e[rZ]=n,i(()=>delete e[rZ])),{[rZ]:n}):(ed(e)?(r.set(e,r.size+1),Object.keys(e).forEach(t=>(a(e,t)===B||ev(t))&&delete e[t])):eh(e)&&(!ei(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?a(e,r):(e[r]=null,i(()=>delete e[r]))),e):e,l=rY(o(e));return t?.forEach(e=>e()),l},r0=e=>{var t,r,n=e=>es(e)?e[rZ]&&(r=(t??=[])[e[rZ]])?r:(e[rZ]&&(t[e[rZ]]=e,delete e[rZ]),Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return null!=e?n(rX(e)):B},r1=(e,t=!1,r=!0)=>{var n=(e,t=!1,r=!0)=>{var n=(e,r)=>er(e)&&!0===r?e:l(e=en(e)?new Uint8Array(eN(e.length,t=>255&e.charCodeAt(t))):t?JSON.stringify(e):rQ(e),r),a=e=>null==e?B:F(()=>JSON.parse(e,B));if(t)return[e=>JSON.stringify(e),a,(e,t)=>n(e,t)];var[i,o,l]=rH(e);return[e=>rV(i(rQ(e))),e=>null!=e?r&&(e?.[0]==="{"||e?.[0]==="[")?a(e):r0(o(rW(e))):null,(e,t)=>n(e,t)]};return e?n(e,t,r):(g??=[n(null,!1),n(null,!0)])[+t]};r1(),r1(null,!0);var[r2,r4]=r1(),[r6,r5]=[t3,t3],[r3,r8]=tg(),r9=e=>{r5===t3&&([r6,r5]=r1(e),r8(r6=r1(null,!0)[0],r5))},r7=e=>t=>ne(e,t),ne=(...e)=>{var t=e.shift();console.error(en(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[nt,nr]=tg(),[nn,na]=tg(),ni=e=>nl!==(nl=e)&&nr(nl=!1,nc(!0,!0)),no=e=>ns!==(ns=!!e&&"visible"===document.visibilityState)&&na(ns,!e,nu(!0,!0));nt(no);var nl=!0,ns=!1,nu=ti(!1),nc=ti(!1);rg(window,["pagehide","freeze"],()=>ni(!1)),rg(window,["pageshow","resume"],()=>ni(!0)),rg(document,"visibilitychange",()=>(no(!0),ns&&ni(!0))),nr(nl,nc(!0,!0));var nd=!1,nf=ti(!1),[nv,np]=tg(),nh=tl({callback:()=>nd&&np(nd=!1,nf(!1)),frequency:2e4,once:!0,paused:!0}),ng=()=>!nd&&(np(nd=!0,nf(!0)),nh.restart());rg(window,"focus",ng),rg(window,"blur",()=>nh.trigger()),rg(document.body,["keydown","pointerdown","pointermove","scroll"],ng),ng(),($=m||(m={}))[$.View=-3]="View",$[$.Tab=-2]="Tab",$[$.Shared=-1]="Shared";var nm=tS(m,!1,"local variable scope"),ny=e=>nm.tryParse(e)??tJ(e),nb=e=>!!nm.tryParse(e?.scope),nw=tA({scope:nm},tW),nk=e=>null==e?void 0:e.source?nk(e.source):`${ny(e.scope)}\0${e.key}\0${e.targetId??""}`,nE=e=>{var t=e.split("\0");return{scope:+t[0],key:t[1],targetId:t[2]}},nS=0,nA=void 0,nT=()=>(nA??t3())+"_"+nI(),nI=()=>++nS,nx=e=>crypto.getRandomValues(e),nN=()=>tR("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nx(new Uint8Array(1))[0]&15>>e/4).toString(16)),nO=void 0,nj={id:nA,heartbeat:ta()},n$={knownTabs:{[nA]:nj},variables:new Map},[nC,nM]=tg(),nU=t3,n_=e=>nO.get(nk(e)),nF=(...e)=>nP(e.map(e=>(e.timestamp=ta(),e.expires=3e3,e))),nP=e=>{var t=eN(e,e=>e&&[nk(e),e]);if(t?.length){e2(nO,t);var r=eJ(t,e=>e[1].scope>m.Tab);r.length&&(e2(n$.variables,t),nU({type:"patch",payload:ez(r)})),nM("variables",ez(t),!0)}};r3((e,t)=>{nt(r=>{if(r){var n=t(sessionStorage.getItem(t5));sessionStorage.removeItem(t5),nA=n?.[0]??ta().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nO=new Map(eC(eJ(nO,([,e])=>e.scope===m.View),eN(n?.[1],e=>[nk(e),e])))}else console.log(JSON.stringify(n$,null,2)),sessionStorage.setItem(t5,e([nA,eJ(nO,([,e])=>e.scope!==m.View)]))},!0),nU=(t,r)=>{e&&(localStorage.setItem(t5,e([nA,t,r])),localStorage.removeItem(t5))},rg(window,"storage",e=>{if(e.key===t5){var n=t?.(e.newValue);if(n&&(!n[2]||n[2]===nA)){var[a,{type:i,payload:o}]=n;"query"===i?r.active||nU({type:"set",payload:n$},a):"set"===i&&r.active?(e2(n$,o),r.trigger()):"patch"===i?(e2(n$.variables,o),e2(nO,o),nM("variables",o,!1)):"tab"===i&&(e2(n$.knownTabs,a,o),o&&nM("tab",o,!1))}}});var r=tl(()=>nM("ready",n$,!0),-25),n=tl({callback(){var e=ta()-1e4;eR(n$?.knownTabs,([t,r])=>r[0]<e&&e3(n$.knownTabs,t)),nj.heartbeat=ta(),nU({type:"tab",payload:nj})},frequency:5e3,paused:!0}),a=e=>{nU({type:"tab",payload:e?nj:void 0}),e?(r.restart(),nU({type:"query"})):r.toggle(!1),n.toggle(e)};nt(e=>a(e),!0)},!0);var[nR,nq]=tg(),[nD,nz]=tg(),nB=((e,{timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?r5:r4)(localStorage.getItem(e)),i=()=>localStorage.setItem(e,(r?r6:r2)([nA,ta()+t])),o=to(t/2);return async(r,l,s=null!=l?1:n)=>{for(;s--;){var u=a();if((!u||u[1]<ta())&&(i(),a()?.[0]===nA))return o(i),await D(r,!0,()=>o(!1)&&localStorage.removeItem(e));var c=tf(),[d]=rg(window,"storage",t=>{t.key!==e||t.newValue||c.resolve()});await tv(td(l??t),c),d()}null==l&&C(e+" could not be acquired.")}})("_t:rq"),nJ=tl(()=>{if(b!==(b=r$.pushCookie)){if(!b)return;y=RegExp(t$(b)+"=([^;]*)")}var e=r5?.(tj(document.cookie,y)?.[1]);tL(e)&&nz(e)},1e3),nV=0,nW=(e=1e3)=>{var t=()=>{t=G,--nV||(nJ.restart(1e3),clearTimeout(0))};return nV++||nJ.restart(100),e>0&&setTimeout(t,e),t()},nG=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,l=r=>{var l=ep(t)?t?.(a,r):t;return!1!==l&&(null!=l&&!0!==l&&(a=l),nq(e,a,r,e=>(o=a===B,a=e)),!o&&(i=(n?r6:JSON.stringify)(a)))};if(!r)return await nB(()=>eq(1,async t=>{if(!l(t))return ew();var r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(r.status>=400)return 0===t?ew(C(`Invalid response: ${await r.text()}`)):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await td((1+t)*200));var o=await r.text(),s=o?.length?(n?r5:JSON.parse)?.(o):B;return console.log(JSON.stringify(s,null,2)),null!=s&&nz(s),ew(s)}));l(0)&&(nW(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||C("Beacon send failed."))},nL=["scope","key","targetId","version"],nH=[...nL,"created","modified","classification","purposes","tags","readonly","value"],nK=[...nL,"init","purpose","refresh"];[...nH];var nX=new Map,nY=(e,t)=>{var a=tl(async()=>{var e=eN(nX,([e,t])=>({...nE(e),result:[...t]}));e.length&&await c.get(...e)},3e3),i=(e,t)=>eF(t,t=>eQ(nX,e,()=>new Set).add(t)),l=e=>{if(tY(e)){var t,r=nk(e),n=tX(e);eR(e8(nX,r),e=>{t=!1,e?.(n,n_(n),(e=!0)=>t=e),t&&i(r,e)})}};nt((e,t)=>a.toggle(e,e&&t>=3e3),!0);var s=new Map,u=(e,t)=>e2(s,e,Y(t)?t?void 0:0:t),c={get:(...r)=>tH(async()=>{var n=[],a=eN(r,(e,t)=>[e,t]),s=[],c=(await nG(e,()=>!!(a=eN(a,([e,t])=>{if(e){var r=nk(e);i(r,e.result);var a=n_(r);if(e.init&&u(r,e.cache),!e.refresh&&a?.expires<ta())tr(n,[{...a,status:o.Success},t]);else if(!nb(e))return[e7(e,nK),t];else if(ed(e.init)){var l={...nw(e),status:o.Created,...e.init};null!=l.value&&(tr(s,d(l)),tr(n,[l,t]))}}})).length&&{variables:{get:eN(a,0)},deviceSessionId:t?.deviceSessionId})).variables?.get??[];return tr(n,...eN(c,(e,t)=>e&&[e,a[t][1]])),s.length&&nP(s),n.map(([e])=>(l(e),e))},eN(r,e=>e?.error)),set:(...a)=>tH(async()=>{var i=[],s=[],c=eN(a,(e,t)=>{if(e){var a=nk(e),l=n_(a);if(u(a,e.cache),nb(e)){if(null!=e.patch)return C("Local patching is not supported.");var c={value:e.value,classification:r.Anonymous,purposes:n.Necessary,scope:nm(e.scope),key:e.key};return s[t]={status:l?o.Success:o.Created,source:e,current:c},void tr(i,d(c))}return tG(e)||e?.version!==void 0||(e.version=l?.version,e.force??=!!e.version),[e,t]}}),f=c.length>0?[]:_((await nG(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result.");return i.length&&nP(i),eR(f,(e,t)=>{var[r,n]=c[t];e.source=r,l(s[n]=e)}),s},eN(a,e=>e?.error))},d=(e,t=ta())=>({...e7(e,nH),timestamp:t,expires:t+(eQ(s,nk(e))??3e3)});return nD(({variables:e})=>{if(e){var t=ta(),r=eC(eN(e.get,e=>tX(e)),eN(e.set,e=>tX(e)));r?.length&&nP(eF(r,d,t))}}),c},nZ=(e,t)=>{if(!ed(t))return[e,e];var r,n,a={},i=!1;return ed(e)&&eR(e,([e,o])=>a[e]!==t[e]&&(r=ed(o)?nZ(o,t[e])?.[0]:er(o)&&er(n=t[e])?o-n:o)!==t[e]&&(a[e]=r,i=!0)),i?[a,e]:void 0},nQ=(e,t,r=t6)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?e0(t,{type:e.type+"_patch",patchTargetId:e.clientId}):C("Source event not queued."),l=async(r,a=!1)=>{if((r=eN(el(r),e=>e0(t.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eR(r,e=>rq(e,e.type)),!a){r.length&&tr(n,...r);return}n.length&&tn(r,...n.splice(0)),r.length&&(rq(e$(r,e=>e.type,["and"]),"Posting "+ty("events",[r.length])),await nG(e,{events:r.map(e=>(e0(e,{metadata:{posted:!0}}),e0(tB(tt(e),!0),{timestamp:e.timestamp-ta()}))),deviceSessionId:t?.deviceSessionId}))};return r>0&&tl(()=>l([],!0),r),nn((e,t,r)=>{if(!e&&(n.length||t||r>1500)){var a=eN(i,([e,t])=>{var[r,n]=t();return n&&i.delete(e),r});(n.length||a.length)&&l(eC(n.splice(0),a),!0)}}),{post:l,postPatch:(e,t,r)=>l(o(e,t),r),registerEventPatchSource(e,t){var r=!1,n=()=>r=!0;return a.set(e,tt(e)),i.set(e,()=>{var i=a.get(e),[l,s]=t(i,n)??[];return!l||i&&M(s,i)?[void 0,r]:(a.set(e,tt(s)),[o(e,l),r])}),n}}},n0=Symbol(),n1=e=>{var t=new IntersectionObserver(e=>eR(e,({target:e,isIntersecting:t,boundingClientRect:r,intersectionRatio:n})=>e[n0]?.(t,r,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(r,n)=>{if(n&&(a=eJ(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==W))&&eV(a)){var a,i,o,l,s=V,u=0,c=to(r$.impressionThreshold),d=ao();r[n0]=(t,n,f)=>{d(t=f>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),s!==(s=t)&&(s?c(()=>{++u,o||tr(e,o=eJ(eN(a,e=>(e.track?.impressions||rO(r,"impressions",W,e=>e.track?.impressions))&&z({type:"impression",pos:rv(r),viewport:ry(),timeOffset:as(),impressions:u,...ab(r,W)})||null))),o?.length&&(l=eN(o,t=>e.events.registerEventPatchSource(t,e=>nZ({relatedEventId:t.clientId,duration:d(),impressions:u},e))))}):(eR(l,e=>e()),c(!1)))},t.observe(r)}}},n2=()=>{var e=t8?.screen;if(!e)return{};var{width:t,height:r,orientation:n}=e,a=t<r,i=n?.angle??t8.orientation??0;return(-90===i||90===i)&&([t,r]=[r,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:t8.devicePixelRatio,width:t,height:r,landscape:a}}},n4=e=>tr(e,z({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:eN(navigator.languages,(e,t,r=e.split("-"))=>z({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...n2()})),n6=(e,t="A"===ru(e)&&ra(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),n5=(e,t=ru(e),r=rO(e,"button"))=>r!==V&&(U(t,"A","BUTTON")||"INPUT"===t&&U(ro(e,"type"),"button","submit")||r===W),n3=()=>w?.clientId,n8={scope:"shared",key:"referrer"},n9=(e,t)=>{A.variables.set({...n8,value:[n3(),e]}),t&&A.variables.get({scope:n8.scope,key:n8.key,result(r,n,a){r?a():n?.value?.[1]===e&&t()}})},n7=ti(),ae=ti(),at=ti(),ar=1,an=()=>ae(),[aa,ai]=tg(),ao=e=>{var t=ti(e,n7),r=ti(e,ae),n=ti(e,at),a=ti(e,()=>ar);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),interactiveTime:n(e,i),activations:a(e,i)})},al=ao(),as=()=>al(),[au,ac]=tg(),ad=new WeakSet,af=document.getElementsByTagName("iframe"),av=e=>(null==e||(e===W||""===e)&&(e="add"),en(e)&&U(e,"add","remove","update","clear")?{action:e}:es(e)?e:void 0);function ap(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var ah=e=>rj(e,void 0,e=>eN(el(eQ(rb,e)?.tags))),ag=e=>e?.component||e?.content,am=e=>rj(e,t=>t!==e&&!!ag(eQ(rb,t)),e=>(E=eQ(rb,e),(E=eQ(rb,e))&&ej(eC(E.component,E.content,E),"tags"))),ay=(e,t)=>t?e:{...e,rect:void 0,content:(S=e.content)&&eN(S,e=>({...e,rect:void 0}))},ab=(e,t=V)=>{var r,n,a,i=[],o=[],l=0;return rr(e,e=>{var n=eQ(rb,e);if(n){if(ag(n)){var a=eJ(el(n.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==W||e.track?.promote));r=eX(a,e=>e.track?.region)&&rh(e)||void 0;var s=am(e);n.content&&tn(i,...eN(n.content,e=>({...e,rect:r,...s}))),a?.length&&(tn(o,...eN(a,e=>(l=eW(l,e.track?.secondary?1:2),ay({...e,content:i,rect:r,...s},!!r)))),i=[])}var u=n.area||rN(e,"area");u&&tn(o,...eN(u))}}),i.length&&tr(o,ay({id:"",rect:r,content:i})),eR(o,e=>{en(e)?tr(n??=[],e):(e.area??=e$(n,"/"),tn(a??=[],e))}),a||n?{components:a,area:e$(n,"/")}:void 0},aw=Symbol(),ak=[{id:"context",setup(e){tl(()=>eR(af,e=>e6(ad,e)&&ac(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&r===(r=""+location.href)||(t=n=a?.value),t&&w&&!w.definition&&(w.definition=t,w.metadata?.posted&&e.events.postPatch(w,{definition:t}),t=void 0),o())});var t,r,n,a=n_({scope:"tab",key:"index"})?.value??0,i=n_({scope:"tab",key:"index"})?.value;null==i&&(i=n_({scope:"shared",key:"index"})?.value??0,nF({scope:m.Shared,key:"index",value:i+1}));var o=null,l=(r=V)=>{if(!rf(""+o,o=location.href)||r){var{source:n,scheme:l,host:s}=tI(location.href+"",!0);w={type:"view",timestamp:ta(),clientId:nT(),tab:nA,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:s},tabIndex:i,viewport:ry(),duration:al(void 0,!0)},0===i&&(w.firstTab=W),0===i&&0===a&&(w.landingPage=W);var u=tx(location.href);if(eN(["source","medium","campaign","term","content"],(e,t)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&eN(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=tR(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=n_(n8)?.value;c&&rF(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...n8,value:void 0}))}var c=document.referrer||null;c&&!rF(c)&&(w.externalReferrer={href:c,domain:rm(c)}),w.definition=t,t=void 0,e.events.post(w),e.events.registerEventPatchSource(w,e=>nZ({duration:as()},e)),ai(w)}};return nv(e=>at(e)),nn(e=>{e?(ae(W),++ar):(ae(V),at(V))}),rg(window,"popstate",()=>(k="back-forward",l())),eN(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),k="navigate",l()}}),l(),{processCommand:t=>aA(t)&&(tr(e,t.username?{type:"login",username:t.username}:{type:"logout"}),W),decorate(e){w&&!t0(e)&&(e.view=w.clientId)}}}},{id:"components",setup(e){var t=n1(e),r=e=>null==e?void 0:{...e,component:el(e.component),content:el(e.content),tags:el(e.tags)},n=({boundary:e,...n})=>{e4(rb,e,e=>r("add"in n?{...e,component:eC(e?.component,n.component),content:eC(e?.content,n.content),area:n?.area??e?.area,tags:eC(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,eQ(rb,e))};return{decorate(e){eR(e.components,e=>e8(e,"track"))},processCommand:e=>ax(e)?(n(e),W):aM(e)?(eN(((e,t)=>{if(!t)return[];var r=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!eQ(n,a))for(var i=[];null!=ra(a,e);){e6(n,a);var o=tP(ra(a,e),"|");ra(a,e,null);for(var l=0;l<o.length;l++){var s=o[l];if(""!==s){var u="-"===s?-1:parseInt(ea(s)??"",36);if(u<0){i.length+=u;continue}if(0===l&&(i.length=0),isNaN(u)&&/^["\[{]/.test(s))for(var c="";l<o.length;l++)try{s=JSON.parse(c+=o[l]);break}catch(e){}u>=0&&t[u]&&(s=t[u]),tr(i,s)}}tr(r,...eN(i,e=>({add:W,...e,boundary:a})));var d=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=d}}),r})(e.scan.attribute,e.scan.components),n),W):V}}},{id:"navigation",setup(e){var t=t=>{rg(t,["click","contextmenu","auxclick"],t=>{var r,n,a,i,o,l=null,s=V;if(rr(t.target,e=>{var t;l??=n5(e)?e:null,s=s||"NAV"===ru(e),i??=rO(e,"clicks",W,e=>e.track?.clicks)??((t=el(rw(e)?.component))&&eX(t,e=>e.track?.clicks!==V)),o??=rO(e,"region",W,e=>e.track?.region)??((t=rw(e)?.component)&&eX(t,e=>e.track?.region))}),l){var u,c=ab(l),d=ah(l);i??=!s;var f={...(o??=W)?{pos:rv(l,t),viewport:ry()}:null,...(r=t.target,n=l,rr(r??n,e=>"IMG"===ru(e)||e===n?(a={element:{tagName:e.tagName,text:ra(e,"title")||ra(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},V):W),a),...c,...d,timing:as()};if(n6(l)){var v=l.hostname!==location.hostname,{host:p,scheme:h,source:g}=tI(l.href,!1);if(l.host===location.host&&l.pathname===location.pathname&&l.search===location.search){if("#"===l.hash)return;l.hash!==location.hash&&tr(e,z({type:"anchor_navigation",anchor:l.hash,...f}));return}var m=z({clientId:nT(),type:"navigation",href:v?l.href:g,external:v,domain:{host:p,scheme:h},self:W,anchor:l.hash,...f});t.button<=1&&(1===t.button||t.ctrlKey||t.shiftKey||t.altKey||ra(l,"target")!==window.name?(n9(m.clientId),m.self=V,tr(e,m)):rf(location.href,l.href)||(m.exit=m.external,n9(m.clientId)));return}var y=(rr(t.target,(e,t)=>!!(u??=av(rw(e)?.cart??rN(e,"cart")))&&!u.item&&(u.item=eK(rw(e)?.content))&&t(u)),ap(u));(y||i)&&tr(e,y?z({type:"cart_updated",...f,...y}):z({type:"component_click",...f}))}})};t(document),au(e=>e.contentDocument&&t(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=rd(W);aa(()=>tc(()=>(t={},r=rd(W)),250)),rg(window,"scroll",()=>{var n=rd(),a=rc();if(n.y>=r.y){var i=[];!t.fold&&n.y>=r.y+200&&(t.fold=W,tr(i,"fold")),!t["page-middle"]&&a.y>=.5&&(t["page-middle"]=W,tr(i,"page-middle")),!t["page-end"]&&a.y>=.99&&(t["page-end"]=W,tr(i,"page-end"));var o=eN(i,e=>z({type:"scroll",scrollType:e,offset:a}));o.length&&tr(e,o)}})}},{id:"cart",setup:e=>({processCommand(t){if(aS(t)){var r=t.cart;return"clear"===r?tr(e,{type:"cart_updated",action:"clear"}):(r=ap(r))&&tr(e,{...r,type:"cart_updated"}),W}return aC(t)?(tr(e,{type:"order",...t.order}),W):V}})},{id:"forms",setup(e){var t=new Map,r=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var l=ri(i,rk("ref"))||"track_ref",s=()=>i.isConnected&&rh(i).width,u=eQ(t,i,()=>{var t,r=new Map,n={type:"form",name:ri(i,rk("form-name"))||ra(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,e=>nZ(n,e));var l=()=>{o(),t[3]>=2&&(n.completed=3===t[3]||!s()),e.events.postPatch(n,{...a,totalTime:ta(W)-t[4]}),t[3]=1},u=to();return rg(i,"submit",()=>{a=ab(i),t[3]=3,u(()=>{i.isConnected&&rh(i).width>0?(t[3]=2,u()):l()},750)}),t=[n,r,i,0,ta(W),1]});return eQ(u[1],n)||eN(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===l||rO(e,"ref"))&&(e.value||(e.value=nN()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:tR(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[aw]:r(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{if(i){var[e,t,n,a]=i,o=-(l-(l=an())),u=-(s-(s=ta(W))),c=t[aw];(t[aw]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=W,a[3]=2,eR(e.fields,([e,r])=>r.lastField=e===t.name||void 0)),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,i=null}},l=0,s=0,u=e=>{e&&rg(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>{r&&(i=r,"focusin"===e.type?(s=ta(W),l=an()):o())})};u(document),au(e=>e.contentDocument&&u)}}],aE=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&t?.[e]!==void 0),aS=aE("cart"),aA=aE("username"),aT=aE("tagAttributes"),aI=aE("disable"),ax=aE("boundary"),aN=aE("extension"),aO=aE(W,"flush"),aj=aE("get"),a$=aE("listener"),aC=aE("order"),aM=aE("scan"),aU=aE("set"),a_=e=>"function"==typeof e,aF=e=>{if(A)return A;en(e)&&(e=r4(e)),e2(r$,e),r9(e8(r$,"clientKey"));var t=e8(r$,"apiKey"),r=t8[r$.name]??[];if(!ei(r)){C(`The global variable for the tracker "${r$.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...t)=>{var r=W;a=eJ(a,n=>F(()=>(n[e]?.(...t,{tracker:A,unsubscribe:()=>r=V}),r),r7(n)))},o=[],l={applyEventExtensions(e){e.clientId??=nT(),e.timestamp??=ta(),f=W;var t=V;return eN(n,([,r])=>{(t||r.decorate?.(e)===V)&&(t=W)}),t?void 0:e}},s=nY(rR,l),u=nQ(rR,l),c=null,d=0,f=V,v=V;return e9(t8,[{[r$.name]:[A=Object.freeze({id:"tracker_"+nT(),events:u,variables:s,push(...e){if(!c&&t){if(e[0]!==t)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var r=V;if((e=eJ(ej(e,e=>en(e)?r4(e):e),e=>{if(!e)return V;if(aT(e))r$.tags=e2({},r$.tags,e.tagAttributes);else if(aI(e))return r$.disabled=e.disable,V;else if(aO(e))return r=W,V;else if(a_(e))return e(A),V;return v||a$(e)||aN(e)?W:(o.push(e),V)})).length||r){var l=eY(e,e=>aN(e)?-100:a$(e)?-50:aU(e)?-10:tQ(e)?90:0);if(!(c&&c.splice(f?d+1:c.length,0,...l))){for(d=0,c=l;d<c.length;d++)c[d]&&F(()=>{var e,t=c[d];if(i("command",t),f=V,tQ(t))u.post(t,!1);else if(aj(t))s.get(...el(t.get));else if(aU(t))s.set(...el(t.set));else if(a$(t))tr(a,t.listener);else if(aN(t))(e=F(()=>t.extension.setup(A),e=>ne(t.extension.id,e)))&&(tr(n,[t.priority??100,e]),eY(n,([e])=>e));else if(a_(t))t(A);else{var r=V;for(var[,e]of n)if(r=e.processCommand?.(t)??V)break;r||ne("invalid-command",t)}},e=>ne(A,"internal-error",e));c=null,r&&u.post([],!0)}}}},__isTracker:W})]}]),nC(async(e,t,n,a)=>{if("ready"===e){var i=_(await s.get({scope:"session",key:"info",cache:J}).value,"No session data.");l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(n4(A),i.hasUserAgent=!0),v=!0,o.length&&tr(A,o),a(),tr(A,...eN(ak,e=>({extension:e})),...r,{set:{scope:"local",key:"loaded",value:!0}})}},!0),A};t8[".tail.js.init"]=e=>{e(aF)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
