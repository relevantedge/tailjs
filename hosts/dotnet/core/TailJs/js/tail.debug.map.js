(()=>{"use strict";var e,t,r,n,a,i,o,l,s,u,c,d,f,v,p,h,g,m,y,b,w,k,E,S,A,T,I,x,N,O,$,j,C=(e,t=e=>TypeError(e))=>{throw et(e=e7(e))?t(e):e},M=(e,t,r=-1)=>{if(e===t||(e??t)==null)return!0;if(eo(e)&&eo(t)&&e.length===t.length){var n=0;for(var a in e){if(e[a]!==t[a]&&!M(e[a],t[a],r-1))return!1;++n}return n===Object.keys(t).length}return!1},U=(e,t,...r)=>e===t||r.length>0&&r.some(t=>U(e,t)),_=(e,t)=>null!=e?e:C(t??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),F=(e,t=!0,r)=>{try{return e()}catch(e){return ef(t)?ea(e=t(e))?C(e):e:Y(t)?console.error(t?C(e):e):t}finally{r?.()}},P=e=>{var t=void 0;return()=>t??=e7(e)},q=e=>{var t={initialized:!0,then:R(()=>(t.initialized=!0,e7(e)))};return t},R=e=>{var t=P(e);return(e,r)=>D(t,[e,r])},D=async(e,t=!0,r)=>{try{var n=await e7(e);return en(t)?t[0]?.(n):n}catch(e){if(Y(t)){if(t)throw e;console.error(e)}else{if(en(t)){if(!t[1])throw e;return t[1](e)}var a=await t?.(e);if(a instanceof Error)throw a;return a}}finally{r?.()}},z=e=>e,B=void 0,J=Number.MAX_SAFE_INTEGER,V=!1,W=!0,G=()=>{},L=e=>null!=e,H=Symbol.iterator,K=(e,t)=>(r,n=!0)=>e(r)?r:t&&n&&null!=r&&null!=(r=t(r))?r:B,X=(e,t)=>ef(t)?e!==B?t(e):B:e?.[t]!==B?e:B,Y=e=>"boolean"==typeof e,Z=K(Y,e=>0!=e&&(1==e||"false"!==e&&("true"===e||B))),Q=e=>!!e,ee=e=>"number"==typeof e,et=e=>"string"==typeof e,er=K(et,e=>e?.toString()),en=Array.isArray,ea=e=>e instanceof Error,ei=(e,t=!1)=>null==e?B:!t&&en(e)?e:ev(e)?[...e]:[e],eo=e=>null!==e&&"object"==typeof e,el=Object.prototype,es=Object.getPrototypeOf,eu=e=>null!=e&&es(e)===el,ec=(e,t)=>"function"==typeof e?.[t],ed=e=>"symbol"==typeof e,ef=e=>"function"==typeof e,ev=(e,t=!1)=>!!(e?.[H]&&("object"==typeof e||t)),ep=e=>e instanceof Map,eh=e=>e instanceof Set,eg=(e,t)=>null==e?B:!1===t?e:Math.round(e*(t=Math.pow(10,t&&!0!==t?t:0)))/t,em=!1,ey=e=>(em=!0,e),eb=e=>null==e?B:ef(e)?e:t=>t[e],ew=(e,t,r)=>(t??r)!==B?(e=eb(e),t??=0,r??=J,(n,a)=>t--?B:r--?e?e(n,a):n:r):e,ek=e=>e?.filter(L),eE=(e,t,r,n)=>null==e?[]:!t&&en(e)?ek(e):e[H]?function*(e,t){if(null!=e){if(t){t=eb(t);var r=0;for(var n of e)if(null!=(n=t(n,r++))&&(yield n),em){em=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,r===B?t:ew(t,r,n)):eo(e)?function*(e,t){t=eb(t);var r=0;for(var n in e){var a=[n,e[n]];if(t&&(a=t(a,r++)),null!=a&&(yield a),em){em=!1;break}}}(e,ew(t,r,n)):eE(ef(e)?function*(e,t,r=Number.MAX_SAFE_INTEGER){for(null!=t&&(yield t);r--&&null!=(t=e(t));)yield t}(e,r,n):function*(e=0,t){if(e<0)for(t??=-e-1;e++;)yield t--;else for(t??=0;e--;)yield t++}(e,r),t),eS=(e,t)=>t&&!en(e)?[...e]:e,eA=(e,t,r,n)=>eE(e,t,r,n),eT=(e,t,r=1,n=!1,a,i)=>(function* e(t,r,n,a){if(null!=t){if(t[H]||n&&eo(t))for(var i of a?eE(t):t)1!==r?yield*e(i,r-1,n,!0):yield i;else yield t}})(eE(e,t,a,i),r+1,n,!1),eI=(e,t,r,n)=>{if(t=eb(t),en(e)){var a=0,i=[];for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n&&!em;r++){var o=e[r];(t?o=t(o,a++):o)!=null&&i.push(o)}return em=!1,i}return null!=e?ei(eA(e,t,r,n)):B},ex=(e,t,r,n)=>null!=e?new Set([...eA(e,t,r,n)]):B,eN=(e,t,r=1,n=!1,a,i)=>ei(eT(e,t,r,n,a,i)),eO=(e,t)=>e?1===e.length?e[0]:en(t)?(e.length>2?e.slice(0,-2).join(t[0]):e[0])+t[1]+e[e.length-1]:e.join(t):B,e$=(e,t,r)=>null==e?B:ef(t)?eO(eI(et(e)?[e]:e,t),r??""):et(e)?e:eO(eI(e,e=>!1===e?B:e),t??""),ej=(...e)=>{var t;return eP(1===e.length?e[0]:e,e=>null!=e&&(t??=[]).push(...ei(e))),t},eC=(e,t,r,n)=>{var a,i=0;for(r=r<0?e.length+r:r??0,n=n<0?e.length+n:n??e.length;r<n;r++)if(null!=e[r]&&(a=t(e[r],i++)??a,em)){em=!1;break}return a},eM=(e,t)=>{var r,n=0;for(var a of e)if(null!=a&&(r=t(a,n++)??r,em)){em=!1;break}return r},eU=(e,t)=>{var r,n=0;for(var a in e)if(r=t([a,e[a]],n++)??r,em){em=!1;break}return r},e_=(e,t,...r)=>null==e?B:ev(e)?eI(e,e=>t(e,...r)):t(e,...r),eF=(e,t,r,n)=>{var a;if(null!=e){if(en(e))return eC(e,t,r,n);if(r===B){if(e[H])return eM(e,t);if("object"==typeof e)return eU(e,t)}for(var i of eE(e,t,r,n))null!=i&&(a=i);return a}},eP=eF,eq=async(e,t,r,n)=>{var a;if(null==e)return B;for(var i of eA(e,t,r,n))if(null!=(i=await i)&&(a=i),em){em=!1;break}return a},eR=Object.fromEntries,eD=(e,t,r)=>{if(null==e)return B;if(Y(t)||r){var n={};return eP(e,r?(e,a)=>null!=(e=t(e,a))&&null!=(e[1]=r(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eP(e,t?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eR(eI(e,t?(e,r)=>X(t(e,r),1):e=>X(e,1)))},ez=(e,t,r,n,a)=>{var i=()=>ef(r)?r():r;return eF(e,(e,n)=>r=t(r,e,n)??i(),n,a)??i()},eB=(e,t=e=>null!=e,r=en(e),n,a)=>eS(eE(e,(e,r)=>t(e,r)?e:B,n,a),r),eJ=(e,t,r,n)=>{var a;if(null==e)return B;if(t)e=eB(e,t,!1,r,n);else{if(null!=(a=e.length??e.size))return a;if(!e[H])return Object.keys(e).length}return a=0,eF(e,()=>++a)},eV=(e,...t)=>null==e?B:ee(e)?Math.max(e,...t):ez(e,(e,r,n,a=t[1]?t[1](r,n):r)=>null==e||ee(a)&&a>e?a:e,B,t[2],t[3]),eW=(e,t,r)=>eI(e,eu(e)?e=>e[1]:e=>e,t,r),eG=e=>!en(e)&&ev(e)?eI(e,ep(e)?e=>e:eh(e)?e=>[e,!0]:(e,t)=>[t,e]):eo(e)?Object.entries(e):B,eL=(e,t,r,n)=>null==e?B:(t=eb(t),eF(e,(e,r)=>!t||(e=t(e,r))?ey(e):B,r,n)),eH=(e,t,r,n)=>null==e?B:en(e)?e[e.length-1]:eF(e,(e,r)=>!t||t(e,r)?e:B,r,n),eK=(e,t,r,n)=>null==e?B:eu(e)&&!t?Object.keys(e).length>0:e.some?.(t??Q)??eF(e,t?(e,r)=>!!t(e,r)&&ey(!0):()=>ey(!0),r,n)??!1,eX=(e,t=e=>e)=>(e?.sort((e,r)=>t(e)-t(r)),e),eY=(e,t,r)=>(e.constructor===Object?void 0===r?delete e[t]:e[t]=r:void 0===r?e.delete?e.delete(t):delete e[t]:e.set?e.set(t,r):e.add?r?e.add(t):e.delete(t):e[t]=r,r),eZ=(e,t,r)=>{if(e){if(e.constructor===Object&&null==r)return e[t];var n=e.get?e.get(t):e.has?e.has(t):e[t];return void 0===n&&null!=r&&null!=(n=ef(r)?r():r)&&eY(e,t,n),n}},eQ=(e,...t)=>(eP(t,t=>eP(t,([t,r])=>{null!=r&&(eu(e[t])&&eu(r)?eQ(e[t],r):e[t]=r)})),e),e0=e=>(t,r,n,a)=>{if(t)return void 0!=n?e(t,r,n,a):(eP(r,r=>en(r)?e(t,r[0],r[1]):eP(r,([r,n])=>e(t,r,n))),t)},e1=e0(eY),e2=e0((e,t,r)=>eY(e,t,ef(r)?r(eZ(e,t)):r)),e4=(e,t)=>e instanceof Set?!e.has(t)&&(e.add(t),!0):eZ(e,t)!==e1(e,t,!0),e6=(e,t)=>{if((e??t)!=null){var r=eZ(e,t);return ec(e,"delete")?e.delete(t):delete e[t],r}},e5=(e,...t)=>{var r=[],n=!1,a=(e,i,o,l)=>{if(e){var s=t[i];i===t.length-1?en(s)?(n=!0,s.forEach(t=>r.push(e6(e,t)))):r.push(e6(e,s)):(en(s)?(n=!0,s.forEach(t=>a(eZ(e,t),i+1,e,t))):a(eZ(e,s),i+1,e,s),!eJ(e)&&o&&e3(o,l))}};return a(e,0),n?r:r[0]},e3=(e,t)=>{if(e)return en(t)?(en(e)&&e.length>1?t.sort((e,t)=>t-e):t).map(t=>e3(e,t)):en(e)?t<e.length?e.splice(t,1)[0]:void 0:e6(e,t)},e8=(e,...t)=>{var r=(t,n)=>{var a;if(t){if(en(t)){if(eu(t[0])){t.splice(1).forEach(e=>r(e,t[0]));return}a=t}else a=eI(t);a.forEach(([t,r])=>Object.defineProperty(e,t,{configurable:!1,enumerable:!0,writable:!1,...n,...eu(r)&&("get"in r||"value"in r)?r:ef(r)&&!r.length?{get:r}:{value:r}}))}};return t.forEach(e=>r(e)),e},e9=(e,...t)=>{if(void 0!==e)return Object.fromEntries(t.flatMap(r=>eo(r)?en(r)?r.map(t=>en(t)?1===t.length?[t[0],e[t[0]]]:e9(e[t[0]],...t[1]):[t,e[t]]):Object.entries(t).map(([t,r])=>[t,!0===r?e[t]:e9(e[t],r)]):[[r,e[r]]]).filter(e=>null!=e[1]))},e7=e=>ef(e)?e():e,te=(e,t=-1)=>eo(e)?en(e)?t?e.map(e=>te(e,t-1)):[...e]:eh(e)?new Set(t?eI(e,e=>te(e,t-1)):e):ep(e)?new Map(t?eI(e,e=>[e[0],te(e[1],t-1)]):e):t?eD(e,([e,r])=>[e,te(r,t-1)]):{...e}:e,tt=(e,...t)=>e?.push(...t),tr=(e,...t)=>e?.unshift(...t),tn="undefined"!=typeof performance?(e=W)=>e?Math.trunc(tn(V)):performance.timeOrigin+performance.now():Date.now,ta=(e=!0,t=()=>tn())=>{var r,n=+e*t(),a=0;return(i=e,o)=>(r=e?a+=-n+(n=t()):a,o&&(a=0),(e=i)&&(n=t()),r)},ti=(e=0)=>{var t,r;return function n(a,i){if(void 0===a)return!!r;clearTimeout(t),Y(a)?(a&&r?.(),r=void 0):(r=a,t=setTimeout(()=>n(!0),i??e))}},to=(e,t=0)=>{var r=ef(e)?{frequency:t,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:l=()=>{}}=r;t=r.frequency??0;var s=0,u=td(!0).resolve(),c=ta(!a),d=c(),f=async e=>!!s&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await D(()=>l(c(),-d+(d=c())),!1,()=>u.resolve())===!1||t<=0||o)&&v(!1),p.busy=!1,!0),v=(e,r=!e)=>(c(e,r),clearInterval(s),p.active=!!(s=e?setInterval(f,t<0?-t:t):0),p),p={active:!1,busy:!1,restart:(e,r)=>(t=e??t,l=r??l,v(!0,!0)),toggle:(e,t)=>e!==p.active?e?t?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await f(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class tl{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,t=!1){return this._promise.resolve(e,t),this}reject(e,t=!1){return this._promise.reject(e,t),this}reset(){return this._promise=new ts,this}signal(e){return this.resolve(e),this.reset(),this}then(e,t){return this._promise.then(e,t)}}class ts{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...t)=>{e=t.map((e,t)=>(r,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[t?"error":"value"]=r===B||r,e(r),this})}),[this.resolve,this.reject]=e}then(e,t){return this._promise.then(e,t)}}var tu=(e,t=0)=>t>0?setTimeout(e,t):window.queueMicrotask(e),tc=(e,t)=>null==e||isFinite(e)?!e||e<=0?e7(t):new Promise(r=>setTimeout(async()=>r(await e7(t)),e)):C(`Invalid delay ${e}.`),td=e=>e?new tl:new ts,tf=(...e)=>Promise.race(e.map(e=>ef(e)?e():e)),tv=(e,t,r)=>{var n=!1,a=(...t)=>e(...t,i),i=()=>n!==(n=!1)&&(r(a),!0),o=()=>n!==(n=!0)&&(t(a),!0);return o(),[i,o]},tp=(...e)=>(e=eB(e),[()=>ez(e,(e,t)=>t[0]()||e,!1),()=>ez(e,(e,t)=>t[1]()||e,!1)]),th=()=>{var e,t=new Set;return[(r,n)=>{var a=tv(r,e=>t.add(e),e=>t.delete(e));return n&&e&&r(...e,a[0]),a},(...r)=>(e=r,t.forEach(e=>e(...r)))]},tg=(e,t="and")=>X(e,e=>0===(e=ev(e)?eI(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:`${e.slice(0,-1).join(", ")} ${t} ${eH(e)}`),tm=e=>X(e,e=>ev(e)?eI(e,e=>"'"+e+"'"):"'"+e+"'"),ty=e=>(e=Math.log2(e))===(0|e),tb=(e,t,r,n)=>{var a,i,o,l=Object.fromEntries(Object.entries(e).filter(([e,t])=>et(e)&&ee(t)).map(([e,t])=>[e.toLowerCase(),t])),s=Object.entries(l),u=Object.values(l),c=l.any??u.reduce((e,t)=>e|t,0),d=t?{...l,any:c,none:0}:l,f=Object.fromEntries(Object.entries(d).map(([e,t])=>[t,e])),v=(e,r)=>ee(e)?!t&&r?null!=f[e]?e:B:e:et(e)?d[e]??d[e.toLowerCase()]:B,p=!1,[h,g]=t?[(e,t)=>Array.isArray(e)?e.reduce((e,r)=>null==r||p?e:null==(r=v(r,t))?(p=!0,B):(e??0)|r,(p=!1,B)):v(e),(e,t)=>null==(e=h(e,!1))?B:t&&(i=f[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=s.filter(([,t])=>t&&e&t&&ty(t)).map(([e])=>e),t?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?f[e]:B],m=(e,t)=>null==e?B:null==(e=h(o=e,t))?C(TypeError(`${JSON.stringify(o)} is not a valid ${r} value.`)):e,y=s.filter(([,e])=>!n||(n&e)===e&&ty(e));return e8(e=>m(e),[{configurable:!1,enumerable:!1},{parse:m,tryParse:h,entries:s,values:u,lookup:g,length:s.length,format:e=>g(e,!0),logFormat:(e,t="or")=>"any"===(e=g(e,!0))?"any "+r:`the ${r} ${tg(tm(e),t)}`},t&&{pure:y,map:(e,t)=>(e=m(e),y.filter(([,t])=>t&e).map(t??(([,e])=>e)))}])},tw=(...e)=>{var t=eG(eD(e,!0)),r=e=>(eo(e)&&(en(e)?e.forEach((t,n)=>e[n]=r(t)):t.forEach(([t,r])=>{var n,a=B;null!=(n=e[t])&&(1===r.length?e[t]=r[0].parse(n):r.forEach((i,o)=>!a&&null!=(a=o===r.length-1?i.parse(n):i.tryParse(n))&&(e[t]=a)))})),e);return r},tk=(e,t=["|",";",","],r=!0)=>{if(!e)return B;var n=e.split("=").map(e=>r?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&t?.length&&eL(t,(e,t,r=n[1].split(e))=>r.length>1?r:B)||(n[1]?[n[1]]:[]),n},tE=(e,t=!0,r)=>null==e?B:tI(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,r,n,a,i,o,l,s,u,c,d,f)=>{var v={source:e,scheme:r,urn:r?!n:!n&&B,authority:a,user:i,password:o,host:l??s,port:null!=u?parseInt(u):B,path:c,query:!1===t?d:tS(d,t),fragment:f};return v.path=v.path||(v.authority?v.urn?"":"/":B),v}),tS=(e,t,r=!0)=>null==e?B:eD(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=tk(e,!1===t?[]:!0===t?B:t,r)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==t?[a,o.length>1?o:i]:[a,i]:B,(e,r)=>e?!1!==t?ej(e,r):(e?e+",":"")+r:r),tA=(e,t)=>t&&null!=e?t.test(e):B,tT=(e,t,r)=>tI(e,t,r,!0),tI=(r,n,a,i=!1)=>(r??n)==null?B:a?(e=B,i?(t=[],tI(r,n,(...r)=>null!=(e=a(...r))&&t.push(e))):r.replace(n,(...t)=>e=a(...t)),e):r.match(n),tx=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),tN=/\z./g,tO=(e,t)=>(t=e$(ex(eB(e,e=>e?.length)),"|"))?RegExp(t,"gu"):tN,t$={},tj=e=>e instanceof RegExp,tC=(e,t=[","," "])=>tj(e)?e:en(e)?tO(eI(e,e=>tC(e,t)?.source)):Y(e)?e?/./g:tN:et(e)?t$[e]??=tI(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,r,n)=>r?RegExp(r,"gu"):tO(eI(tM(n,RegExp(`?<!(?<!\\)\\)[${e$(t,tx,",")}]/`)),e=>e&&`^${e$(tM(e,/(?<!(?<!\\)\\)\*/),e=>tx(tU(e,/\\(.)/g,"$1")),".*")}$`))):B,tM=(e,t)=>e?.split(t)??e,tU=(e,t,r)=>e?.replace(t,r)??e;(T=r||(r={}))[T.Anonymous=0]="Anonymous",T[T.Indirect=1]="Indirect",T[T.Direct=2]="Direct",T[T.Sensitive=3]="Sensitive";var t_=tb(r,!1,"data classification");(I=n||(n={}))[I.None=0]="None",I[I.Necessary=1]="Necessary",I[I.Functionality=2]="Functionality",I[I.Performance=4]="Performance",I[I.Targeting=8]="Targeting",I[I.Security=16]="Security",I[I.Infrastructure=32]="Infrastructure",I[I.Anonymous=49]="Anonymous",I[I.Any=63]="Any",I[I.Server=64]="Server";var tF=tb(n,!0,"data purpose",127),tP=tb(n,!1,"data purpose",0),tq=(e,t)=>((a=e?.metadata)&&(t?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e);(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var tR=tb(i,!1,"variable scope");r.Anonymous,n.Necessary;var tD=e=>`'${e.key}' in ${tR.format(e.scope)} scope`,tz={scope:tR,purpose:tP,purposes:tF,classification:t_};tw(tz),(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",tb(o,!1,"variable set status"),(O=l||(l={}))[O.Add=0]="Add",O[O.Min=1]="Min",O[O.Max=2]="Max",O[O.IfMatch=3]="IfMatch",O[O.IfNoneMatch=4]="IfNoneMatch",tb(l,!1,"variable patch type");var tB=e=>!!e?.patch,tJ=e=>!!e?.variables,tV=(e,t,r)=>{var n,a=e=>e,i=(r,i=tH)=>q(async()=>(n=a(i(await e(),t)))&&r(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>eB(e,e=>e.status<300)),variables:i(e=>eI(e,tG)),values:i(e=>eI(e,e=>tG(e)?.value)),push:()=>(a=e=>(r?.(eI(tW(e))),e),o),value:i(e=>tG(e[0])?.value),variable:i(e=>tG(e[0])),result:i(e=>e[0])};return o},tW=e=>e?.map(e=>e?.status<400?e:B),tG=e=>e?.status<400?e?.current??e:B,tL=e=>e?.status<400||e?.status===404,tH=(e,t,r)=>{var n,a,i=[],l=eI(ei(e),(e,l)=>e&&(e.status<400||!r&&404===e.status?e:(a=`${tD(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=t?.[l])||!1!==n(e,a))&&i.push(a),B)));return i.length?C(i.join("\n")):en(e)?l:l?.[0]},tK=e=>e&&"string"==typeof e.type,tX=((...e)=>t=>t?.type&&e.some(e=>e===t?.type))("view"),tY=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],tZ=(e,t,r)=>{if(!e)return[];if(Array.isArray(e)&&(e=e$(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,t,r,n)=>[t,r&&`="${r.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=tY(t);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,t,o,l,s)=>{var u=o||l||s,c=tY(t);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),r?.add(tQ(n))),""}),a},tQ=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,t0=2e3,t1="_t:data",t2=()=>()=>C("Not initialized."),t4=window,t6=document,t5=t6.body,t3=(e,t)=>!!e?.matches(t),t8=J,t9=(e,t,r=(e,t)=>t>=t8)=>{for(var n,a=0,i=V;e?.nodeType===1&&!r(e,a++)&&t(e,(e,t)=>(null!=e&&(n=e,i=t!==W&&null!=n),W),a-1)!==V&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},t7=(e,t)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===t))switch(t){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Z(e);case"n":return parseFloat(e);case"j":return F(()=>JSON.parse(e),G);case"h":return F(()=>rZ(e),G);case"e":return F(()=>r0?.(e),G);default:return en(t)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:t7(e,t[0])):void 0}},re=(e,t,r)=>t7(e?.getAttribute(t),r),rt=(e,t,r)=>t9(e,(e,n)=>n(re(e,t,r))),rr=(e,t)=>re(e,t)?.trim()?.toLowerCase(),rn=e=>e?.getAttributeNames(),ra=(e,t)=>getComputedStyle(e).getPropertyValue(t)||null,ri=e=>null!=e?e.tagName:null,ro=()=>({x:(s=rl(V)).x/(t5.offsetWidth-window.innerWidth)||0,y:s.y/(t5.offsetHeight-window.innerHeight)||0}),rl=e=>({x:eg(scrollX,e),y:eg(scrollY,e)}),rs=(e,t)=>tU(e,/#.*$/,"")===tU(t,/#.*$/,""),ru=(e,t,r=W)=>(u=rc(e,t))&&z({xpx:u.x,ypx:u.y,x:eg(u.x/t5.offsetWidth,4),y:eg(u.y/t5.offsetHeight,4),pageFolds:r?u.y/window.innerHeight:void 0}),rc=(e,t)=>t?.pointerType&&t?.pageY!=null?{x:t.pageX,y:t.pageY}:e?({x:c,y:d}=rd(e),{x:c,y:d}):void 0,rd=e=>e?(f=e.getBoundingClientRect(),s=rl(V),{x:eg(f.left+s.x),y:eg(f.top+s.y),width:eg(f.width),height:eg(f.height)}):void 0,rf=(e,t,r,n={capture:!0,passive:!0})=>en(t)?tp(...eI(t,t=>rf(e,t,r,n))):tv(r,r=>e.addEventListener(t,r,n),r=>e.addEventListener(t,r,n)),rv=e=>{var{host:t,scheme:r,port:n}=tE(e,!1);return{host:t+(n?":"+n:""),scheme:r}},rp=()=>({...s=rl(W),width:window.innerWidth,height:window.innerHeight,totalWidth:t5.offsetWidth,totalHeight:t5.offsetHeight}),rh=new WeakMap,rg=e=>rh.get(e),rm=(e,t=V)=>(t?"--track-":"track-")+e,ry=(e,t,r,n,a,i)=>t?.[1]&&eP(rn(e),o=>t[0][o]??=(i=V,et(n=eP(t[1],([t,r,n],a)=>tA(o,t)&&(i=void 0,!r||t3(e,r))&&ey(n??o)))&&(!(a=e.getAttribute(o))||Z(a))&&tZ(a,tU(n,/\-/g,":"),r),i)),rb=()=>{},rw=(e,t)=>{if(v===(v=rx.tags))return rb(e,t);var r=e=>e?tj(e)?[[e]]:ev(e)?eN(e,r):[eu(e)?[tC(e.match),e.selector,e.prefix]:[tC(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...r(eW(v))]];(rb=(e,t)=>ry(e,n,t))(e,t)},rk=(e,t)=>e$(ej(ra(e,rm(t,W)),ra(e,rm("base-"+t,W)))," "),rE={},rS=(e,t,r=rk(e,"attributes"))=>{r&&ry(e,rE[r]??=[{},tT(r,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,t,r,n)=>[tC(r||n),,t])],t),tZ(rk(e,"tags"),void 0,t)},rA=(e,t,r=V,n)=>(r?t9(e,(e,r)=>r(rA(e,t,V)),ef(r)?r:void 0):e$(ej(re(e,rm(t)),ra(e,rm(t,W)))," "))??(n&&(p=rg(e))&&n(p))??null,rT=(e,t,r=V,n)=>""===(h=rA(e,t,r,n))||(null==h?h:Z(h)),rI=(e,t,r,n)=>e?(rS(e,n??=new Set),t9(e,e=>{rw(e,n),tZ(eI(r?.(e)),void 0,n)},t),n.size?{tags:[...n]}:{}):{},rx={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},rN=tM(""+t6.currentScript.src,"#"),rO=tM(""+(rN[1]||""),";"),r$=rN[0],rj=rO[1]||tE(r$,!1)?.host,rC=e=>!!(rj&&tE(e,!1)?.host?.endsWith(rj)===W),rM=(...e)=>tU(e$(e),/(^(?=\?))|(^\.(?=\/))/,r$.split("?")[0]),rU=rM("?","var");rM("?","mnt"),rM("?","usr");var r_=[],rF=[],rP=(e,t=0)=>e.charCodeAt(t),rq=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,t)=>r_[rF[t]=e.charCodeAt(0)]=t);var rR=e=>{for(var t,r=0,n=e.length,a=[];n>r;)t=e[r++]<<16|e[r++]<<8|e[r++],a.push(rF[(16515072&t)>>18],rF[(258048&t)>>12],rF[(4032&t)>>6],rF[63&t]);return a.length+=n-r,rq(a)},rD=e=>{for(var t,r=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>r;)i[n++]=r_[rP(e,r++)]<<2|(t=r_[rP(e,r++)])>>4,a>r&&(i[n++]=(15&t)<<4|(t=r_[rP(e,r++)])>>2,a>r&&(i[n++]=(3&t)<<6|r_[rP(e,r++)]));return i},rz={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},rB=(e=256)=>e*Math.random()|0,rJ=e=>{var t,r,n,a,i,o=0n,l=0,s=0n,u=[],c=0,d=0,f=0,v=0,p=[];for(f=0;f<e?.length;v+=p[f]=e.charCodeAt(f++));var h=e?()=>{u=[...p],d=255&(c=v),f=-1}:()=>{},g=e=>(d=255&(c+=-u[f=(f+1)%u.length]+(u[f]=e)),e);return[e?e=>{for(h(),a=16-((t=e.length)+4)%16,i=new Uint8Array(4+t+a),n=0;n<3;i[n++]=g(rB()));for(r=0,i[n++]=g(d^16*rB(16)+a);t>r;i[n++]=g(d^e[r++]));for(;a--;)i[n++]=rB();return i}:e=>e,e?e=>{for(h(),r=0;r<3;g(e[r++]));if((t=e.length-4-((d^g(e[r++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(t);t>n;i[n++]=d^g(e[r++]));return i}:e=>e,(e,t=64)=>{if(null==e)return null;for(l=Y(t)?64:t,h(),[o,s]=rz[l],r=0;r<e.length;o=BigInt.asUintN(l,(o^BigInt(d^g(e[r++])))*s));return!0===t?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},rV={exports:{}};(e=>{(()=>{function t(e,t){if(t&&t.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var r,n,a=new Uint8Array(128),i=0;if(t&&t.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return a.subarray(0,i);function l(e,a){var i,o,f,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var t=e/4294967296,a=e%4294967296;c([211,t>>>24,t>>>16,t>>>8,t,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),d(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(r=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(r))})(e);break;case"string":(f=(o=(e=>{for(var t=!0,r=e.length,n=0;n<r;n++)if(e.charCodeAt(n)>127){t=!1;break}for(var a=0,i=new Uint8Array(e.length*(t?1:4)),o=0;o!==r;o++){var l=e.charCodeAt(o);if(l<128){i[a++]=l;continue}if(l<2048)i[a++]=l>>6|192;else{if(l>55295&&l<56320){if(++o>=r)throw Error("UTF-8 encode: incomplete surrogate pair");var s=e.charCodeAt(o);if(s<56320||s>57343)throw Error("UTF-8 encode: second surrogate character 0x"+s.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&s),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}return t?i:i.subarray(0,a)})(e)).length)<=31?u(160+f):f<=255?c([217,f]):f<=65535?c([218,f>>>8,f]):c([219,f>>>24,f>>>16,f>>>8,f]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var t=e.getTime()/1e3;if(0===e.getMilliseconds()&&t>=0&&t<4294967296)c([214,255,t>>>24,t>>>16,t>>>8,t]);else if(t>=0&&t<17179869184){var r=1e6*e.getMilliseconds();c([215,255,r>>>22,r>>>14,r>>>6,r<<2>>>0|t/4294967296,t>>>24,t>>>16,t>>>8,t])}else{var r=1e6*e.getMilliseconds();c([199,12,255,r>>>24,r>>>16,r>>>8,r]),d(t)}})(e):Array.isArray(e)?s(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s(e):(e=>{var t=0;for(var r in e)void 0!==e[r]&&t++;for(var r in t<=15?u(128+t):t<=65535?c([222,t>>>8,t]):c([223,t>>>24,t>>>16,t>>>8,t]),e){var n=e[r];void 0!==n&&(l(r),l(n))}})(e);break;default:if(!a&&t&&t.invalidTypeReplacement)"function"==typeof t.invalidTypeReplacement?l(t.invalidTypeReplacement(e),!0):l(t.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function s(e){var t=e.length;t<=15?u(144+t):t<=65535?c([220,t>>>8,t]):c([221,t>>>24,t>>>16,t>>>8,t]);for(var r=0;t>r;r++)l(e[r])}function u(e){if(a.length<i+1){for(var t=2*a.length;t<i+1;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var t=2*a.length;t<i+e.length;)t*=2;var r=new Uint8Array(t);r.set(a),a=r}a.set(e,i),i+=e.length}function d(e){var t,r;e>=0?(t=e/4294967296,r=e%4294967296):(t=~(t=Math.abs(++e)/4294967296),r=~(r=Math.abs(e)%4294967296)),c([t>>>24,t>>>16,t>>>8,t,r>>>24,r>>>16,r>>>8,r])}}function r(e,t){var r,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),t&&t.multiple)for(r=[];n<e.length;)r.push(a());else r=a();return r;function a(){var t=e[n++];if(t>=0&&t<=127)return t;if(t>=128&&t<=143)return u(t-128);if(t>=144&&t<=159)return c(t-144);if(t>=160&&t<=191)return d(t-160);if(192===t)return null;if(193===t)throw Error("Invalid byte code 0xc1 found.");if(194===t)return!1;if(195===t)return!0;if(196===t)return s(-1,1);if(197===t)return s(-1,2);if(198===t)return s(-1,4);if(199===t)return f(-1,1);if(200===t)return f(-1,2);if(201===t)return f(-1,4);if(202===t)return l(4);if(203===t)return l(8);if(204===t)return o(1);if(205===t)return o(2);if(206===t)return o(4);if(207===t)return o(8);if(208===t)return i(1);if(209===t)return i(2);if(210===t)return i(4);if(211===t)return i(8);if(212===t)return f(1);if(213===t)return f(2);if(214===t)return f(4);if(215===t)return f(8);if(216===t)return f(16);if(217===t)return d(-1,1);if(218===t)return d(-1,2);if(219===t)return d(-1,4);if(220===t)return c(-1,2);if(221===t)return c(-1,4);if(222===t)return u(-1,2);if(223===t)return u(-1,4);if(t>=224&&t<=255)return t-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+t+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(t){for(var r=0,a=!0;t-- >0;)if(a){var i=e[n++];r+=127&i,128&i&&(r-=128),a=!1}else r*=256,r+=e[n++];return r}function o(t){for(var r=0;t-- >0;)r*=256,r+=e[n++];return r}function l(t){var r=new DataView(e.buffer,n+e.byteOffset,t);return(n+=t,4===t)?r.getFloat32(0,!1):8===t?r.getFloat64(0,!1):void 0}function s(t,r){t<0&&(t=o(r));var a=e.subarray(n,n+t);return n+=t,a}function u(e,t){e<0&&(e=o(t));for(var r={};e-- >0;)r[a()]=a();return r}function c(e,t){e<0&&(e=o(t));for(var r=[];e-- >0;)r.push(a());return r}function d(t,r){t<0&&(t=o(r));var a=n;return n+=t,((e,t,r)=>{var n=t,a="";for(r+=t;r>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=r)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=r)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=r)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,t)}function f(e,t){e<0&&(e=o(t));var r=o(1),a=s(e);return 255===r?(e=>{if(4===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*t)}if(8===e.length){var r=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),t=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*t+r/1e6)}if(12===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var t=i(8);return new Date(1e3*t+r/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:r,data:a}}}var n={serialize:t,deserialize:r,encode:t,decode:r};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(rV);var{deserialize:rW,serialize:rG}=($=rV.exports)&&$.__esModule&&Object.prototype.hasOwnProperty.call($,"default")?$.default:$,rL="$ref",rH=e=>{var t,r,n,a=(e,t,r=e[t],n=o(r))=>((r!==n||ed(t))&&(e[t]=n,i(()=>e[t]=r)),r),i=e=>(t??=[]).push(e),o=e=>null==e||ef(e)||ed(e)?null:eo(e)?e.toJSON&&e!==(e=e.toJSON())?o(e):null!=(n=(r??=new Map).get(e))?(e[rL]||(e[rL]=n,i(()=>delete e[rL])),{[rL]:n}):(eu(e)?(r.set(e,r.size+1),Object.keys(e).forEach(t=>(a(e,t)===B||ed(t))&&delete e[t])):ev(e)&&(!en(e)||Object.keys(e).length<e.length?[...e]:e).forEach((t,r)=>r in e?a(e,r):(e[r]=null,i(()=>delete e[r]))),e):e,l=rG(o(e));return t?.forEach(e=>e()),l},rK=e=>{var t,r,n=e=>eo(e)?e[rL]&&(r=(t??=[])[e[rL]])?r:(e[rL]&&(t[e[rL]]=e,delete e[rL]),Object.entries(e).forEach(([t,r])=>r!==(r=n(r))&&(e[t]=r)),e):e;return null!=e?n(rW(e)):B},rX=(e,t=!1,r=!0)=>{var n=(e,t=!1,r=!0)=>{var n=(e,r)=>ee(e)&&!0===r?e:l(e=et(e)?new Uint8Array(eI(e.length,t=>255&e.charCodeAt(t))):t?JSON.stringify(e):rH(e),r),a=e=>null==e?B:F(()=>JSON.parse(e,B));if(t)return[e=>JSON.stringify(e),a,(e,t)=>n(e,t)];var[i,o,l]=rJ(e);return[e=>rR(i(rH(e))),e=>null!=e?r&&(e?.[0]==="{"||e?.[0]==="[")?a(e):rK(o(rD(e))):null,(e,t)=>n(e,t)]};return e?n(e,t,r):(g??=[n(null,!1),n(null,!0)])[+t]};rX(),rX(null,!0);var[rY,rZ]=rX(),[rQ,r0]=[t2,t2],[r1,r2]=th(),r4=e=>{r0===t2&&([rQ,r0]=rX(e),r2(rQ=rX(null,!0)[0],r0))},r6=e=>t=>r5(e,t),r5=(...e)=>{var t=e.shift();console.error(et(e[1])?e.shift():e[1]?.message??"An error occurred",t.id??t,...e)},[r3,r8]=th(),[r9,r7]=th(),ne=e=>nr!==(nr=e)&&r8(nr=!1,ni(!0,!0)),nt=e=>nn!==(nn=!!e&&"visible"===document.visibilityState)&&r7(nn,!e,na(!0,!0));r3(nt);var nr=!0,nn=!1,na=ta(!1),ni=ta(!1);rf(window,["pagehide","freeze"],()=>ne(!1)),rf(window,["pageshow","resume"],()=>ne(!0)),rf(document,"visibilitychange",()=>(nt(!0),nn&&ne(!0))),r8(nr,ni(!0,!0));var no=!1,nl=ta(!1),[ns,nu]=th(),nc=to({callback:()=>no&&nu(no=!1,nl(!1)),frequency:2e4,once:!0,paused:!0}),nd=()=>!no&&(nu(no=!0,nl(!0)),nc.restart());rf(window,"focus",nd),rf(window,"blur",()=>nc.trigger()),rf(document.body,["keydown","pointerdown","pointermove","scroll"],nd),nd(),(j=m||(m={}))[j.View=-3]="View",j[j.Tab=-2]="Tab",j[j.Shared=-1]="Shared";var nf=tb(m,!1,"local variable scope"),nv=e=>nf.tryParse(e)??tR(e),np=e=>!!nf.tryParse(e?.scope),nh=tw({scope:nf},tz),ng=e=>null==e?void 0:e.source?ng(e.source):`${nv(e.scope)}\0${e.key}\0${e.targetId??""}`,nm=e=>{var t=e.split("\0");return{scope:+t[0],key:t[1],targetId:t[2]}},ny=0,nb=void 0,nw=()=>(nb??t2())+"_"+nk(),nk=()=>++ny,nE=e=>crypto.getRandomValues(e),nS=()=>tU("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nE(new Uint8Array(1))[0]&15>>e/4).toString(16)),nA=void 0,nT={id:nb,heartbeat:tn()},nI={knownTabs:{[nb]:nT},variables:new Map},[nx,nN]=th(),nO=t2,n$=e=>nA.get(ng(e)),nj=(...e)=>nC(e.map(e=>(e.timestamp=tn(),e.expires=3e3,e))),nC=e=>{var t=eI(e,e=>e&&[ng(e),e]);if(t?.length){e1(nA,t);var r=eB(t,e=>e[1].scope>m.Tab);r.length&&(e1(nI.variables,t),nO({type:"patch",payload:eD(r)})),nN("variables",eD(t),!0)}};r1((e,t)=>{r3(r=>{if(r){var n=t(sessionStorage.getItem(t1));sessionStorage.removeItem(t1),console.log(n),nb=n?.[0]??tn().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nA=new Map(ej(eB(nA,([,e])=>e.scope===m.View),eI(n?.[1],e=>[ng(e),e])))}else console.log(JSON.stringify(nI,null,2)),sessionStorage.setItem(t1,e([nb,eB(nA,([,e])=>e.scope!==m.View)]))},!0),nO=(t,r)=>{e&&(localStorage.setItem(t1,e([nb,t,r])),localStorage.removeItem(t1))},rf(window,"storage",e=>{if(e.key===t1){var n=t?.(e.newValue);if(n&&(!n[2]||n[2]===nb)){var[a,{type:i,payload:o}]=n;"query"===i?r.active||nO({type:"set",payload:nI},a):"set"===i&&r.active?(e1(nI,o),r.trigger()):"patch"===i?(e1(nI.variables,o),e1(nA,o),nN("variables",o,!1)):"tab"===i&&(e1(nI.knownTabs,a,o),o&&nN("tab",o,!1))}}});var r=to(()=>nN("ready",nI,!0),-25),n=to({callback(){var e=tn()-1e4;eP(nI?.knownTabs,([t,r])=>r[0]<e&&e5(nI.knownTabs,t)),nT.heartbeat=tn(),nO({type:"tab",payload:nT})},frequency:5e3,paused:!0}),a=e=>{nO({type:"tab",payload:e?nT:void 0}),e?(r.restart(),nO({type:"query"})):r.toggle(!1),n.toggle(e)};r3(e=>a(e),!0)},!0);var[nM,nU]=th(),[n_,nF]=th(),nP=((e,{timeout:t=1e3,encrypt:r=!0,retries:n=10}={})=>{var a=()=>(r?r0:rZ)(localStorage.getItem("rq")),i=()=>localStorage.setItem("rq",(r?rQ:rY)([nb,tn()+t]));return async(r,o,l=null!=o?1:n)=>{for(;l--;){var s=a();if((!s||s[1]<tn())&&(i(),a()?.[0]===nb)){var u=r(),c=setInterval(i,t/2);return await D(u,!0,()=>clearInterval(c))}var d=td(),[f]=rf(window,"storage",t=>{t.key!==e||t.newValue||d.resolve()});await tf(tc(o??t),d),f()}null==o&&C(e+" could not be acquired.")}})("rq"),nq=to(()=>{if(b!==(b=rx.pushCookie)){if(!b)return;y=RegExp(tx(b)+"=([^;]*)")}var e=r0?.(tI(document.cookie,y)?.[1]);tJ(e)&&nF(e)},1e3),nR=0,nD=(e=1e3)=>{var t=()=>{t=G,--nR||(nq.restart(1e3),clearTimeout(0))};return nR++||nq.restart(100),e>0&&setTimeout(t,e),t()},nz=async(e,t,{beacon:r=!1,encrypt:n=!0}={})=>{var a,i,o=!1,l=r=>{var l=ef(t)?t?.(a,r):t;return!1!==l&&(null!=l&&!0!==l&&(a=l),nU(e,a,r,e=>(o=a===B,a=e)),!o&&(i=(n?rQ:JSON.stringify)(a)))};if(!r)return await nP(()=>eq(1,async t=>{if(!l(t))return ey();var r=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(r.status>=400)return 0===t?ey(C(`Invalid response: ${await r.text()}`)):(console.warn(`Request to ${e} failed on attempt ${t+1}/3.`),await tc((1+t)*200));var o=await r.text(),s=o?.length?(n?r0:JSON.parse)?.(o):B;return console.log(JSON.stringify(s,null,2)),null!=s&&nF(s),ey(s)}));l(0)&&(nD(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||C("Beacon send failed."))},nB=["scope","key","targetId","version"],nJ=[...nB,"created","modified","classification","purposes","tags","readonly","value"],nV=[...nB,"init","purpose","refresh"];[...nJ];var nW=new Map,nG=(e,t)=>{var a=to(async()=>{var e=eI(nW,([e,t])=>({...nm(e),result:[...t]}));e.length&&await c.get(...e)},3e3),i=(e,t)=>e_(t,t=>eZ(nW,e,()=>new Set).add(t)),l=e=>{if(tL(e)){var t,r=ng(e),n=tG(e);eP(e3(nW,r),e=>{t=!1,e?.(n,n$(n),(e=!0)=>t=e),t&&i(r,e)})}};r3((e,t)=>a.toggle(e,e&&t>=3e3),!0);var s=new Map,u=(e,t)=>e1(s,e,Y(t)?t?void 0:0:t),c={get:(...r)=>tV(async()=>{var n=[],a=eI(r,(e,t)=>[e,t]),s=[],c=(await nz(e,()=>!!(a=eI(a,([e,t])=>{if(e){var r=ng(e);i(r,e.result);var a=n$(r);if(e.init&&u(r,e.cache),!e.refresh&&a?.expires<tn())tt(n,[{...a,status:o.Success},t]);else if(!np(e))return[e9(e,nV),t];else if(eu(e.init)){var l={...nh(e),status:o.Created,...e.init};null!=l.value&&(tt(s,d(l)),tt(n,[l,t]))}}})).length&&{variables:{get:eI(a,0)},deviceSessionId:t?.deviceSessionId})).variables?.get??[];return tt(n,...eI(c,(e,t)=>e&&[e,a[t][1]])),s.length&&nC(s),n.map(([e])=>(l(e),e))},eI(r,e=>e?.error)),set:(...a)=>tV(async()=>{var i=[],s=[],c=eI(a,(e,t)=>{if(e){var a=ng(e),l=n$(a);if(u(a,e.cache),np(e)){if(null!=e.patch)return C("Local patching is not supported.");var c={value:e.value,classification:r.Anonymous,purposes:n.Necessary,scope:nf(e.scope),key:e.key};return s[t]={status:l?o.Success:o.Created,source:e,current:c},void tt(i,d(c))}return tB(e)||e?.version!==void 0||(e.version=l?.version,e.force??=!!e.version),[e,t]}}),f=c.length>0?[]:_((await nz(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:t?.deviceSessionId})).variables?.set,"No result.");return i.length&&nC(i),eP(f,(e,t)=>{var[r,n]=c[t];e.source=r,l(s[n]=e)}),s},eI(a,e=>e?.error))},d=(e,t=tn())=>({...e9(e,nJ),timestamp:t,expires:t+(eZ(s,ng(e))??3e3)});return n_(({variables:e})=>{if(e){var t=tn(),r=ej(eI(e.get,e=>tG(e)),eI(e.set,e=>tG(e)));r?.length&&nC(e_(r,d,t))}}),c},nL=(e,t)=>{if(!eu(t))return[e,e];var r,n,a={},i=!1;return eu(e)&&eP(e,([e,o])=>a[e]!==t[e]&&(r=eu(o)?nL(o,t[e])?.[0]:ee(o)&&ee(n=t[e])?o-n:o)!==t[e]&&(a[e]=r,i=!0)),i?[a,e]:void 0},nH=(e,t,r=t0)=>{var n=[],a=new WeakMap,i=new Map,o=(e,t)=>e.metadata?.queued?eQ(t,{type:e.type+"_patch",patchTargetId:e.clientId}):C("Source event not queued."),l=async(r,a=!1)=>{if((r=eI(ei(r),e=>eQ(t.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eP(r,e=>{console.groupCollapsed(`tail.js: ${e.type}`),console.log(JSON.stringify(e,null,2)),console.groupEnd()}),!a){r.length&&tt(n,...r);return}n.length&&tr(r,...n.splice(0)),r.length&&(console.groupCollapsed(`tail.js: Posting ${r.length} event${r.length>1?"s":""}`),console.log(e$(r,e=>e.type,[", "," and "])),console.groupEnd(),await nz(e,{events:r.map(e=>(eQ(e,{metadata:{posted:!0}}),eQ(tq(te(e),!0),{timestamp:e.timestamp-tn()}))),deviceSessionId:t?.deviceSessionId}))};return r>0&&to(()=>l([],!0),r),r9((e,t,r)=>{if(!e&&(n.length||t||r>1500)){var a=eI(i,([e,t])=>{var[r,n]=t();return n&&i.delete(e),r});(n.length||a.length)&&l(ej(n.splice(0),a),!0)}}),{post:l,postPatch:(e,t,r)=>l(o(e,t),r),registerEventPatchSource(e,t){var r=!1,n=()=>r=!0;return a.set(e,te(e)),i.set(e,()=>{var i=a.get(e),[l,s]=t(i,n)??[];return!l||i&&M(s,i)?[void 0,r]:(a.set(e,te(s)),[o(e,l),r])}),n}}},nK=Symbol(),nX=e=>{var t=new IntersectionObserver(e=>eP(e,({target:e,isIntersecting:t,boundingClientRect:r,intersectionRatio:n})=>e[nK]?.(t,r,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(r,n)=>{if(n&&(a=eB(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==W))&&eJ(a)){var a,i,o,l,s=V,u=0,c=ti(rx.impressionThreshold),d=at();r[nK]=(t,n,f)=>{d(t=f>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),s!==(s=t)&&(s?c(()=>{++u,o||tt(e,o=eB(eI(a,e=>(e.track?.impressions||rT(r,"impressions",W,e=>e.track?.impressions))&&z({type:"impression",pos:ru(r),viewport:rp(),timeOffset:an(),impressions:u,...ap(r,W)})||null))),o?.length&&(l=eI(o,t=>e.events.registerEventPatchSource(t,e=>nL({relatedEventId:t.clientId,duration:d(),impressions:u},e))))}):(eP(l,e=>e()),c(!1)))},t.observe(r)}}},nY=()=>{var e=t4?.screen;if(!e)return{};var{width:t,height:r,orientation:n}=e,a=t<r,i=n?.angle??t4.orientation??0;return(-90===i||90===i)&&([t,r]=[r,t]),{deviceType:t<480?"mobile":t<=1024?"tablet":"desktop",screen:{dpr:t4.devicePixelRatio,width:t,height:r,landscape:a}}},nZ=e=>tt(e,z({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:eI(navigator.languages,(e,t,r=e.split("-"))=>z({id:e,language:r[0],region:r[1],primary:0===t,preference:t+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...nY()})),nQ=(e,t="A"===ri(e)&&re(e,"href"))=>t&&"#"!=t&&!t.startsWith("javascript:"),n0=(e,t=ri(e),r=rT(e,"button"))=>r!==V&&(U(t,"A","BUTTON")||"INPUT"===t&&U(rr(e,"type"),"button","submit")||r===W),n1=()=>w?.clientId,n2={scope:"shared",key:"referrer"},n4=(e,t)=>{A.variables.set({...n2,value:[n1(),e]}),t&&A.variables.get({scope:n2.scope,key:n2.key,result(r,n,a){r?a():n?.value?.[1]===e&&t()}})},n6=ta(),n5=ta(),n3=ta(),n8=1,n9=()=>n5(),[n7,ae]=th(),at=e=>{var t=ta(e,n6),r=ta(e,n5),n=ta(e,n3),a=ta(e,()=>n8);return(e,i)=>({totalTime:t(e,i),visibleTime:r(e,i),interactiveTime:n(e,i),activations:a(e,i)})},ar=at(),an=()=>ar(),[aa,ai]=th(),ao=new WeakSet,al=document.getElementsByTagName("iframe"),as=e=>(null==e||(e===W||""===e)&&(e="add"),et(e)&&U(e,"add","remove","update","clear")?{action:e}:eo(e)?e:void 0);function au(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var ac=e=>rI(e,void 0,e=>eI(ei(eZ(rh,e)?.tags))),ad=e=>e?.component||e?.content,af=e=>rI(e,t=>t!==e&&!!ad(eZ(rh,t)),e=>(E=eZ(rh,e),(E=eZ(rh,e))&&eN(ej(E.component,E.content,E),"tags"))),av=(e,t)=>t?e:{...e,rect:void 0,content:(S=e.content)&&eI(S,e=>({...e,rect:void 0}))},ap=(e,t=V)=>{var r,n,a,i=[],o=[],l=0;return t9(e,e=>{var n=eZ(rh,e);if(n){if(ad(n)){var a=eB(ei(n.component),e=>0===l||!t&&(1===l&&e.track?.secondary!==W||e.track?.promote));r=eK(a,e=>e.track?.region)&&rd(e)||void 0;var s=af(e);n.content&&tr(i,...eI(n.content,e=>({...e,rect:r,...s}))),a?.length&&(tr(o,...eI(a,e=>(l=eV(l,e.track?.secondary?1:2),av({...e,content:i,rect:r,...s},!!r)))),i=[])}var u=n.area||rA(e,"area");u&&tr(o,...eI(u))}}),i.length&&tt(o,av({id:"",rect:r,content:i})),eP(o,e=>{et(e)?tt(n??=[],e):(e.area??=e$(n,"/"),tr(a??=[],e))}),a||n?{components:a,area:e$(n,"/")}:void 0},ah=Symbol(),ag=[{id:"context",setup(e){to(()=>eP(al,e=>e4(ao,e)&&ai(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&r===(r=""+location.href)||(t=n=a?.value),t&&w&&!w.definition&&(w.definition=t,w.metadata?.posted&&e.events.postPatch(w,{definition:t}),t=void 0),o())});var t,r,n,a=n$({scope:"tab",key:"index"})?.value??0,i=n$({scope:"tab",key:"index"})?.value;null==i&&(i=n$({scope:"shared",key:"index"})?.value??0,nj({scope:m.Shared,key:"index",value:i+1}));var o=null,l=(r=V)=>{if(!rs(""+o,o=location.href)||r){var{source:n,scheme:l,host:s}=tE(location.href+"",!0);w={type:"view",timestamp:tn(),clientId:nw(),tab:nb,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:s},tabIndex:i,viewport:rp(),duration:ar(void 0,!0)},0===i&&(w.firstTab=W),0===i&&0===a&&(w.landingPage=W);var u=tS(location.href);if(eI(["source","medium","campaign","term","content"],(e,t)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&eI(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=tU(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=n$(n2)?.value;c&&rC(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...n2,value:void 0}))}var c=document.referrer||null;c&&!rC(c)&&(w.externalReferrer={href:c,domain:rv(c)}),w.definition=t,t=void 0,e.events.post(w),e.events.registerEventPatchSource(w,e=>nL({duration:an()},e)),ae(w)}};return ns(e=>n3(e)),r9(e=>{e?(n5(W),++n8):(n5(V),n3(V))}),rf(window,"popstate",()=>(k="back-forward",l())),eI(["push","replace"],e=>{var t=history[e+="State"];history[e]=(...e)=>{t.apply(history,e),k="navigate",l()}}),l(),{processCommand:t=>ab(t)&&(tt(e,t.username?{type:"login",username:t.username}:{type:"logout"}),W),decorate(e){w&&!tX(e)&&(e.view=w.clientId)}}}},{id:"components",setup(e){var t=nX(e),r=e=>null==e?void 0:{...e,component:ei(e.component),content:ei(e.content),tags:ei(e.tags)},n=({boundary:e,...n})=>{e2(rh,e,e=>r("add"in n?{...e,component:ej(e?.component,n.component),content:ej(e?.content,n.content),area:n?.area??e?.area,tags:ej(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),t(e,eZ(rh,e))};return{decorate(e){eP(e.components,e=>e3(e,"track"))},processCommand:e=>aE(e)?(n(e),W):aN(e)?(eI(((e,t)=>{if(!t)return[];var r=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!eZ(n,a))for(var i=[];null!=re(a,e);){e4(n,a);var o=tM(re(a,e),"|");re(a,e,null);for(var l=0;l<o.length;l++){var s=o[l];if(""!==s){var u="-"===s?-1:parseInt(er(s)??"",36);if(u<0){i.length+=u;continue}if(0===l&&(i.length=0),isNaN(u)&&/^["\[{]/.test(s))for(var c="";l<o.length;l++)try{s=JSON.parse(c+=o[l]);break}catch(e){}u>=0&&t[u]&&(s=t[u]),tt(i,s)}}tt(r,...eI(i,e=>({add:W,...e,boundary:a})));var d=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=d}}),r})(e.scan.attribute,e.scan.components),n),W):V}}},{id:"navigation",setup(e){var t=t=>{rf(t,["click","contextmenu","auxclick"],t=>{var r,n,a,i,o,l=null,s=V;if(t9(t.target,e=>{var t;l??=n0(e)?e:null,s=s||"NAV"===ri(e),i??=rT(e,"clicks",W,e=>e.track?.clicks)??((t=ei(rg(e)?.component))&&eK(t,e=>e.track?.clicks!==V)),o??=rT(e,"region",W,e=>e.track?.region)??((t=rg(e)?.component)&&eK(t,e=>e.track?.region))}),l){var u,c=ap(l),d=ac(l);i??=!s;var f={...(o??=W)?{pos:ru(l,t),viewport:rp()}:null,...(r=t.target,n=l,t9(r??n,e=>"IMG"===ri(e)||e===n?(a={element:{tagName:e.tagName,text:re(e,"title")||re(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},V):W),a),...c,...d,timing:an()};if(nQ(l)){var v=l.hostname!==location.hostname,{host:p,scheme:h,source:g}=tE(l.href,!1);if(l.host===location.host&&l.pathname===location.pathname&&l.search===location.search){if("#"===l.hash)return;l.hash!==location.hash&&tt(e,z({type:"anchor_navigation",anchor:l.hash,...f}));return}var m=z({clientId:nw(),type:"navigation",href:v?l.href:g,external:v,domain:{host:p,scheme:h},self:W,anchor:l.hash,...f});t.button<=1&&(1===t.button||t.ctrlKey||t.shiftKey||t.altKey||re(l,"target")!==window.name?(n4(m.clientId),m.self=V,tt(e,m)):rs(location.href,l.href)||(m.exit=m.external,n4(m.clientId)));return}var y=(t9(t.target,(e,t)=>!!(u??=as(rg(e)?.cart??rA(e,"cart")))&&!u.item&&(u.item=eH(rg(e)?.content))&&t(u)),au(u));(y||i)&&tt(e,y?z({type:"cart_updated",...f,...y}):z({type:"component_click",...f}))}})};t(document),aa(e=>e.contentDocument&&t(e.contentDocument))}},{id:"scroll",setup(e){var t={},r=rl(W);n7(()=>tu(()=>(t={},r=rl(W)),250)),rf(window,"scroll",()=>{var n=rl(),a=ro();if(n.y>=r.y){var i=[];!t.fold&&n.y>=r.y+200&&(t.fold=W,tt(i,"fold")),!t["page-middle"]&&a.y>=.5&&(t["page-middle"]=W,tt(i,"page-middle")),!t["page-end"]&&a.y>=.99&&(t["page-end"]=W,tt(i,"page-end"));var o=eI(i,e=>z({type:"scroll",scrollType:e,offset:a}));o.length&&tt(e,o)}})}},{id:"cart",setup:e=>({processCommand(t){if(ay(t)){var r=t.cart;return"clear"===r?tt(e,{type:"cart_updated",action:"clear"}):(r=au(r))&&tt(e,{...r,type:"cart_updated"}),W}return ax(t)?(tt(e,{type:"order",...t.order}),W):V}})},{id:"forms",setup(e){var t=new Map,r=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var l=rt(i,rm("ref"))||"track_ref",s=()=>i.isConnected&&rd(i).width,u=eZ(t,i,()=>{var t,r=new Map,n={type:"form",name:rt(i,rm("form-name"))||re(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,e=>nL(n,e));var l=()=>{o(),t[3]>=2&&(n.completed=3===t[3]||!s()),e.events.postPatch(n,{...a,totalTime:tn(W)-t[4]}),t[3]=1},u=ti();return rf(i,"submit",()=>{a=ap(i),t[3]=3,u(()=>{i.isConnected&&rd(i).width>0?(t[3]=2,u()):l()},750)}),t=[n,r,i,0,tn(W),1]});return eZ(u[1],n)||eI(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,t)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===l||rT(e,"ref"))&&(e.value||(e.value=nS()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:tU(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[ah]:r(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[t,r]=n(e)??[],a=r?.[1].get(t))=>a&&[r[0],a,t,r],i=null,o=()=>{if(i){var[e,t,n,a]=i,o=-(l-(l=n9())),u=-(s-(s=tn(W))),c=t[ah];(t[ah]=r(n))!==c&&(t.fillOrder??=a[5]++,t.filled&&(t.corrections=(t.corrections??0)+1),t.filled=W,a[3]=2,eP(e.fields,([e,r])=>r.lastField=e===t.name||void 0)),t.activeTime+=o,t.totalTime+=u,e.activeTime+=o,i=null}},l=0,s=0,u=e=>{e&&rf(e,["focusin","focusout","change"],(e,t,r=e.target&&a(e.target))=>{r&&(i=r,"focusin"===e.type?(s=tn(W),l=n9()):o())})};u(document),aa(e=>e.contentDocument&&u)}}],am=(...e)=>t=>t===e[0]||e.some(e=>"string"==typeof e&&t?.[e]!==void 0),ay=am("cart"),ab=am("username"),aw=am("tagAttributes"),ak=am("disable"),aE=am("boundary"),aS=am("extension"),aA=am(W,"flush"),aT=am("get"),aI=am("listener"),ax=am("order"),aN=am("scan"),aO=am("set"),a$=e=>"function"==typeof e,aj=e=>{if(A)return A;et(e)&&(e=rZ(e)),e1(rx,e),r4(e3(rx,"clientKey"));var t=e3(rx,"apiKey"),r=t4[rx.name]??[];if(!en(r)){C(`The global variable for the tracker "${rx.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...t)=>{var r=W;a=eB(a,n=>F(()=>(n[e]?.(...t,{tracker:A,unsubscribe:()=>r=V}),r),r6(n)))},o=[],l={applyEventExtensions(e){e.clientId??=nw(),e.timestamp??=tn(),f=W;var t=V;return eI(n,([,r])=>{(t||r.decorate?.(e)===V)&&(t=W)}),t?void 0:e}},s=nG(rU,l),u=nH(rU,l),c=null,d=0,f=V,v=V;return e8(t4,[{[rx.name]:[A=Object.freeze({id:"tracker_"+nw(),events:u,variables:s,push(...e){if(!c&&t){if(e[0]!==t)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var r=V;if((e=eB(eN(e,e=>et(e)?rZ(e):e),e=>{if(!e)return V;if(aw(e))rx.tags=e1({},rx.tags,e.tagAttributes);else if(ak(e))return rx.disabled=e.disable,V;else if(aA(e))return r=W,V;else if(a$(e))return e(A),V;return v||aI(e)||aS(e)?W:(o.push(e),V)})).length||r){var l=eX(e,e=>aS(e)?-100:aI(e)?-50:aO(e)?-10:tK(e)?90:0);if(!(c&&c.splice(f?d+1:c.length,0,...l))){for(d=0,c=l;d<c.length;d++)c[d]&&F(()=>{var e,t=c[d];if(i("command",t),f=V,tK(t))u.post(t,!1);else if(aT(t))s.get(...ei(t.get));else if(aO(t))s.set(...ei(t.set));else if(aI(t))tt(a,t.listener);else if(aS(t))(e=F(()=>t.extension.setup(A),e=>r5(t.extension.id,e)))&&(tt(n,[t.priority??100,e]),eX(n,([e])=>e));else if(a$(t))t(A);else{var r=V;for(var[,e]of n)if(r=e.processCommand?.(t)??V)break;r||r5("invalid-command",t)}},e=>r5(A,"internal-error",e));c=null,r&&u.post([],!0)}}}},__isTracker:W})]}]),nx(async(e,t,n,a)=>{if("ready"===e){var i=_(await s.get({scope:"session",key:"info",cache:J}).value,"No session data.");l.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(nZ(A),i.hasUserAgent=!0),v=!0,o.length&&tt(A,o),a(),tt(A,...eI(ag,e=>({extension:e})),...r,{set:{scope:"local",key:"loaded",value:!0}})}},!0),A};t4[".tail.js.init"]=e=>{e(aj)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
