(()=>{"use strict";var e=void 0,r=(r,t=!0,n)=>{try{return r()}catch(r){if(!i(t))return t?.(r);if(t)throw r;return console.error(r),e}finally{n?.()}},t=r=>r===e,n=r=>r!==e,a=e=>null!=e,i=e=>"boolean"==typeof e,o=e=>!!e,f=e=>"number"==typeof e,l=e=>"string"==typeof e,s=Array.isArray,u=e=>s(e),c=(e,r=!1)=>null==e?[]:!r&&u(e)?e:h(e,!0)?[...e]:[e],d=(e,r=!1)=>e&&"object"==typeof e&&(r||!h(e)),v=(e,r)=>"function"==typeof e?.[r],g=e=>"symbol"==typeof e,y=e=>"function"==typeof e,h=(e,r=!1)=>!!e?.[Symbol.iterator]&&(r||!l(e)),w=(e,r=0,t)=>r||n(t)?e.slice?e.slice(r,t):0>r||0>t?w([...e],r,t):function*(){for(var n of(t??=Number.MAX_SAFE_INTEGER,e))if(!r--){if(!t--)break;yield n}}():e;function*b(e,r=(e=>e),t){var a,i=0,o=0,f={prev:void 0,source:e,skip:()=>o=1,end:e=>(o=n(e)?2:3,e)};for(var l of e){if(void 0===(a=r(l,i++,f))||o%2||(t?t(a):yield a,f.prev=l),o>1)break;o=0}}var p=(e,r,t)=>h(e,!0)?r||t?w(p(e),r,t):e:n(e)?d(e)?p(Object.entries(e),r,t):y(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(n(r)&&(yield r);t--&&n(r=e(r));)yield r}(e,r,t):function*(e=0,r=0){for(;e--;)yield r++}(e,r):[],m=(e,r,...t)=>(!y(r)&&a(r)&&(t.unshift(r),r=null),e=p(e,...t),r?3>r.length&&v(e,"map")?e.map(r).filter(n):[...b(e,r)]:c(e,!0)),A=(e,r,...t)=>{var a,i=void 0;if(e=p(e,...t),3>r.length&&v(e,"forEach"))e.forEach(((e,t)=>n(a=r(e,t))&&(i=a)));else for(var o of b(e,r,(e=>i=e)));return i},E=(e,r,t,...n)=>A(e,((e,n,a)=>t=r(t,e,n,a)??t),...n)??t,I=(e,r=o,t,...n)=>t?c(r(e,r,!1,...n)):((e,r)=>u(e)?e.filter(r):function*(){var t=0;for(var n of e)r(n,t++)&&(yield n)}())(p(e,...n),r),S=(e,r,t)=>{var a=v(e,"get")?e.get(r):v(e,"has")?e.has(r):e[r];return!n(a)&&n(t)&&n(a=y(t)?t():t)&&k(e,r,a),a},k=(!0,(e,...r)=>{var a,[i,o]=r,f=([r,n])=>t(n)?U(e,r):((a||S(e,r)!==n)&&(v(e,"set")?e.set(r,n):v(e,"add")?n?e.add(r):e.delete(r):e[r]=n),n);return(a=1===r.length)?(u(i)&&i.every((e=>d(e)))&&(i=Object.assign({},...i)),d(i)?(Object.assign(e,i),Object.entries(i).forEach((([r,t])=>!n(t)&&delete e[r])),e):(d(i)?A(i,f):A(i,(e=>d(e)?A(e,f):f(e))),e)):f([i,o])}),U=(e,r,...t)=>{if(t.length)return t.map((r=>U(e,r)));var n=S(e,r);return v(e,"delete")?e.delete(r):u(e)?e.splice(r,1):delete e[r],n},T=()=>"undefined"!=typeof performance?Math.trunc(performance.timeOrigin+performance.now()):Date.now(),N=(r,t)=>{var{frequency:n,queue:a=!0,paused:o=!1,trigger:l=!1,once:s=!1}=f(t)?{frequency:t}:t,u=0,c=x().resolve(),d=async t=>{if(!u||!a&&!c.resolved&&!0!==t)return!1;g.busy=!0,!0!==t&&await c,c.reset();var o=0>n||s;return await(async(r,t=!0,n,a=1)=>{for(;a--;)try{return await r()}catch(e){if(i(t)){if(t&&!a)throw e;console.error(e)}else await t(e,!a)}finally{n?.()}return e})((()=>r((()=>o=!0))),!1,(()=>c.resolve())),o&&v(!1),g.busy=!1,!0},v=e=>(clearInterval(u),g.active=!!(u=e?setInterval(d,0>n?-n:n):0),g),g={active:!1,busy:!1,restart:(e,t)=>(n=e??n,r=t??r,v(!0)),toggle:(e,r)=>e!==g.active?e?r?(v(!0),g.trigger(),g):v(!0):v(!1):g,trigger:async e=>await d(e)&&(v(g.active),!0)};return g.toggle(!o,l)},x=e=>{var r,t,a,i={resolved:void 0,reset:()=>(i.resolved=void 0,a=new Promise(((e,a)=>(r=r=>{i.resolved=!n(r)||r,e(r)},t=a))),i),resolve:e=>(r(e),i),reject:e=>(t(e),i),signal:e=>(r(e),i.reset()),then:(...e)=>a.then(...e),wait:e=>Promise.race([F(e),a])};return i.reset(),e?i.resolve(e):i},F=(e=0,r)=>new Promise((t=>e?setTimeout((()=>t(r)),e):t(r))),O=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},M=(...e)=>(e=I(e),[()=>E(e,((e,r)=>r[0]()||e),!1),()=>E(e,((e,r)=>r[1]()||e),!1)]),C=()=>{var e,r=new Set;return[(t,n)=>{var a=O(t,(e=>r.add(e)),(e=>r.delete(e)));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach((e=>e(...t))))]},j=T().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),q=(e,r,t,n={capture:!0,passive:!0})=>u(r)?M(...m(r,(r=>q(e,r,t,n)))):O(t,(t=>e.addEventListener(r,t,n)),(t=>e.addEventListener(r,t,n))),[z,D]=C(),R=!0;q(window,"pagehide",(()=>R&&D(R=!1))),q(window,"pageshow",(()=>!R&&D(R=!0))),q(document,"visibilitychange",(()=>"visible"===document.visibilityState&&!R&&D(R=!0))),D(R);var _=!1,J=((e=!0)=>{var r=e?T():void 0,t=0;return e=>(n(r)&&(t+=T()-r),n(e)&&(r=e?Date.now():void 0),t)})(!1),[V,B]=C(),G=N((()=>_&&B(_=!1,J(!1))),{frequency:2e4,once:!0,paused:!0}),P=()=>!_&&(B(_=!0,J(!0)),G.restart());q(window,"focus",P),q(window,"blur",(()=>G.trigger())),q(document.body,"keydown",P),q(document.body,"pointermove",P),q(window,"scroll",P),P();var $=[],X=[],L=(e,r=0)=>e.charCodeAt(r);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach(((e,r)=>$[X[r]=e.charCodeAt(0)]=r));var H,K={32:[0x811c9dc5n,0x01000193n],64:[0xcbf29ce484222325n,0x100000001b3n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},Q=(e=256)=>e*Math.random()|0,W={exports:{}};H=W,(()=>{function e(e,r){if(r&&r.multiple&&!Array.isArray(e))throw new Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=4294967296,i=new Uint8Array(128),o=0;if(r&&r.multiple)for(var f=0;f<e.length;f++)l(e[f]);else l(e);return i.subarray(0,o);function l(e,i){switch(typeof e){case"undefined":s();break;case"boolean":(e=>{c(e?195:194)})(e);break;case"number":(e=>{if(isFinite(e)&&Math.floor(e)===e)if(0>e||e>127)if(0>e&&e>=-32)c(e);else if(e>0&&255>=e)d([204,e]);else if(-128>e||e>127)if(e>0&&65535>=e)d([205,e>>>8,e]);else if(-32768>e||e>32767)if(e>0&&4294967295>=e)d([206,e>>>24,e>>>16,e>>>8,e]);else if(-2147483648>e||e>2147483647)if(e>0&&0x10000000000000000>=e){var r=e/a,i=e%a;d([211,r>>>24,r>>>16,r>>>8,r,i>>>24,i>>>16,i>>>8,i])}else-0x8000000000000000>e||e>0x8000000000000000?d(0>e?[211,128,0,0,0,0,0,0,0]:[207,255,255,255,255,255,255,255,255]):(c(211),v(e));else d([210,e>>>24,e>>>16,e>>>8,e]);else d([209,e>>>8,e]);else d([208,e]);else c(e);else n||(t=new ArrayBuffer(8),n=new DataView(t)),n.setFloat64(0,e),c(203),d(new Uint8Array(t))})(e);break;case"string":(e=>{var r=(e=>{for(var r=!0,t=e.length,n=0;t>n;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var f=e.charCodeAt(o);if(128>f)i[a++]=f;else{if(2048>f)i[a++]=f>>6|192;else{if(f>55295&&56320>f){if(++o>=t)throw new Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(56320>l||l>57343)throw new Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");f=65536+((1023&f)<<10)+(1023&l),i[a++]=f>>18|240,i[a++]=f>>12&63|128}else i[a++]=f>>12|224;i[a++]=f>>6&63|128}i[a++]=63&f|128}}return r?i:i.subarray(0,a)})(e),t=r.length;t>31?d(t>255?t>65535?[219,t>>>24,t>>>16,t>>>8,t]:[218,t>>>8,t]:[217,t]):c(160+t),d(r)})(e);break;case"object":null===e?s():e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&4294967296>r)d([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&17179869184>r)d([215,255,(t=1e6*e.getMilliseconds())>>>22,t>>>14,t>>>6,t<<2>>>0|r/a,r>>>24,r>>>16,r>>>8,r]);else{var t;d([199,12,255,(t=1e6*e.getMilliseconds())>>>24,t>>>16,t>>>8,t]),v(r)}})(e):Array.isArray(e)?u(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?(e=>{var r=e.length;d(r>15?r>65535?[198,r>>>24,r>>>16,r>>>8,r]:[197,r>>>8,r]:[196,r]),d(e)})(e):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?u(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r>15?d(r>65535?[223,r>>>24,r>>>16,r>>>8,r]:[222,r>>>8,r]):c(128+r),e){var n=e[t];void 0!==n&&(l(t),l(n))}})(e);break;default:if(i||!r||!r.invalidTypeReplacement)throw new Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.");"function"==typeof r.invalidTypeReplacement?l(r.invalidTypeReplacement(e),!0):l(r.invalidTypeReplacement,!0)}}function s(e){c(192)}function u(e){var r=e.length;r>15?d(r>65535?[221,r>>>24,r>>>16,r>>>8,r]:[220,r>>>8,r]):c(144+r);for(var t=0;r>t;t++)l(e[t])}function c(e){if(i.length<o+1){for(var r=2*i.length;o+1>r;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i[o]=e,o++}function d(e){if(i.length<o+e.length){for(var r=2*i.length;r<o+e.length;)r*=2;var t=new Uint8Array(r);t.set(i),i=t}i.set(e,o),o+=e.length}function v(e){var r,t;0>e?(e++,r=~(r=Math.abs(e)/a),t=~(t=Math.abs(e)%a)):(r=e/a,t=e%a),d([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function r(e,r){var t,n=4294967296,a=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw new Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];a<e.length;)t.push(i());else t=i();return t;function i(){var r=e[a++];if(r>=0&&127>=r)return r;if(r>=128&&143>=r)return u(r-128);if(r>=144&&159>=r)return c(r-144);if(r>=160&&191>=r)return d(r-160);if(192===r)return null;if(193===r)throw new Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return s(-1,1);if(197===r)return s(-1,2);if(198===r)return s(-1,4);if(199===r)return v(-1,1);if(200===r)return v(-1,2);if(201===r)return v(-1,4);if(202===r)return l(4);if(203===r)return l(8);if(204===r)return f(1);if(205===r)return f(2);if(206===r)return f(4);if(207===r)return f(8);if(208===r)return o(1);if(209===r)return o(2);if(210===r)return o(4);if(211===r)return o(8);if(212===r)return v(1);if(213===r)return v(2);if(214===r)return v(4);if(215===r)return v(8);if(216===r)return v(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&255>=r)return r-256;throw console.debug("msgpack array:",e),new Error("Invalid byte value '"+r+"' at index "+(a-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function o(r){for(var t=0,n=!0;r-- >0;)if(n){var i=e[a++];t+=127&i,128&i&&(t-=128),n=!1}else t*=256,t+=e[a++];return t}function f(r){for(var t=0;r-- >0;)t*=256,t+=e[a++];return t}function l(r){var t=new DataView(e.buffer,a+e.byteOffset,r);return a+=r,4===r?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function s(r,t){0>r&&(r=f(t));var n=e.subarray(a,a+r);return a+=r,n}function u(e,r){0>e&&(e=f(r));for(var t={};e-- >0;)t[i()]=i();return t}function c(e,r){0>e&&(e=f(r));for(var t=[];e-- >0;)t.push(i());return t}function d(r,t){0>r&&(r=f(t));var n=a;return a+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127)if(i>191&&224>i){if(n>=t)throw new Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&240>i){if(n+1>=t)throw new Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else{if(239>=i||i>=248)throw new Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1));if(n+2>=t)throw new Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}if(i>65535){if(i>1114111)throw new Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach");i-=65536,a+=String.fromCharCode(i>>10|55296),a+=String.fromCharCode(1023&i|56320)}else a+=String.fromCharCode(i)}return a})(e,n,r)}function v(e,r){0>e&&(e=f(r));var t=f(1),i=s(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2);return r=(3&e[3])*n+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7],new Date(1e3*r+t/1e6)}if(12===e.length)return t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3],a-=8,r=o(8),new Date(1e3*r+t/1e6);throw new Error("Invalid data length for a date value.")})(i):{type:t,data:i}}}var t={serialize:e,deserialize:r,encode:e,decode:r};H?H.exports=t:window[window.msgpackJsName||"msgpack"]=t})();var Y=W.exports,Z="$ref",ee=new ArrayBuffer(8),re=new DataView(ee),te=e=>{var r,a,i,o=(e,r,t=e[r],n=l(t))=>((t!==n||g(r))&&(e[r]=n,f((()=>e[r]=t))),t),f=e=>(r??=[]).push(e),l=e=>null==e||y(e)||g(e)?null:Number.isFinite(e)&&!Number.isSafeInteger(e)?(re.setFloat64(0,e,!0),{"":[...new Uint32Array(ee)]}):d(e,!0)?e.toJSON&&e!==(e=e.toJSON())?l(e):n(i=(a??=new Map).get(e))?(e[Z]||(e[Z]=i,f((()=>delete e[Z]))),{[Z]:i}):(d(e)?(a.set(e,a.size+1),Object.keys(e).forEach((r=>(t(o(e,r))||g(r))&&delete e[r]))):h(e)&&(!u(e)||Object.keys(e).length<e.length?[...e]:e).forEach(((r,t)=>t in e?o(e,t):(e[t]=null,f((()=>delete e[t]))))),e):e,s=Y.serialize(l(e));return r?.forEach((e=>e())),s},ne=(e,t=!1)=>{var[n,o,s]=((e="")=>{var r,t,n,o,f,l=0n,s=0,u=0n,c=[],d=0,v=0,g=0,y=0,h=[];for(g=0;g<e.length;y+=h[g]=e.charCodeAt(g++));var w=e?()=>{c=[...h],v=255&(d=y),g=-1}:()=>{},b=e=>(v=255&(d+=-c[g=(g+1)%c.length]+(c[g]=e)),e);return[e?e=>{for(w(),r=e.length,o=16-(r+4)%16,f=new Uint8Array(4+r+o),n=0;3>n;f[n++]=b(Q()));for(f[n++]=b(v^16*Q(16)+o),t=0;r>t;f[n++]=b(v^e[t++]));for(;o--;)f[n++]=Q();return f}:e=>e,e?e=>{for(w(),t=0;3>t;b(e[t++]));if(0>=(r=e.length-4-((v^b(e[t++]))%16||16)))return new Uint8Array(0);for(f=new Uint8Array(r),n=0;r>n;f[n++]=v^b(e[t++]));return f}:e=>e,(e,r=64)=>{if(!a(e))return null;for(s=i(r)?64:r,w(),[l,u]=K[s],t=0;t<e.length;l=BigInt.asUintN(s,(l^BigInt(v^b(e[t++])))*u));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+l%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):l.toString(36)}]})(e??""),c=(e,r)=>f(e)&&!0===r?e:(e=l(e)?new Uint8Array(m(e.length,(r=>255&e.charCodeAt(r)))):t?JSON.stringify(e):te(e),s(e,r));return t?[e=>JSON.stringify(e),e=>null==e?void 0:r((()=>JSON.parse(e,void 0))),(e,r)=>c(e,r)]:[e=>(e=>{for(var r,t,n=0,a=e.length,i=[];a>n;)r=e[n++]<<16|e[n++]<<8|e[n++],i.push(X[(16515072&r)>>18],X[(258048&r)>>12],X[(4032&r)>>6],X[63&r]);return i.length+=a-n,t=i,String.fromCharCode(...t)})(n(te(e))),e=>{return a(e)?(t=o((e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=$[L(e,t++)]<<2|(r=$[L(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=$[L(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|$[L(e,t++)]));return i})(e)),f=e=>d(e,!0)?u(e[""])&&2===(e=e[""]).length?new DataView(new Uint32Array(e).buffer).getFloat64(0,!0):e[Z]&&(i=(n??=[])[e[Z]])?i:(e[Z]&&(n[e[Z]]=e,delete e[Z]),Object.entries(e).forEach((([r,t])=>t!==(t=f(t))&&(e[r]=t))),e):e,a(t)?r((()=>f(Y.deserialize(t))),(()=>{})):void 0):null;var t,n,i,f},(e,r)=>c(e,r)]};ne();var[ae,ie]=ne("foo",!0),oe=e=>{if(!l(e))return[e];var[,r,t]=e.match(/(.*?)(?:@:([0-9a-z]+))?$/);return[r,n(t)?parseInt(t,36):void 0]},fe=(e,r)=>{var[t,n]=oe(r);if(!n||n-T()>=0)return t;U(localStorage,e)},le=(e=>{var[r,n]=C(),a=r=>e.getItem(r)?.[0],i=(r,i,o)=>{var f=a(r);return t(i)?(e.removeItem(r),n(void 0,{key:r,oldValue:f,source:j,self:!0})):(e.setItem(r,i,j,o),n(i,{key:r,oldValue:f,source:j,self:!0})),o>0||e.removeItem(r),i},o=0,f=(r,t,n)=>{o++>3&&de(`Race condition ('${r}').`,!0);var a=i(r,t(e.getItem(r)?.[0]),n),l=e.getItem(r);return l?.[1]&&l?.[1]!==j?f(r,t,n):(o=0,a)};return{get:a,set:i,delete:e=>i(e,void 0),update:f,observe:e.observe?(t,n,a)=>{var[i,o]=M(e.observe(t,((e,r,t)=>n(e?.[0],{key:t,oldValue:r?.[0],source:e?.[1]},i))),a?r(((e,r,a)=>r.key===t&&n(e,r,a))):void 0);return[i,o]}:void 0}})({getItem:e=>ie(fe(e,localStorage.getItem(e))),setItem:(e,r,t,n)=>localStorage.setItem(e,ae([r,t])+(n>0?`@:${(T()+n).toString(36)}`:"")),removeItem:e=>localStorage.removeItem(e),observe(e,r){var[t,n]=q(window,"storage",(({key:t,newValue:n,oldValue:a})=>e==t&&r(ie(oe(n)[0]),ie(oe(a)[0]),e)));return M([t,n],z((e=>e?n():t())))}}),se=N((()=>{A(localStorage,(([e,r])=>!fe(e,r)))}),{frequency:2e3,trigger:!0});z((e=>se.toggle(e)));var ue,ce=(e,r,t=!1,a=le)=>{var i=((e,r,t=le)=>({get(){return t.get(e)},set(n,a){return t.set(e,n,a??r)},delete(){return t.delete(e)},update(n,a){return t.update(e,n,a??r)},observe:t.observe?(r,n)=>t.observe(e,r,n):void 0}))(e,0,a);return{post:(e,r)=>i.set([j,e,r]),unsubscribe:i.observe((e=>n(e)&&(!e[2]||e[2]===j)&&r(e[0],e[1],n(e[2]))),t)[0]}},de=(e,r,t=!1)=>{if("boolean"==typeof r&&(t=r,r=null),ve(r?e:null,r??e),t)throw new Error(e)},ve=(e,r)=>{var t=e;return r&&(r=JSON.stringify(r=d(r)?{message:r.message??r,stack:r.stack}:r)),e=JSON.stringify(e),(ue??=ce("chat",((e,r)=>console[r[1]?"error":"log"](e===j?"This tab":`Other tab (${e})`,...m(I(r),(e=>JSON.parse(e))))),!0)).post([e,r]),t},ge={id:j,hearbeat:T()},ye={knownTabs:{[j]:ge},variables:{}},he=N((()=>pe("ready",{state:ye})),-25),we=ce("state",((e,{type:r,data:t})=>{"query"===r?!he.active&&we.post({type:"set",data:ye},e):"set"===r&&he.active?(k(ye,t),he.trigger()):"patch"===r?(k(ye,t),pe("update",{state:ye,variables:t})):"tab"===r&&(k(ye.knownTabs,e,t),pe("update",{state:ye,tab:t}))})),[be,pe]=C(),me=N((()=>{var e=T()-1e4;A(ye?.knownTabs,(([r,t])=>t[0]<e&&U(ye.knownTabs,r))),ge.hearbeat=T(),we.post({type:"tab",data:ge})}),5e3);z((e=>{return r=e,we.post({type:"tab",data:r?ge:void 0}),r?(he.restart(),we.post({type:"query"})):he.toggle(!1),void me.toggle(r);var r}),!0);var Ae=N((()=>{}),5e3);q(document,"visibilitychange",(()=>"hidden"===document.visibilityState&&Ae.trigger()));var Ee=async()=>{V((e=>{}),!0),be(((e,r)=>{ve(r.tab)})),q(document.body,"click",(()=>{}))};window[".tail.js.init"]=e=>{e(Ee)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
