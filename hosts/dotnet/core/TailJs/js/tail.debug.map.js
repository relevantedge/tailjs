(()=>{"use strict";var a=async()=>{var[a,o]=(()=>{var a,o,i,e=(a,o)=>(i=a?.[2],a?a[1][0](...o,((...a)=>e(i,a.length?a:o)),a[1][2][0]):void 0);return[(e,n=(o?.[1][1]??0)+1e-6)=>{var r=t=>{var s=!0;if(t??=[void 0,[e,n,[()=>!(!s||(t[0]?t[0][2]=t[2]:a=t[2],t[2]?t[2][0]=t[0]:o=t[0],t[0]=t[2]=void 0,s=!1)),()=>!s&&(r(t),s=!0)]],void 0],i=a)if(n<o[1][1]){for(;i[1][1]<=n;)i=i[2];(t[0]=(t[2]=i)[0])?t[0][2]=t:a=t,i[0]=t}else t[0]=o,o=o[2]=t;else a=o=t;return t[1][2]};return r()},(...o)=>e(a,o)]})(),[i]=a((async a=>await a()+1));a((async a=>12));var[e,n]=a((async a=>await a()+4),-1);console.log(await o()),e(),console.log(await o()),n(),console.log(await o()),i(),console.log(await o())};window[".tail.js.init"]=o=>{o(a)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFpbC5kZWJ1Zy5tYXAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25wbS9jb25zdGFudHMvY29uc3RhbnRzLnRzIiwiLi4vLi4vLi4vLi4vLi4vbnBtL3BhY2thZ2VzL0B0YWlsanMvY2xpZW50L3NyYy9wdXNoZXIudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy91dGlsL3NyYy9ldmVudHMudHMiLCIuLi8uLi8uLi8uLi8uLi9ucG0vcGFja2FnZXMvQHRhaWxqcy9jbGllbnQvc3JjL2luZGV4LmJyb3dzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTVVTVCBNQVRDSCBwYWNrYWdlc1xcQHRhaWxqc1xcZW5naW5lXFxzcmNcXFJlcXVlc3RIYW5kbGVyLnRzXG5leHBvcnQgY29uc3QgTVVURVhfUkVRVUVTVF9DT09LSUUgPSBcIi50YWlsLnJxXCI7XG5leHBvcnQgY29uc3QgTVVURVhfUkVTUE9OU0VfQ09PS0lFID0gXCIudGFpbC5yc1wiO1xuZXhwb3J0IGNvbnN0IENPTlRFWFRfTUVOVV9DT09LSUUgPSBcIi50YWlsLmNtXCI7XG5cbmV4cG9ydCBjb25zdCBRVUVSWV9ERVZJQ0UgPSBcInFkXCI7XG5leHBvcnQgY29uc3QgSU5JVElBTElaRV9UUkFDS0VSX0ZVTkNUSU9OID0gXCIudGFpbC5qcy5pbml0XCI7XG5cbmV4cG9ydCBjb25zdCBFVkVOVF9IVUJfUVVFUlkgPSBcInZhclwiO1xuZXhwb3J0IGNvbnN0IFZBUklBQkxFU19RVUVSWSA9IFwidXNyXCI7XG5leHBvcnQgY29uc3QgQ09OVEVYVF9NRU5VX1FVRVJZID0gXCJtbnRcIjtcbiIsImltcG9ydCB7IGNyZWF0ZUNoYWluZWRFdmVudCB9IGZyb20gXCJAdGFpbGpzL3V0aWxcIjtcclxuXHJcbi8vY29uc3QgbGNrID0gY3JlYXRlTG9jayhcInRlc3RcIik7XHJcbmV4cG9ydCBjb25zdCBhdHRhY2ggPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgW3JlZ2lzdGVyLCBpbnZva2VdID0gY3JlYXRlQ2hhaW5lZEV2ZW50PFByb21pc2U8bnVtYmVyPj4oKTtcclxuXHJcbiAgY29uc3QgW3VuYmluZDJdID0gcmVnaXN0ZXIoYXN5bmMgKG5leHQpID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coXCJCYXNzb1wiKTtcclxuICAgIHJldHVybiAoYXdhaXQgbmV4dCgpKSArIDE7XHJcbiAgfSk7XHJcblxyXG4gIHJlZ2lzdGVyKGFzeW5jIChuZXh0KSA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKFwiQmFzc28yXCIpO1xyXG4gICAgcmV0dXJuIDEyO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBbdW5iaW5kLCBiaW5kXSA9IHJlZ2lzdGVyKGFzeW5jIChuZXh0KSA9PiB7XHJcbiAgICByZXR1cm4gKGF3YWl0IG5leHQoKSkgKyA0O1xyXG4gIH0sIC0xKTtcclxuXHJcbiAgY29uc29sZS5sb2coYXdhaXQgaW52b2tlKCkpO1xyXG4gIHVuYmluZCgpO1xyXG4gIGNvbnNvbGUubG9nKGF3YWl0IGludm9rZSgpKTtcclxuICBiaW5kKCk7XHJcbiAgY29uc29sZS5sb2coYXdhaXQgaW52b2tlKCkpO1xyXG4gIHVuYmluZDIoKTtcclxuICBjb25zb2xlLmxvZyhhd2FpdCBpbnZva2UoKSk7XHJcblxyXG4gIC8vIGxldCBpbnZvY2F0aW9ucyA9IDA7XHJcbiAgLy8gbGV0IGNsaWNrZWQgPSBmYWxzZTtcclxuICAvLyBjb25zdCBwdW1wID0gY2xvY2soXHJcbiAgLy8gICBhc3luYyAoKSA9PiB7XHJcbiAgLy8gICAgIGNvbnN0IGNhcHR1cmVkQ2xpY2sgPSBjbGlja2VkO1xyXG4gIC8vICAgICBpZiAoIWNsaWNrZWQgJiYgaW52b2NhdGlvbnMgJSAyID09PSAxKSB7XHJcbiAgLy8gICAgICAgYXdhaXQgd2FpdCgxNTAwKTtcclxuICAvLyAgICAgfVxyXG4gIC8vICAgICBjb25zb2xlLmxvZyhgJHsrK2ludm9jYXRpb25zfSwgY2xpY2tlZDogJHtjYXB0dXJlZENsaWNrfS5gKTtcclxuICAvLyAgIH0sXHJcbiAgLy8gICB7IGZyZXF1ZW5jeTogMTAwMCwgcXVldWU6IGZhbHNlIH1cclxuICAvLyApO1xyXG5cclxuICAvLyBsZXQgdGVzdElkID0gMTtcclxuICAvLyBsaXN0ZW4oZG9jdW1lbnQuYm9keSwgXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xyXG4gIC8vICAgLy8gY2xpY2tlZCA9IHRydWU7XHJcbiAgLy8gICAvLyBjb25zb2xlLmxvZyhwdW1wLmFjdGl2ZSwgcHVtcC5idXN5KTtcclxuICAvLyAgIC8vIGUuc2hpZnRLZXkgJiYgcHVtcC50b2dnbGUoIXB1bXAuYWN0aXZlKTtcclxuICAvLyAgIC8vIGNvbnNvbGUubG9nKGF3YWl0IHB1bXAudHJpZ2dlcih0cnVlKSk7XHJcbiAgLy8gICAvLyAoYXN5bmMgKCkgPT4ge1xyXG4gIC8vICAgLy8gICBjbGlja2VkID0gZmFsc2U7XHJcbiAgLy8gICAvLyB9KSgpO1xyXG4gIC8vICAgcG9zdChbYFRlc3QgJHt0ZXN0SWQrK31gXSk7XHJcbiAgLy8gfSk7XHJcbiAgLy8gbGlzdGVuKGRvY3VtZW50LmJvZHksIFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIC8vICAgdXBkYXRlVGFiU3RhdGUoKHRhYikgPT4gKHRhYi5uYXZpZ2F0ZWQgPSBub3coKSkpO1xyXG5cclxuICAvLyAgIGxjayhhc3luYyAoKSA9PiB7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKFwiTG9jayBhY3F1aXJlZC5cIik7XHJcbiAgLy8gICAgIGF3YWl0IHdhaXQoNTAwMCk7XHJcbiAgLy8gICB9KTtcclxuICAvLyB9KTtcclxuICAvLyBsaXN0ZW4oXHJcbiAgLy8gICB3aW5kb3csXHJcbiAgLy8gICBcInBhZ2VzaG93XCIsXHJcbiAgLy8gICAoKSA9PlxyXG4gIC8vICAgICBhY3RpdmVUYWJzLnVwZGF0ZShcclxuICAvLyAgICAgICAoY3VycmVudCkgPT4gKFxyXG4gIC8vICAgICAgICAgKChjdXJyZW50ID0gY2FzdChjdXJyZW50LCBpc09iamVjdCkgPz8ge30pW1RBQl9JRF0gPSBub3coKSksIGN1cnJlbnRcclxuICAvLyAgICAgICApXHJcbiAgLy8gICAgIClcclxuICAvLyAgIC8vYWN0aXZlU3RvcmFnZS51cGRhdGUoKGN1cnJlbnQpID0+IChjdXJyZW50ID8/IDApICsgMSlcclxuICAvLyApO1xyXG4gIC8vIGxpc3RlbihcclxuICAvLyAgIHdpbmRvdyxcclxuICAvLyAgIFwicGFnZWhpZGVcIixcclxuICAvLyAgICgpID0+XHJcbiAgLy8gICAgIGFjdGl2ZVRhYnMudXBkYXRlKFxyXG4gIC8vICAgICAgIChjdXJyZW50KSA9PiAoaXNPYmplY3QoY3VycmVudCkgJiYgZGVsZXRlIGN1cnJlbnRbVEFCX0lEXSwgY3VycmVudClcclxuICAvLyAgICAgKVxyXG4gIC8vICAgLy8gYWN0aXZlU3RvcmFnZS51cGRhdGUoKGN1cnJlbnQ6IGFueSkgPT5cclxuICAvLyAgIC8vICAgY3VycmVudCA+IDAgPyBjdXJyZW50IC0gMSA6IGN1cnJlbnRcclxuICAvLyAgIC8vIClcclxuICAvLyApO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBmaWx0ZXIsIGlzVW5kZWZpbmVkLCByZWR1Y2UgfSBmcm9tIFwiLlwiO1xyXG5cclxuZXhwb3J0IHR5cGUgUmViaW5kZXIgPSAoKSA9PiBib29sZWFuO1xyXG5leHBvcnQgdHlwZSBVbmJpbmRlciA9ICgpID0+IGJvb2xlYW47XHJcbmV4cG9ydCB0eXBlIEJpbmRlcnMgPSBbdW5iaW5kOiBVbmJpbmRlciwgcmViaW5kOiBSZWJpbmRlcl07XHJcblxyXG5leHBvcnQgdHlwZSBTb3VyY2VMaXN0ZW5lcjxBcmdzIGV4dGVuZHMgYW55W10+ID0gKC4uLmFyZ3M6IEFyZ3MpID0+IHZvaWQ7XHJcbmV4cG9ydCB0eXBlIExpc3RlbmVyPEFyZ3MgZXh0ZW5kcyBhbnlbXT4gPSAoXHJcbiAgLi4uYXJnczogWy4uLmFyZ3M6IEFyZ3MsIHVuYmluZDogVW5iaW5kZXJdXHJcbikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVFdmVudEJpbmRlcnMgPSA8QXJncyBleHRlbmRzIGFueVtdPihcclxuICBsaXN0ZW5lcjogTGlzdGVuZXI8QXJncz4sXHJcbiAgYXR0YWNoOiAobGlzdGVuZXI6IFNvdXJjZUxpc3RlbmVyPEFyZ3M+KSA9PiB2b2lkLFxyXG4gIGRldGFjaDogKGxpc3RlbmVyOiBTb3VyY2VMaXN0ZW5lcjxBcmdzPikgPT4gdm9pZFxyXG4pOiBCaW5kZXJzID0+IHtcclxuICBsZXQgYm91bmQgPSBmYWxzZTtcclxuXHJcbiAgY29uc3Qgb3V0ZXJMaXN0ZW5lciA9ICguLi5hcmdzOiBBcmdzKSA9PiBsaXN0ZW5lciguLi5hcmdzLCB1bmJpbmQpO1xyXG5cclxuICBjb25zdCB1bmJpbmQgPSAoKSA9PlxyXG4gICAgYm91bmQgIT09IChib3VuZCA9IGZhbHNlKSAmJiAoZGV0YWNoKG91dGVyTGlzdGVuZXIpLCB0cnVlKTtcclxuXHJcbiAgY29uc3QgcmViaW5kID0gKCkgPT5cclxuICAgIGJvdW5kICE9PSAoYm91bmQgPSB0cnVlKSAmJiAoYXR0YWNoKG91dGVyTGlzdGVuZXIpLCB0cnVlKTtcclxuXHJcbiAgcmViaW5kKCk7XHJcbiAgcmV0dXJuIFt1bmJpbmQsIHJlYmluZF07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgam9pbkV2ZW50QmluZGVycyA9IChcclxuICAuLi5iaW5kZXJzOiAoQmluZGVycyB8IHVuZGVmaW5lZClbXVxyXG4pOiBCaW5kZXJzID0+IChcclxuICAoYmluZGVycyA9IGZpbHRlcihiaW5kZXJzKSksXHJcbiAgW1xyXG4gICAgKCkgPT4gcmVkdWNlKGJpbmRlcnMsIChjaGFuZ2VkLCBiaW5kZXIpID0+IGJpbmRlciFbMF0oKSB8fCBjaGFuZ2VkLCBmYWxzZSksXHJcbiAgICAoKSA9PiByZWR1Y2UoYmluZGVycywgKGNoYW5nZWQsIGJpbmRlcikgPT4gYmluZGVyIVsxXSgpIHx8IGNoYW5nZWQsIGZhbHNlKSxcclxuICBdXHJcbik7XHJcblxyXG5leHBvcnQgdHlwZSBFdmVudEhhbmRsZXI8QXJncyBleHRlbmRzIGFueVtdPiA9ICguLi5wYXlsb2FkOiBBcmdzKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUV2ZW50ID0gPEFyZ3MgZXh0ZW5kcyBhbnlbXT4oKTogW1xyXG4gIGxpc3RlbjogKGxpc3RlbmVyOiBMaXN0ZW5lcjxBcmdzPikgPT4gQmluZGVycyxcclxuICBkaXNwYXRjaDogKC4uLnBheWxvYWQ6IEFyZ3MpID0+IHZvaWRcclxuXSA9PiB7XHJcbiAgY29uc3QgbGlzdGVuZXJzID0gbmV3IFNldDxTb3VyY2VMaXN0ZW5lcjxBcmdzPj4oKTtcclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIChoYW5kbGVyKSA9PlxyXG4gICAgICBjcmVhdGVFdmVudEJpbmRlcnMoXHJcbiAgICAgICAgaGFuZGxlcixcclxuICAgICAgICAoaGFuZGxlcikgPT4gbGlzdGVuZXJzLmFkZChoYW5kbGVyKSxcclxuICAgICAgICAoaGFuZGxlcikgPT4gbGlzdGVuZXJzLmRlbGV0ZShoYW5kbGVyKVxyXG4gICAgICApLFxyXG4gICAgKC4uLnBheWxvYWQpID0+IGxpc3RlbmVycy5mb3JFYWNoKChoYW5kbGVyKSA9PiBoYW5kbGVyKC4uLnBheWxvYWQpKSxcclxuICBdO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2hhaW5lZEV2ZW50SGFuZGxlcjxBcmdzIGV4dGVuZHMgYW55W10sIFQ+ID0gKFxyXG4gIC4uLmFyZ3M6IFtcclxuICAgIC4uLmFyZ3M6IEFyZ3MsXHJcbiAgICBuZXh0OiB7XHJcbiAgICAgICgpOiBUO1xyXG4gICAgICAoLi4uYXJnczogQXJncyk6IFQ7XHJcbiAgICB9LFxyXG4gICAgdW5iaW5kOiBVbmJpbmRlclxyXG4gIF1cclxuKSA9PiBUO1xyXG5cclxudHlwZSBMaW5rZWROb2RlPFQ+ID0gW1xyXG4gIHByZXY6IExpbmtlZE5vZGU8VD4gfCB1bmRlZmluZWQsXHJcbiAgaXRlbTogVCxcclxuICBuZXh0OiBMaW5rZWROb2RlPFQ+IHwgdW5kZWZpbmVkXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQ2hhaW5lZEV2ZW50ID0gPFQgPSB2b2lkLCBBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oKTogW1xyXG4gIHJlZ2lzdGVyOiAoXHJcbiAgICBoYW5kbGVyOiBDaGFpbmVkRXZlbnRIYW5kbGVyPEFyZ3MsIFQ+LFxyXG4gICAgcHJpb3JpdHk/OiBudW1iZXJcclxuICApID0+IEJpbmRlcnMsXHJcbiAgaW52b2tlOiAoLi4uYXJnczogQXJncykgPT4gVCB8IHVuZGVmaW5lZFxyXG5dID0+IHtcclxuICB0eXBlIEl0ZW0gPSBbXHJcbiAgICBoYW5kbGVyOiBDaGFpbmVkRXZlbnRIYW5kbGVyPEFyZ3MsIFQ+LFxyXG4gICAgcHJpb3JpdHk6IG51bWJlcixcclxuICAgIGJpbmRlcnM6IEJpbmRlcnNcclxuICBdO1xyXG4gIHR5cGUgTm9kZSA9IExpbmtlZE5vZGU8SXRlbT47XHJcbiAgbGV0IGhlYWQ6IE5vZGUgfCB1bmRlZmluZWQ7XHJcbiAgbGV0IHRhaWw6IE5vZGUgfCB1bmRlZmluZWQ7XHJcbiAgbGV0IG5leHQ6IE5vZGUgfCB1bmRlZmluZWQ7XHJcblxyXG4gIGNvbnN0IHJlZ2lzdGVyID0gKFxyXG4gICAgaGFuZGxlcjogQ2hhaW5lZEV2ZW50SGFuZGxlcjxBcmdzLCBUPixcclxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGhhbmRsZXIgZ2V0cyByZWJvdW5kIGF0IHRoZWlyIHByZXZpb3VzIHByaW9yaXR5IHdpdGhvdXQganVtcGluZyBkaXNjcmV0ZSBpbmNyZW1lbnRzLlxyXG4gICAgLy8gKEl0IGlzIGRlc2VyaWFibGUgdG8gYmUgYWJsZSB0byBzcGVjZml5IHByaW9yaXR5IDAgb3IgIDEwIHdpdGhvdXQgaGF2aW5nIHRvIHRoaW5rIGFib3V0IGhvdyBtYW55IDBzIHRoZXJlIGFyZSlcclxuICAgIHByaW9yaXR5ID0gKHRhaWw/LlsxXVsxXSA/PyAwKSArIDAuMDAwMDAxXHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCByZWdpc3Rlck5vZGUgPSAobm9kZT86IE5vZGUpID0+IHtcclxuICAgICAgbGV0IGJvdW5kID0gdHJ1ZTtcclxuICAgICAgbm9kZSA/Pz0gW1xyXG4gICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICBbXHJcbiAgICAgICAgICBoYW5kbGVyLFxyXG4gICAgICAgICAgcHJpb3JpdHksXHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIWJvdW5kKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgbm9kZSFbMF0gPyAobm9kZSFbMF1bMl0gPSBub2RlIVsyXSkgOiAoaGVhZCA9IG5vZGUhWzJdKTtcclxuICAgICAgICAgICAgICBub2RlIVsyXSA/IChub2RlIVsyXVswXSA9IG5vZGUhWzBdKSA6ICh0YWlsID0gbm9kZSFbMF0pO1xyXG4gICAgICAgICAgICAgIG5vZGUhWzBdID0gbm9kZSFbMl0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICEoYm91bmQgPSBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICgpID0+IChib3VuZCA/IGZhbHNlIDogKHJlZ2lzdGVyTm9kZShub2RlKSwgKGJvdW5kID0gdHJ1ZSkpKSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgXSxcclxuICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgIF07XHJcbiAgICAgIG5leHQgPSBoZWFkO1xyXG4gICAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICBoZWFkID0gdGFpbCA9IG5vZGU7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHkgPj0gdGFpbCFbMV1bMV0pIHtcclxuICAgICAgICBub2RlWzBdID0gdGFpbDtcclxuICAgICAgICB0YWlsID0gdGFpbCFbMl0gPSBub2RlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIElOVjogcHJpb3JpdHkgPCB0YWlsLnByaW9yaXR5LCBzbyBuZXh0IHdpbGwgYmUgbm9uLW51bGwgYWZ0ZXIgbG9vcDtcclxuICAgICAgICB3aGlsZSAoKG5leHQhWzFdWzFdIGFzIGFueSkgPD0gcHJpb3JpdHkpIHtcclxuICAgICAgICAgIG5leHQgPSBuZXh0WzJdITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIChub2RlWzBdID0gKG5vZGVbMl0gPSBuZXh0KVswXSkgPyAobm9kZVswXVsyXSA9IG5vZGUpIDogKGhlYWQgPSBub2RlKTtcclxuICAgICAgICBuZXh0WzBdID0gbm9kZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5vZGVbMV1bMl07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJlZ2lzdGVyTm9kZSgpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGludm9rZSA9IChub2RlOiBOb2RlIHwgdW5kZWZpbmVkLCBhcmdzOiBBcmdzKSA9PiAoXHJcbiAgICAobmV4dCA9IG5vZGU/LlsyXSksXHJcbiAgICBub2RlXHJcbiAgICAgID8gbm9kZVsxXVswXShcclxuICAgICAgICAgIC4uLmFyZ3MsXHJcbiAgICAgICAgICAoLi4ubmV4dEFyZ3M6IEFyZ3MpID0+XHJcbiAgICAgICAgICAgIGludm9rZShuZXh0ISwgbmV4dEFyZ3MubGVuZ3RoID8gbmV4dEFyZ3MgOiBhcmdzKSxcclxuICAgICAgICAgIG5vZGVbMV1bMl1bMF1cclxuICAgICAgICApXHJcbiAgICAgIDogdW5kZWZpbmVkXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIFtyZWdpc3RlciwgKC4uLmFyZ3MpID0+IGludm9rZShoZWFkLCBhcmdzKV07XHJcbn07XHJcbiIsImltcG9ydCB7IElOSVRJQUxJWkVfVFJBQ0tFUl9GVU5DVElPTiB9IGZyb20gXCJAY29uc3RhbnRzXCI7XG4vL2ltcG9ydCB7IGluaXRpYWxpemVUcmFja2VyIH0gZnJvbSBcIi4vaW5pdGlhbGl6ZVRyYWNrZXJcIjtcbi8vaW1wb3J0IHsgRiwgVCwgZGVmaW5lLCB3aW5kb3cgfSBmcm9tIFwiLi9saWJcIjtcbmltcG9ydCB7IGF0dGFjaCB9IGZyb20gXCIuL3B1c2hlclwiO1xuXG4vLyBUaGlzIGFzc3VtZXMgdGhlIHNjcmlwdCBpcyBsb2FkZWQgZnJvbSB0aGUgUmVxdWVzdEhhbmRsZXIncyA/Y2ZnIHJvdXRlLlxuXG4vLyBUbyBwcmV2ZW50IGV4dGVybmFsIHNjcmlwdHMgZnJvbSBlYXZlcy1kcm9wcGluZyBhbmQgZ2V0IGEgaG9sZCBvZiB0aGUgc3RvcmFnZSBrZXksIHRoaXMgaXMgaG93IGluaXRpYWxpemF0aW9uIHdvcmtzOlxuLy8gMTogVGhlIGNvbmZpZ3VyYXRpb24gc2NyaXB0cyBhcHBlbmRzIGEgPHNjcmlwdD4gZWxlbWVudCB3aXRoIHRoaXMgc2NyaXB0LCBhbmQgYWRkcyBhIFwibG9hZGVkXCIgaGFuZGxlci5cbi8vIDI6IFRoaXMgc2NyaXB0IGRlZmluZXMgYSBub24tY29uZmlndXJhYmxlIG1ldGhvZCBvbiB0aGUgd2luZG93LiBUaGlzIHByZXZlbnRzIGl0IGZyb20gYmVpbmcgb3ZlcnJpZGVuIGlmIHNvbWV0aGluZyBpbnRlcmNlcHRzIHRoZSBcImxvYWRlZFwiIGhhbmRsZXIgYmVmb3JlIHRoZSBjb25maWd1cmF0aW9uIHNjcmlwdC5cbi8vIDM6IFRoZSBjb25maWd1cmF0aW9uIHNjcmlwdCBjYWxscyB0aGlzIGZ1bmN0aW9uIHdpdGggYSBjYWxsYmFjayB0aGF0IGluaXRpYWxpemVzIHRoZSB0cmFja2VyIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gaW5jbHVkaW5nIHRoZSBzdG9yYWdlIGtleS5cblxud2luZG93W0lOSVRJQUxJWkVfVFJBQ0tFUl9GVU5DVElPTl0gPSAoY2FsbGJhY2s6IGFueSkgPT4ge1xuICBjYWxsYmFjayhhdHRhY2gpO1xufTtcblxuLy8gbGV0IGxvYWRlZCA9IEY7XG4vLyBkZWZpbmUod2luZG93LCB7XG4vLyAgIFtJTklUSUFMSVpFX1RSQUNLRVJfRlVOQ1RJT05dOiBbXG4vLyAgICAgKGNhbGxiYWNrOiAoaW5pdDogdHlwZW9mIGluaXRpYWxpemVUcmFja2VyKSA9PiB2b2lkKSA9PiB7XG4vLyAgICAgICBpZiAobG9hZGVkID09PSAobG9hZGVkID0gVCkpIHJldHVybjtcbi8vICAgICAgIGNhbGxiYWNrKGluaXRpYWxpemVUcmFja2VyKTtcbi8vICAgICB9LFxuLy8gICBdLFxuLy8gfSk7XG4iXSwibmFtZXMiOlsiYXR0YWNoIiwiYXN5bmMiLCJyZWdpc3RlciIsImludm9rZSIsImhlYWQiLCJ0YWlsIiwibmV4dCIsIm5vZGUiLCJhcmdzIiwibmV4dEFyZ3MiLCJsZW5ndGgiLCJoYW5kbGVyIiwicHJpb3JpdHkiLCJyZWdpc3Rlck5vZGUiLCJib3VuZCIsImNyZWF0ZUNoYWluZWRFdmVudCIsInVuYmluZDIiLCJ1bmJpbmQiLCJiaW5kIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImNhbGxiYWNrIl0sIm1hcHBpbmdzIjoibUJBTU8sSUNITUEsRUFBU0MsVUFDcEIsSUFBT0MsRUFBVUMsR0N3RWUsTUFhNUIsSUFBQUMsRUFDQUMsRUFDQUMsRUFpREVILEVBQVMsQ0FBQ0ksRUFBd0JDLEtBQ3JDRixFQUFPQyxJQUFPLEdBQ2ZBLEVBQ0lBLEVBQUssR0FBRyxNQUNIQyxHQUNILElBQUlDLElBQ0ZOLEVBQU9HLEVBQU9HLEVBQVNDLE9BQVNELEVBQVdELElBQzdDRCxFQUFLLEdBQUcsR0FBRyxTQUViLEdBR04sTUFBTyxDQTNEVSxDQUNmSSxFQUdBQyxHQUFZUCxJQUFPLEdBQUcsSUFBTSxHQUFLLFFBRTNCLElBQUFRLEVBQWdCTixJQUNwQixJQUFJTyxHQUFRLEVBb0JaLEdBbkJTUCxJQUFBLE1BQ1AsRUFDQSxDQUNFSSxFQUNBQyxFQUNBLENBQ0UsT0FDT0UsSUFDTFAsRUFBTSxHQUFNQSxFQUFNLEdBQUcsR0FBS0EsRUFBTSxHQUFPSCxFQUFPRyxFQUFNLEdBQ3BEQSxFQUFNLEdBQU1BLEVBQU0sR0FBRyxHQUFLQSxFQUFNLEdBQU9GLEVBQU9FLEVBQU0sR0FDcERBLEVBQU0sR0FBS0EsRUFBTSxRQUFLLEVBQ2JPLEdBQVEsSUFFbkIsS0FBT0EsSUFBaUJELEVBQWFOLEdBQVFPLEdBQVEsVUFHekQsR0FFS1IsRUFBQUYsS0FHSVEsRUFBWVAsRUFBTSxHQUFHLEdBR3pCLENBRUwsS0FBUUMsRUFBTSxHQUFHLElBQWNNLEdBQzdCTixFQUFPQSxFQUFLLElBR2JDLEVBQUssSUFBTUEsRUFBSyxHQUFLRCxHQUFNLElBQU9DLEVBQUssR0FBRyxHQUFLQSxFQUFTSCxFQUFPRyxFQUNoRUQsRUFBSyxHQUFLQyxDQUNaLE1BVkVBLEVBQUssR0FBS0YsRUFDSEEsRUFBQUEsRUFBTSxHQUFLRSxPQUhsQkgsRUFBT0MsRUFBT0UsRUFjVCxPQUFBQSxFQUFLLEdBQUcsRUFBQyxFQUVsQixPQUFPTSxHQUFhLEVBZUosSUFBSUwsSUFBU0wsRUFBT0MsRUFBTUksR0FBSyxFRHBKdEJPLElBRXBCQyxHQUFXZCxHQUFTRCxNQUFPSyxTQUVsQkEsSUFBVSxJQUcxQkosR0FBU0QsTUFBT0ssR0FFUCxLQUdULElBQU9XLEVBQVFDLEdBQVFoQixHQUFTRCxNQUFPSyxTQUN2QkEsSUFBVSxJQUNyQixHQUVHYSxRQUFBQyxVQUFVakIsS0FDWGMsSUFDQ0UsUUFBQUMsVUFBVWpCLEtBQ2JlLElBQ0dDLFFBQUFDLFVBQVVqQixLQUNWYSxJQUNBRyxRQUFBQyxVQUFVakIsSUFBUSxFRWQ1QmtCLE9ITjJDLGlCR01KQyxJQUNyQ0EsRUFBU3RCLEVBQU0ifQ==
