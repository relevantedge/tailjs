(()=>{"use strict";var e,r,t,n,a,i,o,s,l,u,c,f,d,v,p,h,g,y,m,b,w,k,S,E,I,A,T,x,N,j,C,O,$,_="@info",M="@consent",U=(e,r=e=>TypeError(e))=>{throw es(e=ra(e))?r(e):e},F=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(ed(e)&&ed(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!F(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},P=(e,r,...t)=>e===r||t.length>0&&t.some(r=>P(e,r)),q=(e,r)=>null!=e?e:U(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),R=(e,r=!0,t)=>{try{return e()}catch(e){return em(r)?ec(e=r(e))?U(e):e:ee(r)?console.error(r?U(e):e):r}finally{t?.()}},z=e=>{var r=void 0;return()=>r??=ra(e)},D=e=>{var r={initialized:!0,then:B(()=>(r.initialized=!0,ra(e)))};return r},B=e=>{var r=z(e);return(e,t)=>V(r,[e,t])},V=async(e,r=!0,t)=>{try{var n=await ra(e);return eu(r)?r[0]?.(n):n}catch(e){if(ee(r)){if(r)throw e;console.error(e)}else{if(eu(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{await t?.()}},W=e=>e,J=void 0,L=Number.MAX_SAFE_INTEGER,G=!1,H=!0,K=()=>{},X=e=>null!=e,Y=Symbol.iterator,Z=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:J,Q=(e,r)=>em(r)?e!==J?r(e):J:e?.[r]!==J?e:J,ee=e=>"boolean"==typeof e,er=Z(ee,e=>0!=e&&(1==e||"false"!==e&&("true"===e||J))),et=e=>!!e,en=e=>e===H,ea=e=>e!==G,ei=Number.isSafeInteger,eo=e=>"number"==typeof e,es=e=>"string"==typeof e,el=Z(es,e=>e?.toString()),eu=Array.isArray,ec=e=>e instanceof Error,ef=(e,r=!1)=>null==e?J:!r&&eu(e)?e:eb(e)?[...e]:[e],ed=e=>null!==e&&"object"==typeof e,ev=Object.prototype,ep=Object.getPrototypeOf,eh=e=>null!=e&&ep(e)===ev,eg=(e,r)=>"function"==typeof e?.[r],ey=e=>"symbol"==typeof e,em=e=>"function"==typeof e,eb=(e,r=!1)=>!!(e?.[Y]&&("object"==typeof e||r)),ew=e=>e instanceof Map,ek=e=>e instanceof Set,eS=(e,r)=>null==e?J:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,eE=!1,eI=e=>(eE=!0,e),eA=e=>null==e?J:em(e)?e:r=>r[e],eT=(e,r,t)=>(r??t)!==J?(e=eA(e),r??=0,t??=L,(n,a)=>r--?J:t--?e?e(n,a):n:t):e,ex=e=>e?.filter(X),eN=(e,r,t,n)=>null==e?[]:!r&&eu(e)?ex(e):e[Y]?function*(e,r){if(null!=e){if(r){r=eA(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),eE){eE=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===J?r:eT(r,t,n)):ed(e)?function*(e,r){r=eA(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),eE){eE=!1;break}}}(e,eT(r,t,n)):eN(em(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),ej=(e,r)=>r&&!eu(e)?[...e]:e,eC=(e,r,t,n)=>eN(e,r,t,n),eO=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[Y]||n&&ed(r))for(var i of a?eN(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(eN(e,r,a,i),t+1,n,!1),e$=(e,r,t,n)=>{if(r=eA(r),eu(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!eE;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return eE=!1,i}return null!=e?ef(eC(e,r,t,n)):J},e_=(e,r,t,n)=>null!=e?new Set([...eC(e,r,t,n)]):J,eM=(e,r,t=1,n=!1,a,i)=>ef(eO(e,r,t,n,a,i)),eU=(e,r,t)=>null==e?J:em(r)?rS(e$(es(e)?[e]:e,r),t??""):es(e)?e:rS(e$(e,e=>!1===e?J:e),r??""),eF=(...e)=>{var r;return eB(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...ef(e))),r},eP=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,eE)){eE=!1;break}return a},eq=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,eE)){eE=!1;break}return t},eR=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,eE){eE=!1;break}return t},ez=(e,r,...t)=>null==e?J:eb(e)?e$(e,e=>r(e,...t)):r(e,...t),eD=(e,r,t,n)=>{var a;if(null!=e){if(eu(e))return eP(e,r,t,n);if(t===J){if(e[Y])return eq(e,r);if("object"==typeof e)return eR(e,r)}for(var i of eN(e,r,t,n))null!=i&&(a=i);return a}},eB=eD,eV=async(e,r,t,n)=>{var a;if(null==e)return J;for(var i of eC(e,r,t,n))if(null!=(i=await i)&&(a=i),eE){eE=!1;break}return a},eW=Object.fromEntries,eJ=(e,r,t)=>{if(null==e)return J;if(ee(r)||t){var n={};return eB(e,t?(e,a)=>null!=(e=r(e,a))&&null!=(e[1]=t(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eB(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eW(e$(e,r?(e,t)=>Q(r(e,t),1):e=>Q(e,1)))},eL=(e,r,t,n,a)=>{var i=()=>em(t)?t():t;return eD(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},eG=(e,r=e=>null!=e,t=eu(e),n,a)=>ej(eN(e,(e,t)=>r(e,t)?e:J,n,a),t),eH=(e,r,t,n)=>{var a;if(null==e)return J;if(r)e=eG(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[Y])return Object.keys(e).length}return a=0,eD(e,()=>++a)??0},eK=(e,...r)=>null==e?J:eo(e)?Math.max(e,...r):eL(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||eo(a)&&a>e?a:e,J,r[2],r[3]),eX=(e,r,t)=>e$(e,eh(e)?e=>e[1]:e=>e,r,t),eY=e=>!eu(e)&&eb(e)?e$(e,ew(e)?e=>e:ek(e)?e=>[e,!0]:(e,r)=>[r,e]):ed(e)?Object.entries(e):J,eZ=(e,r,t,n)=>null==e?J:(r=eA(r),eD(e,(e,t)=>!r||(e=r(e,t))?eI(e):J,t,n)),eQ=(e,r,t,n)=>null==e?J:eu(e)||es(e)?e[e.length-1]:eD(e,(e,t)=>!r||r(e,t)?e:J,t,n),e0=(e,r,t,n)=>null==e?J:eh(e)&&!r?Object.keys(e).length>0:e.some?.(r??et)??eD(e,r?(e,t)=>!!r(e,t)&&eI(!0):()=>eI(!0),t,n)??!1,e1=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),e2=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),e4=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=em(t)?t():t)&&e2(e,r,n),n}},e6=(e,...r)=>(eB(r,r=>eB(r,([r,t])=>{null!=t&&(eh(e[r])&&eh(t)?e6(e[r],t):e[r]=t)})),e),e5=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eB(t,t=>eu(t)?e(r,t[0],t[1]):eB(t,([t,n])=>e(r,t,n))),r)},e3=e5(e2),e8=e5((e,r,t)=>e2(e,r,em(t)?t(e4(e,r)):t)),e9=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):e4(e,r)!==e3(e,r,!0),e7=(e,r)=>{if((e??r)!=null){var t=e4(e,r);return eg(e,"delete")?e.delete(r):delete e[r],t}},re=(e,...r)=>{var t=[],n=!1,a=(e,i,o,s)=>{if(e){var l=r[i];i===r.length-1?eu(l)?(n=!0,l.forEach(r=>t.push(e7(e,r)))):t.push(e7(e,l)):(eu(l)?(n=!0,l.forEach(r=>a(e4(e,r),i+1,e,r))):a(e4(e,l),i+1,e,l),!eH(e)&&o&&rr(o,s))}};return a(e,0),n?t:t[0]},rr=(e,r)=>{if(e)return eu(r)?(eu(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>rr(e,r)):eu(e)?r<e.length?e.splice(r,1)[0]:void 0:e7(e,r)},rt=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(eu(r)){if(eh(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=e$(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...eh(t)&&("get"in t||"value"in t)?t:em(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},rn=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>ed(t)?eu(t)?t.map(r=>eu(r)?1===r.length?[r[0],e[r[0]]]:rn(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:rn(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},ra=e=>em(e)?e():e,ri=(e,r=-1)=>eu(e)?r?e.map(e=>ri(e,r-1)):[...e]:eh(e)?r?eJ(e,([e,t])=>[e,ri(t,r-1)]):{...e}:ek(e)?new Set(r?e$(e,e=>ri(e,r-1)):e):ew(e)?new Map(r?e$(e,e=>[e[0],ri(e[1],r-1)]):e):e,ro=(e,...r)=>e?.push(...r),rs=(e,...r)=>e?.unshift(...r),rl=(e,r)=>{if(!eh(r))return[e,e];var t,n,a,i={};if(eh(e))return eB(e,([e,o])=>{if(i[e]!==r[e]){if(eh(t=o)){if(!(o=rl(o,r[e])))return;[o,t]=o}else eo(o)&&eo(n)&&(o=(t=o)-n);i[e]=o,(a??=ri(r))[e]=t}}),a?[i,a]:void 0},ru="undefined"!=typeof performance?(e=H)=>e?Math.trunc(ru(G)):performance.timeOrigin+performance.now():Date.now,rc=(e=!0,r=()=>ru())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},rf=(e=0)=>{var r,t,n=(a,i=e)=>{if(void 0===a)return!!t;clearTimeout(r),ee(a)?a&&(i<0?ea:en)(t?.())?n(t):t=void 0:(t=a,r=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},rd=(e,r=0)=>{var t=em(e)?{frequency:r,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{}}=t;r=t.frequency??0;var l=0,u=ry(!0).resolve(),c=rc(!a),f=c(),d=async e=>!!l&&(!!n||!u.pending||!0===e)&&(p.busy=!0,!0!==e&&await u,u.reset(),(await V(()=>s(c(),-f+(f=c())),!1,()=>u.resolve())===!1||r<=0||o)&&v(!1),p.busy=!1,!0),v=(e,t=!e)=>(c(e,t),clearInterval(l),p.active=!!(l=e?setInterval(d,r<0?-r:r):0),p),p={active:!1,busy:!1,restart:(e,t)=>(r=e??r,s=t??s,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await d(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class rv{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new rp,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class rp{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===J||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var rh=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),rg=(e,r)=>null==e||isFinite(e)?!e||e<=0?ra(r):new Promise(t=>setTimeout(async()=>t(await ra(r)),e)):U(`Invalid delay ${e}.`),ry=e=>e?new rv:new rp,rm=(...e)=>Promise.race(e.map(e=>em(e)?e():e)),rb=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rw=(...e)=>(e=eG(e),[()=>eL(e,(e,r)=>r[0]()||e,!1),()=>eL(e,(e,r)=>r[1]()||e,!1)]),rk=()=>{var e,r=new Set;return[(t,n)=>{var a=rb(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rS=(e,r=["and",", "])=>e?1===(e=e$(e)).length?e[0]:eu(r)?[e.slice(-1).join(r[1]??", ")," ",r[0]," ",e[e.length-1]].join(""):e.join(r??", "):J,rE=(e,r,t)=>null==e?J:eu(r)?null==(r=r[0])?J:r+" "+rE(e,r,t):null==r?J:1===r?e:t??e+"s",rI=(e,r,t)=>t?(ro(t,"\x1b[",r,"m"),eu(e)?ro(t,...e):ro(t,e),ro(t,"\x1b[m"),t):rI(e,r,[]).join(""),rA=(e,r="'")=>null==e?J:r+e+r,rT=e=>(e=Math.log2(e))===(0|e),rx=(e,r,t,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,r])=>es(e)&&eo(r)).map(([e,r])=>[e.toLowerCase(),r])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,r)=>e|r,0),f=r?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,r])=>[r,e])),v=(e,t)=>ei(e)?!r&&t?null!=d[e]?e:J:Number.isSafeInteger(e)?e:J:es(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),t):J,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,J):(e??0)|t,(p=!1,J)):v(e),(e,r)=>null==(e=h(e,!1))?J:r&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,r])=>r&&e&r&&rT(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:J],y=(e,r)=>null==e?J:null==(e=h(o=e,r))?U(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,m=l.filter(([,e])=>!n||(n&e)===e&&rT(e));return rt(e=>y(e),[{configurable:!1,enumerable:!1},{parse:y,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rS(e$(ef(e),e=>rA(e)),[r])}`},r&&{pure:m,map:(e,r)=>(e=y(e),m.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rN=(...e)=>{var r=eY(eJ(e,!0)),t=e=>(ed(e)&&(eu(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,a=J;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=a)))})),e);return t},rj=(e,r=["|",";",","],t=!0)=>{if(!e)return J;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&eZ(r,(e,r,t=n[1].split(e))=>t.length>1?t:J)||(n[1]?[n[1]]:[]),n},rC=(e,r=!0,t)=>null==e?J:rM(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:t,urn:t?!n:!n&&J,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):J,path:c,query:!1===r?f:rO(f,r),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":J),v}),rO=(e,r,t=!0)=>null==e?J:eJ(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=rj(e,!1===r?[]:!0===r?J:r,t)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==r?[a,o.length>1?o:i]:[a,i]:J,(e,t)=>e?!1!==r?eF(e,t):(e?e+",":"")+t:t),r$=(e,r)=>r&&null!=e?r.test(e):J,r_=(e,r,t)=>rM(e,r,t,!0),rM=(t,n,a,i=!1)=>(t??n)==null?J:a?(e=J,i?(r=[],rM(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rU=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rF=/\z./g,rP=(e,r)=>(r=eU(e_(eG(e,e=>e?.length)),"|"))?RegExp(r,"gu"):rF,rq={},rR=e=>e instanceof RegExp,rz=(e,r=[","," "])=>rR(e)?e:eu(e)?rP(e$(e,e=>rz(e,r)?.source)):ee(e)?e?/./g:rF:es(e)?rq[e]??=rM(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rP(e$(rD(n,RegExp(`(?<!(?<!\\\\)\\\\)[${eU(r,rU)}]`)),e=>e&&`^${eU(rD(e,/(?<!(?<!\\)\\)\*/),e=>rU(rB(e,/\\(.)/g,"$1")),".*")}$`))):J,rD=(e,r)=>e?.split(r)??e,rB=(e,r,t)=>e?.replace(r,t)??e;(A=t||(t={}))[A.Anonymous=0]="Anonymous",A[A.Indirect=1]="Indirect",A[A.Direct=2]="Direct",A[A.Sensitive=3]="Sensitive";var rV=rx(t,!1,"data classification"),rW=(e,r)=>rV.parse(e?.classification??e?.level)===rV.parse(r?.classification??r?.level)&&rL.parse(e?.purposes??e?.purposes)===rL.parse(r?.purposes??r?.purposes),rJ=(e,r)=>null==e?void 0:eo(e.classification)&&eo(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:rV.parse(e.classification??e.level??r?.classification??0),purposes:rL.parse(e.purposes??e.purpose??r?.purposes??n.Necessary)};(T=n||(n={}))[T.None=0]="None",T[T.Necessary=1]="Necessary",T[T.Functionality=2]="Functionality",T[T.Performance=4]="Performance",T[T.Targeting=8]="Targeting",T[T.Security=17]="Security",T[T.Infrastructure=33]="Infrastructure",T[T.Anonymous=49]="Anonymous",T[T.Any=63]="Any",T[T.Server=2048]="Server",T[T.Server_Write=4096]="Server_Write";var rL=rx(n,!0,"data purpose",2111),rG=rx(n,!1,"data purpose",0),rH=(e,r)=>((a=e?.metadata)&&(r?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e),rK=e=>!!e?.patchTargetId;(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rX=rx(i,!1,"variable scope");t.Anonymous,n.Necessary;var rY=e=>`'${e.key}' in ${rX.format(e.scope)} scope`,rZ={scope:rX,purpose:rG,purposes:rL,classification:rV};rN(rZ);var rQ=e=>e?.filter(X).sort((e,r)=>e.scope===r.scope?e.key.localeCompare(r.key,"en"):e.scope-r.scope);(N=o||(o={}))[N.Success=200]="Success",N[N.Created=201]="Created",N[N.Unchanged=304]="Unchanged",N[N.Denied=403]="Denied",N[N.NotFound=404]="NotFound",N[N.ReadOnly=405]="ReadOnly",N[N.Conflict=409]="Conflict",N[N.Unsupported=501]="Unsupported",N[N.Invalid=400]="Invalid",N[N.Error=500]="Error",rx(o,!1,"variable set status"),(j=s||(s={}))[j.Add=0]="Add",j[j.Min=1]="Min",j[j.Max=2]="Max",j[j.IfMatch=3]="IfMatch",j[j.IfNoneMatch=4]="IfNoneMatch",rx(s,!1,"variable patch type");var r0=e=>!!e?.patch,r1=e=>!!e?.variables,r2=(e,r,t)=>{var n,a=e=>e,i=(t,i=r3)=>D(async()=>(n=a(i(await e(),r)))&&t(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),changed:i(e=>eG(e,e=>e.status<300)),variables:i(e=>e$(e,r6)),values:i(e=>e$(e,e=>r6(e)?.value)),push:()=>(a=e=>(t?.(e$(r4(e))),e),o),value:i(e=>r6(e[0])?.value),variable:i(e=>r6(e[0])),result:i(e=>e[0])};return o},r4=e=>e?.map(e=>e?.status<400?e:J),r6=e=>e?.status<400?e?.current??e:J,r5=e=>e?.status<400||e?.status===404,r3=(e,r,t)=>{var n,a,i=[],s=e$(ef(e),(e,s)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${rY(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.Conflict?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:e.status===o.Denied?e.error??"the operation was denied.":e.status===o.Invalid?e.error??"the value does not conform to the schema":e.status===o.ReadOnly?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[s])||!1!==n(e,a))&&i.push(a),J)));return i.length?U(i.join("\n")):eu(e)?s:s?.[0]},r8=e=>r3(e,J,!0),r9=e=>e&&"string"==typeof e.type,r7=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),te=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],tr=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eU(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=te(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,s,l)=>{var u=o||s||l,c=te(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),t?.add(tt(n))),""}),a},tt=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,tn=2e3,ta="_t:data",ti=()=>()=>U("Not initialized."),to=window,ts=document,tl=ts.body,tu=(e,r)=>!!e?.matches(r),tc=L,tf=(e,r,t=(e,r)=>r>=tc)=>{for(var n,a=0,i=G;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==H&&null!=n),H),a-1)!==G&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},td=(e,r)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||er(e);case"n":return parseFloat(e);case"j":return R(()=>JSON.parse(e),K);case"h":return R(()=>ns(e),K);case"e":return R(()=>nu?.(e),K);default:return eu(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:td(e,r[0])):void 0}},tv=(e,r,t)=>td(e?.getAttribute(r),t),tp=(e,r,t)=>tf(e,(e,n)=>n(tv(e,r,t))),th=(e,r)=>tv(e,r)?.trim()?.toLowerCase(),tg=e=>e?.getAttributeNames(),ty=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,tm=e=>null!=e?e.tagName:null,tb=()=>({x:(l=tw(G)).x/(tl.offsetWidth-window.innerWidth)||0,y:l.y/(tl.offsetHeight-window.innerHeight)||0}),tw=e=>({x:eS(scrollX,e),y:eS(scrollY,e)}),tk=(e,r)=>rB(e,/#.*$/,"")===rB(r,/#.*$/,""),tS=(e,r,t=H)=>(u=tE(e,r))&&W({xpx:u.x,ypx:u.y,x:eS(u.x/tl.offsetWidth,4),y:eS(u.y/tl.offsetHeight,4),pageFolds:t?u.y/window.innerHeight:void 0}),tE=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:c,y:f}=tI(e),{x:c,y:f}):void 0,tI=e=>e?(d=e.getBoundingClientRect(),l=tw(G),{x:eS(d.left+l.x),y:eS(d.top+l.y),width:eS(d.width),height:eS(d.height)}):void 0,tA=(e,r,t,n={capture:!0,passive:!0})=>eu(r)?rw(...e$(r,r=>tA(e,r,t,n))):rb(t,t=>e.addEventListener(r,t,n),t=>e.addEventListener(r,t,n)),tT=e=>{var{host:r,scheme:t,port:n}=rC(e,!1);return{host:r+(n?":"+n:""),scheme:t}},tx=()=>({...l=tw(H),width:window.innerWidth,height:window.innerHeight,totalWidth:tl.offsetWidth,totalHeight:tl.offsetHeight}),tN=new WeakMap,tj=e=>tN.get(e),tC=(e,r=G)=>(r?"--track-":"track-")+e,tO=(e,r,t,n,a,i)=>r?.[1]&&eB(tg(e),o=>r[0][o]??=(i=G,es(n=eB(r[1],([r,t,n],a)=>r$(o,r)&&(i=void 0,!t||tu(e,t))&&eI(n??o)))&&(!(a=e.getAttribute(o))||er(a))&&tr(a,rB(n,/\-/g,":"),t),i)),t$=()=>{},t_=(e,r)=>{if(v===(v=tz.tags))return t$(e,r);var t=e=>e?rR(e)?[[e]]:eb(e)?eM(e,t):[eh(e)?[rz(e.match),e.selector,e.prefix]:[rz(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eX(v))]];(t$=(e,r)=>tO(e,n,r))(e,r)},tM=(e,r)=>eU(eF(ty(e,tC(r,H)),ty(e,tC("base-"+r,H)))," "),tU={},tF=(e,r,t=tM(e,"attributes"))=>{t&&tO(e,tU[t]??=[{},r_(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[rz(t||n),,r])],r),tr(tM(e,"tags"),void 0,r)},tP=(e,r,t=G,n)=>(t?tf(e,(e,t)=>t(tP(e,r,G)),em(t)?t:void 0):eU(eF(tv(e,tC(r)),ty(e,tC(r,H)))," "))??(n&&(p=tj(e))&&n(p))??null,tq=(e,r,t=G,n)=>""===(h=tP(e,r,t,n))||(null==h?h:er(h)),tR=(e,r,t,n)=>e?(tF(e,n??=new Set),tf(e,e=>{t_(e,n),tr(e$(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tz={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},tD=[],tB=[],tV=(e,r=0)=>e.charCodeAt(r),tW=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tD[tB[r]=e.charCodeAt(0)]=r);var tJ=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(tB[(16515072&r)>>18],tB[(258048&r)>>12],tB[(4032&r)>>6],tB[63&r]);return a.length+=n-t,tW(a)},tL=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tD[tV(e,t++)]<<2|(r=tD[tV(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tD[tV(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tD[tV(e,t++)]));return i},tG={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tH=(e=256)=>e*Math.random()|0,tK=e=>{var r,t,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tH()));for(t=0,i[n++]=g(f^16*tH(16)+a);r>t;i[n++]=g(f^e[t++]));for(;a--;)i[n++]=tH();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((f^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=f^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(s=ee(r)?64:r,h(),[o,l]=tG[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[t++])))*l));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tX={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(d=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),f(r)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(s(t),s(n))}})(e);break;default:if(!a&&r&&r.invalidTypeReplacement)"function"==typeof r.invalidTypeReplacement?s(r.invalidTypeReplacement(e),!0):s(r.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)s(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function f(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return f(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return d(-1,1);if(200===r)return d(-1,2);if(201===r)return d(-1,4);if(202===r)return s(4);if(203===r)return s(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return d(1);if(213===r)return d(2);if(214===r)return d(4);if(215===r)return d(8);if(216===r)return d(16);if(217===r)return f(-1,1);if(218===r)return f(-1,2);if(219===r)return f(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function s(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function f(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function d(e,r){e<0&&(e=o(r));var t=o(1),a=l(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={serialize:r,deserialize:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tX);var{deserialize:tY,serialize:tZ}=(C=tX.exports)&&C.__esModule&&Object.prototype.hasOwnProperty.call(C,"default")?C.default:C,tQ="$ref",t0=(e,r,t)=>ey(e)?J:t?null===r||r:r!==J,t1=(e,r,{defaultValues:t=!0,prettify:n=!1})=>{var a,i,o,s=(e,r,n=e[r],a=t0(r,n,t)?u(n):J)=>(n!==a&&(a!==J||eu(e)?e[r]=a:delete e[r],l(()=>e[r]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||em(e)||ey(e))return null;if(!ed(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[tQ]||(e[tQ]=o,l(()=>delete e[tQ])),{[tQ]:o};if(eh(e))for(var r in(i??=new Map).set(e,i.size+1),e)s(e,r);else eb(e)&&(!eu(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?s(e,t):(e[t]=null,l(()=>delete e[t])));return e};return R(()=>r?tZ(u(e)??null):R(()=>JSON.stringify(e,J,n?2:0),()=>JSON.stringify(u(e),J,n?2:0)),!0,()=>a?.forEach(e=>e()))},t2=e=>{var r,t,n=e=>ed(e)?e[tQ]&&(t=(r??=[])[e[tQ]])?t:(e[tQ]&&(r[e[tQ]]=e,delete e[tQ]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return n(es(e)?JSON.parse(e):null!=e?R(()=>tY(e),()=>(console.error("Invalid message received.",e),J)):e)},t4=(e,r={})=>{var t=(e,{json:r=!1,jsonDecodeFallback:t=!0,...n})=>{var a=(e,t)=>eo(e)&&!0===t?e:l(e=es(e)?new Uint8Array(e$(e.length,r=>255&e.charCodeAt(r))):r?R(()=>JSON.stringify(e),()=>JSON.stringify(t1(e,!1,n))):t1(e,!0,n),t),i=e=>null==e?J:R(()=>t2(e),J);if(r)return[e=>t1(e,!1,n),i,(e,r)=>a(e,r)];var[o,s,l]=tK(e);return[e=>tJ(o(t1(e,!0,n))),e=>null!=e?t&&(e?.[0]==="{"||e?.[0]==="[")?i(e):t2(s(tL(e))):null,(e,r)=>a(e,r)]};if(!e){var n=+(r.json??0);if(n&&!1!==r.prettify)return(g??=[t(null,{json:!1}),t(null,{json:!0,prettify:!0})])[+n]}return t(e,r)};t4();var[t6,t5]=t4(null,{json:!0,prettify:!0}),t3=rD(""+ts.currentScript.src,"#"),t8=rD(""+(t3[1]||""),";"),t9=t3[0],t7=t8[1]||rC(t9,!1)?.host,ne=e=>!!(t7&&rC(e,!1)?.host?.endsWith(t7)===H),nr=(...e)=>rB(eU(e),/(^(?=\?))|(^\.(?=\/))/,t9.split("?")[0]),nt=nr("?","var");nr("?","mnt"),nr("?","usr");var nn=Symbol(),na=Symbol(),ni=(e,r,t=H,n=G)=>{r&&(t?console.groupCollapsed:console.group)((n?"":"tail.js: ")+r);var a=e?.[na];a&&(e=e[nn]),null!=e&&console.log(ed(e)?rI(t6(e),"94"):em(e)?""+e:e),a&&a.forEach(([e,r,t])=>ni(e,r,t,!0)),r&&console.groupEnd()},[no,ns]=t4(),[nl,nu]=[ti,ti],[nc,nf]=rk(),nd=e=>{nu===ti&&([nl,nu]=t4(e),nf(nl=t4(null,{json:!0})[0],nu))},nv=e=>r=>np(e,r),np=(...e)=>{var r=e.shift();console.error(es(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[nh,ng]=rk(),[ny,nm]=rk(),nb=e=>nk!==(nk=e)&&ng(nk=!1,nI(!0,!0)),nw=e=>nS!==(nS=!!e&&"visible"===document.visibilityState)&&nm(nS,!e,nE(!0,!0));nh(nw);var nk=!0,nS=!1,nE=rc(!1),nI=rc(!1);tA(window,["pagehide","freeze"],()=>nb(!1)),tA(window,["pageshow","resume"],()=>nb(!0)),tA(document,"visibilitychange",()=>(nw(!0),nS&&nb(!0))),ng(nk,nI(!0,!0));var nA=!1,nT=rc(!1),[nx,nN]=rk(),nj=rd({callback:()=>nA&&nN(nA=!1,nT(!1)),frequency:2e4,once:!0,paused:!0}),nC=()=>!nA&&(nN(nA=!0,nT(!0)),nj.restart());tA(window,"focus",nC),tA(window,"blur",()=>nj.trigger()),tA(document.body,["keydown","pointerdown","pointermove","scroll"],nC),nC(),(O=y||(y={}))[O.View=-3]="View",O[O.Tab=-2]="Tab",O[O.Shared=-1]="Shared";var nO=rx(y,!1,"local variable scope"),n$=e=>nO.tryParse(e)??rX(e),n_=e=>nO.format(e)??rX.format(e),nM=e=>!!nO.tryParse(e?.scope),nU=rN({scope:nO},rZ),nF=e=>null==e?void 0:e.source?nF(e.source):`${n$(e.scope)}\0${e.key}\0${e.targetId??""}`,nP=e=>{var r=e.split("\0");return{scope:+r[0],key:r[1],targetId:r[2]}},nq=0,nR=void 0,nz=()=>(nR??ti())+"_"+nD(),nD=()=>++nq,nB=e=>crypto.getRandomValues(e),nV=()=>rB("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nB(new Uint8Array(1))[0]&15>>e/4).toString(16)),nW={},nJ={id:nR,heartbeat:ru()},nL={knownTabs:{[nR]:nJ},variables:{}},[nG,nH]=rk(),nK=ti,nX=e=>nW[nF(e)],nY=(...e)=>n0(e.map(e=>(e.timestamp=ru(),e.expires=3e3,nU(e)))),nZ=rf(),nQ=(e,r=G)=>{nZ(()=>{var r=eF(rQ(e$(e,1))?.map(e=>[e,`${e.key} (${n_(e.scope)}, ${e.scope<0?"client-side memory only":rL.format(e.purposes)})`,G]),[[{[na]:rQ(e$(nW,1))?.map(e=>[e,`${e.key} (${n_(e.scope)}, ${e.scope<0?"client-side memory only":rL.format(e.purposes)})`,G])},"All variables",H]]);ni({[na]:r},`Variables changed (${eH(e)??0} changed, ${eH(nW)} in total).`)},r?0:250)},n0=e=>{var r=e$(e,e=>e&&[nF(e),e]);if(r?.length){e3(nW,r);var t=eG(r,e=>e[1].scope>y.Tab);t.length&&(e3(nL.variables,t),nK({type:"patch",payload:eJ(t)})),nH("variables",eJ(r),!0),nQ(eJ(r))}};nc((e,r)=>{nh(t=>{if(t){var n=r(sessionStorage.getItem(ta));sessionStorage.removeItem(ta),nR=n?.[0]??ru().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nQ(nW=eJ(eF(eG(nW,([,e])=>e.scope===y.View),e$(n?.[1],e=>[nF(e),e]))),!0)}else sessionStorage.setItem(ta,e([nR,e$(nW,([,e])=>e.scope!==y.View?e:void 0)]))},!0),nK=(r,t)=>{e&&(localStorage.setItem(ta,e([nR,r,t])),localStorage.removeItem(ta))},tA(window,"storage",e=>{if(e.key===ta){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===nR)){var[a,{type:i,payload:o}]=n;"query"===i?t.active||nK({type:"set",payload:nL},a):"set"===i&&t.active?(e3(nL,o),e3(nW,o.variables),t.trigger()):"patch"===i?(e3(nL.variables,o),e3(nW,o),nH("variables",o,!1)):"tab"===i&&(e3(nL.knownTabs,a,o),o&&nH("tab",o,!1))}}});var t=rd(()=>nH("ready",nL,!0),-25),n=rd({callback(){var e=ru()-1e4;eB(nL?.knownTabs,([r,t])=>t[0]<e&&re(nL.knownTabs,r)),nJ.heartbeat=ru(),nK({type:"tab",payload:nJ})},frequency:5e3,paused:!0}),a=e=>{nK({type:"tab",payload:e?nJ:void 0}),e?(t.restart(),nK({type:"query"})):t.toggle(!1),n.toggle(e)};nh(e=>a(e),!0)},!0);var[n1,n2]=rk(),[n4,n6]=rk(),n5=((e,{timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var a=()=>(t?nu:ns)(localStorage.getItem(e)),i=()=>localStorage.setItem(e,(t?nl:no)([nR,ru()+r])),o=rf(r/2);return async(t,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<ru())&&(i(),a()?.[0]===nR))return o(i),await V(t,!0,()=>o(!1)&&localStorage.removeItem(e));var c=ry(),[f]=tA(window,"storage",r=>{r.key!==e||r.newValue||c.resolve()});await rm(rg(s??r),c),f()}null==s&&U(e+" could not be acquired.")}})("_t:rq"),n3=rd(()=>{if(b!==(b=tz.pushCookie)){if(!b)return;m=RegExp(rU(b)+"=([^;]*)")}var e=nu?.(rM(document.cookie,m)?.[1]);r1(e)&&n6(e)},1e3),n8=0,n9=(e=1e3)=>{var r=()=>{r=K,--n8||(n3.restart(1e3),clearTimeout(0))};return n8++||n3.restart(100),e>0&&setTimeout(r,e),r()},n7=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=t=>{var s=em(r)?r?.(a,t):r;return!1!==s&&(null!=s&&!0!==s&&(a=s),n2(e,a,t,e=>(o=a===J,a=e)),!o&&(i=(n?nl:JSON.stringify)(a)))};if(!t)return await n5(()=>eV(1,async r=>{if(!s(r))return eI();var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(t.status>=400)return 0===r?eI(U(`Invalid response: ${await t.text()}`)):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rg((1+r)*200));var o=await t.text(),l=o?.length?(n?nu:JSON.parse)?.(o):J;return null!=l&&n6(l),eI(l)}));s(0)&&(n9(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||U("Beacon send failed."))},ae=["scope","key","targetId","version"],ar=[...ae,"created","modified","classification","purposes","tags","readonly","value"],at=[...ae,"init","purpose","refresh"];[...ar];var an=new Map,aa=(e,r)=>{var a=rd(async()=>{var e=e$(an,([e,r])=>({...nP(e),result:[...r]}));e.length&&await c.get(...e)},3e3),i=(e,r)=>ez(r,r=>e4(an,e,()=>new Set).add(r)),s=e=>{if(r5(e)){var r,t=nF(e),n=r6(e);eB(rr(an,t),e=>{r=!1,e?.(n,nX(n),(e=!0)=>r=e),r&&i(t,e)})}};nh((e,r)=>a.toggle(e,e&&r>=3e3),!0);var l=new Map,u=(e,r)=>e3(l,e,ee(r)?r?void 0:0:r),c={get:(...t)=>r2(async()=>{var n=[],a=e$(t,(e,r)=>[e,r]),l=[],c=(await n7(e,()=>!!(a=e$(a,([e,r])=>{if(e){var t=nF(e);i(t,e.result);var a=nX(t);e.init&&u(t,e.cache);var s=e.purposes;if((s??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.expires<ru())ro(n,[{...a,status:o.Success},r]);else if(!nM(e))return[rn(e,at),r];else if(eh(e.init)){var c={...nU(e),status:o.Created,...e.init};null!=c.value&&(ro(l,f(c)),ro(n,[c,r]))}}else ro(n,[{...e,status:o.Denied,error:"No consent for "+rL.logFormat(s)},r])}})).length&&{variables:{get:e$(a,0)},deviceSessionId:r?.deviceSessionId})).variables?.get??[];return ro(n,...e$(c,(e,r)=>e&&[e,a[r][1]])),l.length&&n0(l),n.map(([e])=>(s(e),e))},e$(t,e=>e?.error)),set:(...a)=>r2(async()=>{var i=[],l=[],c=e$(a,(e,r)=>{if(e){var a=nF(e),s=nX(a);if(u(a,e.cache),nM(e)){if(null!=e.patch)return U("Local patching is not supported.");var c={value:e.value,classification:t.Anonymous,purposes:n.Necessary,scope:nO(e.scope),key:e.key};return l[r]={status:s?o.Success:o.Created,source:e,current:c},void ro(i,f(c))}return r0(e)||e?.version!==void 0||(e.version=s?.version,e.force??=!!e.version),[e,r]}}),d=c.length>0?[]:q((await n7(e,{variables:{set:c.map(e=>e[0])},deviceSessionId:r?.deviceSessionId})).variables?.set,"No result.");return i.length&&n0(i),eB(d,(e,r)=>{var[t,n]=c[r];e.source=t,s(l[n]=e)}),l},e$(a,e=>e?.error))},f=(e,r=ru())=>({...rn(e,ar),timestamp:r,expires:r+(e4(l,nF(e))??3e3)});return n4(({variables:e})=>{if(e){var r=ru(),t=eF(e$(e.get,e=>r6(e)),e$(e.set,e=>r6(e)));t?.length&&n0(ez(t,f,r))}}),c},ai=(e,r,t=tn)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.queued?e6(r,{type:e.type+"_patch",patchTargetId:e.clientId}):U("Source event not queued."),s=async(t,n=!0,a)=>(ni({[na]:e$(t=t.map(e=>(e6(e,{metadata:{posted:!0}}),e6(rH(ri(e),!0),{timestamp:e.timestamp-ru()}))),e=>[e,e.type,G])},"Posting "+rS([rE("new event",[eH(t,e=>!rK(e))||void 0]),rE("event update",[eH(t,e=>rK(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),n7(e,{events:t,variables:a,deviceSessionId:r?.deviceSessionId},{beacon:n})),l=async(e,{flush:t=!1,async:a=!0,variables:i}={})=>{if((e=e$(ef(e),e=>e6(r.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eB(e,e=>ni(e,e.type)),!a)return s(e,!1,i);if(!t){e.length&&ro(n,...e);return}n.length&&rs(e,...n.splice(0)),e.length&&await s(e,!0,i)};return t>0&&rd(()=>l([],{flush:!0}),t),ny((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=e$(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&l(eF(n.splice(0),a),{flush:!0})}}),{post:l,postPatch:(e,r,t)=>l(o(e,r),{flush:!0}),registerEventPatchSource(e,r,t=!0){var n=!1,s=()=>n=!0;return a.set(e,ri(e)),i.set(e,()=>{var i=a.get(e),[l,u]=(t?rl(r(i,s),i):r(i,s))??[];return l&&!F(u,i)?(a.set(e,ri(u)),[o(e,l),n]):[void 0,n]}),s}}},ao=Symbol(),as=e=>{var r=new IntersectionObserver(e=>eB(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[ao]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=eG(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==H))&&eH(a)){var a,i,o,s,l=G,u=0,c=rf(tz.impressionThreshold),f=aS();t[ao]=(r,n,d)=>{f(r=d>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),l!==(l=r)&&(l?c(()=>{++u,o||ro(e,o=eG(e$(a,e=>(e.track?.impressions||tq(t,"impressions",H,e=>e.track?.impressions))&&W({type:"impression",pos:tS(t),viewport:tx(),timeOffset:aI(),impressions:u,...aU(t,H)})||null))),o?.length&&(s=e$(o,r=>e.events.registerEventPatchSource(r,()=>({relatedEventId:r.clientId,duration:f(),impressions:u}))))}):(eB(s,e=>e()),c(!1)))},r.observe(t)}}},al=()=>{var e=to?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??to.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:to.devicePixelRatio,width:r,height:t,landscape:a}}},au=e=>ro(e,W({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:e$(navigator.languages,(e,r,t=e.split("-"))=>W({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...al()})),ac=(e,r="A"===tm(e)&&tv(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),af=(e,r=tm(e),t=tq(e,"button"))=>t!==G&&(P(r,"A","BUTTON")||"INPUT"===r&&P(th(e,"type"),"button","submit")||t===H),ad=()=>w?.clientId,av={scope:"shared",key:"referrer"},ap=(e,r)=>{I.variables.set({...av,value:[ad(),e]}),r&&I.variables.get({scope:av.scope,key:av.key,result(t,n,a){t?a():n?.value?.[1]===e&&r()}})},ah=rc(),ag=rc(),ay=rc(),am=1,ab=()=>ag(),[aw,ak]=rk(),aS=e=>{var r=rc(e,ah),t=rc(e,ag),n=rc(e,ay),a=rc(e,()=>am);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),interactiveTime:n(e,i),activations:a(e,i)})},aE=aS(),aI=()=>aE(),[aA,aT]=rk(),ax=new WeakSet,aN=document.getElementsByTagName("iframe"),aj=e=>(null==e||(e===H||""===e)&&(e="add"),es(e)&&P(e,"add","remove","update","clear")?{action:e}:ed(e)?e:void 0);function aC(e){if(e){if(null!=e.units&&P(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aO=e=>tR(e,void 0,e=>e$(ef(e4(tN,e)?.tags))),a$=e=>e?.component||e?.content,a_=e=>tR(e,r=>r!==e&&!!a$(e4(tN,r)),e=>(S=e4(tN,e),(S=e4(tN,e))&&eM(eF(S.component,S.content,S),"tags"))),aM=(e,r)=>r?e:{...e,rect:void 0,content:(E=e.content)&&e$(E,e=>({...e,rect:void 0}))},aU=(e,r=G)=>{var t,n,a,i=[],o=[],s=0;return tf(e,e=>{var n=e4(tN,e);if(n){if(a$(n)){var a=eG(ef(n.component),e=>0===s||!r&&(1===s&&e.track?.secondary!==H||e.track?.promote));t=e0(a,e=>e.track?.region)&&tI(e)||void 0;var l=a_(e);n.content&&rs(i,...e$(n.content,e=>({...e,rect:t,...l}))),a?.length&&(rs(o,...e$(a,e=>(s=eK(s,e.track?.secondary?1:2),aM({...e,content:i,rect:t,...l},!!t)))),i=[])}var u=n.area||tP(e,"area");u&&rs(o,...e$(u))}}),i.length&&ro(o,aM({id:"",rect:t,content:i})),eB(o,e=>{es(e)?ro(n??=[],e):(e.area??=eU(n,"/"),rs(a??=[],e))}),a||n?{components:a,area:eU(n,"/")}:void 0},aF=Symbol();$={necessary:1,preferences:2,statistics:4,marketing:8},window.tail.push({consent:{externalSource:{key:"Cookiebot",poll(){var e=ts.cookie.match(/CookieConsent=([^;]*)/)?.[1],r=1;return e?.replace(/([a-z]+):(true|false)/g,(e,t,n)=>("true"===n&&(r|=$[t]??0),"")),{level:r>1?1:0,purposes:r}}}}});var aP=[{id:"context",setup(e){rd(()=>eB(aN,e=>e9(ax,e)&&aT(e)),-1e3).trigger(),e.push({get:[{scope:"view",key:"view",result(e){}}]}),e.variables.get({scope:"view",key:"view",result:(a,i,o)=>(F(n,a?.value)&&t===(t=""+location.href)||(r=n=a?.value),r&&w&&!w.definition&&(w.definition=r,w.metadata?.posted&&e.events.postPatch(w,{definition:r}),r=void 0),o())});var r,t,n,a=nX({scope:"tab",key:"viewIndex"})?.value??0,i=nX({scope:"tab",key:"tabIndex"})?.value;null==i&&nY({scope:"tab",key:"tabIndex",value:i=nX({scope:"shared",key:"tabIndex"})?.value??nX({scope:"session",key:_})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:i+1});var o=null,s=(t=G)=>{if(!tk(""+o,o=location.href)||t){var{source:n,scheme:s,host:l}=rC(location.href+"",!0);w={type:"view",timestamp:ru(),clientId:nz(),tab:nR,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:i+1,tabViewNumber:a+1,viewport:tx(),duration:aE(void 0,!0)},0===i&&(w.firstTab=H),0===i&&0===a&&(w.landingPage=H),nY({scope:"tab",key:"viewIndex",value:++a});var u=rO(location.href);if(e$(["source","medium","campaign","term","content"],(e,r)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&e$(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=rB(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=nX(av)?.value;c&&ne(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...av,value:void 0}))}var c=document.referrer||null;c&&!ne(c)&&(w.externalReferrer={href:c,domain:tT(c)}),w.definition=r,r=void 0,e.events.post(w),e.events.registerEventPatchSource(w,()=>({duration:aI()})),ak(w)}};return nx(e=>ay(e)),ny(e=>{e?(ag(H),++am):(ag(G),ay(G))}),tA(window,"popstate",()=>(k="back-forward",s())),e$(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),k="navigate",s()}}),s(),{processCommand:r=>az(r)&&(ro(e,r.username?{type:"login",username:r.username}:{type:"logout"}),H),decorate(e){!w||r7(e)||rK(e)||(e.view=w.clientId)}}}},{id:"components",setup(e){var r=as(e),t=e=>null==e?void 0:{...e,component:ef(e.component),content:ef(e.content),tags:ef(e.tags)},n=({boundary:e,...n})=>{e8(tN,e,e=>t("add"in n?{...e,component:eF(e?.component,n.component),content:eF(e?.content,n.content),area:n?.area??e?.area,tags:eF(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,e4(tN,e))};return{decorate(e){eB(e.components,e=>rr(e,"track"))},processCommand:e=>aV(e)?(n(e),H):aK(e)?(e$(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e4(n,a))for(var i=[];null!=tv(a,e);){e9(n,a);var o=rD(tv(a,e),"|");tv(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(el(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&r[u]&&(l=r[u]),ro(i,l)}}ro(t,...e$(i,e=>({add:H,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),t})(e.scan.attribute,e.scan.components),n),H):G}}},{id:"navigation",setup(e){var r=r=>{tA(r,["click","contextmenu","auxclick"],r=>{var t,n,a,i,o,s=null,l=G;if(tf(r.target,e=>{var r;s??=af(e)?e:null,l=l||"NAV"===tm(e),i??=tq(e,"clicks",H,e=>e.track?.clicks)??((r=ef(tj(e)?.component))&&e0(r,e=>e.track?.clicks!==G)),o??=tq(e,"region",H,e=>e.track?.region)??((r=tj(e)?.component)&&e0(r,e=>e.track?.region))}),s){var u,c=aU(s),f=aO(s);i??=!l;var d={...(o??=H)?{pos:tS(s,r),viewport:tx()}:null,...(t=r.target,n=s,tf(t??n,e=>"IMG"===tm(e)||e===n?(a={element:{tagName:e.tagName,text:tv(e,"title")||tv(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},G):H),a),...c,...f,timing:aI()};if(ac(s)){var v=s.hostname!==location.hostname,{host:p,scheme:h,source:g}=rC(s.href,!1);if(s.host===location.host&&s.pathname===location.pathname&&s.search===location.search){if("#"===s.hash)return;s.hash!==location.hash&&ro(e,W({type:"anchor_navigation",anchor:s.hash,...d}));return}var y=W({clientId:nz(),type:"navigation",href:v?s.href:g,external:v,domain:{host:p,scheme:h},self:H,anchor:s.hash,...d});r.button<=1&&(1===r.button||r.ctrlKey||r.shiftKey||r.altKey||tv(s,"target")!==window.name?(ap(y.clientId),y.self=G,ro(e,y)):tk(location.href,s.href)||(y.exit=y.external,ap(y.clientId)));return}var m=(tf(r.target,(e,r)=>!!(u??=aj(tj(e)?.cart??tP(e,"cart")))&&!u.item&&(u.item=eQ(tj(e)?.content))&&r(u)),aC(u));(m||i)&&ro(e,m?W({type:"cart_updated",...d,...m}):W({type:"component_click",...d}))}})};r(document),aA(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=tw(H);aw(()=>rh(()=>(r={},t=tw(H)),250)),tA(window,"scroll",()=>{var n=tw(),a=tb();if(n.y>=t.y){var i=[];!r.fold&&n.y>=t.y+200&&(r.fold=H,ro(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=H,ro(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=H,ro(i,"page-end"));var o=e$(i,e=>W({type:"scroll",scrollType:e,offset:a}));o.length&&ro(e,o)}})}},{id:"cart",setup:e=>({processCommand(r){if(aR(r)){var t=r.cart;return"clear"===t?ro(e,{type:"cart_updated",action:"clear"}):(t=aC(t))&&ro(e,{...t,type:"cart_updated"}),H}return aH(r)?(ro(e,{type:"order",...r.order}),H):G}})},{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=tp(i,tC("ref"))||"track_ref",l=()=>i.isConnected&&tI(i).width,u=e4(r,i,()=>{var r,t=new Map,n={type:"form",name:tp(i,tC("form-name"))||tv(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>n);var s=()=>{o(),r[3]>=2&&(n.completed=3===r[3]||!l()),e.events.postPatch(n,{...a,totalTime:ru(H)-r[4]}),r[3]=1},u=rf();return tA(i,"submit",()=>{a=aU(i),r[3]=3,u(()=>{i.isConnected&&tI(i).width>0?(r[3]=2,u()):s()},750)}),r=[n,t,i,0,ru(H),1]});return e4(u[1],n)||e$(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||tq(e,"ref"))&&(e.value||(e.value=nV()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:rB(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[aF]:t(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(s-(s=ab())),u=-(l-(l=ru(H))),c=r[aF];(r[aF]=t(n))!==c&&(r.fillOrder??=a[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=H,a[3]=2,eB(e.fields,([e,t])=>t.lastField=e===r.name||void 0)),r.activeTime+=o,r.totalTime+=u,e.activeTime+=o,i=null}},s=0,l=0,u=e=>{e&&tA(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>{t&&(i=t,"focusin"===e.type?(l=ru(H),s=ab()):o())})};u(document),aA(e=>e.contentDocument&&u)}},{id:"consent",setup(e){var r=async r=>await e.variables.get({scope:"session",key:M,result:r}).value,t=async t=>{if(t){var n=await r();if(!n||rW(n,t=rJ(t)))return[!1,n];var a={level:rV.lookup(t.classification),purposes:rL.lookup(t.purposes)};return await e.events.post(W({type:"consent",consent:a}),{async:!1,variables:{get:[{scope:"session",key:M}]}}),[!0,a]}},n={};return{processCommand(e){if(aZ(e)){if(em(e.consent))r(e.consent);else{var a=rJ(e.consent.set);a&&(async()=>a.callback?.(...await t(a)))();var i=e.consent.externalSource;if(i){var o,s=i.key,l=n[s]??=rd({frequency:i.pollFrequency??1e3}),u=async()=>{if(ts.hasFocus()){var e=rJ(i.poll());if(e&&!rW(o,e)){var[r,n]=await t(e);r&&ni(n,"Consent was updated from "+s),o=e}}};l.restart(i.pollFrequency,u).trigger()}}return H}return G}}}}],aq=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),aR=aq("cart"),az=aq("username"),aD=aq("tagAttributes"),aB=aq("disable"),aV=aq("boundary"),aW=aq("extension"),aJ=aq(H,"flush"),aL=aq("get"),aG=aq("listener"),aH=aq("order"),aK=aq("scan"),aX=aq("set"),aY=e=>"function"==typeof e,aZ=aq("consent"),aQ=e=>{if(I)return I;es(e)&&(e=ns(e)),e3(tz,e),nd(rr(tz,"clientKey"));var r=rr(tz,"apiKey"),t=to[tz.name]??[];if(!eu(t)){U(`The global variable for the tracker "${tz.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...r)=>{var t=H;a=eG(a,n=>R(()=>(n[e]?.(...r,{tracker:I,unsubscribe:()=>t=G}),t),nv(n)))},o=[],s={applyEventExtensions(e){e.clientId??=nz(),e.timestamp??=ru(),d=H;var r=G;return e$(n,([,t])=>{(r||t.decorate?.(e)===G)&&(r=H)}),r?void 0:e}},l=aa(nt,s),u=ai(nt,s),c=null,f=0,d=G,v=G;return Object.defineProperty(to,tz.name,{value:I=Object.freeze({id:"tracker_"+nz(),events:u,variables:l,push(...e){if(!c&&r){if(e[0]!==r)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var t=G;if((e=eG(eM(e,e=>es(e)?ns(e):e),e=>{if(!e)return G;if(aD(e))tz.tags=e3({},tz.tags,e.tagAttributes);else if(aB(e))return tz.disabled=e.disable,G;else if(aJ(e))return t=H,G;else if(aY(e))return e(I),G;return v||aG(e)||aW(e)?H:(o.push(e),G)})).length||t){var s=e1(e,e=>aW(e)?-100:aG(e)?-50:aX(e)?-10:r9(e)?90:0);if(!(c&&c.splice(d?f+1:c.length,0,...s))){for(f=0,c=s;f<c.length;f++)c[f]&&R(()=>{var e,r=c[f];if(i("command",r),d=G,r9(r))u.post(r);else if(aL(r))l.get(...ef(r.get));else if(aX(r))l.set(...ef(r.set));else if(aG(r))ro(a,r.listener);else if(aW(r))(e=R(()=>r.extension.setup(I),e=>np(r.extension.id,e)))&&(ro(n,[r.priority??100,e,r.extension]),e1(n,([e])=>e));else if(aY(r))r(I);else{var t=G;for(var[,e]of n)if(t=e.processCommand?.(r)??G)break;t||np("invalid-command",r,"Loaded extensions:",n.map(e=>e[2].id))}},e=>np(I,"internal-error",e));c=null,t&&u.post([],{flush:t})}}}},__isTracker:H}),configurable:!1,writable:!1}),nG(async(e,r,n,a)=>{if("ready"===e){var i=r8((await l.get({scope:"session",key:_,refresh:!0},{scope:"session",key:M,refresh:!0,cache:L}))[0]).value;s.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(au(I),i.hasUserAgent=!0),v=!0,o.length&&ro(I,o),a(),ro(I,...e$(aP,e=>({extension:e})),...t,{set:{scope:"local",key:"loaded",value:!0}})}},!0),I};to[".tail.js.init"]=e=>{e(aQ)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
