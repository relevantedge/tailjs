(()=>{"use strict";var e,r,t,n,a,i,o,s,l,u,c,f,d,v,p,h,g,y,m,b,w,k,S,I,E,A,T,x,N,C,O,$,j,M="@info",U="@consent",_="_tail:",F=_+"state",P=_+"push",q=(e,r=e=>TypeError(e))=>{throw ec(e=rs(e))?r(e):e},z=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(eh(e)&&eh(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!z(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},R=(e,r,...t)=>e===r||t.length>0&&t.some(r=>R(e,r)),D=(e,r)=>null!=e?e:q(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),V=(e,r=!0,t)=>{try{return e()}catch(e){return ek(r)?ev(e=r(e))?q(e):e:en(r)?console.error(r?q(e):e):r}finally{t?.()}},B=e=>{var r=void 0,t=()=>t.initialized?r:(t.initialized=!0,t.resolved=r=rs(e));return t},J=e=>{var r={initialized:!0,then:W(()=>(r.initialized=!0,rs(e)))};return r},W=e=>{var r=B(e);return(e,t)=>L(r,[e,t])},L=async(e,r=!0,t)=>{try{var n=await rs(e);return ed(r)?r[0]?.(n):n}catch(e){if(en(r)){if(r)throw e;console.error(e)}else{if(ed(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{await t?.()}},G=e=>e,H=void 0,K=Number.MAX_SAFE_INTEGER,X=!1,Y=!0,Z=()=>{},Q=e=>null!=e,ee=Symbol.iterator,er=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:H,et=(e,r)=>ek(r)?e!==H?r(e):H:e?.[r]!==H?e:H,en=e=>"boolean"==typeof e,ea=er(en,e=>0!=e&&(1==e||"false"!==e&&("true"===e||H))),ei=e=>!!e,eo=e=>e===Y,es=e=>e!==X,el=Number.isSafeInteger,eu=e=>"number"==typeof e,ec=e=>"string"==typeof e,ef=er(ec,e=>e?.toString()),ed=Array.isArray,ev=e=>e instanceof Error,ep=(e,r=!1)=>null==e?H:!r&&ed(e)?e:eS(e)?[...e]:[e],eh=e=>null!==e&&"object"==typeof e,eg=Object.prototype,ey=Object.getPrototypeOf,em=e=>null!=e&&ey(e)===eg,eb=(e,r)=>"function"==typeof e?.[r],ew=e=>"symbol"==typeof e,ek=e=>"function"==typeof e,eS=(e,r=!1)=>!!(e?.[ee]&&("object"==typeof e||r)),eI=e=>e instanceof Map,eE=e=>e instanceof Set,eA=(e,r)=>null==e?H:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,eT=!1,ex=e=>(eT=!0,e),eN=e=>null==e?H:ek(e)?e:r=>r[e],eC=(e,r,t)=>(r??t)!==H?(e=eN(e),r??=0,t??=K,(n,a)=>r--?H:t--?e?e(n,a):n:t):e,eO=e=>e?.filter(Q),e$=(e,r,t,n)=>null==e?[]:!r&&ed(e)?eO(e):e[ee]?function*(e,r){if(null!=e){if(r){r=eN(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),eT){eT=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===H?r:eC(r,t,n)):eh(e)?function*(e,r){r=eN(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),eT){eT=!1;break}}}(e,eC(r,t,n)):e$(ek(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),ej=(e,r)=>r&&!ed(e)?[...e]:e,eM=(e,r,t,n)=>e$(e,r,t,n),eU=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[ee]||n&&eh(r))for(var i of a?e$(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(e$(e,r,a,i),t+1,n,!1),e_=(e,r,t,n)=>{if(r=eN(r),ed(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!eT;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return eT=!1,i}return null!=e?ep(eM(e,r,t,n)):H},eF=(e,r,t,n)=>null!=e?new Set([...eM(e,r,t,n)]):H,eP=(e,r,t=1,n=!1,a,i)=>ep(eU(e,r,t,n,a,i)),eq=(e,r,t)=>null==e?H:ek(r)?rE(e_(ec(e)?[e]:e,r),t??""):ec(e)?e:rE(e_(e,e=>!1===e?H:e),r??""),ez=(...e)=>{var r;return eW(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...ep(e))),r},eR=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,eT)){eT=!1;break}return a},eD=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,eT)){eT=!1;break}return t},eV=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,eT){eT=!1;break}return t},eB=(e,r,...t)=>null==e?H:eS(e)?e_(e,e=>r(e,...t)):r(e,...t),eJ=(e,r,t,n)=>{var a;if(null!=e){if(ed(e))return eR(e,r,t,n);if(t===H){if(e[ee])return eD(e,r);if("object"==typeof e)return eV(e,r)}for(var i of e$(e,r,t,n))null!=i&&(a=i);return a}},eW=eJ,eL=async(e,r,t,n)=>{var a;if(null==e)return H;for(var i of eM(e,r,t,n))if(null!=(i=await i)&&(a=i),eT){eT=!1;break}return a},eG=Object.fromEntries,eH=(e,r,t)=>{if(null==e)return H;if(en(r)||t){var n={};return eW(e,t?(e,a)=>null!=(e=r(e,a))&&null!=(e[1]=t(n[e[0]],e[1]))&&(n[e[0]]=e[1]):e=>eW(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eG(e_(e,r?(e,t)=>et(r(e,t),1):e=>et(e,1)))},eK=(e,r,t,n,a)=>{var i=()=>ek(t)?t():t;return eJ(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},eX=(e,r=e=>null!=e,t=ed(e),n,a)=>ej(e$(e,(e,t)=>r(e,t)?e:H,n,a),t),eY=(e,r,t,n)=>{var a;if(null==e)return H;if(r)e=eX(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[ee])return Object.keys(e).length}return a=0,eJ(e,()=>++a)??0},eZ=(e,...r)=>null==e?H:eu(e)?Math.max(e,...r):eK(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||eu(a)&&a>e?a:e,H,r[2],r[3]),eQ=(e,r,t)=>e_(e,em(e)?e=>e[1]:e=>e,r,t),e0=e=>!ed(e)&&eS(e)?e_(e,eI(e)?e=>e:eE(e)?e=>[e,!0]:(e,r)=>[r,e]):eh(e)?Object.entries(e):H,e1=(e,r,t,n)=>null==e?H:(r=eN(r),eJ(e,(e,t)=>!r||(e=r(e,t))?ex(e):H,t,n)),e2=(e,r,t,n)=>null==e?H:ed(e)||ec(e)?e[e.length-1]:eJ(e,(e,t)=>!r||r(e,t)?e:H,t,n),e4=(e,r,t,n)=>null==e?H:em(e)&&!r?Object.keys(e).length>0:e.some?.(r??ei)??eJ(e,r?(e,t)=>!!r(e,t)&&ex(!0):()=>ex(!0),t,n)??!1,e6=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),e5=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),e3=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=ek(t)?t():t)&&e5(e,r,n),n}},e8=(e,...r)=>(eW(r,r=>eW(r,([r,t])=>{null!=t&&(em(e[r])&&em(t)?e8(e[r],t):e[r]=t)})),e),e9=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eW(t,t=>ed(t)?e(r,t[0],t[1]):eW(t,([t,n])=>e(r,t,n))),r)},e7=e9(e5),re=e9((e,r,t)=>e5(e,r,ek(t)?t(e3(e,r)):t)),rr=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):e3(e,r)!==e7(e,r,!0),rt=(e,r)=>{if((e??r)!=null){var t=e3(e,r);return eb(e,"delete")?e.delete(r):delete e[r],t}},rn=(e,...r)=>{var t=[],n=!1,a=(e,i,o,s)=>{if(e){var l=r[i];i===r.length-1?ed(l)?(n=!0,l.forEach(r=>t.push(rt(e,r)))):t.push(rt(e,l)):(ed(l)?(n=!0,l.forEach(r=>a(e3(e,r),i+1,e,r))):a(e3(e,l),i+1,e,l),!eY(e)&&o&&ra(o,s))}};return a(e,0),n?t:t[0]},ra=(e,r)=>{if(e)return ed(r)?(ed(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>ra(e,r)):ed(e)?r<e.length?e.splice(r,1)[0]:void 0:rt(e,r)},ri=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(ed(r)){if(em(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=e_(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{configurable:!1,enumerable:!0,writable:!1,...n,...em(t)&&("get"in t||"value"in t)?t:ek(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},ro=(e,...r)=>{if(void 0!==e)return Object.fromEntries(r.flatMap(t=>eh(t)?ed(t)?t.map(r=>ed(r)?1===r.length?[r[0],e[r[0]]]:ro(e[r[0]],...r[1]):[r,e[r]]):Object.entries(r).map(([r,t])=>[r,!0===t?e[r]:ro(e[r],t)]):[[t,e[t]]]).filter(e=>null!=e[1]))},rs=e=>ek(e)?e():e,rl=(e,r=-1)=>ed(e)?r?e.map(e=>rl(e,r-1)):[...e]:em(e)?r?eH(e,([e,t])=>[e,rl(t,r-1)]):{...e}:eE(e)?new Set(r?e_(e,e=>rl(e,r-1)):e):eI(e)?new Map(r?e_(e,e=>[e[0],rl(e[1],r-1)]):e):e,ru=(e,...r)=>e?.push(...r),rc=(e,...r)=>e?.unshift(...r),rf=(e,r)=>{if(!em(r))return[e,e];var t,n,a,i={};if(em(e))return eW(e,([e,o])=>{if(i[e]!==r[e]){if(em(t=o)){if(!(o=rf(o,r[e])))return;[o,t]=o}else eu(o)&&eu(n)&&(o=(t=o)-n);i[e]=o,(a??=rl(r))[e]=t}}),a?[i,a]:void 0},rd="undefined"!=typeof performance?(e=Y)=>e?Math.trunc(rd(X)):performance.timeOrigin+performance.now():Date.now,rv=(e=!0,r=()=>rd())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},rp=(e=0)=>{var r,t,n=(a,i=e)=>{if(void 0===a)return!!t;clearTimeout(r),en(a)?a&&(i<0?es:eo)(t?.())?n(t):t=void 0:(t=a,r=setTimeout(()=>n(!0,i),i<0?-i:i))};return n},rh=(e,r=0)=>{var t=ek(e)?{frequency:r,callback:e}:e,{queue:n=!0,paused:a=!1,trigger:i=!1,once:o=!1,callback:s=()=>{}}=t;r=t.frequency??0;var l=0,u=rw(!0).resolve(),c=rv(!a),f=c(),d=async e=>{if(!l||!n&&u.pending&&!0!==e)return!1;if(p.busy=!0,!0!==e)for(;u.pending;)await u;return e||u.reset(),(await L(()=>s(c(),-f+(f=c())),!1,()=>!e&&u.resolve())===!1||r<=0||o)&&v(!1),p.busy=!1,!0},v=(e,t=!e)=>(c(e,t),clearInterval(l),p.active=!!(l=e?setInterval(d,r<0?-r:r):0),p),p={active:!1,busy:!1,restart:(e,t)=>(r=e??r,s=t??s,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.trigger(),p):v(!0):v(!1):p,trigger:async e=>await d(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class rg{_promise;constructor(){this.reset()}get value(){return this._promise.value}get error(){return this._promise.error}get pending(){return this._promise.pending}resolve(e,r=!1){return this._promise.resolve(e,r),this}reject(e,r=!1){return this._promise.reject(e,r),this}reset(){return this._promise=new ry,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this._promise.then(e,r)}}class ry{_promise;resolve;reject;value;error;pending=!0;constructor(){var e;this._promise=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===H||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this._promise.then(e,r)}}var rm=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),rb=(e,r)=>null==e||isFinite(e)?!e||e<=0?rs(r):new Promise(t=>setTimeout(async()=>t(await rs(r)),e)):q(`Invalid delay ${e}.`),rw=e=>e?new rg:new ry,rk=(...e)=>Promise.race(e.map(e=>ek(e)?e():e)),rS=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rI=()=>{var e,r=new Set;return[(t,n)=>{var a=rS(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rE=(e,r=["and",", "])=>e?1===(e=e_(e)).length?e[0]:ed(r)?[e.slice(0,-1).join(r[1]??", ")," ",r[0]," ",e[e.length-1]].join(""):e.join(r??", "):H,rA=(e,r,t)=>null==e?H:ed(r)?null==(r=r[0])?H:r+" "+rA(e,r,t):null==r?H:1===r?e:t??e+"s",rT=(e,r,t)=>t?(ru(t,"\x1b[",r,"m"),ed(e)?ru(t,...e):ru(t,e),ru(t,"\x1b[m"),t):rT(e,r,[]).join(""),rx=(e,r="'")=>null==e?H:r+e+r,rN=e=>(e=Math.log2(e))===(0|e),rC=(e,r,t,n)=>{var a,i,o,s=Object.fromEntries(Object.entries(e).filter(([e,r])=>ec(e)&&eu(r)).map(([e,r])=>[e.toLowerCase(),r])),l=Object.entries(s),u=Object.values(s),c=s.any??u.reduce((e,r)=>e|r,0),f=r?{...s,any:c,none:0}:s,d=Object.fromEntries(Object.entries(f).map(([e,r])=>[r,e])),v=(e,t)=>el(e)?!r&&t?null!=d[e]?e:H:Number.isSafeInteger(e)?e:H:ec(e)?f[e]??f[e.toLowerCase()]??v(parseInt(e),t):H,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,H):(e??0)|t,(p=!1,H)):v(e),(e,r)=>null==(e=h(e,!1))?H:r&&(i=d[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=l.filter(([,r])=>r&&e&r&&rN(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?d[e]:H],y=(e,r)=>null==e?H:null==(e=h(o=e,r))?q(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,m=l.filter(([,e])=>!n||(n&e)===e&&rN(e));return ri(e=>y(e),[{configurable:!1,enumerable:!1},{parse:y,tryParse:h,entries:l,values:u,lookup:g,length:l.length,format:e=>g(e,!0),logFormat:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rE(e_(ep(e),e=>rx(e)),[r])}`},r&&{pure:m,map:(e,r)=>(e=y(e),m.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rO=(...e)=>{var r=e0(eH(e,!0)),t=e=>(eh(e)&&(ed(e)?e.forEach((r,n)=>e[n]=t(r)):r.forEach(([r,t])=>{var n,a=H;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.tryParse(n))&&(e[r]=a)))})),e);return t},r$=(e,r=["|",";",","],t=!0)=>{if(!e)return H;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&e1(r,(e,r,t=n[1].split(e))=>t.length>1?t:H)||(n[1]?[n[1]]:[]),n},rj=(e,r=!0,t)=>null==e?H:rF(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,s,l,u,c,f,d)=>{var v={source:e,scheme:t,urn:t?!n:!n&&H,authority:a,user:i,password:o,host:s??l,port:null!=u?parseInt(u):H,path:c,query:!1===r?f:rM(f,r),fragment:d};return v.path=v.path||(v.authority?v.urn?"":"/":H),v}),rM=(e,r,t=!0)=>null==e?H:eH(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=r$(e,!1===r?[]:!0===r?H:r,t)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==r?[a,o.length>1?o:i]:[a,i]:H,(e,t)=>e?!1!==r?ez(e,t):(e?e+",":"")+t:t),rU=(e,r)=>r&&null!=e?r.test(e):H,r_=(e,r,t)=>rF(e,r,t,!0),rF=(t,n,a,i=!1)=>(t??n)==null?H:a?(e=H,i?(r=[],rF(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rP=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rq=/\z./g,rz=(e,r)=>(r=eq(eF(eX(e,e=>e?.length)),"|"))?RegExp(r,"gu"):rq,rR={},rD=e=>e instanceof RegExp,rV=(e,r=[","," "])=>rD(e)?e:ed(e)?rz(e_(e,e=>rV(e,r)?.source)):en(e)?e?/./g:rq:ec(e)?rR[e]??=rF(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rz(e_(rB(n,RegExp(`(?<!(?<!\\\\)\\\\)[${eq(r,rP)}]`)),e=>e&&`^${eq(rB(e,/(?<!(?<!\\)\\)\*/),e=>rP(rJ(e,/\\(.)/g,"$1")),".*")}$`))):H,rB=(e,r)=>e?.split(r)??e,rJ=(e,r,t)=>e?.replace(r,t)??e;(A=t||(t={}))[A.Anonymous=0]="Anonymous",A[A.Indirect=1]="Indirect",A[A.Direct=2]="Direct",A[A.Sensitive=3]="Sensitive";var rW=rC(t,!1,"data classification"),rL=(e,r)=>rW.parse(e?.classification??e?.level)===rW.parse(r?.classification??r?.level)&&rH.parse(e?.purposes??e?.purposes)===rH.parse(r?.purposes??r?.purposes),rG=(e,r)=>null==e?void 0:eu(e.classification)&&eu(e.purposes)?e:{...e,level:void 0,purpose:void 0,classification:rW.parse(e.classification??e.level??r?.classification??0),purposes:rH.parse(e.purposes??e.purpose??r?.purposes??n.Necessary)};(T=n||(n={}))[T.None=0]="None",T[T.Necessary=1]="Necessary",T[T.Functionality=2]="Functionality",T[T.Performance=4]="Performance",T[T.Targeting=8]="Targeting",T[T.Security=16]="Security",T[T.Infrastructure=32]="Infrastructure",T[T.Anonymous=49]="Anonymous",T[T.Any=63]="Any",T[T.Server=2048]="Server",T[T.Server_Write=4096]="Server_Write";var rH=rC(n,!0,"data purpose",2111),rK=rC(n,!1,"data purpose",0),rX=(e,r)=>((a=e?.metadata)&&(r?(delete a.posted,delete a.queued,Object.entries(a).length||delete e.metadata):delete e.metadata),e),rY=e=>!!e?.patchTargetId;(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.Session=2]="Session",x[x.Device=3]="Device",x[x.User=4]="User";var rZ=rC(i,!1,"variable scope");t.Anonymous,n.Necessary;var rQ=e=>`'${e.key}' in ${rZ.format(e.scope)} scope`,r0={scope:rZ,purpose:rK,purposes:rH,classification:rW};rO(r0);var r1=e=>e?.filter(Q).sort((e,r)=>e.scope===r.scope?e.key.localeCompare(r.key,"en"):e.scope-r.scope);(N=o||(o={}))[N.Add=0]="Add",N[N.Min=1]="Min",N[N.Max=2]="Max",N[N.IfMatch=3]="IfMatch",N[N.IfNoneMatch=4]="IfNoneMatch",rC(o,!1,"variable patch type");var r2=e=>!!e?.variables;(C=s||(s={}))[C.Success=200]="Success",C[C.Created=201]="Created",C[C.Unchanged=304]="Unchanged",C[C.Denied=403]="Denied",C[C.NotFound=404]="NotFound",C[C.ReadOnly=405]="ReadOnly",C[C.Conflict=409]="Conflict",C[C.Unsupported=501]="Unsupported",C[C.Invalid=400]="Invalid",C[C.Error=500]="Error",rC(s,!1,"variable set status");var r4=(e,r,t)=>{var n,a=e(),i=e=>e,o=(e,t=r8)=>J(async()=>(n=i(t(await a,r)))&&e(n)),s={then:o(e=>e).then,all:o(e=>e,e=>e),changed:o(e=>eX(e,e=>e.status<300)),variables:o(e=>e_(e,r5)),values:o(e=>e_(e,e=>r5(e)?.value)),push:()=>(i=e=>(t?.(e_(r6(e))),e),s),value:o(e=>r5(e[0])?.value),variable:o(e=>r5(e[0])),result:o(e=>e[0])};return s},r6=e=>e?.map(e=>e?.status<400?e:H),r5=e=>r3(e)?e.current??e:H,r3=e=>e?.status<400||e?.status===404,r8=(e,r,t)=>{var n,a,i=[],o=e_(ep(e),(e,o)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${rQ(e.source??e)} could not be ${404===e.status?"found.":`${e.source||500!==e.status?"set":"read"} because ${409===e.status?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.current?.version}'.`:403===e.status?e.error??"the operation was denied.":400===e.status?e.error??"the value does not conform to the schema":405===e.status?"it is read only.":500===e.status?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[o])||!1!==n(e,a))&&i.push(a),H)));return i.length?q(i.join("\n")):ed(e)?o:o?.[0]},r9=e=>r8(e,H,!0),r7=e=>e&&"string"==typeof e.type,te=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),tr=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],tt=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eq(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=tr(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,s,l)=>{var u=o||s||l,c=tr(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ranks:c,value:u||void 0}),t?.add(tn(n))),""}),a},tn=e=>null==e?e:`${e.ranks.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,ta=5e3,ti=()=>()=>q("Not initialized."),to=window,ts=document,tl=ts.body,tu=(e,r)=>!!e?.matches(r),tc=K,tf=(e,r,t=(e,r)=>r>=tc)=>{for(var n,a=0,i=X;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==Y&&null!=n),Y),a-1)!==X&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},td=(e,r="z")=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||ea(e);case"n":return parseFloat(e);case"j":return V(()=>JSON.parse(e),Z);case"h":return V(()=>nl(e),Z);case"e":return V(()=>nc?.(e),Z);default:return ed(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:td(e,r[0])):void 0}},tv=(e,r,t)=>td(e?.getAttribute(r),t),tp=(e,r,t)=>tf(e,(e,n)=>n(tv(e,r,t))),th=(e,r)=>tv(e,r)?.trim()?.toLowerCase(),tg=e=>e?.getAttributeNames(),ty=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,tm=e=>null!=e?e.tagName:null,tb=()=>({x:(l=tw(X)).x/(tl.offsetWidth-window.innerWidth)||0,y:l.y/(tl.offsetHeight-window.innerHeight)||0}),tw=e=>({x:eA(scrollX,e),y:eA(scrollY,e)}),tk=(e,r)=>rJ(e,/#.*$/,"")===rJ(r,/#.*$/,""),tS=(e,r,t=Y)=>(u=tI(e,r))&&G({xpx:u.x,ypx:u.y,x:eA(u.x/tl.offsetWidth,4),y:eA(u.y/tl.offsetHeight,4),pageFolds:t?u.y/window.innerHeight:void 0}),tI=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:c,y:f}=tE(e),{x:c,y:f}):void 0,tE=e=>e?(d=e.getBoundingClientRect(),l=tw(X),{x:eA(d.left+l.x),y:eA(d.top+l.y),width:eA(d.width),height:eA(d.height)}):void 0,tA=(e,r,t,n={capture:!0,passive:!0})=>(r=ep(r),rS(t,t=>eW(r,r=>e.addEventListener(r,t,n)),t=>eW(r,r=>e.removeEventListener(r,t,n)))),tT=e=>{var{host:r,scheme:t,port:n}=rj(e,!1);return{host:r+(n?":"+n:""),scheme:t}},tx=()=>({...l=tw(Y),width:window.innerWidth,height:window.innerHeight,totalWidth:tl.offsetWidth,totalHeight:tl.offsetHeight}),tN=new WeakMap,tC=e=>tN.get(e),tO=(e,r=X)=>(r?"--track-":"track-")+e,t$=(e,r,t,n,a,i)=>r?.[1]&&eW(tg(e),o=>r[0][o]??=(i=X,ec(n=eW(r[1],([r,t,n],a)=>rU(o,r)&&(i=void 0,!t||tu(e,t))&&ex(n??o)))&&(!(a=e.getAttribute(o))||ea(a))&&tt(a,rJ(n,/\-/g,":"),t),i)),tj=()=>{},tM=(e,r)=>{if(v===(v=tR.tags))return tj(e,r);var t=e=>e?rD(e)?[[e]]:eS(e)?eP(e,t):[em(e)?[rV(e.match),e.selector,e.prefix]:[rV(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eQ(v))]];(tj=(e,r)=>t$(e,n,r))(e,r)},tU=(e,r)=>eq(ez(ty(e,tO(r,Y)),ty(e,tO("base-"+r,Y)))," "),t_={},tF=(e,r,t=tU(e,"attributes"))=>{t&&t$(e,t_[t]??=[{},r_(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[rV(t||n),,r])],r),tt(tU(e,"tags"),void 0,r)},tP=(e,r,t=X,n)=>(t?tf(e,(e,t)=>t(tP(e,r,X)),ek(t)?t:void 0):eq(ez(tv(e,tO(r)),ty(e,tO(r,Y)))," "))??(n&&(p=tC(e))&&n(p))??null,tq=(e,r,t=X,n)=>""===(h=tP(e,r,t,n))||(null==h?h:ea(h)),tz=(e,r,t,n)=>e?(tF(e,n??=new Set),tf(e,e=>{tM(e,n),tt(e_(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tR={name:"tail",src:"/_t.js",disabled:!1,postEvents:!0,postFrequency:2e3,requestTimeout:5e3,clientKey:null,apiKey:null,pushCookie:null,debug:!1,impressionThreshold:1e3,captureContextMenu:!0,defaultActivationTracking:"auto",tags:{default:["data-id","data-name"]}},tD=[],tV=[],tB=(e,r=0)=>e.charCodeAt(r),tJ=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tD[tV[r]=e.charCodeAt(0)]=r);var tW=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(tV[(16515072&r)>>18],tV[(258048&r)>>12],tV[(4032&r)>>6],tV[63&r]);return a.length+=n-t,tJ(a)},tL=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tD[tB(e,t++)]<<2|(r=tD[tB(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tD[tB(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tD[tB(e,t++)]));return i},tG={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tH=(e=256)=>e*Math.random()|0,tK=e=>{var r,t,n,a,i,o=0n,s=0,l=0n,u=[],c=0,f=0,d=0,v=0,p=[];for(d=0;d<e?.length;v+=p[d]=e.charCodeAt(d++));var h=e?()=>{u=[...p],f=255&(c=v),d=-1}:()=>{},g=e=>(f=255&(c+=-u[d=(d+1)%u.length]+(u[d]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tH()));for(t=0,i[n++]=g(f^16*tH(16)+a);r>t;i[n++]=g(f^e[t++]));for(;a--;)i[n++]=tH();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((f^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=f^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(s=en(r)?64:r,h(),[o,l]=tG[s],t=0;t<e.length;o=BigInt.asUintN(s,(o^BigInt(f^g(e[t++])))*l));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tX={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)s(e[o]);else s(e);return a.subarray(0,i);function s(e,a){var i,o,d,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),f(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(d=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var s=e.charCodeAt(o);if(s<128){i[a++]=s;continue}if(s<2048)i[a++]=s>>6|192;else{if(s>55295&&s<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var l=e.charCodeAt(o);if(l<56320||l>57343)throw Error("UTF-8 encode: second surrogate character 0x"+l.toString(16)+" at index "+o+" out of range");s=65536+((1023&s)<<10)+(1023&l),i[a++]=s>>18|240,i[a++]=s>>12&63|128}else i[a++]=s>>12|224;i[a++]=s>>6&63|128}i[a++]=63&s|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+d):d<=255?c([217,d]):d<=65535?c([218,d>>>8,d]):c([219,d>>>24,d>>>16,d>>>8,d]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),f(r)}})(e):Array.isArray(e)?l(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?l(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(s(t),s(n))}})(e);break;default:if(!a&&r&&r.invalidTypeReplacement)"function"==typeof r.invalidTypeReplacement?s(r.invalidTypeReplacement(e),!0):s(r.invalidTypeReplacement,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function l(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)s(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function f(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return f(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return l(-1,1);if(197===r)return l(-1,2);if(198===r)return l(-1,4);if(199===r)return d(-1,1);if(200===r)return d(-1,2);if(201===r)return d(-1,4);if(202===r)return s(4);if(203===r)return s(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return d(1);if(213===r)return d(2);if(214===r)return d(4);if(215===r)return d(8);if(216===r)return d(16);if(217===r)return f(-1,1);if(218===r)return f(-1,2);if(219===r)return f(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function s(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function l(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function f(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function d(e,r){e<0&&(e=o(r));var t=o(1),a=l(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={serialize:r,deserialize:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tX);var{deserialize:tY,serialize:tZ}=(O=tX.exports)&&O.__esModule&&Object.prototype.hasOwnProperty.call(O,"default")?O.default:O,tQ="$ref",t0=(e,r,t)=>ew(e)?H:t?null===r||r:r!==H,t1=(e,r,{defaultValues:t=!0,prettify:n=!1})=>{var a,i,o,s=(e,r,n=e[r],a=t0(r,n,t)?u(n):H)=>(n!==a&&(a!==H||ed(e)?e[r]=a:delete e[r],l(()=>e[r]=n)),a),l=e=>(a??=[]).push(e),u=e=>{if(null==e||ek(e)||ew(e))return null;if(!eh(e))return e;if(e.toJSON&&e!==(e=e.toJSON()))return u(e);if(null!=(o=i?.get(e)))return e[tQ]||(e[tQ]=o,l(()=>delete e[tQ])),{[tQ]:o};if(em(e))for(var r in(i??=new Map).set(e,i.size+1),e)s(e,r);else eS(e)&&(!ed(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?s(e,t):(e[t]=null,l(()=>delete e[t])));return e};return V(()=>r?tZ(u(e)??null):V(()=>JSON.stringify(e,H,n?2:0),()=>JSON.stringify(u(e),H,n?2:0)),!0,()=>a?.forEach(e=>e()))},t2=e=>{var r,t,n=e=>eh(e)?e[tQ]&&(t=(r??=[])[e[tQ]])?t:(e[tQ]&&(r[e[tQ]]=e,delete e[tQ]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return n(ec(e)?JSON.parse(e):null!=e?V(()=>tY(e),()=>(console.error("Invalid message received.",e),H)):e)},t4=(e,r={})=>{var t=(e,{json:r=!1,jsonDecodeFallback:t=!0,...n})=>{var a=(e,t)=>eu(e)&&!0===t?e:l(e=ec(e)?new Uint8Array(e_(e.length,r=>255&e.charCodeAt(r))):r?V(()=>JSON.stringify(e),()=>JSON.stringify(t1(e,!1,n))):t1(e,!0,n),t),i=e=>null==e?H:V(()=>t2(e),H);if(r)return[e=>t1(e,!1,n),i,(e,r)=>a(e,r)];var[o,s,l]=tK(e);return[e=>tW(o(t1(e,!0,n))),e=>null!=e?t&&(e?.[0]==="{"||e?.[0]==="[")?i(e):t2(s(tL(e))):null,(e,r)=>a(e,r)]};if(!e){var n=+(r.json??0);if(n&&!1!==r.prettify)return(g??=[t(null,{json:!1}),t(null,{json:!0,prettify:!0})])[+n]}return t(e,r)};t4();var[t6,t5]=t4(null,{json:!0,prettify:!0}),t3=rB(""+ts.currentScript.src,"#"),t8=rB(""+(t3[1]||""),";"),t9=t3[0],t7=t8[1]||rj(t9,!1)?.host,ne=e=>!!(t7&&rj(e,!1)?.host?.endsWith(t7)===Y),nr=(...e)=>rJ(eq(e),/(^(?=\?))|(^\.(?=\/))/,t9.split("?")[0]),nt=nr("?","var"),nn=nr("?","mnt");nr("?","usr");var na=Symbol(),ni=Symbol(),no=(e,r,t=Y,n=X)=>{r&&(t?console.groupCollapsed:console.group)((n?"":rT("tail.js: ","90;3"))+r);var a=e?.[ni];a&&(e=e[na]),null!=e&&console.log(eh(e)?rT(t6(e),"94"):ek(e)?""+e:e),a&&a.forEach(([e,r,t])=>no(e,r,t,!0)),r&&console.groupEnd()},[ns,nl]=t4(),[nu,nc]=[ti,ti],[nf,nd]=rI(),nv=e=>{nc===ti&&([nu,nc]=t4(e),nd(nu=t4(null,{json:!0})[0],nc))},np=e=>r=>nh(e,r),nh=(...e)=>{var r=e.shift();console.error(ec(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[ng,ny]=rI(),[nm,nb]=rI(),nw=e=>nS!==(nS=e)&&ny(nS=!1,nA(!0,!0)),nk=e=>nI!==(nI=!!e&&"visible"===document.visibilityState)&&nb(nI,!e,nE(!0,!0));ng(nk);var nS=!0,nI=!1,nE=rv(!1),nA=rv(!1);tA(window,["pagehide","freeze"],()=>nw(!1)),tA(window,["pageshow","resume"],()=>nw(!0)),tA(document,"visibilitychange",()=>(nk(!0),nI&&nw(!0))),ny(nS,nA(!0,!0));var nT=!1,nx=rv(!1),[nN,nC]=rI(),nO=rh({callback:()=>nT&&nC(nT=!1,nx(!1)),frequency:2e4,once:!0,paused:!0}),n$=()=>!nT&&(nC(nT=!0,nx(!0)),nO.restart());tA(window,"focus",n$),tA(window,"blur",()=>nO.trigger()),tA(document.body,["keydown","pointerdown","pointermove","scroll"],n$),n$(),($=y||(y={}))[$.View=-3]="View",$[$.Tab=-2]="Tab",$[$.Shared=-1]="Shared";var nj=rC(y,!1,"local variable scope"),nM=e=>nj.tryParse(e)??rZ(e),nU=e=>nj.format(e)??rZ.format(e),n_=e=>!!nj.tryParse(e?.scope),nF=rO({scope:nj},r0),nP=e=>null==e?void 0:ec(e)?e:e.source?nP(e.source):`${nM(e.scope)}\0${e.key}\0${e.targetId??""}`,nq=e=>{var r=e.split("\0");return{scope:+r[0],key:r[1],targetId:r[2]}},nz=0,nR=void 0,nD=()=>(nR??ti())+"_"+nV(),nV=()=>++nz,nB=e=>crypto.getRandomValues(e),nJ=()=>rJ("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nB(new Uint8Array(1))[0]&15>>e/4).toString(16)),nW={},nL={id:nR,heartbeat:rd()},nG={knownTabs:{[nR]:nL},variables:{}},[nH,nK]=rI(),[nX,nY]=rI(),nZ=ti,nQ=e=>nW[nP(e)],n0=(...e)=>n2(e.map(e=>(e.timestamp=rd(),e.expires=3e3,nF(e)))),n1=e=>e_(e,e=>e&&[e,nW[nP(e)]]),n2=e=>{var r=e_(e,e=>e&&[nP(e),e]);if(r?.length){var t=n1(e);e7(nW,r);var n=eX(r,e=>e[1].scope>y.Tab);n.length&&(e7(nG.variables,n),nZ({type:"patch",payload:eH(n)})),nY(t,nW,!0)}};nf((e,r)=>{ng(t=>{if(t){var n=r(sessionStorage.getItem(F));sessionStorage.removeItem(F),nR=n?.[0]??rd().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nW=eH(ez(eX(nW,([,e])=>e.scope===y.View),e_(n?.[1],e=>[nP(e),e])))}else sessionStorage.setItem(F,e([nR,e_(nW,([,e])=>e.scope!==y.View?e:void 0)]))},!0),nZ=(r,t)=>{e&&(localStorage.setItem(F,e([nR,r,t])),localStorage.removeItem(F))},tA(window,"storage",e=>{if(e.key===F){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===nR)){var[a,{type:i,payload:o}]=n;if("query"===i)t.active||nZ({type:"set",payload:nG},a);else if("set"===i&&t.active)e7(nG,o),e7(nW,o.variables),t.trigger();else if("patch"===i){var s=n1(e_(o,1));e7(nG.variables,o),e7(nW,o),nY(s,nW,!1)}else"tab"===i&&(e7(nG.knownTabs,a,o),o&&nK("tab",o,!1))}}});var t=rh(()=>nK("ready",nG,!0),-25),n=rh({callback(){var e=rd()-1e4;eW(nG?.knownTabs,([r,t])=>t[0]<e&&rn(nG.knownTabs,r)),nL.heartbeat=rd(),nZ({type:"tab",payload:nL})},frequency:5e3,paused:!0}),a=e=>{nZ({type:"tab",payload:e?nL:void 0}),e?(t.restart(),nZ({type:"query"})):t.toggle(!1),n.toggle(e)};ng(e=>a(e),!0)},!0);var[n4,n6]=rI(),[n5,n3]=rI(),n8=((e,{timeout:r=1e3,encrypt:t=!0,retries:n=10}={})=>{var a=()=>(t?nc:nl)(localStorage.getItem(e)),i=()=>localStorage.setItem(e,(t?nu:ns)([nR,rd()+r])),o=rp(r/2);return async(t,s,l=null!=s?1:n)=>{for(;l--;){var u=a();if((!u||u[1]<rd())&&(i(),a()?.[0]===nR))return o(i),await L(t,!0,()=>o(!1)&&localStorage.removeItem(e));var c=rw(),[f]=tA(window,"storage",r=>{r.key!==e||r.newValue||c.resolve()});await rk(rb(s??r),c),f()}null==s&&q(e+" could not be acquired.")}})(_+"rq"),n9=rh(()=>{if(b!==(b=tR.pushCookie)){if(!b)return;m=RegExp(rP(b)+"=([^;]*)")}var e=nc?.(rF(document.cookie,m)?.[1]);r2(e)&&n3(e)},1e3),n7=0,ae=(e=1e3)=>{var r=()=>{r=Z,--n7||(n9.restart(1e3),clearTimeout(0))};return n7++||n9.restart(100),e>0&&setTimeout(r,e),r()},ar=async(e,r,{beacon:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,s=t=>{var s=ek(r)?r?.(a,t):r;return!1!==s&&(null!=s&&!0!==s&&(a=s),n6(e,a,t,e=>(o=a===H,a=e)),!o&&(i=(n?nu:JSON.stringify)(a)))};if(!t)return await n8(()=>eL(1,async r=>{if(!s(r))return ex();var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"Content-Type":"text/plain"},body:i});if(t.status>=400)return 0===r?ex(q(`Invalid response: ${await t.text()}`)):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rb((1+r)*200));var o=await t.text(),l=o?.length?(n?nc:JSON.parse)?.(o):H;return null!=l&&n3(l),ex(l)}));s(0)&&(ae(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||q("Beacon send failed."))},at=["scope","key","targetId","version"],an=[...at,"created","modified","classification","purposes","tags","readonly","value"],aa=[...at,"init","purpose","refresh"];[...an];var ai=new Map,ao=(e,r)=>{var a=rh(async()=>{var e=e_(ai,([e,r])=>({...nq(e),result:[...r]}));e.length&&await c.get(...e)},3e3),i=(e,r)=>eB(r,r=>e3(ai,e,()=>new Set).add(r)),o=(e,r)=>{if(e){var t,n=nP(e),a=ra(ai,n);if(a?.size){if(e?.purposes===r?.purposes&&e?.classification==r?.classification&&z(e?.value,r?.value))return;eW(a,a=>{t=!1,a?.(e,r,(e=!0)=>t=e),t&&i(n,a)})}}};ng((e,r)=>a.toggle(e,e&&r>=3e3),!0),nX(e=>eW(e,([e,r])=>o(e,r)));var l=new Map,u=(e,r)=>e7(l,e,en(r)?r?void 0:0:r),c={get:(...t)=>r4(async()=>{var n=[],a=e_(t,(e,r)=>[e,r]),o=[],l=(await ar(e,()=>!!(a=e_(a,([e,r])=>{if(e){var t=nP(e);i(t,e.result);var a=nQ(t);e.init&&u(t,e.cache);var l=e.purposes;if((l??~0)&(a?.purposes??~0)){if(!e.refresh&&a?.expires<rd())ru(n,[{...a,status:s.Success},r]);else if(!n_(e))return[ro(e,aa),r];else if(em(e.init)){var c={...nF(e),status:s.Created,...e.init};null!=c.value&&(ru(o,f(c)),ru(n,[c,r]))}}else ru(n,[{...e,status:s.Denied,error:"No consent for "+rH.logFormat(l)},r])}})).length&&{variables:{get:e_(a,0)},deviceSessionId:r?.deviceSessionId}))?.variables?.get??[];return ru(n,...e_(l,(e,r)=>e&&[e,a[r][1]])),o.length&&n2(o),n.map(([e])=>e)},e_(t,e=>e?.error)),set:(...a)=>r4(async()=>{var i=[],o=[],l=e_(a,(e,r)=>{if(e){var a=nP(e),l=nQ(a);if(u(a,e.cache),n_(e)){if(null!=e.patch)return q("Local patching is not supported.");var c={value:e.value,classification:t.Anonymous,purposes:n.Necessary,scope:nj(e.scope),key:e.key};return o[r]={status:l?s.Success:s.Created,source:e,current:c},void ru(i,f(c))}return null==e.patch&&e?.version===void 0&&(e.version=l?.version,e.force??=!!e.version),[e,r]}}),c=l.length?D((await ar(e,{variables:{set:l.map(e=>e[0])},deviceSessionId:r?.deviceSessionId})).variables?.set,"No result."):[];return i.length&&n2(i),eW(c,(e,r)=>{var[t,n]=l[r];e.source=t,o[n]=e}),o},e_(a,e=>e?.error))},f=(e,r=rd())=>({...ro(e,an),timestamp:r,expires:r+(e3(l,nP(e))??3e3)});return n5(({variables:e})=>{if(e){var r=rd(),t=ez(e_(e.get,e=>r5(e)),e_(e.set,e=>r5(e)));t?.length&&n2(eB(t,f,r))}}),c},as=(e,r,t=ta)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.queued?e8(r,{type:e.type+"_patch",patchTargetId:e.clientId}):q("Source event not queued."),s=async(t,n=!0,a)=>(no({[ni]:e_(t=t.map(e=>(e8(e,{metadata:{posted:!0}}),e8(rX(rl(e),!0),{timestamp:e.timestamp-rd()}))),e=>[e,e.type,X])},"Posting "+rE([rA("new event",[eY(t,e=>!rY(e))||void 0]),rA("event patch",[eY(t,e=>rY(e))||void 0])])+(n?" asynchronously":" synchronously")+"."),ar(e,{events:t,variables:a,deviceSessionId:r?.deviceSessionId},{beacon:n})),l=async(e,{flush:t=!1,async:a=!0,variables:i}={})=>{if((e=e_(ep(e),e=>e8(r.applyEventExtensions(e),{metadata:{queued:!0}}))).length&&eW(e,e=>no(e,e.type)),!a)return s(e,!1,i);if(!t){e.length&&ru(n,...e);return}n.length&&rc(e,...n.splice(0)),e.length&&await s(e,!0,i)};return t>0&&rh(()=>l([],{flush:!0}),t),nm((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=e_(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&l(ez(n.splice(0),a),{flush:!0})}}),{post:l,postPatch:(e,r,t)=>l(o(e,r),{flush:!0}),registerEventPatchSource(e,r,t=!0){var n=!1,s=()=>n=!0;return a.set(e,rl(e)),i.set(e,()=>{var i=a.get(e),[l,u]=(t?rf(r(i,s),i):r(i,s))??[];return l&&!z(u,i)?(a.set(e,rl(u)),[o(e,l),n]):[void 0,n]}),s}}},al=Symbol(),au=e=>{var r=new IntersectionObserver(e=>eW(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[al]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=eX(n?.component,e=>e.track?.impressions||(e.track?.secondary??e.inferred)!==Y))&&eY(a)){var a,i,o,s,l=X,u=0,c=rp(tR.impressionThreshold),f=aE();t[al]=(r,n,d)=>{f(r=d>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),l!==(l=r)&&(l?c(()=>{++u,o||ru(e,o=eX(e_(a,e=>(e.track?.impressions||tq(t,"impressions",Y,e=>e.track?.impressions))&&G({type:"impression",pos:tS(t),viewport:tx(),timeOffset:aT(),impressions:u,...aP(t,Y)})||null))),o?.length&&(s=e_(o,r=>e.events.registerEventPatchSource(r,()=>({relatedEventId:r.clientId,duration:f(),impressions:u}))))}):(eW(s,e=>e()),c(!1)))},r.observe(t)}}},ac=()=>{var e=to?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??to.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{deviceType:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{dpr:to.devicePixelRatio,width:r,height:t,landscape:a}}},af=e=>ru(e,G({type:"user_agent",hasTouch:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:w?.clientId,languages:e_(navigator.languages,(e,r,t=e.split("-"))=>G({id:e,language:t[0],region:t[1],primary:0===r,preference:r+1})),timezone:{iana:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...ac()})),ad=(e,r="A"===tm(e)&&tv(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),av=(e,r=tm(e),t=tq(e,"button"))=>t!==X&&(R(r,"A","BUTTON")||"INPUT"===r&&R(th(e,"type"),"button","submit")||t===Y),ap=()=>w?.clientId,ah={scope:"shared",key:"referrer"},ag=(e,r)=>{E.variables.set({...ah,value:[ap(),e]}),r&&E.variables.get({scope:ah.scope,key:ah.key,result:(t,n,a)=>t?.value?a():n?.value?.[1]===e&&r()})},ay=rv(),am=rv(),ab=rv(),aw=1,ak=()=>am(),[aS,aI]=rI(),aE=e=>{var r=rv(e,ay),t=rv(e,am),n=rv(e,ab),a=rv(e,()=>aw);return(e,i)=>({totalTime:r(e,i),visibleTime:t(e,i),interactiveTime:n(e,i),activations:a(e,i)})},aA=aE(),aT=()=>aA(),[ax,aN]=rI(),aC=new WeakSet,aO=document.getElementsByTagName("iframe"),a$=e=>(null==e||(e===Y||""===e)&&(e="add"),ec(e)&&R(e,"add","remove","update","clear")?{action:e}:eh(e)?e:void 0);function aj(e){if(e){if(null!=e.units&&R(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var aM=e=>tz(e,void 0,e=>e_(ep(e3(tN,e)?.tags))),aU=e=>e?.component||e?.content,a_=e=>tz(e,r=>r!==e&&!!aU(e3(tN,r)),e=>(S=e3(tN,e),(S=e3(tN,e))&&eP(ez(S.component,S.content,S),"tags"))),aF=(e,r)=>r?e:{...e,rect:void 0,content:(I=e.content)&&e_(I,e=>({...e,rect:void 0}))},aP=(e,r=X)=>{var t,n,a,i=[],o=[],s=0;return tf(e,e=>{var n=e3(tN,e);if(n){if(aU(n)){var a=eX(ep(n.component),e=>0===s||!r&&(1===s&&e.track?.secondary!==Y||e.track?.promote));t=e4(a,e=>e.track?.region)&&tE(e)||void 0;var l=a_(e);n.content&&rc(i,...e_(n.content,e=>({...e,rect:t,...l}))),a?.length&&(rc(o,...e_(a,e=>(s=eZ(s,e.track?.secondary?1:2),aF({...e,content:i,rect:t,...l},!!t)))),i=[])}var u=n.area||tP(e,"area");u&&rc(o,...e_(u))}}),i.length&&ru(o,aF({id:"",rect:t,content:i})),eW(o,e=>{ec(e)?ru(n??=[],e):(e.area??=eq(n,"/"),rc(a??=[],e))}),a||n?{components:a,area:eq(n,"/")}:void 0},aq=Symbol();j={necessary:1,preferences:2,statistics:4,marketing:8},window.tail.push({consent:{externalSource:{key:"Cookiebot",poll(){var e=ts.cookie.match(/CookieConsent=([^;]*)/)?.[1],r=1;return e?.replace(/([a-z]+):(true|false)/g,(e,t,n)=>("true"===n&&(r|=j[t]??0),"")),{level:r>1?1:0,purposes:r}}}}});var az=[{id:"context",setup(e){rh(()=>eW(aO,e=>rr(aC,e)&&aN(e)),-1e3).trigger(),e.variables.get({scope:"view",key:"view",result:(t,n,a)=>(null==w||!t?.value||w?.definition?r=t?.value:(w.definition=t.value,w.metadata?.posted&&e.events.postPatch(w,{definition:r})),a())});var r,t=nQ({scope:"tab",key:"viewIndex"})?.value??0,n=nQ({scope:"tab",key:"tabIndex"})?.value;null==n&&n0({scope:"tab",key:"tabIndex",value:n=nQ({scope:"shared",key:"tabIndex"})?.value??nQ({scope:"session",key:M})?.value?.tabs??0},{scope:"shared",key:"tabIndex",value:n+1});var a=null,i=(i=X)=>{if(!tk(""+a,a=location.href)||i){var{source:o,scheme:s,host:l}=rj(location.href+"",!0);w={type:"view",timestamp:rd(),clientId:nD(),tab:nR,href:o,path:location.pathname,hash:location.hash||void 0,domain:{scheme:s,host:l},tabNumber:n+1,tabViewNumber:t+1,viewport:tx(),duration:aA(void 0,!0)},0===n&&(w.firstTab=Y),0===n&&0===t&&(w.landingPage=Y),n0({scope:"tab",key:"viewIndex",value:++t});var u=rM(location.href);if(e_(["source","medium","campaign","term","content"],(e,r)=>(w.utm??={})[e]=u[`utm_${e}`]?.[0]),!(w.navigationType=k)&&performance&&e_(performance.getEntriesByType("navigation"),e=>{w.redirects=e.redirectCount,w.navigationType=rJ(e.type,/\_/g,"-")}),k=void 0,"navigate"===(w.navigationType??="navigate")){var c=nQ(ah)?.value;c&&ne(document.referrer)&&(w.view=c?.[0],w.relatedEventId=c?.[1],e.variables.set({...ah,value:void 0}))}var c=document.referrer||null;c&&!ne(c)&&(w.externalReferrer={href:c,domain:tT(c)}),w.definition=r,r=void 0,e.events.post(w),e.events.registerEventPatchSource(w,()=>({duration:aT()})),aI(w)}};return nN(e=>ab(e)),nm(e=>{e?(am(Y),++aw):(am(X),ab(X))}),tA(window,"popstate",()=>(k="back-forward",i())),e_(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),k="navigate",i()}}),i(),{processCommand:r=>aV(r)&&(ru(e,r.username?{type:"login",username:r.username}:{type:"logout"}),Y),decorate(e){!w||te(e)||rY(e)||(e.view=w.clientId)}}}},{id:"components",setup(e){var r=au(e),t=e=>null==e?void 0:{...e,component:ep(e.component),content:ep(e.content),tags:ep(e.tags)},n=({boundary:e,...n})=>{re(tN,e,e=>t("add"in n?{...e,component:ez(e?.component,n.component),content:ez(e?.content,n.content),area:n?.area??e?.area,tags:ez(e?.tags,n.tags),cart:n.cart??e?.cart,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,e3(tN,e))};return{decorate(e){eW(e.components,e=>ra(e,"track"))},processCommand:e=>aW(e)?(n(e),Y):aY(e)?(e_(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!e3(n,a))for(var i=[];null!=tv(a,e);){rr(n,a);var o=rB(tv(a,e),"|");tv(a,e,null);for(var s=0;s<o.length;s++){var l=o[s];if(""!==l){var u="-"===l?-1:parseInt(ef(l)??"",36);if(u<0){i.length+=u;continue}if(0===s&&(i.length=0),isNaN(u)&&/^["\[{]/.test(l))for(var c="";s<o.length;s++)try{l=JSON.parse(c+=o[s]);break}catch(e){}u>=0&&r[u]&&(l=r[u]),ru(i,l)}}ru(t,...e_(i,e=>({add:Y,...e,boundary:a})));var f=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=f}}),t})(e.scan.attribute,e.scan.components),n),Y):X}}},{id:"navigation",setup(e){var r=r=>{tA(r,["click","contextmenu","auxclick"],t=>{var n,a,i,o,s=X;if(tf(t.target,e=>{var r;av(e)&&(o??=e),s=s||"NAV"===tm(e),a??=tq(e,"clicks",Y,e=>e.track?.clicks)??((r=ep(tC(e)?.component))&&e4(r,e=>e.track?.clicks!==X)),i??=tq(e,"region",Y,e=>e.track?.region)??((r=tC(e)?.component)&&e4(r,e=>e.track?.region))}),o){var l,u=aP(o),c=aM(o);a??=!s;var f={...(i??=Y)?{pos:tS(o,t),viewport:tx()}:null,...(tf(t.target??o,e=>"IMG"===tm(e)||e===o?(n={element:{tagName:e.tagName,text:tv(e,"title")||tv(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},X):Y),n),...u,timeOffset:aT(),...c};if(ad(o)){var d=o.hostname!==location.hostname,{host:v,scheme:p,source:h}=rj(o.href,!1);if(o.host===location.host&&o.pathname===location.pathname&&o.search===location.search){if("#"===o.hash)return;o.hash!==location.hash&&0===t.button&&ru(e,G({type:"anchor_navigation",anchor:o.hash,...f}));return}var g=G({clientId:nD(),type:"navigation",href:d?o.href:h,external:d,domain:{host:v,scheme:p},self:Y,anchor:o.hash,...f});if("contextmenu"===t.type){var y=o.href,m=ne(y);if(m){ag(g.clientId,()=>ru(e,g));return}var b=(""+Math.random()).replace(".","").substring(1,8);if(!m){if(!tR.captureContextMenu)return;o.href=nn+"="+b+encodeURIComponent(y),tA(window,"storage",(r,t)=>r.key===P&&(r.newValue&&JSON.parse(r.newValue)?.requestId===b&&ru(e,g),t())),tA(r,["keydown","keyup","visibilitychange","pointermove"],(e,r)=>{r(),o.href=y})}return}t.button<=1&&(1===t.button||t.ctrlKey||t.shiftKey||t.altKey||tv(o,"target")!==window.name?(ag(g.clientId),g.self=X,ru(e,g)):tk(location.href,o.href)||(g.exit=g.external,ag(g.clientId)));return}var w=(tf(t.target,(e,r)=>!!(l??=a$(tC(e)?.cart??tP(e,"cart")))&&!l.item&&(l.item=e2(tC(e)?.content))&&r(l)),aj(l));(w||a)&&ru(e,w?G({type:"cart_updated",...f,...w}):G({type:"component_click",...f}))}})};r(document),ax(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",setup(e){var r={},t=tw(Y);aS(()=>rm(()=>(r={},t=tw(Y)),250)),tA(window,"scroll",()=>{var n=tw(),a=tb();if(n.y>=t.y){var i=[];!r.fold&&n.y>=t.y+200&&(r.fold=Y,ru(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=Y,ru(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=Y,ru(i,"page-end"));var o=e_(i,e=>G({type:"scroll",scrollType:e,offset:a}));o.length&&ru(e,o)}})}},{id:"cart",setup:e=>({processCommand(r){if(aD(r)){var t=r.cart;return"clear"===t?ru(e,{type:"cart_updated",action:"clear"}):(t=aj(t))&&ru(e,{...t,type:"cart_updated"}),Y}return aX(r)?(ru(e,{type:"order",...r.order}),Y):X}})},{id:"forms",setup(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var s=tp(i,tO("ref"))||"track_ref",l=()=>i.isConnected&&tE(i).width,u=e3(r,i,()=>{var r,t=new Map,n={type:"form",name:tp(i,tO("form-name"))||tv(i,"name")||i.id||void 0,activeTime:0,totalTime:0,fields:{}};e.events.post(n),e.events.registerEventPatchSource(n,()=>n);var s=()=>{o(),r[3]>=2&&(n.completed=3===r[3]||!l()),e.events.postPatch(n,{...a,totalTime:rd(Y)-r[4]}),r[3]=1},u=rp();return tA(i,"submit",()=>{a=aP(i),r[3]=3,u(()=>{i.isConnected&&tE(i).width>0?(r[3]=2,u()):s()},750)}),r=[n,t,i,0,rd(Y),1]});return e3(u[1],n)||e_(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===s||tq(e,"ref"))&&(e.value||(e.value=nJ()),u[0].ref=e.value);return}var n=e.name,a=u[0].fields[n]??={id:e.id||n,name:n,label:rJ(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),activeTime:0,type:e.type??"unknown",[aq]:t(e)};u[0].fields[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(s-(s=ak())),u=-(l-(l=rd(Y))),c=r[aq];(r[aq]=t(n))!==c&&(r.fillOrder??=a[5]++,r.filled&&(r.corrections=(r.corrections??0)+1),r.filled=Y,a[3]=2,eW(e.fields,([e,t])=>t.lastField=e===r.name||void 0)),r.activeTime+=o,r.totalTime+=u,e.activeTime+=o,i=null}},s=0,l=0,u=e=>{e&&tA(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>{t&&(i=t,"focusin"===e.type?(l=rd(Y),s=ak()):o())})};u(document),ax(e=>e.contentDocument&&u)}},{id:"consent",setup(e){var r=async r=>await e.variables.get({scope:"session",key:U,result:r}).value,t=async t=>{if(t){var n=await r();if(!n||rL(n,t=rG(t)))return[!1,n];var a={level:rW.lookup(t.classification),purposes:rH.lookup(t.purposes)};return await e.events.post(G({type:"consent",consent:a}),{async:!1,variables:{get:[{scope:"session",key:U}]}}),[!0,a]}},n={};return{processCommand(e){if(a0(e)){var a=e.consent.get;a&&r(a);var i=rG(e.consent.set);i&&(async()=>i.callback?.(...await t(i)))();var o=e.consent.externalSource;if(o){var s,l=o.key,u=n[l]??=rh({frequency:o.pollFrequency??1e3}),c=async()=>{if(ts.hasFocus()){var e=rG(o.poll());if(e&&!rL(s,e)){var[r,n]=await t(e);r&&no(n,"Consent was updated from "+l),s=e}}};u.restart(o.pollFrequency,c).trigger()}return Y}return X}}}}],aR=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),aD=aR("cart"),aV=aR("username"),aB=aR("tagAttributes"),aJ=aR("disable"),aW=aR("boundary"),aL=aR("extension"),aG=aR(Y,"flush"),aH=aR("get"),aK=aR("listener"),aX=aR("order"),aY=aR("scan"),aZ=aR("set"),aQ=e=>"function"==typeof e,a0=aR("consent"),a1=()=>{nX((e,r,t)=>{var n=ez(r1(e_(e,1))?.map(e=>[e,`${e.key} (${nU(e.scope)}, ${e.scope<0?"client-side memory only":rH.format(e.purposes)})`,X]),[[{[ni]:r1(e_(r,1))?.map(e=>[e,`${e.key} (${nU(e.scope)}, ${e.scope<0?"client-side memory only":rH.format(e.purposes)})`,X])},"All variables",Y]]);no({[ni]:n},rT(`Variables changed${t?"":" - merging changes from another tab"} (${e.length} changed, ${eY(r)} in total).`,"2;3"))})},a2=e=>{if(E)return E;ec(e)&&(e=nl(e)),e7(tR,e),nv(ra(tR,"clientKey"));var r=ra(tR,"apiKey"),t=to[tR.name]??[];if(!ed(t)){q(`The global variable for the tracker "${tR.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...r)=>{var t=Y;a=eX(a,n=>V(()=>(n[e]?.(...r,{tracker:E,unsubscribe:()=>t=X}),t),np(n)))},o=[],s={applyEventExtensions(e){e.clientId??=nD(),e.timestamp??=rd(),d=Y;var r=X;return e_(n,([,t])=>{(r||t.decorate?.(e)===X)&&(r=Y)}),r?void 0:e}},l=ao(nt,s),u=as(nt,s),c=null,f=0,d=X,v=X;return Object.defineProperty(to,tR.name,{value:E=Object.freeze({id:"tracker_"+nD(),events:u,variables:l,push(...e){if(!c&&r){if(e[0]!==r)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var t=X;if((e=eX(eP(e,e=>ec(e)?nl(e):e),e=>{if(!e)return X;if(aB(e))tR.tags=e7({},tR.tags,e.tagAttributes);else if(aJ(e))return tR.disabled=e.disable,X;else if(aG(e))return t=Y,X;else if(aQ(e))return e(E),X;return v||aK(e)||aL(e)?Y:(o.push(e),X)})).length||t){var s=e6(e,e=>aL(e)?-100:aK(e)?-50:aZ(e)?-10:r7(e)?90:0);if(!(c&&c.splice(d?f+1:c.length,0,...s))){for(f=0,c=s;f<c.length;f++)c[f]&&V(()=>{var e,r=c[f];if(i("command",r),d=X,r7(r))u.post(r);else if(aH(r))l.get(...ep(r.get));else if(aZ(r))l.set(...ep(r.set));else if(aK(r))ru(a,r.listener);else if(aL(r))(e=V(()=>r.extension.setup(E),e=>nh(r.extension.id,e)))&&(ru(n,[r.priority??100,e,r.extension]),e6(n,([e])=>e));else if(aQ(r))r(E);else{var t=X;for(var[,e]of n)if(t=e.processCommand?.(r)??X)break;t||nh("invalid-command",r,"Loaded extensions:",n.map(e=>e[2].id))}},e=>nh(E,"internal-error",e));c=null,t&&u.post([],{flush:t})}}}},__isTracker:Y}),configurable:!1,writable:!1}),a1(),nH(async(e,r,n,a)=>{if("ready"===e){var i=r9((await l.get({scope:"session",key:M,refresh:!0},{scope:"session",key:U,refresh:!0,cache:K}))[0]).value;s.deviceSessionId=i.deviceSessionId,i.hasUserAgent||(af(E),i.hasUserAgent=!0),v=!0,o.length&&ru(E,o),a(),ru(E,...e_(az,e=>({extension:e})),...t,{set:{scope:"view",key:"loaded",value:!0}})}},!0),E};to[".tail.js.init"]=e=>{e(a2)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
