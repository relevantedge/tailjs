(()=>{"use strict";var e,r,t,n,a,i,o,l,s,u,c,d,f,v,p,h,g,y,m,w,b,k,E,S,A,T,I,x,N,O,$,j,C=(e,r=e=>TypeError(e))=>{throw er(e=e8(e))?r(e):e},M=(e,r,t=-1)=>{if(e===r||(e??r)==null)return!0;if(eo(e)&&eo(r)&&e.length===r.length){var n=0;for(var a in e){if(e[a]!==r[a]&&!M(e[a],r[a],t-1))return!1;++n}return n===Object.keys(r).length}return!1},U=(e,r,...t)=>e===r||t.length>0&&t.some(r=>U(e,r)),_=(e,r)=>null!=e?e:C(r??"A required value is missing",e=>TypeError(e.replace("..."," is required."))),F=(e,r=!0,t)=>{try{return e()}catch(e){return ef(r)?ea(e=r(e))?C(e):e:Y(r)?console.error(r?C(e):e):r}finally{t?.()}},P=e=>{var r=void 0;return()=>r??=e8(e)},q=e=>{var r={e:!0,then:R(()=>(r.e=!0,e8(e)))};return r},R=e=>{var r=P(e);return(e,t)=>z(r,[e,t])},z=async(e,r=!0,t)=>{try{var n=await e8(e);return en(r)?r[0]?.(n):n}catch(e){if(Y(r)){if(r)throw e;console.error(e)}else{if(en(r)){if(!r[1])throw e;return r[1](e)}var a=await r?.(e);if(a instanceof Error)throw a;return a}}finally{t?.()}},D=e=>e,B=void 0,W=Number.MAX_SAFE_INTEGER,V=!1,J=!0,G=()=>{},H=e=>null!=e,L=Symbol.iterator,K=(e,r)=>(t,n=!0)=>e(t)?t:r&&n&&null!=t&&null!=(t=r(t))?t:B,X=(e,r)=>ef(r)?e!==B?r(e):B:e?.[r]!==B?e:B,Y=e=>"boolean"==typeof e,Z=K(Y,e=>0!=e&&(1==e||"false"!==e&&("true"===e||B))),Q=e=>!!e,ee=e=>"number"==typeof e,er=e=>"string"==typeof e,et=K(er,e=>e?.toString()),en=Array.isArray,ea=e=>e instanceof Error,ei=(e,r=!1)=>null==e?B:!r&&en(e)?e:ev(e)?[...e]:[e],eo=e=>"object"==typeof e,el=Object.prototype,es=Object.getPrototypeOf,eu=e=>null!=e&&es(e)===el,ec=(e,r)=>"function"==typeof e?.[r],ed=e=>"symbol"==typeof e,ef=e=>"function"==typeof e,ev=(e,r=!1)=>!!(e?.[L]&&("object"==typeof e||r)),ep=e=>e instanceof Map,eh=e=>e instanceof Set,eg=(e,r)=>null==e?B:!1===r?e:Math.round(e*(r=Math.pow(10,r&&!0!==r?r:0)))/r,ey=!1,em=e=>(ey=!0,e),ew=e=>null==e?B:ef(e)?e:r=>r[e],eb=(e,r,t)=>(r??t)!==B?(e=ew(e),r??=0,t??=W,(n,a)=>r--?B:t--?e?e(n,a):n:t):e,ek=e=>e?.filter(H),eE=(e,r,t,n)=>null==e?[]:!r&&en(e)?ek(e):e[L]?function*(e,r){if(null!=e){if(r){r=ew(r);var t=0;for(var n of e)if(null!=(n=r(n,t++))&&(yield n),ey){ey=!1;break}}else for(var n of e)null!=n&&(yield n)}}(e,t===B?r:eb(r,t,n)):eo(e)?function*(e,r){r=ew(r);var t=0;for(var n in e){var a=[n,e[n]];if(r&&(a=r(a,t++)),null!=a&&(yield a),ey){ey=!1;break}}}(e,eb(r,t,n)):eE(ef(e)?function*(e,r,t=Number.MAX_SAFE_INTEGER){for(null!=r&&(yield r);t--&&null!=(r=e(r));)yield r}(e,t,n):function*(e=0,r){if(e<0)for(r??=-e-1;e++;)yield r--;else for(r??=0;e--;)yield r++}(e,t),r),eS=(e,r)=>r&&!en(e)?[...e]:e,eA=(e,r,t,n)=>eE(e,r,t,n),eT=(e,r,t=1,n=!1,a,i)=>(function* e(r,t,n,a){if(null!=r){if(r[L]||n&&eo(r))for(var i of a?eE(r):r)1!==t?yield*e(i,t-1,n,!0):yield i;else yield r}})(eE(e,r,a,i),t+1,n,!1),eI=(e,r,t,n)=>{if(r=ew(r),en(e)){var a=0,i=[];for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n&&!ey;t++){var o=e[t];(r?o=r(o,a++):o)!=null&&i.push(o)}return ey=!1,i}return null!=e?ei(eA(e,r,t,n)):B},ex=(e,r,t,n)=>null!=e?new Set([...eA(e,r,t,n)]):B,eN=(e,r,t=1,n=!1,a,i)=>ei(eT(e,r,t,n,a,i)),eO=(e,r,t)=>null==e?B:ef(r)?eI(er(e)?[e]:e,r)?.join(t??""):er(e)?e:eI(e,e=>!1===e?B:e)?.join(r??""),e$=(...e)=>{var r;return eF(1===e.length?e[0]:e,e=>null!=e&&(r??=[]).push(...ei(e))),r},ej=(e,r,t,n)=>{var a,i=0;for(t=t<0?e.length+t:t??0,n=n<0?e.length+n:n??e.length;t<n;t++)if(null!=e[t]&&(a=r(e[t],i++)??a,ey)){ey=!1;break}return a},eC=(e,r)=>{var t,n=0;for(var a of e)if(null!=a&&(t=r(a,n++)??t,ey)){ey=!1;break}return t},eM=(e,r)=>{var t,n=0;for(var a in e)if(t=r([a,e[a]],n++)??t,ey){ey=!1;break}return t},eU=(e,r,...t)=>null==e?B:ev(e)?eI(e,e=>r(e,...t)):r(e,...t),e_=(e,r,t,n)=>{var a;if(null!=e){if(en(e))return ej(e,r,t,n);if(t===B){if(e[L])return eC(e,r);if("object"==typeof e)return eM(e,r)}for(var i of eE(e,r,t,n))null!=i&&(a=i);return a}},eF=e_,eP=async(e,r,t,n)=>{var a;if(null==e)return B;for(var i of eA(e,r,t,n))null!=(i=await i)&&(a=i);return a},eq=Object.fromEntries,eR=(e,r,t)=>{if(null==e)return B;if(Y(r)||t){var n={};return eF(e,t?(e,a)=>null!=(e=r(e,a))&&(e[1]=t(n[e[0]],e[1]))?.[1]!=null&&(n[e[0]]=e[1]):e=>eF(e,r?e=>e?.[1]!=null&&((n[e[0]]??=[]).push(e[1]),n):e=>e?.[1]!=null&&(n[e[0]]=e[1],n))),n}return eq(eI(e,r?(e,t)=>X(r(e,t),1):e=>X(e,1)))},ez=(e,r,t,n,a)=>{var i=()=>ef(t)?t():t;return e_(e,(e,n)=>t=r(t,e,n)??i(),n,a)??i()},eD=(e,r=e=>null!=e,t=en(e),n,a)=>eS(eE(e,(e,t)=>r(e,t)?e:B,n,a),t),eB=(e,r,t,n)=>{var a;if(null==e)return B;if(r)e=eD(e,r,!1,t,n);else{if(null!=(a=e.length??e.size))return a;if(!e[L])return Object.keys(e).length}return a=0,e_(e,()=>++a)},eW=(e,...r)=>null==e?B:ee(e)?Math.max(e,...r):ez(e,(e,t,n,a=r[1]?r[1](t,n):t)=>null==e||ee(a)&&a>e?a:e,B,r[2],r[3]),eV=(e,r,t)=>eI(e,eu(e)?e=>e[1]:e=>e,r,t),eJ=e=>!en(e)&&ev(e)?eI(e,ep(e)?e=>e:eh(e)?e=>[e,!0]:(e,r)=>[r,e]):eo(e)?Object.entries(e):B,eG=(e,r,t,n)=>null==e?B:(r=ew(r),e_(e,(e,t)=>!r||(e=r(e,t))?em(e):B,t,n)),eH=(e,r,t,n)=>null==e?B:en(e)?e[e.length-1]:e_(e,(e,t)=>!r||r(e,t)?e:B,t,n),eL=(e,r,t,n)=>null==e?B:eu(e)&&!r?Object.keys(e).length>0:e.some?.(r??Q)??e_(e,r?(e,t)=>!!r(e,t)&&em(!0):()=>em(!0),t,n)??!1,eK=(e,r=e=>e)=>(e?.sort((e,t)=>r(e)-r(t)),e),eX=(e,r,t)=>(e.constructor===Object?void 0===t?delete e[r]:e[r]=t:void 0===t?e.delete?e.delete(r):delete e[r]:e.set?e.set(r,t):e.add?t?e.add(r):e.delete(r):e[r]=t,t),eY=(e,r,t)=>{if(e){if(e.constructor===Object&&null==t)return e[r];var n=e.get?e.get(r):e.has?e.has(r):e[r];return void 0===n&&null!=t&&null!=(n=ef(t)?t():t)&&eX(e,r,n),n}},eZ=(e,...r)=>(eF(r,r=>eF(r,([r,t])=>{null!=t&&(eu(e[r])&&eu(t)?eZ(e[r],t):e[r]=t)})),e),eQ=e=>(r,t,n,a)=>{if(r)return void 0!=n?e(r,t,n,a):(eF(t,t=>en(t)?e(r,t[0],t[1]):eF(t,([t,n])=>e(r,t,n))),r)},e0=eQ(eX),e1=eQ((e,r,t)=>eX(e,r,ef(t)?t(eY(e,r)):t)),e2=(e,r)=>e instanceof Set?!e.has(r)&&(e.add(r),!0):eY(e,r)!==e0(e,r,!0),e4=(e,r)=>{if((e??r)!=null){var t=eY(e,r);return ec(e,"delete")?e.delete(r):delete e[r],t}},e6=(e,...r)=>{var t=[],n=!1,a=(e,i,o,l)=>{if(e){var s=r[i];i===r.length-1?en(s)?(n=!0,s.forEach(r=>t.push(e4(e,r)))):t.push(e4(e,s)):(en(s)?(n=!0,s.forEach(r=>a(eY(e,r),i+1,e,r))):a(eY(e,s),i+1,e,s),!eB(e)&&o&&e5(o,l))}};return a(e,0),n?t:t[0]},e5=(e,r)=>{if(e)return en(r)?(en(e)&&e.length>1?r.sort((e,r)=>r-e):r).map(r=>e5(e,r)):en(e)?r<e.length?e.splice(r,1)[0]:void 0:e4(e,r)},e3=(e,...r)=>{var t=(r,n)=>{var a;if(r){if(en(r)){if(eu(r[0])){r.splice(1).forEach(e=>t(e,r[0]));return}a=r}else a=eI(r);a.forEach(([r,t])=>Object.defineProperty(e,r,{r:!1,t:!0,writable:!1,...n,...eu(t)&&("get"in t||"value"in t)?t:ef(t)&&!t.length?{get:t}:{value:t}}))}};return r.forEach(e=>t(e)),e},e8=e=>ef(e)?e():e,e9=(e,r=-1)=>eo(e)?en(e)?r?e.map(e=>e9(e,r-1)):[...e]:eh(e)?new Set(r?eI(e,e=>e9(e,r-1)):e):ep(e)?new Map(r?eI(e,e=>[e[0],e9(e[1],r-1)]):e):r?eR(e,([e,t])=>[e,e9(t,r-1)]):{...e}:e,e7=(e,...r)=>e?.push(...r),re=(e,...r)=>e?.unshift(...r),rr="undefined"!=typeof performance?(e=J)=>e?Math.trunc(rr(V)):performance.timeOrigin+performance.now():Date.now,rt=(e=!0,r=()=>rr())=>{var t,n=+e*r(),a=0;return(i=e,o)=>(t=e?a+=-n+(n=r()):a,o&&(a=0),(e=i)&&(n=r()),t)},rn=(e=0)=>{var r,t;return function n(a,i){if(void 0===a)return!!t;clearTimeout(r),Y(a)?(a&&t?.(),t=void 0):(t=a,r=setTimeout(()=>n(!0),i??e))}},ra=(e,r=0)=>{var t=ef(e)?{frequency:r,n:e}:e,{a:n=!0,paused:a=!1,i:i=!1,once:o=!1,n:l=()=>{}}=t;r=t.frequency??0;var s=0,u=ru(!0).resolve(),c=rt(!a),d=c(),f=async e=>!!s&&(!!n||!u.pending||!0===e)&&(p.o=!0,!0!==e&&await u,u.reset(),(await z(()=>l(c(),-d+(d=c())),!1,()=>u.resolve())===!1||r<=0||o)&&v(!1),p.o=!1,!0),v=(e,t=!e)=>(c(e,t),clearInterval(s),p.active=!!(s=e?setInterval(f,r<0?-r:r):0),p),p={active:!1,o:!1,l:(e,t)=>(r=e??r,l=t??l,v(!0,!0)),toggle:(e,r)=>e!==p.active?e?r?(v(!0),p.i(),p):v(!0):v(!1):p,i:async e=>await f(e)&&(v(p.active),!0)};return p.toggle(!a,i)};class ri{s;constructor(){this.reset()}get value(){return this.s.value}get error(){return this.s.error}get pending(){return this.s.pending}resolve(e,r=!1){return this.s.resolve(e,r),this}reject(e,r=!1){return this.s.reject(e,r),this}reset(){return this.s=new ro,this}signal(e){return this.resolve(e),this.reset(),this}then(e,r){return this.s.then(e,r)}}class ro{s;resolve;reject;value;error;pending=!0;constructor(){var e;this.s=new Promise((...r)=>{e=r.map((e,r)=>(t,n)=>{if(!this.pending){if(n)return this;throw TypeError("Promise already resolved/rejected.")}return this.pending=!1,this[r?"error":"value"]=t===B||t,e(t),this})}),[this.resolve,this.reject]=e}then(e,r){return this.s.then(e,r)}}var rl=(e,r=0)=>r>0?setTimeout(e,r):window.queueMicrotask(e),rs=(e,r)=>null==e||isFinite(e)?!e||e<=0?e8(r):new Promise(t=>setTimeout(async()=>t(await e8(r)),e)):C(`Invalid delay ${e}.`),ru=e=>e?new ri:new ro,rc=(...e)=>Promise.race(e.map(e=>ef(e)?e():e)),rd=(e,r,t)=>{var n=!1,a=(...r)=>e(...r,i),i=()=>n!==(n=!1)&&(t(a),!0),o=()=>n!==(n=!0)&&(r(a),!0);return o(),[i,o]},rf=(...e)=>(e=eD(e),[()=>ez(e,(e,r)=>r[0]()||e,!1),()=>ez(e,(e,r)=>r[1]()||e,!1)]),rv=()=>{var e,r=new Set;return[(t,n)=>{var a=rd(t,e=>r.add(e),e=>r.delete(e));return n&&e&&t(...e,a[0]),a},(...t)=>(e=t,r.forEach(e=>e(...t)))]},rp=(e,r="and")=>X(e,e=>0===(e=ev(e)?eI(e,e=>e+""):[e+""]).length?"":1===e.length?e[0]:`${e.slice(0,-1).join(", ")} ${r} ${eH(e)}`),rh=e=>X(e,e=>ev(e)?eI(e,e=>"'"+e+"'"):"'"+e+"'"),rg=e=>(e=Math.log2(e))===(0|e),ry=(e,r,t,n)=>{var a,i,o,l=Object.fromEntries(Object.entries(e).filter(([e,r])=>er(e)&&ee(r)).map(([e,r])=>[e.toLowerCase(),r])),s=Object.entries(l),u=Object.values(l),c=l.any??u.reduce((e,r)=>e|r,0),d=r?{...l,any:c,u:0}:l,f=Object.fromEntries(Object.entries(d).map(([e,r])=>[r,e])),v=(e,t)=>ee(e)?!r&&t?null!=f[e]?e:B:e:er(e)?d[e]??d[e.toLowerCase()]:B,p=!1,[h,g]=r?[(e,r)=>Array.isArray(e)?e.reduce((e,t)=>null==t||p?e:null==(t=v(t,r))?(p=!0,B):(e??0)|t,(p=!1,B)):v(e),(e,r)=>null==(e=h(e,!1))?B:r&&(i=f[e&c])?(a=g(e&~(e&c),!1)).length?[i,...a]:i:(e=s.filter(([,r])=>r&&e&r&&rg(r)).map(([e])=>e),r?e.length?1===e.length?e[0]:e:"none":e)]:[v,e=>null!=(e=v(e))?f[e]:B],y=(e,r)=>null==e?B:null==(e=h(o=e,r))?C(TypeError(`${JSON.stringify(o)} is not a valid ${t} value.`)):e,m=s.filter(([,e])=>!n||(n&e)===e&&rg(e));return e3(e=>y(e),[{r:!1,t:!1},{parse:y,c:h,entries:s,values:u,d:g,length:s.length,format:e=>g(e,!0),f:(e,r="or")=>"any"===(e=g(e,!0))?"any "+t:`the ${t} ${rp(rh(e),r)}`},r&&{v:m,map:(e,r)=>(e=y(e),m.filter(([,r])=>r&e).map(r??(([,e])=>e)))}])},rm=(...e)=>{var r=eJ(eR(e,!0)),t=(e,n)=>null!=e&&(!n&&en(e)?e.forEach((e,r)=>e[r]=t(e[r],!0)):r.forEach(([r,t])=>{var n,a=B;null!=(n=e[r])&&(1===t.length?e[r]=t[0].parse(n):t.forEach((i,o)=>!a&&null!=(a=o===t.length-1?i.parse(n):i.c(n))&&(e[r]=a)))}));return e=>(t(e),e)},rw=(e,r=["|",";",","],t=!0)=>{if(!e)return B;var n=e.split("=").map(e=>t?decodeURIComponent(e.trim()).replaceAll("+"," "):e.trim());return n[1]??="",n[2]=n[1]&&r?.length&&eG(r,(e,r,t=n[1].split(e))=>t.length>1?t:B)||(n[1]?[n[1]]:[]),n},rb=(e,r=!0,t)=>null==e?B:rA(e,/^(?:(?:([\w+.-]+):)?(\/\/)?)?((?:([^:@]+)(?:\:([^@]*))?@)?(?:\[([^\]]+)\]|([0-9:]+|[^/+]+?))?(?::(\d*))?)?(\/[^#?]*)?(?:\?([^#]*))?(?:#(.*))?$/g,(e,t,n,a,i,o,l,s,u,c,d,f)=>{var v={source:e,scheme:t,urn:t?!n:!n&&B,p:a,h:i,password:o,host:l??s,port:null!=u?parseInt(u):B,path:c,query:!1===r?d:rk(d,r),g:f};return v.path=v.path||(v.p?v.urn?"":"/":B),v}),rk=(e,r,t=!0)=>null==e?B:eR(e?.match(/(?:^.*?\?|^)(.*)$/)?.[1]?.split("&"),(e,n,[a,i,o]=rw(e,!1===r?[]:!0===r?B:r,t)??[])=>null!=(a=a?.replace(/\[\]$/,""))?!1!==r?[a,o.length>1?o:i]:[a,i]:B,(e,t)=>e?!1!==r?e$(e,t):(e?e+",":"")+t:t),rE=(e,r)=>r&&null!=e?r.test(e):B,rS=(e,r,t)=>rA(e,r,t,!0),rA=(t,n,a,i=!1)=>(t??n)==null?B:a?(e=B,i?(r=[],rA(t,n,(...t)=>null!=(e=a(...t))&&r.push(e))):t.replace(n,(...r)=>e=a(...r)),e):t.match(n),rT=e=>e?.replace(/[\^$\\.*+?()[\]{}|]/g,"\\$&"),rI=/\z./g,rx=(e,r)=>(r=eO(ex(eD(e,e=>e?.length)),"|"))?RegExp(r,"gu"):rI,rN={},rO=e=>e instanceof RegExp,r$=(e,r=[","," "])=>rO(e)?e:en(e)?rx(eI(e,e=>r$(e,r)?.source)):Y(e)?e?/./g:rI:er(e)?rN[e]??=rA(e||"",/^(?:\/(.+?)\/?|(.*))$/gu,(e,t,n)=>t?RegExp(t,"gu"):rx(eI(rj(n,RegExp(`?<!(?<!\\)\\)[${eO(r,rT,",")}]/`)),e=>e&&`^${eO(rj(e,/(?<!(?<!\\)\\)\*/),e=>rT(rC(e,/\\(.)/g,"$1")),".*")}$`))):B,rj=(e,r)=>e?.split(r)??e,rC=(e,r,t)=>e?.replace(r,t)??e;(T=t||(t={}))[T.y=0]="Anonymous",T[T.m=1]="Indirect",T[T.w=2]="Direct",T[T.b=3]="Sensitive";var rM=ry(t,!1,"data classification");(I=n||(n={}))[I.k=0]="None",I[I.E=1]="Necessary",I[I.S=2]="Functionality",I[I.Performance=4]="Performance",I[I.A=8]="Targeting",I[I.T=16]="Security",I[I.I=32]="Infrastructure",I[I.y=49]="Anonymous",I[I.Any=63]="Any",I[I.x=64]="Server";var rU=ry(n,!0,"data purpose",127),r_=ry(n,!1,"data purpose",0);Object.freeze({level:t.y,N:n.y}),Object.freeze({level:t.b,N:n.Any});var rF=(e,r)=>((a=e?.metadata)&&(r?(delete a.O,delete a.$):delete e.metadata),e);(x=i||(i={}))[x.Global=0]="Global",x[x.Entity=1]="Entity",x[x.j=2]="Session",x[x.C=3]="Device",x[x.M=4]="User";var rP=ry(i,!1,"variable scope");t.y,n.E;var rq=e=>`'${e.key}' in ${rP.format(e.scope)} scope`,rR={scope:rP,U:r_,N:rU,_:rM};rm(rR),(N=o||(o={}))[N.F=200]="Success",N[N.P=201]="Created",N[N.q=304]="Unchanged",N[N.R=403]="Denied",N[N.z=404]="NotFound",N[N.D=405]="ReadOnly",N[N.B=409]="Conflict",N[N.W=501]="Unsupported",N[N.V=400]="Invalid",N[N.Error=500]="Error",ry(o,!1,"variable set status"),(O=l||(l={}))[O.J=0]="Add",O[O.G=1]="Min",O[O.H=2]="Max",O[O.L=3]="IfMatch",O[O.K=4]="IfNoneMatch",ry(l,!1,"variable patch type");var rz=e=>!!e?.X,rD=e=>!!e?.Y,rB=(e,r,t)=>{var n,a=e=>e,i=(t,i=rG)=>q(async()=>(n=a(i(await e(),r)))&&t(n)),o={then:i(e=>e).then,all:i(e=>e,e=>e),Z:i(e=>eD(e,e=>e.status<300)),Y:i(e=>eI(e,rV)),values:i(e=>eI(e,e=>rV(e)?.value)),push:()=>(a=e=>(t?.(eI(rW(e))),e),o),value:i(e=>rV(e[0])?.value),variable:i(e=>rV(e[0])),result:i(e=>e[0])};return o},rW=e=>e?.map(e=>e?.status<400?e:B),rV=e=>e?.status<400?e?.Q??e:B,rJ=e=>e?.status<400||e?.status===404,rG=(e,r,t)=>{var n,a,i=[],l=eI(ei(e),(e,l)=>e&&(e.status<400||!t&&404===e.status?e:(a=`${rq(e.source??e)} could not be ${404===e.status?"found.":`${e.source||e.status!==o.Error?"set":"read"} because ${e.status===o.B?`of a conflict. The expected version '${e.source?.version}' did not match the current version '${e.Q?.version}'.`:e.status===o.R?e.error??"the operation was denied.":e.status===o.V?e.error??"the value does not conform to the schema":e.status===o.D?"it is read only.":e.status===o.Error?`of an unexpected error: ${e.error}`:"of an unknown reason."}`}`,(null==(n=r?.[l])||!1!==n(e,a))&&i.push(a),B)));return i.length?C(i.join("\n")):en(e)?l:l?.[0]},rH=e=>e&&"string"==typeof e.type,rL=((...e)=>r=>r?.type&&e.some(e=>e===r?.type))("view"),rK=e=>e?.toLowerCase().replace(/[^a-zA-Z0-9:.-]/g,"_").split(":").filter(e=>e)??[],rX=(e,r,t)=>{if(!e)return[];if(Array.isArray(e)&&(e=eO(e,",")),/(?<!(?<!\\)\\)%[A-Z0-9]{2}/.test(e))try{e=decodeURIComponent(e.replace(/([^=&]+)(?:\=([^&]+))?(&|$)/g,(e,r,t,n)=>[r,t&&`="${t.replace(/(?<!(?<!\\)\\)("|%22)/g,'\\"')}"`,n&&","].join("")))}catch{}var n,a=[],i=rK(r);return e.replace(/\s*(\s*(?=\=)|(?:\\.|[^,=\r\n])+)\s*(?:\=\s*(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)'|((?:\\.|[^,])*)))?\s*(?:[,\s]+|$)/g,(e,r,o,l,s)=>{var u=o||l||s,c=rK(r);return i.length&&(1!==c.length||u||(u=c.pop()),c=i.concat(c)),c.length&&(a.push(n={ee:c,value:u||void 0}),t?.add(rY(n))),""}),a},rY=e=>null==e?e:`${e.ee.join(":")}${e.value?`=${e.value.replace(/,/g,"\\,")}`:""}`,rZ=2e3,rQ="_t:data",r0=()=>()=>C("Not initialized."),r1=window,r2=document,r4=r2.body,r6=(e,r)=>!!e?.matches(r),r5=W,r3=(e,r,t=(e,r)=>r>=r5)=>{for(var n,a=0,i=V;e?.nodeType===1&&!t(e,a++)&&r(e,(e,r)=>(null!=e&&(n=e,i=r!==J&&null!=n),J),a-1)!==V&&!i;){var o=e;null===(e=e.parentElement)&&o?.ownerDocument!==document&&(e=o?.ownerDocument.defaultView?.frameElement)}return n},r8=(e,r)=>{if(null!=e&&"null"!==e&&(""!==e||"b"===r))switch(r){case!0:case"z":return(""+e).trim()?.toLowerCase();case!1:case"r":case"b":return""===e||Z(e);case"n":return parseFloat(e);case"j":return F(()=>JSON.parse(e),G);case"h":return F(()=>tY(e),G);case"e":return F(()=>tQ?.(e),G);default:return en(r)?""===e?void 0:(""+e).split(",").map(e=>e=""===e.trim()?void 0:r8(e,r[0])):void 0}},r9=(e,r,t)=>r8(e?.getAttribute(r),t),r7=(e,r,t)=>r3(e,(e,n)=>n(r9(e,r,t))),te=(e,r)=>r9(e,r)?.trim()?.toLowerCase(),tr=e=>e?.getAttributeNames(),tt=(e,r)=>getComputedStyle(e).getPropertyValue(r)||null,tn=e=>null!=e?e.tagName:null,ta=()=>({x:(s=ti(V)).x/(r4.offsetWidth-window.innerWidth)||0,y:s.y/(r4.offsetHeight-window.innerHeight)||0}),ti=e=>({x:eg(scrollX,e),y:eg(scrollY,e)}),to=(e,r)=>rC(e,/#.*$/,"")===rC(r,/#.*$/,""),tl=(e,r,t=J)=>(u=ts(e,r))&&D({er:u.x,et:u.y,x:eg(u.x/r4.offsetWidth,4),y:eg(u.y/r4.offsetHeight,4),en:t?u.y/window.innerHeight:void 0}),ts=(e,r)=>r?.pointerType&&r?.pageY!=null?{x:r.pageX,y:r.pageY}:e?({x:c,y:d}=tu(e),{x:c,y:d}):void 0,tu=e=>e?(f=e.getBoundingClientRect(),s=ti(V),{x:eg(f.left+s.x),y:eg(f.top+s.y),width:eg(f.width),height:eg(f.height)}):void 0,tc=(e,r,t,n={capture:!0,passive:!0})=>en(r)?rf(...eI(r,r=>tc(e,r,t,n))):rd(t,t=>e.addEventListener(r,t,n),t=>e.addEventListener(r,t,n)),td=e=>{var{host:r,scheme:t}=rb(e,!1);return{host:r,scheme:t}},tf=()=>({width:window.innerWidth,height:window.innerHeight}),tv=()=>({...s=ti(J),width:window.innerWidth,height:window.innerHeight,ea:r4.offsetWidth,ei:r4.offsetHeight}),tp=new WeakMap,th=e=>tp.get(e),tg=(e,r=V)=>(r?"--track-":"track-")+e,ty=(e,r,t,n,a,i)=>r?.[1]&&eF(tr(e),o=>r[0][o]??=(i=V,er(n=eF(r[1],([r,t,n],a)=>rE(o,r)&&(i=void 0,!t||r6(e,t))&&em(n??o)))&&(!(a=e.getAttribute(o))||Z(a))&&rX(a,rC(n,/\-/g,":"),t),i)),tm=()=>{},tw=(e,r)=>{if(v===(v=tI.tags))return tm(e,r);var t=e=>e?rO(e)?[[e]]:ev(e)?eN(e,t):[eu(e)?[r$(e.match),e.selector,e.prefix]:[r$(e)]]:[],n=[{},[[/^(?:track\-)?tags?(?:$|\-)(.*)/],...t(eV(v))]];(tm=(e,r)=>ty(e,n,r))(e,r)},tb=(e,r)=>eO(e$(tt(e,tg(r,J)),tt(e,tg("base-"+r,J)))," "),tk={},tE=(e,r,t=tb(e,"attributes"))=>{t&&ty(e,tk[t]??=[{},rS(t,/(?:(\S+)\:\s*)?(?:\((\S+)\)|([^\s,:]+))\s*(?!\S*\:)/g,(e,r,t,n)=>[r$(t||n),,r])],r),rX(tb(e,"tags"),void 0,r)},tS=(e,r,t=V,n)=>(t?r3(e,(e,t)=>t(tS(e,r,V)),ef(t)?t:void 0):eO(e$(r9(e,tg(r)),tt(e,tg(r,J)))," "))??(n&&(p=th(e))&&n(p))??null,tA=(e,r,t=V,n)=>""===(h=tS(e,r,t,n))||(null==h?h:Z(h)),tT=(e,r,t,n)=>e?(tE(e,n??=new Set),r3(e,e=>{tw(e,n),rX(eI(t?.(e)),void 0,n)},r),n.size?{tags:[...n]}:{}):{},tI={name:"tail",src:"/_t.js",disabled:!1,eo:!0,el:2e3,es:5e3,eu:null,ec:null,ed:null,debug:!1,ef:1e3,ev:!0,ep:"auto",tags:{default:["data-id","data-name"]}},tx=rj(""+r2.currentScript.src,"#"),tN=rj(""+(tx[1]||""),";"),tO=tx[0],t$=tN[1]||rb(tO,!1)?.host,tj=e=>!!(t$&&rb(e,!1)?.host?.endsWith(t$)===J),tC=(...e)=>rC(eO(e),/(^(?=\?))|(^\.(?=\/))/,tO.split("?")[0]),tM=tC("?","var");tC("?","mnt"),tC("?","usr");var tU=[],t_=[],tF=(e,r=0)=>e.charCodeAt(r),tP=e=>String.fromCharCode(...e);[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"].forEach((e,r)=>tU[t_[r]=e.charCodeAt(0)]=r);var tq=e=>{for(var r,t=0,n=e.length,a=[];n>t;)r=e[t++]<<16|e[t++]<<8|e[t++],a.push(t_[(16515072&r)>>18],t_[(258048&r)>>12],t_[(4032&r)>>6],t_[63&r]);return a.length+=n-t,tP(a)},tR=e=>{for(var r,t=0,n=0,a=e.length,i=new Uint8Array(3*(a/4|0)+(a+3&3)%3);a>t;)i[n++]=tU[tF(e,t++)]<<2|(r=tU[tF(e,t++)])>>4,a>t&&(i[n++]=(15&r)<<4|(r=tU[tF(e,t++)])>>2,a>t&&(i[n++]=(3&r)<<6|tU[tF(e,t++)]));return i},tz={32:[2166136261n,16777619n],64:[0xcbf29ce484222325n,1099511628211n],128:[0x6c62272e07bb014262b821756295c58dn,0x1000000000000000000013bn]},tD=(e=256)=>e*Math.random()|0,tB=e=>{var r,t,n,a,i,o=0n,l=0,s=0n,u=[],c=0,d=0,f=0,v=0,p=[];for(f=0;f<e?.length;v+=p[f]=e.charCodeAt(f++));var h=e?()=>{u=[...p],d=255&(c=v),f=-1}:()=>{},g=e=>(d=255&(c+=-u[f=(f+1)%u.length]+(u[f]=e)),e);return[e?e=>{for(h(),a=16-((r=e.length)+4)%16,i=new Uint8Array(4+r+a),n=0;n<3;i[n++]=g(tD()));for(t=0,i[n++]=g(d^16*tD(16)+a);r>t;i[n++]=g(d^e[t++]));for(;a--;)i[n++]=tD();return i}:e=>e,e?e=>{for(h(),t=0;t<3;g(e[t++]));if((r=e.length-4-((d^g(e[t++]))%16||16))<=0)return new Uint8Array(0);for(n=0,i=new Uint8Array(r);r>n;i[n++]=d^g(e[t++]));return i}:e=>e,(e,r=64)=>{if(null==e)return null;for(l=Y(r)?64:r,h(),[o,s]=tz[l],t=0;t<e.length;o=BigInt.asUintN(l,(o^BigInt(d^g(e[t++])))*s));return!0===r?Number(BigInt(Number.MIN_SAFE_INTEGER)+o%BigInt(Number.MAX_SAFE_INTEGER-Number.MIN_SAFE_INTEGER)):o.toString(36)}]},tW={exports:{}};(e=>{(()=>{function r(e,r){if(r&&r.multiple&&!Array.isArray(e))throw Error("Invalid argument type: Expected an Array to serialize multiple values.");var t,n,a=new Uint8Array(128),i=0;if(r&&r.multiple)for(var o=0;o<e.length;o++)l(e[o]);else l(e);return a.subarray(0,i);function l(e,a){var i,o,f,v,p,h;switch(typeof e){case"undefined":u(192);break;case"boolean":u(e?195:194);break;case"number":(e=>{if(isFinite(e)&&Number.isSafeInteger(e)){if(e>=0&&e<=127)u(e);else if(e<0&&e>=-32)u(e);else if(e>0&&e<=255)c([204,e]);else if(e>=-128&&e<=127)c([208,e]);else if(e>0&&e<=65535)c([205,e>>>8,e]);else if(e>=-32768&&e<=32767)c([209,e>>>8,e]);else if(e>0&&e<=4294967295)c([206,e>>>24,e>>>16,e>>>8,e]);else if(e>=-2147483648&&e<=2147483647)c([210,e>>>24,e>>>16,e>>>8,e]);else if(e>0&&e<=18446744073709552e3){var r=e/4294967296,a=e%4294967296;c([211,r>>>24,r>>>16,r>>>8,r,a>>>24,a>>>16,a>>>8,a])}else e>=-0x8000000000000000&&e<=0x7fffffffffffffff?(u(211),d(e)):e<0?c([211,128,0,0,0,0,0,0,0]):c([207,255,255,255,255,255,255,255,255])}else n||(n=new DataView(t=new ArrayBuffer(8))),n.setFloat64(0,e),u(203),c(new Uint8Array(t))})(e);break;case"string":(f=(o=(e=>{for(var r=!0,t=e.length,n=0;n<t;n++)if(e.charCodeAt(n)>127){r=!1;break}for(var a=0,i=new Uint8Array(e.length*(r?1:4)),o=0;o!==t;o++){var l=e.charCodeAt(o);if(l<128){i[a++]=l;continue}if(l<2048)i[a++]=l>>6|192;else{if(l>55295&&l<56320){if(++o>=t)throw Error("UTF-8 encode: incomplete surrogate pair");var s=e.charCodeAt(o);if(s<56320||s>57343)throw Error("UTF-8 encode: second surrogate character 0x"+s.toString(16)+" at index "+o+" out of range");l=65536+((1023&l)<<10)+(1023&s),i[a++]=l>>18|240,i[a++]=l>>12&63|128}else i[a++]=l>>12|224;i[a++]=l>>6&63|128}i[a++]=63&l|128}return r?i:i.subarray(0,a)})(e)).length)<=31?u(160+f):f<=255?c([217,f]):f<=65535?c([218,f>>>8,f]):c([219,f>>>24,f>>>16,f>>>8,f]),c(o);break;case"object":null===e?u(192):e instanceof Date?(e=>{var r=e.getTime()/1e3;if(0===e.getMilliseconds()&&r>=0&&r<4294967296)c([214,255,r>>>24,r>>>16,r>>>8,r]);else if(r>=0&&r<17179869184){var t=1e6*e.getMilliseconds();c([215,255,t>>>22,t>>>14,t>>>6,t<<2>>>0|r/4294967296,r>>>24,r>>>16,r>>>8,r])}else{var t=1e6*e.getMilliseconds();c([199,12,255,t>>>24,t>>>16,t>>>8,t]),d(r)}})(e):Array.isArray(e)?s(e):e instanceof Uint8Array||e instanceof Uint8ClampedArray?((h=(p=e).length)<=255?c([196,h]):h<=65535?c([197,h>>>8,h]):c([198,h>>>24,h>>>16,h>>>8,h]),c(p)):e instanceof Int8Array||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array?s(e):(e=>{var r=0;for(var t in e)void 0!==e[t]&&r++;for(var t in r<=15?u(128+r):r<=65535?c([222,r>>>8,r]):c([223,r>>>24,r>>>16,r>>>8,r]),e){var n=e[t];void 0!==n&&(l(t),l(n))}})(e);break;default:if(!a&&r&&r.eh)"function"==typeof r.eh?l(r.eh(e),!0):l(r.eh,!0);else throw Error("Invalid argument type: The type '"+typeof e+"' cannot be serialized.")}}function s(e){var r=e.length;r<=15?u(144+r):r<=65535?c([220,r>>>8,r]):c([221,r>>>24,r>>>16,r>>>8,r]);for(var t=0;r>t;t++)l(e[t])}function u(e){if(a.length<i+1){for(var r=2*a.length;r<i+1;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a[i]=e,i++}function c(e){if(a.length<i+e.length){for(var r=2*a.length;r<i+e.length;)r*=2;var t=new Uint8Array(r);t.set(a),a=t}a.set(e,i),i+=e.length}function d(e){var r,t;e>=0?(r=e/4294967296,t=e%4294967296):(r=~(r=Math.abs(++e)/4294967296),t=~(t=Math.abs(e)%4294967296)),c([r>>>24,r>>>16,r>>>8,r,t>>>24,t>>>16,t>>>8,t])}}function t(e,r){var t,n=0;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),"object"!=typeof e||void 0===e.length)throw Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");if(!e.length)throw Error("Invalid argument: The byte array to deserialize is empty.");if(e instanceof Uint8Array||(e=new Uint8Array(e)),r&&r.multiple)for(t=[];n<e.length;)t.push(a());else t=a();return t;function a(){var r=e[n++];if(r>=0&&r<=127)return r;if(r>=128&&r<=143)return u(r-128);if(r>=144&&r<=159)return c(r-144);if(r>=160&&r<=191)return d(r-160);if(192===r)return null;if(193===r)throw Error("Invalid byte code 0xc1 found.");if(194===r)return!1;if(195===r)return!0;if(196===r)return s(-1,1);if(197===r)return s(-1,2);if(198===r)return s(-1,4);if(199===r)return f(-1,1);if(200===r)return f(-1,2);if(201===r)return f(-1,4);if(202===r)return l(4);if(203===r)return l(8);if(204===r)return o(1);if(205===r)return o(2);if(206===r)return o(4);if(207===r)return o(8);if(208===r)return i(1);if(209===r)return i(2);if(210===r)return i(4);if(211===r)return i(8);if(212===r)return f(1);if(213===r)return f(2);if(214===r)return f(4);if(215===r)return f(8);if(216===r)return f(16);if(217===r)return d(-1,1);if(218===r)return d(-1,2);if(219===r)return d(-1,4);if(220===r)return c(-1,2);if(221===r)return c(-1,4);if(222===r)return u(-1,2);if(223===r)return u(-1,4);if(r>=224&&r<=255)return r-256;throw console.debug("msgpack array:",e),Error("Invalid byte value '"+r+"' at index "+(n-1)+" in the MessagePack binary data (length "+e.length+"): Expecting a range of 0 to 255. This is not a byte array.")}function i(r){for(var t=0,a=!0;r-- >0;)if(a){var i=e[n++];t+=127&i,128&i&&(t-=128),a=!1}else t*=256,t+=e[n++];return t}function o(r){for(var t=0;r-- >0;)t*=256,t+=e[n++];return t}function l(r){var t=new DataView(e.buffer,n+e.byteOffset,r);return(n+=r,4===r)?t.getFloat32(0,!1):8===r?t.getFloat64(0,!1):void 0}function s(r,t){r<0&&(r=o(t));var a=e.subarray(n,n+r);return n+=r,a}function u(e,r){e<0&&(e=o(r));for(var t={};e-- >0;)t[a()]=a();return t}function c(e,r){e<0&&(e=o(r));for(var t=[];e-- >0;)t.push(a());return t}function d(r,t){r<0&&(r=o(t));var a=n;return n+=r,((e,r,t)=>{var n=r,a="";for(t+=r;t>n;){var i=e[n++];if(i>127){if(i>191&&i<224){if(n>=t)throw Error("UTF-8 decode: incomplete 2-byte sequence");i=(31&i)<<6|63&e[n++]}else if(i>223&&i<240){if(n+1>=t)throw Error("UTF-8 decode: incomplete 3-byte sequence");i=(15&i)<<12|(63&e[n++])<<6|63&e[n++]}else if(i>239&&i<248){if(n+2>=t)throw Error("UTF-8 decode: incomplete 4-byte sequence");i=(7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++]}else throw Error("UTF-8 decode: unknown multibyte start 0x"+i.toString(16)+" at index "+(n-1))}if(i<=65535)a+=String.fromCharCode(i);else if(i<=1114111)i-=65536,a+=String.fromCharCode(i>>10|55296)+String.fromCharCode(1023&i|56320);else throw Error("UTF-8 decode: code point 0x"+i.toString(16)+" exceeds UTF-16 reach")}return a})(e,a,r)}function f(e,r){e<0&&(e=o(r));var t=o(1),a=s(e);return 255===t?(e=>{if(4===e.length){var r=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];return new Date(1e3*r)}if(8===e.length){var t=(e[0]<<22>>>0)+(e[1]<<14>>>0)+(e[2]<<6>>>0)+(e[3]>>>2),r=(3&e[3])*4294967296+(e[4]<<24>>>0)+(e[5]<<16>>>0)+(e[6]<<8>>>0)+e[7];return new Date(1e3*r+t/1e6)}if(12===e.length){var t=(e[0]<<24>>>0)+(e[1]<<16>>>0)+(e[2]<<8>>>0)+e[3];n-=8;var r=i(8);return new Date(1e3*r+t/1e6)}throw Error("Invalid data length for a date value.")})(a):{type:t,data:a}}}var n={eg:r,ey:t,encode:r,decode:t};e?e.exports=n:window[window.msgpackJsName||"msgpack"]=n})()})(tW);var{ey:tV,eg:tJ}=($=tW.exports)&&$.em&&Object.prototype.hasOwnProperty.call($,"default")?$.default:$,tG="$ref",tH=e=>{var r,t,n,a=(e,r,t=e[r],n=o(t))=>((t!==n||ed(r))&&(e[r]=n,i(()=>e[r]=t)),t),i=e=>(r??=[]).push(e),o=e=>null==e||ef(e)||ed(e)?null:eo(e)?e.toJSON&&e!==(e=e.toJSON())?o(e):null!=(n=(t??=new Map).get(e))?(e[tG]||(e[tG]=n,i(()=>delete e[tG])),{[tG]:n}):(eu(e)?(t.set(e,t.size+1),Object.keys(e).forEach(r=>(a(e,r)===B||ed(r))&&delete e[r])):ev(e)&&(!en(e)||Object.keys(e).length<e.length?[...e]:e).forEach((r,t)=>t in e?a(e,t):(e[t]=null,i(()=>delete e[t]))),e):e,l=tJ(o(e));return r?.forEach(e=>e()),l},tL=e=>{var r,t,n=e=>eo(e)?e[tG]&&(t=(r??=[])[e[tG]])?t:(e[tG]&&(r[e[tG]]=e,delete e[tG]),Object.entries(e).forEach(([r,t])=>t!==(t=n(t))&&(e[r]=t)),e):e;return null!=e?n(tV(e)):B},tK=(e,r=!1,t=!0)=>{var n=(e,r=!1,t=!0)=>{var n=(e,t)=>ee(e)&&!0===t?e:l(e=er(e)?new Uint8Array(eI(e.length,r=>255&e.charCodeAt(r))):r?JSON.stringify(e):tH(e),t),a=e=>null==e?B:F(()=>JSON.parse(e,B));if(r)return[e=>JSON.stringify(e),a,(e,r)=>n(e,r)];var[i,o,l]=tB(e);return[e=>tq(i(tH(e))),e=>null!=e?t&&(e?.[0]==="{"||e?.[0]==="[")?a(e):tL(o(tR(e))):null,(e,r)=>n(e,r)]};return e?n(e,r,t):(g??=[n(null,!1),n(null,!0)])[+r]};tK(),tK(null,!0);var[tX,tY]=tK(),[tZ,tQ]=[r0,r0],[t0,t1]=rv(),t2=e=>{tQ===r0&&([tZ,tQ]=tK(null,!0),t1(tZ,tQ))},t4=e=>r=>t6(e,r),t6=(...e)=>{var r=e.shift();console.error(er(e[1])?e.shift():e[1]?.message??"An error occurred",r.id??r,...e)},[t5,t3]=rv(),[t8,t9]=rv(),t7=e=>nr!==(nr=e)&&t3(nr=!1,na(!0,!0)),ne=e=>nt!==(nt=!!e&&"visible"===document.visibilityState)&&t9(nt,!e,nn(!0,!0));t5(ne);var nr=!0,nt=!1,nn=rt(!1),na=rt(!1);tc(window,["pagehide","freeze"],()=>t7(!1)),tc(window,["pageshow","resume"],()=>t7(!0)),tc(document,"visibilitychange",()=>(ne(!0),nt&&t7(!0))),t3(nr,na(!0,!0));var ni=!1,no=rt(!1),[nl,ns]=rv(),nu=ra({n:()=>ni&&ns(ni=!1,no(!1)),frequency:2e4,once:!0,paused:!0}),nc=()=>!ni&&(ns(ni=!0,no(!0)),nu.l());tc(window,"focus",nc),tc(window,"blur",()=>nu.i()),tc(document.body,["keydown","pointerdown","pointermove","scroll"],nc),nc(),(j=y||(y={}))[j.ew=-3]="View",j[j.eb=-2]="Tab",j[j.ek=-1]="Shared";var nd=ry(y,!1,"local variable scope"),nf=e=>!!nd.c(e?.scope),nv=rm({scope:nd},rR),np=e=>null==e?void 0:e.source?np(e.source):`${nf(e)?"l":rP(e.scope)}\0${e.key}\0${nf(e)?"":e.eE??""}`,nh=e=>{var r=e.split("\0");return"l"===r[0]?{key:r[1],scope:-1}:{scope:rP(r[0]),key:r[1],eE:r[2]}},ng=0,ny=void 0,nm=()=>(ny??r0())+"_"+nw(),nw=()=>++ng,nb=e=>crypto.getRandomValues(e),nk=()=>rC("10000000-1000-4000-8000-100000000000",/[018]/g,e=>((e*=1)^nb(new Uint8Array(1))[0]&15>>e/4).toString(16)),nE=void 0,nS={id:ny,eS:rr()},nA={eA:{[ny]:nS},Y:new Map},[nT,nI]=rv(),nx=r0,nN=e=>nE.get(np(e)),nO=(...e)=>n$(e.map(e=>(e.timestamp=rr(),e.expires=3e3,e))),n$=e=>{var r=eI(e,e=>e&&[np(e),e]);if(r?.length){e0(nE,r);var t=eD(r,e=>e[1].scope>y.eb);t.length&&(e0(nA.Y,r),nx({type:"patch",eT:eR(t)})),nI("variables",eR(r),!0)}};t0((e,r)=>{t5(t=>{if(t){var n=r(sessionStorage.getItem(rQ));ny=n?.[0]??rr().toString(36)+Math.trunc(1296*Math.random()).toString(36).padStart(2,"0"),nE=new Map(e$(eD(nE,([,e])=>e.scope===y.ew),eI(n?.[1],e=>[np(e),e]))),sessionStorage.removeItem(rQ)}else sessionStorage.setItem(rQ,e([ny,eD(nE,([,e])=>e.scope!==y.ew)]))},!0),nx=(r,t)=>{e&&(localStorage.setItem(rQ,e([ny,r,t])),localStorage.removeItem(rQ))},tc(window,"storage",e=>{if(e.key===rQ){var n=r?.(e.newValue);if(n&&(!n[2]||n[2]===ny)){var[a,{type:i,eT:o}]=n;"query"===i?t.active||nx({type:"set",eT:nA},a):"set"===i&&t.active?(e0(nA,o),t.i()):"patch"===i?(e0(nA.Y,o),e0(nE,o),nI("variables",o,!1)):"tab"===i&&(e0(nA.eA,a,o),o&&nI("tab",o,!1))}}}),tc(window,["pagehide"],()=>sessionStorage.set(rQ,ny));var t=ra(()=>nI("ready",nA,!0),-25),n=ra({n(){var e=rr()-1e4;eF(nA?.eA,([r,t])=>t[0]<e&&e6(nA.eA,r)),nS.eS=rr(),nx({type:"tab",eT:nS})},frequency:5e3,paused:!0}),a=e=>{nx({type:"tab",eT:e?nS:void 0}),e?(t.l(),nx({type:"query"})):t.toggle(!1),n.toggle(e)};t5(e=>a(e),!0)},!0);var[nj,nC]=rv(),[nM,nU]=rv(),n_=((e,{timeout:r=1e3,encrypt:t=!0,eI:n=10}={})=>{var a=()=>(t?tQ:tY)(localStorage.get("rq")),i=()=>localStorage.setItem("rq",(t?tZ:tX)([ny,rr()+r]));return async(t,o,l=null!=o?1:n)=>{for(;l--;){var s=a();if((!s||s[1]<rr())&&(i(),a()?.[0]===ny)){var u=t(),c=setInterval(i,r/2);return await z(u,!0,()=>clearInterval(c))}var d=ru(),[f]=tc(window,"storage",r=>{r.key!==e||r.newValue||d.resolve()});await rc(rs(o??r),d),f()}null==o&&C(e+" could not be acquired.")}})("rq"),nF=ra(()=>{if(w!==(w=tI.ed??B)){if(!w)return;m=RegExp(rT(w)+"=([^;]*)")}var e=tQ?.(rA(document.cookie,m)?.[1]);rD(e)&&nU(e)},1e3),nP=0,nq=(e=1e3)=>{var r=()=>{r=G,--nP||(nF.l(1e3),clearTimeout(0))};return nP++||nF.l(100),e>0&&setTimeout(r,e),r()},nR=async(e,r,{ex:t=!1,encrypt:n=!0}={})=>{var a,i,o=!1,l=t=>{var l=ef(r)?r?.(a,t):r;return!1!==l&&(null!=l&&!0!==l&&(a=l),nC(e,a,t,e=>(o=a===B,a=e)),!o&&(i=(n?tZ:JSON.stringify)(a)))};if(!t)return await n_(()=>eP(4,async r=>{if(l(r)){var t=await fetch(e,{method:null!=a?"POST":"GET",cache:"no-cache",credentials:"include",mode:"cors",headers:{"eN":"text/plain"},body:i});if(t.status>=400)return 3===r?C(`Invalid response: ${await t.text()}`):(console.warn(`Request to ${e} failed on attempt ${r+1}/3.`),await rs((1+r)*200));var o=(n?tQ:JSON.parse)?.(await t[n?"text":"json"]());return null!=o&&nU(o),o}}));l(0)&&(nq(1e3),navigator.sendBeacon(e,new Blob(null!=a?[i]:[],{type:"text/plain"}))||C("Beacon send failed."))},nz=new Map,nD=(e,r)=>{var a=ra(async()=>{var e=eI(nz,([e,r])=>({...nh(e),result:[...r]}));e.length&&await c.get(...e)},3e3),i=(e,r)=>eU(r,r=>eY(nz,e,()=>new Set).add(r)),l=e=>{if(rJ(e)){var r,t=np(e),n=rV(e);eF(e5(nz,t),e=>{r=!1,e?.(n,nN(n),(e=!0)=>r=e),r&&i(t,e)})}};t5((e,r)=>a.toggle(e,e&&r>=3e3),!0);var s=new Map,u=(e,r)=>e0(s,e,Y(r)?r?void 0:0:r),c={get:(...t)=>rB(async()=>{var n=[],a=eI(t,(e,r)=>[e,r]),s=[],c=(await nR(e,()=>!!(a=eI(a,([e,r])=>{if(e){var t=np(e);i(t,e.result);var a=nN(t);if(e.init&&u(t,e.cache),!e.refresh&&a?.expires<rr())e7(n,[{...a,status:o.F},r]);else if(!nf(e))return[e,r];else if(eu(e.init)){var l={...nv(e),status:o.P,...e.init};null!=l.value&&(e7(s,d(l)),e7(n,[l,r]))}}})).length&&{Y:{get:a},eO:r?.eO})).Y?.get??[];return e7(n,...eI(c,(e,r)=>e&&[e,a[r][1]])),s.length&&n$(s),n.map(([e])=>(l(e),e))},eI(t,e=>e?.error)),set:(...a)=>rB(async()=>{var i=[],s=[],c=eI(a,(e,r)=>{if(e){var a=np(e),l=nN(a);if(u(a,e.cache),nf(e)){if(null!=e.X)return C("Local patching is not supported.");var c={value:e.value,_:t.y,N:n.E,scope:nd(e.scope),key:e.key};return s[r]={status:l?o.F:o.P,source:e,Q:c},void e7(i,d(c))}return rz(e)||e?.version!==void 0||(e.version=l?.version,e.force??=!!e.version),[e,r]}}),f=c.length>0?[]:_((await nR(e,{Y:{set:c.map(e=>e[0])},eO:r?.eO})).Y?.set,"No result.");return i.length&&n$(i),eF(f,(e,r)=>{var[t,n]=c[r];e.source=t,l(s[n]=e)}),s},eI(a,e=>e?.error))},d=(e,r=rr())=>({...e,timestamp:r,expires:r+(eY(s,np(e))??3e3)});return nM(({Y:e})=>{var r=rr();n$(eU(e$(eI(e.get,e=>rV(e)),eI(e.set,e=>rV(e))),d,r))}),c},nB=(e,r)=>{if(!eu(r))return e;var t,n={};return eu(e)&&eF(e,([e,a])=>n[e]!==r[e]&&(n[e]=eu(a)?nB(a,r[e]):ee(a)&&ee(t=r[e])?a-t:a)),n},nW=(e,r,t=rZ)=>{var n=[],a=new WeakMap,i=new Map,o=(e,r)=>e.metadata?.$?eZ(r,{type:e.type+"_patch",e$:e.ej}):C("Source event not queued."),l=async(t,a=!1)=>{if((t=eI(ei(t),e=>eZ(r.eC(e),{metadata:{$:!0}}))).length){if(!a){e7(n,...t);return}n.length&&(re(t,...n.splice(0)),await nR(e,{eM:t.map(e=>(eZ(e,{metadata:{O:!0}}),rF(e,!0))),eO:r?.eO}))}};return t>0&&ra(()=>l([],!0),t),t8((e,r,t)=>{if(!e&&(n.length||r||t>1500)){var a=eI(i,([e,r])=>{var[t,n]=r();return n&&i.delete(e),t});(n.length||a.length)&&l(e$(n.splice(0),a),!0)}}),{eU:l,e_:(e,r,t)=>l(o(e,r),t),eF(e,r){var t=!1,n=()=>t=!0;return a.set(e,e9(e)),i.set(e,()=>{var i=o(e,r(a.get(e),n));return!i||a&&M(i,a)?[void 0,t]:(i&&a.set(e,e9(i)),[i,t])}),n}}},nV=Symbol(),nJ=e=>{var r=new IntersectionObserver(e=>eF(e,({target:e,isIntersecting:r,boundingClientRect:t,intersectionRatio:n})=>e[nV]?.(r,t,n)),{threshold:[.05,.1,.15,.2,.3,.4,.5,.6,.75]});return(t,n)=>{if(n&&(a=eD(n?.component,e=>e.track?.eP||(e.track?.eq??e.eR)!==J))&&eB(a)){var a,i,o,l,s=V,u=0,c=rn(tI.ef),d=n3();t[nV]=(r,n,f)=>{d(r=f>=.75||n.top<(i=window.innerHeight/2)&&n.bottom>i),s!==(s=r)&&(s?c(()=>{++u,o||e7(e,o=eD(eI(a,e=>(e.track?.eP||tA(t,"impressions",J,e=>e.track?.eP))&&D({type:"impression",ez:tl(t),viewport:tv(),eD:n9(),eP:u,...au(t,J)})||null))),o?.length&&(l=eI(o,r=>e.eM.eF(r,e=>nB({eB:r.ej,duration:d(),eP:u},e))))}):(eF(l,e=>e()),c(!1)))},r.observe(t)}}},nG=()=>{var e=r1?.screen;if(!e)return{};var{width:r,height:t,orientation:n}=e,a=r<t,i=n?.angle??r1.orientation??0;return(-90===i||90===i)&&([r,t]=[t,r]),{eW:r<480?"mobile":r<=1024?"tablet":"desktop",screen:{eV:r1.devicePixelRatio,width:r,height:t,eJ:a}}},nH=e=>e7(e,D({type:"user_agent",eG:navigator.maxTouchPoints>0,userAgent:navigator.userAgent,view:b?.ej,languages:eI(navigator.languages,(e,r,t=e.split("-"))=>D({id:e,language:t[0],region:t[1],eH:0===r,eL:r+1})),eK:{eX:Intl.DateTimeFormat().resolvedOptions().timeZone,offset:new Date().getTimezoneOffset()},...nG()})),nL=(e,r="A"===tn(e)&&r9(e,"href"))=>r&&"#"!=r&&!r.startsWith("javascript:"),nK=(e,r=tn(e),t=tA(e,"button"))=>t!==V&&(U(r,"A","BUTTON")||"INPUT"===r&&U(te(e,"type"),"button","submit")||t===J),nX=()=>b?.ej,nY={scope:"shared",key:"referrer"},nZ=(e,r)=>{A.Y.set({...nY,value:[nX(),e]}),r&&A.Y.get({scope:nY.scope,key:nY.key,result(t,n,a){t?a():n?.value?.[1]===e&&r()}})},nQ=rt(),n0=rt(),n1=rt(),n2=1,n4=()=>n0(),[n6,n5]=rv(),n3=e=>{var r=rt(e,nQ),t=rt(e,n0),n=rt(e,n1),a=rt(e,()=>n2);return(e,i)=>({eY:r(e,i),eZ:t(e,i),eQ:n(e,i),e0:a(e,i)})},n8=n3(),n9=()=>n8(),[n7,ae]=rv(),ar=new WeakSet,at=document.getElementsByTagName("iframe"),an=e=>(null==e||(e===J||""===e)&&(e="add"),er(e)&&U(e,"add","remove","update","clear")?{action:e}:eo(e)?e:void 0);function aa(e){if(e){if(null!=e.units&&U(e.action,null,"add","remove")){if(0===e.units)return;e.action=e.units>0?"add":"remove"}return e}}var ai=e=>tT(e,void 0,e=>eI(ei(eY(tp,e)?.tags))),ao=e=>e?.component||e?.content,al=e=>tT(e,r=>r!==e&&!!ao(eY(tp,r)),e=>(E=eY(tp,e),(E=eY(tp,e))&&eN(e$(E.component,E.content,E),"tags"))),as=(e,r)=>r?e:{...e,rect:void 0,content:(S=e.content)&&eI(S,e=>({...e,rect:void 0}))},au=(e,r=V)=>{var t,n,a,i=[],o=[],l=0;return r3(e,e=>{var n=eY(tp,e);if(n){if(ao(n)){var a=eD(ei(n.component),e=>0===l||!r&&(1===l&&e.track?.eq!==J||e.track?.e1));t=eL(a,e=>e.track?.region)&&tu(e)||void 0;var s=al(e);n.content&&re(i,...eI(n.content,e=>({...e,rect:t,...s}))),a?.length&&(re(o,...eI(a,e=>(l=eW(l,e.track?.eq?1:2),as({...e,content:i,rect:t,...s},!!t)))),i=[])}var u=n.e2||tS(e,"area");u&&re(o,...eI(u))}}),i.length&&e7(o,as({id:"",rect:t,content:i})),eF(o,e=>{er(e)?e7(n??=[],e):(e.e2??=eO(n,"/"),re(a??=[],e))}),a||n?{e4:a,e2:eO(n,"/")}:void 0},ac=Symbol(),ad=[{id:"context",e6(e){ra(()=>eF(at,e=>e2(ar,e)&&ae(e)),-1e3).i(),e.Y.get({scope:"view",key:"view",result:(a,i,o)=>(M(n,a?.value)&&t===(t=""+location.href)||(r=n=a?.value),r&&b&&!b.e5&&(b.e5=r,b.metadata?.O&&e.eM.e_(b,{e5:r}),r=void 0),o())});var r,t,n,a=nN({scope:"tab",key:"index"})?.value??0,i=nN({scope:"tab",key:"index"})?.value;null==i&&(i=nN({scope:"shared",key:"index"})?.value??0,nO({scope:y.ek,key:"index",value:i+1}));var o=null,l=(t=V)=>{if(!to(""+o,o=location.href)||t){var{source:n,scheme:l,host:s}=rb(location.href+"",!0);b={type:"view",timestamp:rr(),ej:nm(),e3:ny,href:n,path:location.pathname,hash:location.hash||void 0,domain:{scheme:l,host:s},tabIndex:i,viewport:tf(),duration:n8(void 0,!0)},0===i&&(b.e8=J),0===i&&0===a&&(b.e9=J);var u=rk(location.href);if(eI(["source","medium","campaign","term","content"],(e,r)=>(b.e7??={})[e]=u[`utm_${e}`]?.[0]),!(b.re=k)&&performance&&eI(performance.getEntriesByType("navigation"),e=>{b.rr=e.redirectCount,b.re=rC(e.type,/\_/g,"-")}),k=void 0,"navigate"===(b.re??="navigate")){var c=nN(nY)?.value;c&&tj(document.referrer)&&(b.view=c?.[0],b.eB=c?.[1],e.Y.set({...nY,value:void 0}))}var c=document.referrer||null;c&&!tj(c)&&(b.rt={href:c,domain:td(c)}),b.e5=r,r=void 0,e.eM.eU(b),e.eM.eF(b,e=>nB({duration:n9()},e)),n5(b)}};return nl(e=>n1(e)),t8(e=>{e?(n0(J),++n2):(n0(V),n1(V))}),tc(window,"popstate",()=>(k="back-forward",l())),eI(["push","replace"],e=>{var r=history[e+="State"];history[e]=(...e)=>{r.apply(history,e),k="navigate",l()}}),l(),{rn:r=>ap(r)&&(e7(e,r.username?{type:"login",username:r.username}:{type:"logout"}),J),ra(e){b&&!rL(e)&&(e.view=b.ej)}}}},{id:"components",e6(e){var r=nJ(e),t=e=>null==e?void 0:{...e,component:ei(e.component),content:ei(e.content),tags:ei(e.tags)},n=({ri:e,...n})=>{e1(tp,e,e=>t("add"in n?{...e,component:e$(e?.component,n.component),content:e$(e?.content,n.content),e2:n?.e2??e?.e2,tags:e$(e?.tags,n.tags),ro:n.ro??e?.ro,track:n.track??e?.track}:"update"in n?n.update(e):n)),r(e,eY(tp,e))};return{ra(e){eF(e.e4,e=>e5(e,"track"))},rn:e=>ay(e)?(n(e),J):aS(e)?(eI(((e,r)=>{if(!r)return[];var t=[],n=new Set;return document.querySelectorAll(`[${e}]`).forEach(a=>{if(!eY(n,a))for(var i=[];null!=r9(a,e);){e2(n,a);var o=rj(r9(a,e),"|");r9(a,e,null);for(var l=0;l<o.length;l++){var s=o[l];if(""!==s){var u="-"===s?-1:parseInt(et(s)??"",36);if(u<0){i.length+=u;continue}if(0===l&&(i.length=0),isNaN(u)&&/^["\[{]/.test(s))for(var c="";l<o.length;l++)try{s=JSON.parse(c+=o[l]);break}catch(e){}u>=0&&r[u]&&(s=r[u]),e7(i,s)}}e7(t,...eI(i,e=>({add:J,...e,ri:a})));var d=a.nextElementSibling;"WBR"===a.tagName&&a.parentNode?.removeChild(a),a=d}}),t})(e.rl.rs,e.rl.e4),n),J):V}}},{id:"navigation",e6(e){var r=r=>{tc(r,["click","contextmenu","auxclick"],r=>{var t,n,a,i,o,l=null,s=V;if(r3(r.target,e=>{var r;l??=nK(e)?e:null,s=s||"NAV"===tn(e),i??=tA(e,"clicks",J,e=>e.track?.ru)??((r=ei(th(e)?.component))&&eL(r,e=>e.track?.ru!==V)),o??=tA(e,"region",J,e=>e.track?.region)??((r=th(e)?.component)&&eL(r,e=>e.track?.region))}),l){var u,c=au(l),d=ai(l);i??=!s;var f={...(o??=J)?{ez:tl(l,r),viewport:tv()}:null,...(t=r.target,n=l,r3(t??n,e=>"IMG"===tn(e)||e===n?(a={element:{tagName:e.tagName,text:r9(e,"title")||r9(e,"alt")||e.innerText?.trim().substring(0,100)||void 0}},V):J),a),...c,...d,timing:n9()};if(nL(l)){var v=l.hostname!==location.hostname,{host:p,scheme:h,source:g}=rb(l.href,!1);if(l.host===location.host&&l.pathname===location.pathname&&l.search===location.search){if("#"===l.hash)return;l.hash!==location.hash&&e7(e,D({type:"anchor_navigation",anchor:l.hash,...f}));return}var y=D({ej:nm(),type:"navigation",href:v?l.href:g,external:v,domain:{host:p,scheme:h},self:J,anchor:l.hash,...f});r.button<=1&&(1===r.button||r.ctrlKey||r.shiftKey||r.altKey||r9(l,"target")!==window.name?(nZ(y.ej),y.self=V,e7(e,y)):to(location.href,l.href)||(y.rc=y.external,nZ(y.ej)));return}var m=(r3(r.target,(e,r)=>!!(u??=an(th(e)?.ro??tS(e,"cart")))&&!u.item&&(u.item=eH(th(e)?.content))&&r(u)),aa(u));(m||i)&&e7(e,m?D({type:"cart_updated",...f,...m}):D({type:"component_click",...f}))}})};r(document),n7(e=>e.contentDocument&&r(e.contentDocument))}},{id:"scroll",e6(e){var r={},t=ti(J);n6(()=>rl(()=>(r={},t=ti(J)),250)),tc(window,"scroll",()=>{var n=ti(),a=ta();if(n.y>=t.y){var i=[];!r.rd&&n.y>=t.y+200&&(r.rd=J,e7(i,"fold")),!r["page-middle"]&&a.y>=.5&&(r["page-middle"]=J,e7(i,"page-middle")),!r["page-end"]&&a.y>=.99&&(r["page-end"]=J,e7(i,"page-end"));var o=eI(i,e=>D({type:"scroll",rf:e,offset:a}));o.length&&e7(e,o)}})}},{id:"cart",e6:e=>({rn(r){if(av(r)){var t=r.ro;return"clear"===t?e7(e,{type:"cart_updated",action:"clear"}):(t=aa(t))&&e7(e,{...t,type:"cart_updated"}),J}return aE(r)?(e7(e,{type:"order",...r.order}),J):V}})},{id:"forms",e6(e){var r=new Map,t=e=>e.selectedOptions?[...e.selectedOptions].map(e=>e.value).join(","):"checkbox"===e.type?e.checked?"yes":"no":e.value,n=n=>{var a,i=n.form;if(i){var l=r7(i,tg("ref"))||"track_ref",s=()=>i.isConnected&&tu(i).width,u=eY(r,i,()=>{var r,t=new Map,n={type:"form",name:r7(i,tg("form-name"))||r9(i,"name")||i.id||void 0,rv:0,eY:0,rp:{}};e.eM.eU(n),e.eM.eF(n,e=>nB(n,e));var l=()=>{o(),r[3]>=2&&(n.rh=3===r[3]||!s()),e.eM.e_(n,{...a,eY:rr(J)-r[4]}),r[3]=1},u=rn();return tc(i,"submit",()=>{a=au(i),r[3]=3,u(()=>{i.isConnected&&tu(i).width>0?(r[3]=2,u()):l()},750)}),r=[n,t,i,0,rr(J),1]});return eY(u[1],n)||eI(i.querySelectorAll("INPUT,SELECT,TEXTAREA"),(e,r)=>{if(!e.name||"hidden"===e.type){"hidden"===e.type&&(e.name===l||tA(e,"ref"))&&(e.value||(e.value=nk()),u[0].rg=e.value);return}var n=e.name,a=u[0].rp[n]??={id:e.id||n,name:n,label:rC(e.labels?.[0]?.innerText??e.name,/^\s*(.*?)\s*\*?\s*$/g,"$1"),rv:0,type:e.type??"unknown",[ac]:t(e)};u[0].rp[a.name]=a,u[1].set(e,a)}),[n,u]}},a=(e,[r,t]=n(e)??[],a=t?.[1].get(r))=>a&&[t[0],a,r,t],i=null,o=()=>{if(i){var[e,r,n,a]=i,o=-(l-(l=n4())),u=-(s-(s=rr(J))),c=r[ac];(r[ac]=t(n))!==c&&(r.ry??=a[5]++,r.rm&&(r.rw=(r.rw??0)+1),r.rm=J,a[3]=2,eF(e.rp,([e,t])=>t.rb=e===r.name||void 0)),r.rv+=o,r.eY+=u,e.rv+=o,i=null}},l=0,s=0,u=e=>{e&&tc(e,["focusin","focusout","change"],(e,r,t=e.target&&a(e.target))=>{t&&(i=t,"focusin"===e.type?(s=rr(J),l=n4()):o())})};u(document),n7(e=>e.contentDocument&&u)}}],af=(...e)=>r=>r===e[0]||e.some(e=>"string"==typeof e&&r?.[e]!==void 0),av=af("cart"),ap=af("username"),ah=af("tagAttributes"),ag=af("disable"),ay=af("boundary"),am=af("extension"),aw=af(J,"flush"),ab=af("get"),ak=af("listener"),aE=af("order"),aS=af("scan"),aA=af("set"),aT=e=>"function"==typeof e,aI=e=>{if(A)return A;er(e)&&(e=tY(e)),e0(tI,e),t2(e5(tI,"clientKey"));var r=e5(tI,"apiKey"),t=r1[tI.name]??[];if(!en(t)){C(`The global variable for the tracker "${tI.name}" is used for something else than an array of queued commands.`);return}var n=[],a=[],i=(e,...r)=>{var t=J;a=eD(a,n=>F(()=>(n[e]?.(...r,{rk:A,unsubscribe:()=>t=V}),t),t4(n)))},o=[],l={eC(e){e.ej??=nm(),e.timestamp??=rr(),f=J;var r=V;return eI(n,([,t])=>{(r||t.ra?.(e)===V)&&(r=J)}),r?void 0:e}},s=nD(tM,l),u=nW(tM,l),c=null,d=0,f=V,v=V;return e3(r1,[{[tI.name]:[A=Object.freeze({id:"tracker_"+nm(),eM:u,Y:s,push(...e){if(!c&&r){if(e[0]!==r)throw Error("Invalid API key.");e.splice(0,1)}if(e.length){var t=V;if((e=eD(eN(e,e=>er(e)?tY(e):e),e=>{if(!e)return V;if(ah(e))tI.tags=e0({},tI.tags,e.rE);else if(ag(e))return tI.disabled=e.disable,V;else if(aw(e))return t=J,V;else if(aT(e))return e(A),V;return v||ak(e)||am(e)?J:(o.push(e),V)})).length||t){var l=eK(e,e=>am(e)?-100:ak(e)?-50:aA(e)?-10:rH(e)?90:0);if(!(c&&c.splice(f?d+1:c.length,0,...l))){for(d=0,c=l;d<c.length;d++)c[d]&&F(()=>{var e,r=c[d];if(i("command",r),f=V,rH(r))u.eU(r,!1);else if(ab(r))s.get(...ei(r.get));else if(aA(r))s.set(...ei(r.set));else if(ak(r))e7(a,r.listener);else if(am(r))(e=F(()=>r.rS.e6(A),e=>t6(r.rS.id,e)))&&(e7(n,[r.priority??100,e]),eK(n,([e])=>e));else if(aT(r))r(A);else{var t=V;for(var[,e]of n)if(t=e.rn?.(r)??V)break;t||t6("invalid-command",r)}},e=>t6(A,"internal-error",e));c=null,t&&u.eU([],!0)}}}},rA:J})]}]),nT(async(e,r,n,a)=>{if("ready"===e){var i=_(await s.get({scope:"session",key:"info",cache:W}).value,"No session data.");l.eO=i.eO,i.rT||(nH(A),i.rT=!0),v=!0,o.length&&e7(A,o),a(),e7(A,...eI(ad,e=>({rS:e})),...t,{set:{scope:"local",key:"loaded",value:!0}})}},!0),A};r1[".tail.js.init"]=e=>{e(aI)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
