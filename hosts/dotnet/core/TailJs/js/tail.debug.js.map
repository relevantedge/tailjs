{"version":3,"file":"tail.debug.js","sources":["../../../../../constants/constants.ts","../../../util/src/regex.ts","../../../types/src/EventMetadata.ts","../../../types/src/util/parseTags.ts","../../src/lib/dom/dom-util.ts","../../src/lib/dom/dom-data.ts","../../../transport/src/transport.ts","../../src/initializeTracker.ts","../../src/extensions/view.ts","../../src/extensions/components.ts","../../../util/src/types/validation.ts","../../../util/src/types/types.ts","../../../util/src/iterators.ts","../../../util/src/accessors.ts","../../../util/src/time.ts","../../../util/src/concurrency.ts","../../../util/src/events.ts","../../../util/src/strings.ts","../../../util/src/enums.ts","../../../util/src/parsers.ts","../../../util/src/intervals.ts","../../../types/src/DataClassification.ts","../../../types/src/DataPurposes.ts","../../../types/src/EventPatch.ts","../../../types/src/protocol/Variable.ts","../../../types/src/protocol/VariableResult.ts","../../../types/src/protocol/VariableSetter.ts","../../../types/src/events/TrackedEvent.ts","../../../types/src/events/ViewEvent.ts","../../../types/src/util/type-test.ts","../../src/interfaces/LocalVariables.ts","../../src/lib/consts.ts","../../src/lib/dom/dom-alias.ts","../../src/lib/config.ts","../../../transport/src/base64.ts","../../../transport/src/lfsr.ts","../../../../../node_modules/.pnpm/@ygoe+msgpack@https+++github.com+nielskuhnel+msgpack.js+tarball+feature+big-float-fix/node_modules/@ygoe/msgpack/msgpack.js","../../src/lib/env.ts","../../src/lib/cipher.ts","../../src/lib/errors.ts","../../src/lib/page-events.ts","../../src/lib/shared-state.ts","../../src/lib/request.ts","../../src/lib/concurrency.ts","../../src/lib/TrackerVariableStorage.ts","../../src/lib/ImpressionObserver.ts","../../src/extensions/deviceDetection.ts","../../src/extensions/user-agent.ts","../../src/extensions/userInteraction.ts","../../src/lib/EventQueue.ts","../../src/lib/debug-listeners.ts","../../src/extensions/commerce.ts","../../src/extensions/forms.ts","../../src/extensions/defaultExtensions.ts","../../src/lib/scanComponents.ts","../../src/extensions/scroll.ts","../../src/extensions/consent.ts","../../src/commands/shared.ts","../../src/commands/CartCommand.ts","../../src/commands/ChangeUserCommand.ts","../../src/commands/ConfigCommand.ts","../../src/commands/ToggleCommand.ts","../../src/commands/BoundaryCommand.ts","../../src/commands/ExtensionCommand.ts","../../src/commands/FlushCommand.ts","../../src/commands/GetCommand.ts","../../src/commands/ListenerCommand.ts","../../src/commands/OrderCommand.ts","../../src/commands/ScanComponentsCommand.ts","../../src/commands/SetCommand.ts","../../src/commands/TrackerAvailableCommand.ts","../../src/commands/ConsentCommand.ts","../../src/index.browser.ts"],"sourcesContent":["export const QUERY_DEVICE = \"qd\";\nexport const INITIALIZE_TRACKER_FUNCTION = \".tail.js.init\";\n\nexport const INIT_SCRIPT_QUERY = \"init\";\nexport const CLIENT_SCRIPT_QUERY = \"opt\";\nexport const EVENT_HUB_QUERY = \"var\";\nexport const VARIABLES_QUERY = \"usr\";\nexport const CONTEXT_NAV_QUERY = \"mnt\";\nexport const SCHEMA_QUERY = \"$types\";\nexport const BUILD_REVISION_QUERY = globalThis.REVISION\n  ? \"rev=\" + globalThis.REVISION\n  : \"\";\n\nexport const SCOPE_INFO_KEY = \"@info\";\nexport const CONSENT_INFO_KEY = \"@consent\";\nexport const SESSION_REFERENCE_KEY = \"@session_reference\";\n\nexport const PATCH_EVENT_POSTFIX = \"_patch\";\n\nexport const CLIENT_STORAGE_PREFIX = \"_tail:\";\n\nexport const CLIENT_STATE_CHANNEL_ID = CLIENT_STORAGE_PREFIX + \"state\";\n\nexport const CLIENT_CALLBACK_CHANNEL_ID = CLIENT_STORAGE_PREFIX + \"push\";\n\nexport const PLACEHOLDER_SCRIPT: <Quote extends boolean = false>(\n  trackerName?: string,\n  quote?: Quote\n) => Quote extends true ? string : (...commands: any[]) => void = ((\n  trackerName = \"tail\",\n  quote: boolean\n) => {\n  if (quote) {\n    return `(window.${trackerName}??=c=>${trackerName}._?.push(c) ?? ${trackerName}(c))._=[];`;\n  }\n\n  (globalThis[trackerName] ??= (c: any) =>\n    globalThis[trackerName]._?.push(c) ?? globalThis[trackerName](c))._ = [];\n}) as any;\n\nexport const __DEBUG__ = true;\n","import {\n  If,\n  MaybeUndefined,\n  Nullable,\n  distinct,\n  filter,\n  isArray,\n  isBoolean,\n  isString,\n  join,\n  map,\n  nil,\n  undefined,\n  type ConstToNormal,\n  type IterableOrSelf,\n  type Nullish,\n} from \".\";\n\n/**\n * Common definition of expressions that are used for string matching.\n *\n * If not already a regular expression, a string that starts with `/` and optionally ends with `/` is parsed as regular expressions with flags `gu` applied (global and Unicode).\n * This enables defining regular expression in text based configuration files that do not have native regular expressions.\n *\n * For convenience an asterisk (`*`) can be used to match any number of characters in strings, and  `,` and white-space ` ` are interpreted as list separators.\n * `\\` is used as the escape character so the string `\\/escaped\\*,and\\ this` will only match the strings, literally, `\\/escaped\\*` and `and this`.\n * This also means that intentional backslashes, commas and spaces must be escaped as `\\\\`, `\\,` and `\\ ` respectively.\n *\n * Arrays of strings and/or regular expressions are evaluated as unions (_string 1_ \"or\" _string 2_ \"or\" ...).\n *\n * The special values `null`, `undefined`, the empty string,  and `false` are interpreted as \"never\", and `true` is \"always\".\n *\n * Regarding separators, they may be different in specific contexts. If so, it will be mentioned there.\n */\nexport type ParsableRegExp =\n  | IterableOrSelf<null | undefined | boolean | string | RegExp>\n  | Iterable<ParsableRegExp>;\n\nexport const testRegex = <Nulls>(\n  s: Nullable<string, Nulls>,\n  match: Nullable<RegExp, Nulls>\n) => (!match || s == null ? undefined : match.test(s));\n\nexport const matches = <R, Nulls>(\n  s: Nullable<string, Nulls>,\n  regex: RegExp | Nullish,\n  selector: (...args: string[]) => R | Nullish\n): MaybeUndefined<Nulls, ConstToNormal<R>[]> => match(s, regex, selector, true);\n\nlet matchProjection: any;\nlet collected: any[];\n\n/**\n * Matches a regular expression against a string and projects the matched parts, if any.\n */\nexport const match: {\n  <R, Nulls, Collect extends boolean = false>(\n    s: Nullable<string, Nulls>,\n    regex: RegExp | Nullish,\n    selector: (...args: (string | undefined)[]) => R | Nullish,\n    collect?: Collect\n  ): MaybeUndefined<Nulls, If<Collect, ConstToNormal<R>[], R | undefined>>;\n  (s: string | Nullish, match: RegExp | Nullish): RegExpMatchArray | null;\n} = <R>(\n  s: string,\n  regex: RegExp,\n  selector?: (...args: (string | undefined)[]) => R,\n  collect = false\n) =>\n  (s ?? regex) == nil\n    ? undefined\n    : selector\n    ? ((matchProjection = undefined),\n      collect\n        ? ((collected = []),\n          match(\n            s,\n            regex,\n            (...args) =>\n              (matchProjection = selector(...args)) != null &&\n              collected.push(matchProjection)\n          ))\n        : s.replace(\n            // Replace seems to be a compact way to get the details of each match\n            regex,\n            (...args) => (matchProjection = selector(...args)) as any\n          ),\n      matchProjection)\n    : s.match(regex);\n\n/**\n * Replaces reserved characters to get a regular expression that matches the string.\n */\nexport const escapeRegEx = <T extends string | Nullish>(\n  input: T\n): MaybeUndefined<T, string> =>\n  input?.replace(/[\\^$\\\\.*+?()[\\]{}|]/g, \"\\\\$&\") as any;\n\nconst REGEX_NEVER = /\\z./g;\nconst unionOrNever = (parts: (string | Nullish)[], joined?: string) =>\n  (joined = join(distinct(filter(parts, (part) => part?.length)), \"|\"))\n    ? new RegExp(joined, \"gu\")\n    : REGEX_NEVER;\n\nconst stringRuleCache: { [pattern: string]: RegExp } = {};\nexport const isRegEx = (value: any): value is RegExp => value instanceof RegExp;\n\n/**\n * Tests or parses a regular expression accepting the {@link ParsableRegExp} format.\n *\n * Strings are cached, so there is no need to do additional caching outside this function (as far as the caching would only concern strings).\n */\nexport const parseRegex = <T>(\n  input: T,\n  separators: readonly string[] = [\",\", \" \"]\n): T extends ParsableRegExp ? RegExp : undefined =>\n  isRegEx(input)\n    ? input\n    : isArray(input) // Parse individual specifiers, and join them into one long regex. An empty array is interpreted as \"never\".\n    ? unionOrNever(map(input, (part) => parseRegex(part, separators)?.source)!)\n    : isBoolean(input)\n    ? input // `true` is \"always\", `false` is \"never\"\n      ? /./g\n      : REGEX_NEVER // Matches nothing. End of string followed by something is never the case.\n    : isString(input)\n    ? (stringRuleCache[input] ??= match(\n        input || \"\",\n        /^(?:\\/(.+?)\\/?|(.*))$/gu,\n        (_, regex, text) =>\n          regex\n            ? new RegExp(regex, \"gu\")\n            : unionOrNever(\n                map(\n                  split(\n                    text!,\n                    new RegExp(\n                      `(?<!(?<!\\\\\\\\)\\\\\\\\)[${join(separators, escapeRegEx)}]`\n                    )\n                  ),\n                  (text) =>\n                    text &&\n                    `^${join(\n                      // Split on non-escaped asterisk (Characterized by a leading backslash that is not itself an escaped backslash).\n                      split(text, /(?<!(?<!\\\\)\\\\)\\*/),\n                      (part) =>\n                        escapeRegEx(\n                          // Remove backslashes used for escaping.\n                          replace(part, /\\\\(.)/g, \"$1\")\n                        ),\n                      // Join the parts separated by non-escaped asterisks with the regex wildcard equivalent.\n                      \".*\"\n                    )}$`\n                )\n              )\n      )!)\n    : (undefined as any);\n\n/**\n * Better minifyable version of `String`'s `split` method that allows a null'ish parameter.\n */\nexport const split = <T extends string | Nullish>(\n  s: T,\n  separator: RegExp | string\n): MaybeUndefined<T, string[]> => s?.split(separator) ?? (s as any);\n\n/**\n * Better minifyable version of `String`'s `replace` method that allows a null'ish parameter.\n */\nexport const replace = <T extends string | Nullish>(\n  s: T,\n  match: RegExp,\n  replaceValue: string | ((...args: string[]) => string)\n): T => s?.replace(match, replaceValue as any) ?? (s as any);\n","import { Nullish } from \"@tailjs/util\";\nimport { TrackedEvent } from \".\";\n\n/** These properties are used to track the state of events as they get collected, and not stored. */\nexport interface EventMetadata {\n  /** Hint to the request handler that new sessions should not be started if all posted events are passive. */\n  passive?: boolean;\n\n  /** Hint that the event has been queued. */\n  queued?: boolean;\n\n  /** Hint to client code, that the event has been posted to the server. */\n  posted?: boolean;\n}\n\nlet metadata: EventMetadata | undefined;\nexport const clearMetadata = <\n  T extends TrackedEvent | Nullish,\n  ClientSide extends boolean\n>(\n  event: T,\n  client: ClientSide\n): T &\n  (ClientSide extends true\n    ? { metadata?: { posted?: undefined } }\n    : { metadata?: undefined }) => (\n  (metadata = event?.metadata) &&\n    (client\n      ? (delete metadata.posted,\n        delete metadata.queued,\n        !Object.entries(metadata).length && delete event.metadata)\n      : delete event.metadata),\n  event as any\n);\n","import {\n  MaybeUndefined,\n  Nullish,\n  forEach,\n  isIterable,\n  isString,\n  map,\n  match,\n} from \"@tailjs/util\";\nimport { ParsableTags, Tag } from \"..\";\n\nconst maybeDecode = <S extends string | Nullish>(s: S): S =>\n  // It qualifies:\n  s &&\n  /^(%[A-F0-9]{2}|[^%])*$/gi.test(s) &&\n  // It needs it:\n  /[A-F0-9]{2}/gi.test(s)\n    ? decodeURIComponent(s)\n    : (s as any);\n\nexport type TagCollection = Map<string, Tag>;\n\nexport const parseTags = <Input extends ParsableTags>(\n  tagString: Input,\n  prefix?: string\n): MaybeUndefined<Input, Tag[]> =>\n  map(collectTags(tagString, prefix)?.values()) as any;\n\nexport const parseTagValue = <Value extends string | Nullish>(\n  value: string | (string | null)[] | null | undefined,\n  tagName = \"tag\"\n): Value => parseTags(tagName + value)?.[0] as any;\n\nlet key: string;\nlet current: Tag | undefined;\nconst collect = (collected: TagCollection, tag: Tag | Nullish) =>\n  tag &&\n  (!(current = collected.get((key = tag.tag + (tag.value ?? \"\")))) ||\n    (current.score ?? 1) < (tag.score ?? 1)) &&\n  collected.set(key, tag);\n\n/**\n * Parses tags from a string or array of strings and collects them in a map to avoid duplicates.\n * In case of ties between tags with the same names and values but with different scores, the highest wins.\n */\nexport const collectTags = <Input extends ParsableTags>(\n  tagString: Input,\n  prefix = \"\",\n  collected: TagCollection = new Map()\n): MaybeUndefined<Input, TagCollection> => {\n  if (!tagString) return undefined as any;\n  if (isIterable(tagString)) {\n    forEach(tagString, (input) => collectTags(input, prefix, collected));\n    return collected as any;\n  }\n\n  /**\n   * [namespace::]name[ws*][(:|=)[ws*]value][`~`score] [( |,|;|&|#) more tags]\n   *\n   * The parts of a tail.j tag are:\n   * 1. Optional namespace (utm, ai, cms).\n   *   - Anything not whitespace, colon (`:`) or tilde (`~`) followed by double colon `::`.\n   * 2. Tag name:\n   *   - Anything not whitespace, colon (`:`), tilde `~` or equality (`=`).\n   * 3. Optional value.\n   *   - Anything not a separator a other whitespace than space (` `).\n   *   - If the value is supposed to contain one of these characters it must be quoted in either single (`\\`) or double quotes (`\"`).\n   *   - The tag name and value are separated by either:\n   *     - `:` - Follows normal writing convention in many languages (`country: Denmark, name: Glottal sound`), or\n   *     - `=` - Is what you typically write in programming.\n   *   - Escaping values within quotes is not required. The last quote followed by a terminator or score ends the value. (`tag1: \"This \"value\" contains\" quotes\" tag2=...`)\n   * 4. Optional score. How much the tag applies to the target (for example audience:investors~9 audience:consumers~3 - very relevant for investors, a little bit for consumers).\n   *   - You can use decimals in the score (e.g. 5.343).\n   *   - The parsed score gets divided by 10, so you should generally aim for values between 0 and 10 since that corresponds to a percentage between 0 and 100%.\n   *     This also means that if you output machine generated scores (could be from an algorithm) they tend to already be between 0 and 1, so here you must multiply them with 10 when encoding the tag to get the intended result.\n   *   - The default is 10 (100 %).\n   *\n   *  Tags are separated by either:\n   *     - Space (` `) (input friendly)\n   *     - Hash tag (`#`) - Some people might do that without thinking about it since that is how they normally write tags\n   *     - Comma (`,`) - How most would intuitively join strings in code),\n   *     - Semicolon (`;`) - CSS style\n   *     - Ampersand - URL query string style.\n   *     - Repeated separators gets ignored so don't worry about empty entries if you write something like `tag1,,,,tag2`.\n   *\n   *   Both namespace, name and value will be URI decoded if they contain %xx anywhere in them.\n   */\n\n  isString(tagString)\n    ? match(\n        tagString,\n        /(?:([^\\s:~]+)::(?![ :=]))?([^\\s~]+?)(?:\\s*[:=]\\s*(?:\"((?:\"[^\"]*|.)*?)(?:\"|$)|'((?:'[^'~]*|.)*?)(?:'|$)|((?: *(?:(?:[^,&;#\\s~])))*))\\s*)?(?: *~ *(\\d*(?:\\.\\d*)?))?(?:[\\s,&;#~]+|$)/g,\n        (_, ns, localName: string, quoted1, quoted2, unquoted, score) => {\n          const name =\n            (ns ? maybeDecode(ns) + \"::\" : \"\") +\n            prefix +\n            maybeDecode(localName);\n\n          let tag: Tag = {\n            tag: name,\n            value: maybeDecode(quoted1 ?? quoted2 ?? unquoted),\n          };\n          score &&\n            parseFloat(score) !== 10 &&\n            (tag.score = parseFloat(score) / 10);\n          collect(collected, tag);\n        }\n      )\n    : collect(collected, tagString);\n\n  return collected as any;\n};\n\nexport const encodeTag = <T extends Tag | null | undefined>(\n  tag: T\n): T extends Tag ? string : null | undefined =>\n  tag == null\n    ? (tag as any)\n    : tag.tag +\n      (tag.value\n        ? \":\" + (/[,&;#~]/.test(tag.value) ? '\"' + tag.value + '\"' : tag.value)\n        : \"\") +\n      (tag.score && tag.score !== 1 ? \"~\" + tag.score * 10 : \"\");\n","import {\n  type Domain,\n  type Position,\n  type Rectangle,\n  type ScreenPosition,\n  type Size,\n  type Viewport,\n} from \"@tailjs/types\";\nimport {\n  Binders,\n  F,\n  MAX_SAFE_INTEGER,\n  NOOP,\n  Nullable,\n  T,\n  Unbinder,\n  array,\n  concat,\n  createEventBinders,\n  createTimeout,\n  forEach,\n  isArray,\n  nil,\n  parseBoolean,\n  parseUri,\n  replace,\n  restrict,\n  round,\n  tryCatch,\n  type MaybeUndefined,\n  type Nullish,\n} from \"@tailjs/util\";\nimport { body, document, httpDecode, httpDecrypt } from \"..\";\n\nexport type NodeWithParentElement = Node | EventTarget;\n\nexport let MAX_ANCESTOR_DISTANCE = MAX_SAFE_INTEGER;\n\nexport const forAncestorsOrSelf = <T = any>(\n  el: NodeWithParentElement | Nullish,\n  action: (\n    el: Element,\n    returnValue: (value: T | undefined, replace?: boolean) => void,\n    distance: number\n  ) => any,\n  stoppingCriterion: (el: Element, distance: number) => boolean = (\n    el,\n    distance\n  ) => distance >= MAX_ANCESTOR_DISTANCE\n): T | undefined => {\n  let i = 0;\n  let returnValue: any;\n  let stop = F;\n  while (\n    el?.[\"nodeType\"] === 1 &&\n    !stoppingCriterion(el as Element, i++) &&\n    action(\n      el as Element,\n      (value, replace) => (\n        value != nil &&\n          ((returnValue = value), (stop = replace !== T && returnValue != nil)),\n        T\n      ),\n      i - 1\n    ) !== F &&\n    !stop\n  ) {\n    const prev = el;\n    el = (el as Element).parentElement;\n    if (el === null && (prev as Element)?.ownerDocument !== document) {\n      el = (prev as Element)?.ownerDocument.defaultView?.frameElement;\n    }\n  }\n\n  return returnValue;\n};\n\nexport type AttributeValueType =\n  /**\n   * The normalized attribute value, int the sense it gets trimmed and lowercased.\n   * The empty spring is considered undefined.\n   *\n   * This is the default.\n   */\n  | true\n  | \"z\"\n\n  /**\n   * The attribute value as a boolean or undefined if it does match `0`, `1`, `true`, `false` or \"\".\n   * The empty string matches existence of an attribute `<tag attribute/>`.\n   * If parsing arrays of booleans, the empty string will be considered undefined since that is an empty element in this context.\n   */\n  | \"b\"\n\n  /** The attribute value as a number or undefined if it does not look like a number. */\n  | \"n\"\n\n  /** The raw attribute value. */\n  | false\n  | \"r\"\n\n  /**  The attribute value parsed as JSON. */\n  | \"j\"\n\n  /**  The attribute value parsed as a HTTP encoded string (from @tailjs/util/transport). */\n  | \"h\"\n\n  /**  The attribute value parsed as a client encrypted value (from @tailjs/util/transport). This also supports JSON. */\n  | \"e\"\n\n  /**\n   * This means the attribute value will be parsed as an array with elements separated by `,`.\n   * Whitespace is trimmed, and empty values are considered undefined.\n   *\n   * A type may be included in the tuple to parse the items as this type. In this case unparsable values will be included in the array\n   * as undefined.\n   */\n  | readonly [type?: AttributeValueType & string];\n\ntype ParsedAttributeValue<\n  T extends AttributeValueType | Nullish,\n  EncodedType = any\n> = T extends readonly [infer T extends AttributeValueType]\n  ? ParsedAttributeValue<T>[]\n  : T extends (boolean | \"z\" | Nullish) | \"r\"\n  ? string\n  : T extends \"b\"\n  ? boolean | undefined\n  : T extends \"n\"\n  ? number | undefined\n  : T extends \"j\" | \"h\" | \"e\"\n  ? EncodedType | undefined\n  : never;\n\nexport const parseAttributeValue: <\n  V,\n  Type extends AttributeValueType | Nullish = \"z\"\n>(\n  value: V,\n  type: Type\n) => MaybeUndefined<\n  V,\n  Type extends \"b\"\n    ? boolean\n    : V extends \"\"\n    ? undefined\n    : ParsedAttributeValue<Type>\n> = (value: any, type = \"z\" as any) => {\n  if (value == null || value === \"null\" || (value === \"\" && type !== \"b\"))\n    return undefined;\n\n  switch (type) {\n    case true:\n    case \"z\":\n      return (\"\" + value).trim()?.toLowerCase();\n    case false:\n    case \"r\":\n      value;\n    case \"b\":\n      return value === \"\" || parseBoolean(value);\n    case \"n\":\n      return parseFloat(value);\n    case \"j\":\n      return tryCatch(() => JSON.parse(value), NOOP);\n    case \"h\":\n      return tryCatch(() => httpDecode(value), NOOP);\n    case \"e\":\n      return tryCatch(() => httpDecrypt?.(value), NOOP);\n    default:\n      return isArray(type)\n        ? value === \"\"\n          ? undefined\n          : (\"\" + value)\n              .split(\",\")\n              .map(\n                (value) =>\n                  (value =\n                    value.trim() === \"\"\n                      ? undefined\n                      : parseAttributeValue(value, type![0]))\n              )\n        : undefined;\n  }\n};\n\nexport const attr = <\n  Node extends NodeWithParentElement | Nullish,\n  Type extends AttributeValueType | Nullish = \"z\"\n>(\n  node: Node,\n  name: string,\n  type?: Type\n) => parseAttributeValue((node as any)?.getAttribute(name), type);\n\nexport const setAttribute = (\n  node: NodeWithParentElement | Nullish,\n  name: string,\n  value: any\n) =>\n  value === nil\n    ? (node as any)?.removeAttribute(name)\n    : (node as any)?.setAttribute(name, \"\" + value);\n\nexport const scopeAttribute = (\n  node: NodeWithParentElement | Nullish,\n  name: string,\n  type?: AttributeValueType\n) => forAncestorsOrSelf(node, (el, value) => value(attr(el, name, type)));\n\nexport const inElementScope = (\n  node: NodeWithParentElement | Nullish,\n  name: string\n) =>\n  forAncestorsOrSelf(node, (el, value) =>\n    value(tagName(el) === name || undefined)\n  );\n\nexport const normalizedAttribute = (\n  node: NodeWithParentElement | Nullish,\n  name: string\n) => attr(node, name)?.trim()?.toLowerCase();\n\nlet value: string | undefined;\n\nexport const booleanAttribute = (\n  node: NodeWithParentElement | Nullish,\n  name: string\n) => (value = attr(node, name)) === \"\" || parseBoolean(value);\n\nexport const numericAttribute = (\n  node: NodeWithParentElement | Nullish,\n  name: string\n) => parseFloat(\"\" + (value = attr(node, name))) ?? undefined;\n\nexport const attributeNames = <\n  T extends NodeWithParentElement | Nullish | Nullish\n>(\n  node: T\n): MaybeUndefined<T, string[]> => (node as any)?.getAttributeNames();\n\nexport const cssProperty = (el: Element, name: string) =>\n  getComputedStyle(el).getPropertyValue(name) || nil;\n\nexport const tagName = <T extends Element | Nullish>(\n  el: T\n): T extends Nullish ? null : string => (el != nil ? (el.tagName as any) : nil);\n\nlet pos: Position;\nexport const relativeScrollPos = (): Position => (\n  (pos = scrollPos(F)),\n  {\n    x: pos.x / (body.offsetWidth - window.innerWidth) || 0,\n    y: pos.y / (body.offsetHeight - window.innerHeight) || 0,\n  }\n);\n\nexport const scrollPos = (int?: boolean): Position => ({\n  x: round(scrollX, int),\n  y: round(scrollY, int),\n});\n\nexport const matchExHash = (href1: string, href2: string) =>\n  replace(href1, /#.*$/, \"\") === replace(href2, /#.*$/, \"\");\n\nlet screenPos: Position | undefined;\nexport const getScreenPos = <T extends Element | Nullish>(\n  el: T,\n  mouseEvent?: MouseEvent,\n  includeFold = T\n): MaybeUndefined<ScreenPosition> =>\n  (screenPos = getPos(el, mouseEvent)) &&\n  (restrict<ScreenPosition>({\n    xpx: screenPos.x,\n    ypx: screenPos.y,\n    x: round(screenPos.x / body.offsetWidth, 4),\n    y: round(screenPos.y / body.offsetHeight, 4),\n    pageFolds: includeFold ? screenPos.y / window.innerHeight : undefined,\n  }) as any);\n\nlet x: number;\nlet y: number;\nexport const getPos = <Nulls>(\n  el: Nullable<Element, Nulls>,\n  mouseEvent?: MouseEvent\n): MaybeUndefined<Nulls, Position> => {\n  return !!mouseEvent?.[\"pointerType\"] && mouseEvent?.pageY != nil\n    ? { x: mouseEvent.pageX, y: mouseEvent.pageY }\n    : el\n    ? (({ x, y } = getRect(el)!), { x, y })\n    : (undefined as any);\n};\n\nlet rect: DOMRect;\nexport const getRect = <Nulls>(\n  el: Nullable<Element, Nulls>\n): MaybeUndefined<Nulls, Rectangle> =>\n  el\n    ? ((rect = el.getBoundingClientRect()),\n      (pos = scrollPos(F)),\n      {\n        x: round(rect.left + pos.x),\n        y: round(rect.top + pos.y),\n        width: round(rect.width),\n        height: round(rect.height),\n      })\n    : (undefined as any);\n\ntype AllMaps = WindowEventMap &\n  GlobalEventHandlersEventMap &\n  DocumentEventMap &\n  HTMLElementEventMap & {\n    freeze: PageTransitionEvent;\n    resume: PageTransitionEvent;\n  };\n\nexport const listen = <K extends keyof AllMaps>(\n  target: {\n    addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions\n    ): void;\n    removeEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions\n    ): void;\n  },\n  name: K | K[],\n  listener: (\n    ev: AllMaps[K extends any[] ? K[number] : K],\n    unbind: Unbinder\n  ) => any,\n  options: AddEventListenerOptions = { capture: true, passive: true }\n): Binders => {\n  name = array(name) as any;\n  return createEventBinders(\n    listener,\n    (listener) =>\n      forEach(name, (name) => target.addEventListener(name, listener, options)),\n    (listener) =>\n      forEach(name, (name) =>\n        target.removeEventListener(name, listener, options)\n      )\n  );\n};\n\nexport const parseDomain = (href: string): Domain => {\n  const { host, scheme, port } = parseUri(href, false, true);\n  return { host: host + (port ? \":\" + port : \"\"), scheme };\n};\n\nexport const getViewportSize = (): Size => ({\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nexport const getViewport = (): Viewport => (\n  (pos = scrollPos(T)),\n  {\n    ...pos,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    totalWidth: body.offsetWidth,\n    totalHeight: body.offsetHeight,\n  }\n);\n\nexport type Overlay = {\n  move(rect: DOMRect | Element): Overlay;\n  text(text: string): Overlay;\n  toggle(show: boolean): Overlay;\n};\nexport const overlay = (\n  rect?: DOMRect | Element,\n  text?: string,\n  pulse?: boolean\n): Overlay => {\n  let backdropEl: HTMLElement | undefined;\n  let textEl: HTMLElement | undefined;\n\n  let currentText = text;\n  let currentRect: DOMRect | undefined = rect as any;\n  const ensureElements = () => {\n    if (backdropEl) return true;\n\n    backdropEl = document.createElement(\"div\");\n    backdropEl.style.cssText =\n      \"position:absolute;border:4px solid blue;pointer-events:none;z-index:100\";\n    body.appendChild(backdropEl);\n\n    textEl = document.createElement(\"div\");\n    textEl.style.cssText =\n      \"position:absolute; font-family: sans-serif; font-size: 14px; right: 0; top: 0;margin:10px\";\n    backdropEl.appendChild(textEl);\n\n    overlay.move(currentRect).text(currentText);\n    return false;\n  };\n\n  const cleaner = createTimeout();\n\n  const overlay = {\n    move(rect: DOMRect | Element | Nullish) {\n      currentRect = rect = (rect as Element).getBoundingClientRect?.() ??\n        rect ?? {\n          top: 0,\n          left: 0,\n          width: 0,\n          height: 0,\n        };\n\n      if (!ensureElements()) {\n        return overlay;\n      }\n\n      if (!currentRect!.width) {\n        return overlay.toggle(false);\n      }\n\n      let offset = body.getBoundingClientRect();\n      [\"top\", \"left\", \"width\", \"height\"].forEach((p, i) => {\n        backdropEl!.style[p] = rect![p] - (i < 2 ? offset[p] : 0) + \"px\";\n      });\n      offset = backdropEl!.getBoundingClientRect();\n      textEl!.style.top = (offset.top < 0 ? -offset.top : 0) + \"px\";\n\n      textEl!.style.right =\n        (offset.right > window.innerWidth\n          ? offset.right - window.innerWidth\n          : 0) + \"px\";\n\n      return overlay;\n    },\n    text: (text: string | Nullish) => (\n      ensureElements() && (textEl!.innerText = currentText = text ?? \"\"),\n      overlay\n    ),\n\n    toggle(show: boolean) {\n      if (!backdropEl) {\n        if (!show) return overlay;\n        ensureElements();\n      }\n      backdropEl!.style.transition = show ? \"\" : \"opacity 1s .5s\";\n      backdropEl!.style.opacity = show ? \"1\" : \"0\";\n\n      show\n        ? cleaner(false)\n        : cleaner(() => {\n            if (!backdropEl) return;\n            body.removeChild(backdropEl);\n            backdropEl = textEl = undefined;\n          }, 1100);\n      return overlay;\n    },\n  };\n\n  currentRect && overlay.move(currentRect).text(currentText);\n  pulse && overlay.toggle(true).toggle(false);\n\n  return overlay;\n};\n","import {\n  ParsableTags,\n  TagCollection,\n  collectTags,\n  type Tag,\n} from \"@tailjs/types\";\nimport {\n  F,\n  T,\n  concat,\n  flatMap,\n  forEach,\n  isFunction,\n  isIterable,\n  isPlainObject,\n  isRegEx,\n  isString,\n  join,\n  matches,\n  nil,\n  parseBoolean,\n  parseRegex,\n  replace,\n  stop,\n  testRegex,\n  values,\n  type Nullish,\n} from \"@tailjs/util\";\n\nimport {\n  NodeWithParentElement,\n  attr,\n  attributeNames,\n  createElement,\n  cssProperty,\n  forAncestorsOrSelf,\n  matchSelector,\n  trackerConfig,\n} from \"..\";\nimport type { BoundaryData, TagMappings } from \"../..\";\n\nexport const boundaryData = new WeakMap<Node, BoundaryData<true>>();\nexport const getBoundaryData = (el: Node) => boundaryData.get(el);\n\nexport const trackerPropertyName = (name: string, css = F) =>\n  (css ? \"--track-\" : \"track-\") + name;\n\n// const trackerProperty = (\n//   el: Element,\n//   name: string,\n//   value = attr(el, trackerPropertyName(name)),\n//   css = cssProperty(el as Element, trackerPropertyName(name, T))\n// ) => (value ? (css ? value + \" \" + css : value) : css);\n\ntype MatchAttributeRule = readonly [\n  match: RegExp,\n  selector?: string,\n  baseRank?: string\n];\n\ntype CacheMatchRules = [\n  eligibleCache: { [name: string]: boolean },\n  rules: MatchAttributeRule[] | Nullish\n];\n\n/**\n * Extracts an element's tags given an attribute name, and a list of rules about how to match..\n * Since this function is external, its local variables are added as local parameters. Don't tamper.\n *\n * An optional `eligibleCache` can be passed along to speed up rejecting attribute names that definitely don't match anything.\n */\nconst matchAttributeNames = (\n  el: Element | Nullish,\n  cached: CacheMatchRules | Nullish,\n  tags: TagCollection,\n  prefix?: string | boolean,\n  value?: string,\n  eligible?: boolean\n) =>\n  cached?.[1] &&\n  forEach(\n    attributeNames(el),\n    (name) =>\n      (cached[0][name] ??=\n        ((eligible = F),\n        isString(\n          (prefix =\n            // No cache. Let's loop through them then.\n            forEach(\n              cached[1],\n              ([match, selector, prefix], _) =>\n                testRegex(name, match) &&\n                // Sneakily we \"delete\" the eligible flag, so the skipNameCache's `??=` assignment will always be reevaluated.\n                // If this code branch is never hit, we return the initial value `false`, and this check will never be performed again.\n                // We do this check before the selector check, since this result is not generally cacheable.\n                ((eligible = undefined),\n                !selector || matchSelector(el, selector)) &&\n                stop(prefix ?? name)\n            ))\n        ) && // The empty string is also \"true\" since it means presence of the attribute without a value (as in `<div tag-yes />).\n          (!(value = el!.getAttribute(name)!) || parseBoolean(value)) &&\n          collectTags(value, replace(prefix, /\\-/g, \":\"), tags),\n        eligible))\n  );\n\n// We cache the tracker configuration's rules for tag mappings.\nlet cachedTagMapper: (el: Element, tags: TagCollection) => void = () => {};\nlet cachedMappings: TagMappings | undefined;\nconst parseTagAttributes = (el: Element, tags: TagCollection) => {\n  if (cachedMappings === (cachedMappings = trackerConfig.tags)) {\n    return cachedTagMapper(el, tags);\n  }\n\n  const parse = (rule: TagMappings[string]): MatchAttributeRule[] =>\n      !rule\n        ? []\n        : isRegEx(rule)\n        ? [[rule]]\n        : isIterable(rule)\n        ? flatMap(rule, parse)\n        : [\n            isPlainObject(rule)\n              ? [parseRegex(rule.match)!, rule.selector, rule.prefix]\n              : [parseRegex(rule)!],\n          ],\n    cache: CacheMatchRules = [\n      {},\n      // Start by checking whether we have any of the good ol', documented, \"tail.js official\" tag attributes.\n      [[/^(?:track\\-)?tags?(?:$|\\-)(.*)/], ...parse(values(cachedMappings))],\n    ];\n\n  (cachedTagMapper = (el: Element, tags: TagCollection) =>\n    matchAttributeNames(el, cache, tags))(el, tags);\n};\n\nconst cssPropertyWithBase = (el: Element, name: string) =>\n  join(\n    concat(\n      cssProperty(el, trackerPropertyName(name, T)),\n      cssProperty(el, trackerPropertyName(\"base-\" + name, T))\n    ),\n    \" \"\n  );\n\n// We cannot cache as broadly for CSS based rules, so we cache per selector instead.\nconst parsedCssRules: {\n  [rule: string]: CacheMatchRules;\n} = {};\n\nconst parseCssMappingRules = (\n  el: Element,\n  tags: TagCollection,\n  rulesString = cssPropertyWithBase(el, \"attributes\")\n) => {\n  rulesString &&\n    matchAttributeNames(\n      el,\n      (parsedCssRules[rulesString] ??= [\n        {},\n        matches(\n          rulesString,\n          /(?:(\\S+)\\:\\s*)?(?:\\((\\S+)\\)|([^\\s,:]+))\\s*(?!\\S*\\:)/g,\n          (_, prefix, rule1, rule2) =>\n            [parseRegex(rule1 || rule2), , prefix] as const\n        ),\n      ]),\n      tags\n    );\n  collectTags(cssPropertyWithBase(el, \"tags\"), undefined, tags);\n};\n\nlet currentBoundaryData: BoundaryData<true> | Nullish;\nexport const trackerProperty = (\n  el: Element,\n  name: string,\n  inherit:\n    | boolean\n    | ((el: NodeWithParentElement, distance: number) => boolean) = F,\n  boundaryData?: (el: BoundaryData<true>) => string | Nullish\n): string | null =>\n  (inherit\n    ? forAncestorsOrSelf(\n        el,\n        (el, r) => r(trackerProperty(el, name, F)),\n        isFunction(inherit) ? inherit : undefined\n      )\n    : join(\n        concat(\n          attr(el, trackerPropertyName(name)),\n          cssProperty(el, trackerPropertyName(name, T))\n        ),\n        \" \"\n      )) ??\n  (boundaryData &&\n    (currentBoundaryData = getBoundaryData(el)) &&\n    boundaryData(currentBoundaryData)) ??\n  nil;\n\nlet propertyValue: string | Nullish;\nexport const trackerFlag = (\n  el: Element,\n  name: string,\n  inherit:\n    | boolean\n    | ((el: NodeWithParentElement, distance: number) => boolean) = F,\n  boundaryData?: (data: BoundaryData) => boolean | Nullish\n) =>\n  (propertyValue = trackerProperty(el, name, inherit, boundaryData as any)) ===\n    \"\" || (propertyValue == nil ? propertyValue : parseBoolean(propertyValue));\n\nexport type ParsedTags = { tags?: Tag[] };\n\nexport const parseTags = (\n  sourceEl: Element | Nullish,\n  stoppingCriterion?: (el: Element, distance: number) => boolean,\n  elementTagData?: (el: Element) => ParsableTags,\n  tags?: TagCollection\n): ParsedTags =>\n  !sourceEl\n    ? {}\n    : ((tags ??= new Map()),\n      parseCssMappingRules(sourceEl, tags),\n      forAncestorsOrSelf(\n        sourceEl,\n        (el) => {\n          parseTagAttributes(el, tags!);\n          collectTags(elementTagData?.(el), undefined, tags!);\n        },\n        stoppingCriterion\n      ),\n      tags.size ? { tags: [...tags.values()] } : {});\n\nlet styleElement: Node;\nexport const injectCssDefaults = (document: Document) => {\n  document.body.appendChild(\n    (((styleElement =\n      // --track-base-attributes and --track-base-tags are not set, since they are supposed to be inherited.\n      createElement(\"style\")).innerText = `* { ${trackerPropertyName(\n      \"tags\",\n      T\n    )}:; ${trackerPropertyName(\"attributes\", T)}:;}`),\n    styleElement)\n  );\n};\n","import msgpack from \"@ygoe/msgpack\";\nconst { deserialize: msgDeserialize, serialize: msgSerialize } = msgpack;\n\nimport {\n  IsNever,\n  Nullish,\n  isArray,\n  isFunction,\n  isIterable,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isString,\n  isSymbol,\n  map,\n  tryCatch,\n  undefined,\n  IDENTITY,\n  isJsonString,\n} from \"@tailjs/util\";\nimport { HashFunction, from64u, lfsr, to64u } from \".\";\n\ntype ConverterFunctionValue<T> = T extends { toJSON(): infer V }\n  ? V\n  : T extends { valueOf(): infer V }\n  ? V\n  : T;\n\ntype ConverterValue<T> = T extends ConverterFunctionValue<T>\n  ? never\n  : ConverterFunctionValue<T>;\n\nexport type EncodableArray = Encodable[];\n\nexport type EncodableTuple = [...Items: Encodable[]];\n\nexport type EncodableObject = Partial<{\n  [K in string | number]?: Encodable;\n}>;\n\n/**\n * All possible values that can be represented with JSON.\n */\nexport type Encodable =\n  | null\n  | undefined\n  | string\n  | number\n  | boolean\n  | EncodableArray\n  | EncodableTuple\n  | EncodableObject;\n\n/**\n * The shape of the data that will come back when decoding the encoded value of a type.\n *\n * This assumes that only the shapes permitted by {@link Encodable} are serialized.\n * Otherwise not ignored since functions are in fact serialized as `{}`.\n */\nexport type Decoded<T = Encodable> = Encodable extends T\n  ? Encodable\n  : T extends void\n  ? undefined // For annoying reason, TypeScript differentiates between `undefined` and `void`. We want `void`.\n  : T extends string | number | boolean | null | undefined\n  ? T\n  : IsNever<ConverterValue<T>> extends false\n  ? Decoded<ConverterValue<T>>\n  : T extends any[]\n  ? { [index in keyof T]: Decoded<T[index]> }\n  : T extends Iterable<infer T>\n  ? Decoded<T>[]\n  : T extends (...args: any[]) => any\n  ? undefined\n  : T extends object\n  ? {\n      -readonly [P in keyof T as P extends string | number\n        ? Decoded<T[P]> extends undefined\n          ? never\n          : P\n        : never]: Decoded<T[P]>;\n    }\n  : never;\n\n/**\n * The broadest possible subtype of a given type that can be serialized and then deserialized without violating the type's contract,\n * with the exception of well-known symbol properties. Those are ignored.\n *\n * Not violating the contract does not mean that the type can loslessly be serialized and then deserialized back.\n * It just means that its contract will not be violated if values of a certain type are omitted or deserialized back to another valid subtype.\n * For example, an iterable that is not an array will be deserialized as an array.\n *\n * In particular functions or promises are serialized as empty objects `{}`, and cannot be deserialized back.\n * This means that required constraints on properties that only allow these types can never be met.\n * Similarly, arrays the can only hold functions or promises must be empty (`never[]`) to satisfy the type constraint.\n *\n */\nexport type EncodableContract<T = Encodable> = Encodable extends T\n  ? Encodable\n  : T extends void\n  ? undefined // For annoying reasons, TypeScript differentiates between `undefined` and `void`. We want `void`.\n  : T extends string | number | boolean | null | undefined | void\n  ? T\n  : IsNever<ConverterValue<T>> extends false\n  ? EncodableContract<ConverterValue<T>>\n  : T extends any[]\n  ? { [index in keyof T]: EncodableContract<T[index]> }\n  : T extends Iterable<any>\n  ? T\n  : T extends (...args: any[]) => any\n  ? undefined\n  : T extends object\n  ? {\n      // Fun fact: TypeScript keeps optional properties if we iterate keyof P and then exclude symbols with the `extends` construct.\n      //  `(keyof T & symbol)` or `Exclude <keyof T, symbol>` makes all properties required. (`{ a?: undefined}` becomes `{a:undefined}`)\n      // Keeping optional `undefined` properties means that the property name is still allowed in a type like `{a()?: boolean}`, even though functions are not allowed.\n      [P in keyof T as P extends symbol ? never : P]: EncodableContract<T[P]>;\n    }\n  : never;\n\n/**\n * Encodes the specified value to an HTTP querystring/header safe string, that is, does not need to be URI escaped.\n * The function is analogous to `JSON.stringify`, except this one also supports references.\n * @param value The value to encode.\n * @param binary whether to serialize to a string (URL safe base 64) or Uint8Array. @default false\n *\n * @returns The HTTP encoded representation of the value.\n */\nexport type Encoder = {\n  <Binary extends boolean = false>(\n    value: any,\n    binary?: Binary\n  ): Binary extends true ? Uint8Array : string;\n};\n\n/**\n * Decodes a value encoded with an {@link Encoder}.\n */\nexport type Decoder = <T = any>(\n  encoded: string | Uint8Array | Nullish\n) => T | undefined;\n\nconst REF_PROP = \"$ref\";\n\nconst includeValue = (key: any, value: any, includeDefaultValues: boolean) =>\n  isSymbol(key)\n    ? undefined\n    : includeDefaultValues\n    ? value !== undefined\n    : value === null || value;\n\n/**\n * Converts an in-memory object to a format that can be serialized over a wire including cyclic references.\n */\nconst serialize = <Msgpack extends boolean>(\n  value: any,\n  msgpack: Msgpack,\n  { defaultValues = true, prettify = false }\n): Msgpack extends true ? Uint8Array : string => {\n  // TODO: Clone when required instead of adding \"cleaners\". Probably adds more overhead.\n  let cleaners: (() => void)[] | undefined;\n  let refs: Map<any, number> | undefined;\n  let refIndex: number | undefined;\n  const patchProperty = (\n    target: any,\n    key: any,\n    value = target[key],\n    patched = includeValue(key, value, defaultValues) ? inner(value) : undefined\n  ) => (\n    value !== patched &&\n      (patched === undefined && !isArray(target)\n        ? delete target[key]\n        : (target[key] = patched),\n      addCleaner(() => (target[key] = value))),\n    patched\n  );\n\n  const addCleaner = (cleaner: () => void) => (cleaners ??= []).push(cleaner);\n\n  const inner = (value: any) => {\n    if (value == null || isFunction(value) || isSymbol(value)) {\n      return undefined;\n    }\n\n    if (!isObject(value)) {\n      return value;\n    }\n\n    if ((value as any).toJSON && value !== (value = (value as any).toJSON())) {\n      return inner(value);\n    }\n\n    if ((refIndex = refs?.get(value)) != null) {\n      if (!value[REF_PROP]) {\n        // Only assign ID parameter if used.\n        value[REF_PROP] = refIndex;\n        addCleaner(() => delete value[REF_PROP]);\n      }\n      return { [REF_PROP]: refIndex };\n    }\n\n    if (isPlainObject(value)) {\n      (refs ??= new Map()).set(value, refs.size + 1);\n      for (const key in value) patchProperty(value, key);\n    } else if (isIterable(value) && !(value instanceof Uint8Array)) {\n      // Array with undefined values or iterable (which is made into array.). ([,1,2,3] does not reveal its first entry).\n      (!isArray(value) || Object.keys(value).length < value.length\n        ? [...(value as any)]\n        : value\n      ).forEach((_, i) =>\n        i in value\n          ? patchProperty(value, i)\n          : // Handle arrays like [value1,,value3,value4,,,value6]. The missing elements does not serialize well with msgpack.\n            ((value[i] = null), addCleaner(() => delete value[i]))\n      );\n    }\n\n    return value;\n  };\n\n  return tryCatch(\n    () =>\n      msgpack\n        ? (msgSerialize(inner(value) ?? null) as any)\n        : tryCatch(\n            () => JSON.stringify(value, undefined, prettify ? 2 : 0),\n            () => JSON.stringify(inner(value), undefined, prettify ? 2 : 0)\n          ),\n    true,\n    () => cleaners?.forEach((cleaner) => cleaner())\n  );\n};\n\n/**\n * Hydrates the format returned by {@link serialize} back to its original in-memory format.\n */\nconst deserialize = (value: string | Uint8Array) => {\n  let refs: any[] | undefined;\n  let matchedRef: any;\n\n  const inner = (value: any) => {\n    if (!isObject(value)) return value;\n\n    if (value[REF_PROP] && (matchedRef = (refs ??= [])[value[REF_PROP]])) {\n      return matchedRef;\n    }\n\n    if (value[REF_PROP]) {\n      refs![value[REF_PROP]] = value;\n      delete value[REF_PROP];\n    }\n\n    Object.entries(value).forEach(\n      ([k, v]) => v !== (v = inner(v)) && (value[k] = v)\n    );\n\n    return value;\n  };\n\n  return inner(\n    isString(value)\n      ? tryCatch(\n          () => JSON.parse(value as any),\n          () => console.error(`Invalid JSON received.`, value)\n        )\n      : value != null\n      ? tryCatch(\n          () => msgDeserialize(value as any),\n          () => (console.error(`Invalid message received.`, value), undefined)\n        )\n      : value\n  );\n};\n\nexport type Transport = [\n  encode: Encoder,\n  decode: Decoder,\n  hash: HashFunction<any>\n];\n\nexport interface TransportOptions {\n  /**\n   * Serialize/deserialize as JSON.\n   *\n   * @default false\n   */\n  json?: boolean;\n\n  /**\n   * Omit falsish values (`\"\"`, `0` and `false`) unless explicitly set to `null`.\n   *\n   * @default true\n   */\n  defaultValues?: boolean;\n\n  /** Indent JSON encoded strings. @default true */\n  prettify?: boolean;\n\n  /** Allow received messages to be JSON. */\n  decodeJson?: boolean;\n}\n\nlet _defaultTransports: [cipher: Transport, json: Transport] | undefined;\n/**\n * Creates a pair of {@link Encoder} and {@link Decoder}s as well as a {@link HashFunction<string>}.\n * MessagePack is used for serialization, {@link lfsr} encryption is optionally used if a key is specified, and the input and outputs are Base64URL encoded.\n */\nexport const createTransport = (\n  key?: string | Nullish,\n  options: TransportOptions = {}\n): Transport => {\n  const factory = (\n    key: string | Nullish,\n    { json = false, decodeJson = false, ...serializeOptions }: TransportOptions\n  ): Transport => {\n    const fastStringHash = (value: any, bitsOrNumeric: any) => {\n      if (isNumber(value) && bitsOrNumeric === true) return value;\n\n      value = isString(value)\n        ? new Uint8Array(map(value.length, (i) => value.charCodeAt(i) & 255))\n        : json\n        ? tryCatch(\n            () => JSON.stringify(value),\n            () => JSON.stringify(serialize(value, false, serializeOptions))\n          )\n        : serialize(value, true, serializeOptions);\n      return hash(value, bitsOrNumeric);\n    };\n    const jsonDecode = (encoded: any) =>\n      encoded == null\n        ? undefined\n        : tryCatch(() => deserialize(encoded), undefined);\n    if (json) {\n      return [\n        (data: any) => serialize(data, false, serializeOptions) as any,\n        jsonDecode,\n        (value: any, numericOrBits?: any) =>\n          fastStringHash(value, numericOrBits) as any,\n      ];\n    }\n    const [encrypt, decrypt, hash] = lfsr(key);\n\n    return [\n      (data: any, binary) =>\n        (binary ? IDENTITY : to64u)(\n          encrypt(serialize(data, true, serializeOptions))\n        ) as any,\n      (encoded: any) =>\n        encoded != null\n          ? deserialize(\n              decrypt(\n                encoded instanceof Uint8Array\n                  ? encoded\n                  : decodeJson && isJsonString(encoded)\n                  ? jsonDecode(encoded)\n                  : from64u(encoded)\n              )\n            )\n          : null,\n      (value: any, numericOrBits?: any) =>\n        fastStringHash(value, numericOrBits) as any,\n    ];\n  };\n\n  if (!key) {\n    let json = +(options.json ?? 0);\n    if (json && options.prettify !== false) {\n      return (_defaultTransports ??= [\n        factory(null, { json: false }),\n        factory(null, { json: true, prettify: true }),\n      ])[+json];\n    }\n  }\n  return factory(key, options);\n};\n\nexport const defaultTransport = createTransport();\n/** A transport that encrypts and decrypts messages, but also allows plain JSON message to be decoded.  */\nexport const defaultJsonDecodeTransport = createTransport(null, {\n  json: true,\n  decodeJson: true,\n});\nexport const defaultJsonTransport = createTransport(null, {\n  json: true,\n  prettify: true,\n});\n\nexport const [httpEncode, httpDecode, hash] = defaultTransport;\nexport const [jsonEncode, jsonDecode] = defaultJsonTransport;\n","import { CONSENT_INFO_KEY, SCOPE_INFO_KEY } from \"@constants\";\n\nimport { createTransport } from \"@tailjs/transport\";\nimport { SessionInfo, isTrackedEvent, requireFound } from \"@tailjs/types\";\nimport {\n  F,\n  FOREVER,\n  T,\n  array,\n  assign,\n  filter,\n  flatMap,\n  isArray,\n  isJsonString,\n  isString,\n  map,\n  nil,\n  now,\n  push,\n  remove,\n  sort,\n  throwError,\n  tryCatch,\n  type Nullish,\n} from \"@tailjs/util\";\nimport {\n  Listener,\n  Tracker,\n  TrackerCommand,\n  TrackerClientConfiguration,\n  TrackerExtension,\n  TrackerExtensionFactory,\n  defaultExtensions,\n  isExtensionCommand,\n  isFlushCommand,\n  isGetCommand,\n  isListenerCommand,\n  isSetCommand,\n  isTagAttributesCommand,\n  isToggleCommand,\n  isTrackerAvailableCommand,\n  postUserAgentEvent,\n} from \".\";\nimport {\n  ERR_INTERNAL_ERROR,\n  ERR_INVALID_COMMAND,\n  TrackerContext,\n  VAR_URL,\n  addDebugListeners,\n  addStateListener,\n  createEventQueue,\n  createVariableStorage,\n  errorLogger,\n  httpDecode,\n  isTracker,\n  logError,\n  nextId,\n  setStorageKey,\n  trackerConfig,\n  window,\n} from \"./lib\";\n\nexport let tracker: Tracker;\nexport const initializeTracker = (\n  config: TrackerClientConfiguration | string\n) => {\n  if (tracker) return tracker;\n  let clientEncryptionKey: string;\n  if (isString(config)) {\n    // Decode the temporary key for decrypting the configuration payload.\n    [clientEncryptionKey, config] =\n      httpDecode<[key: string, configuration: any]>(config)!;\n    // Decrypt\n    config = createTransport(clientEncryptionKey, { decodeJson: true })[1](\n      config as any\n    )!;\n  }\n  assign(trackerConfig, config);\n\n  setStorageKey(remove(trackerConfig, \"encryptionKey\"));\n\n  const apiProtectionKey = remove(trackerConfig, \"key\");\n\n  const queuedCommands = window[trackerConfig.name]?._ ?? [];\n  if (!isArray(queuedCommands)) {\n    throwError(\n      `The global variable for the tracker \"${trackerConfig.name}\" is used for something else than an array of queued commands.`\n    );\n    return;\n  }\n\n  // Extensions / listeners\n  const extensions: [\n    priority: number,\n    extension: TrackerExtension,\n    source: TrackerExtensionFactory\n  ][] = [];\n  let listeners: Listener[] = [];\n  // Extensions may post commands when constructed and while the tracker is initializing\n\n  const callListeners = (event: string, ...args: any[]) => {\n    let keep = T;\n    listeners = filter(listeners, (listener) =>\n      tryCatch(\n        () => (\n          listener[event]?.(...args, {\n            tracker: tracker,\n            unsubscribe: () => (keep = F),\n          }),\n          keep // Will be set synchronously in the unsubscribe handler before this value is returned.\n        ),\n        errorLogger(listener)\n      )\n    );\n  };\n\n  const pendingStateCommands: TrackerCommand[] = [];\n\n  const trackerContext: TrackerContext = {\n    applyEventExtensions(event) {\n      event.clientId ??= nextId();\n      event.timestamp ??= now();\n\n      insertArgs = T;\n      let skip = F;\n      map(extensions, ([, extension]) => {\n        if (skip || extension.decorate?.(event) === F) {\n          skip = T;\n        }\n      });\n\n      return skip ? undefined : event;\n    },\n    validateKey: (key: string | Nullish, throwIfInvalid = true) =>\n      (!apiProtectionKey && !key) ||\n      key === apiProtectionKey ||\n      ((throwIfInvalid\n        ? throwError(`'${key}' is not a valid key.`)\n        : false) as any),\n  };\n  // Variables\n  const variables = createVariableStorage(VAR_URL, trackerContext);\n\n  // Main\n  const events = createEventQueue(VAR_URL, trackerContext);\n\n  let mainArgs: TrackerCommand[] | null = nil;\n  let currentArg = 0;\n  let insertArgs = F;\n\n  let globalStateResolved = F;\n\n  let ready = false;\n  tracker = ((...commands: (TrackerCommand | string)[]) => {\n    if (!ready) {\n      queuedCommands.push(...commands);\n      return;\n    }\n\n    if (!commands.length) {\n      return;\n    }\n\n    let key: string | Nullish;\n    if (commands.length > 1 && (!commands[0] || isString(commands[0]))) {\n      key = commands[0];\n      commands = commands.slice(1);\n    }\n\n    if (isString(commands[0])) {\n      const payload = commands[0];\n      commands = isJsonString(payload)\n        ? JSON.parse(payload)\n        : httpDecode(payload);\n    }\n\n    let flush = F; // // Flush after these commands, optionally without waiting for other requests to finish (because the page is unloading and we have no better option even though it may split sessions.)\n\n    commands = filter(\n      flatMap(commands, (command) =>\n        isString(command) ? httpDecode<TrackerCommand>(command) : command\n      ),\n      (command) => {\n        if (!command) return F;\n\n        if (isTagAttributesCommand(command)) {\n          trackerConfig.tags = assign(\n            {} as any,\n            trackerConfig.tags,\n            command.tagAttributes\n          );\n        } else if (isToggleCommand(command)) {\n          trackerConfig.disabled = command.disable;\n          return F;\n        } else if (isFlushCommand(command)) {\n          flush = T;\n          return F;\n        } else if (isTrackerAvailableCommand(command)) {\n          command(tracker);\n          return F;\n        }\n        if (\n          !globalStateResolved &&\n          !isListenerCommand(command) &&\n          !isExtensionCommand(command)\n        ) {\n          pendingStateCommands.push(command);\n          return F;\n        }\n        // #endregion\n        return T;\n      }\n    );\n\n    if (!commands.length && !flush) {\n      return;\n    }\n\n    const getCommandRank = (cmd: TrackerCommand) =>\n      isExtensionCommand(cmd)\n        ? -100\n        : isListenerCommand(cmd)\n        ? -50\n        : isSetCommand(cmd)\n        ? -10\n        : isTrackedEvent(cmd)\n        ? 90\n        : 0;\n\n    // Put events last to allow listeners and interceptors from the same batch to work on them.\n    // Sets come before gets to avoid unnecessary waiting\n    // Extensions then listeners are first so they can evaluate the rest.\n    const expanded: TrackerCommand[] = sort(commands, getCommandRank);\n\n    // Allow nested calls to tracker.push from listeners and interceptors. Insert commands in the currently processed main batch.\n    if (\n      mainArgs &&\n      mainArgs.splice(\n        insertArgs ? currentArg + 1 : mainArgs.length,\n        0,\n        ...expanded\n      )\n    )\n      return;\n\n    mainArgs = expanded;\n\n    for (currentArg = 0; currentArg < mainArgs.length; currentArg++) {\n      const command = mainArgs![currentArg];\n\n      if (!command) continue;\n\n      trackerContext.validateKey(key ?? command.key),\n        tryCatch(\n          () => {\n            const command = mainArgs![currentArg];\n            callListeners(\"command\", command);\n            insertArgs = F;\n            if (isTrackedEvent(command)) {\n              events.post(command);\n            } else if (isGetCommand(command)) {\n              variables.get(...array(command.get));\n            } else if (isSetCommand(command)) {\n              variables.set(...array(command.set));\n            } else if (isListenerCommand(command)) {\n              push(listeners, command.listener);\n            } else if (isExtensionCommand(command)) {\n              let extension: TrackerExtension | Nullish;\n              if (\n                (extension = tryCatch(\n                  () => command.extension.setup(tracker),\n                  (e) => logError(command.extension.id, e)\n                )!)\n              ) {\n                push(extensions, [\n                  command.priority ?? 100,\n                  extension,\n                  command.extension,\n                ]);\n                sort(extensions, ([priority]) => priority);\n              }\n            } else if (isTrackerAvailableCommand(command)) {\n              command(tracker); // Variables have already been loaded once.\n            } else {\n              let success = F;\n              for (const [, extension] of extensions) {\n                if ((success = extension.processCommand?.(command) ?? F)) {\n                  break;\n                }\n              }\n              !success &&\n                logError(\n                  ERR_INVALID_COMMAND,\n                  command,\n                  \"Loaded extensions:\",\n                  extensions.map((extension) => extension[2].id)\n                );\n            }\n          },\n          (e) => logError(tracker, ERR_INTERNAL_ERROR, e)\n        );\n    }\n\n    mainArgs = nil;\n    if (flush) {\n      events.post([], { flush });\n    }\n  }) as any;\n\n  Object.defineProperty(window, trackerConfig.name, {\n    value: Object.freeze(\n      Object.assign(tracker, {\n        id: \"tracker_\" + nextId(),\n        events,\n        variables,\n        [isTracker]: T,\n      })\n    ),\n    configurable: false,\n    writable: false,\n  });\n\n  // TODO: Add conditional compiler flag.\n  addDebugListeners();\n\n  addStateListener(async (event, _1, _2, unbind) => {\n    // Make sure we have a session on the server before posting anything.\n    // As part of this, we also get the device session ID.\n    if (event === \"ready\") {\n      const session = requireFound(\n        (\n          await variables.get(\n            {\n              scope: \"session\",\n              key: SCOPE_INFO_KEY,\n              refresh: true,\n            },\n            {\n              scope: \"session\",\n              key: CONSENT_INFO_KEY,\n              // Refresh the consent status at every new page view in the case the server made changes in the background.\n              // After that, cache it indefinitely since it is presumably only changed by the client until the next page view (in any tab).\n              refresh: true,\n              cache: FOREVER,\n            }\n          )\n        )[0]\n      ).value as SessionInfo;\n      trackerContext.deviceSessionId = session.deviceSessionId;\n\n      if (!session.hasUserAgent) {\n        postUserAgentEvent(tracker);\n        session.hasUserAgent = true;\n      }\n      globalStateResolved = true;\n      pendingStateCommands.length && tracker(pendingStateCommands);\n\n      unbind();\n\n      // Now we accept commands.\n      ready = true;\n      tracker(\n        ...map(defaultExtensions, (extension) => ({ extension })),\n        ...queuedCommands\n      );\n      tracker({ set: { scope: \"view\", key: \"loaded\", value: true } });\n    }\n  }, true);\n\n  return tracker;\n};\n","import { SCOPE_INFO_KEY } from \"@constants\";\n\nimport {\n  LocalID,\n  View,\n  ViewEvent,\n  ViewTimingData,\n  isEventPatch,\n  isViewEvent,\n} from \"@tailjs/types\";\nimport {\n  F,\n  T,\n  add,\n  array,\n  clock,\n  createEvent,\n  createTimer,\n  forEach,\n  map,\n  nil,\n  now,\n  parseQueryString,\n  parseUri,\n  push,\n  replace,\n} from \"@tailjs/util\";\nimport { TrackerExtensionFactory, isChangeUserCommand } from \"..\";\nimport { tracker } from \"../initializeTracker\";\nimport {\n  TAB_ID,\n  addPageVisibleListener,\n  getActiveTime,\n  getViewport,\n  isInternalUrl,\n  listen,\n  matchExHash,\n  nextId,\n  parseDomain,\n  setLocalVariables,\n  tryGetVariable,\n} from \"../lib\";\n\nexport let currentViewEvent: ViewEvent | undefined;\n\nexport const getCurrentViewId = () => currentViewEvent?.clientId;\n\nlet pushPopNavigation: ViewEvent[\"navigationType\"] | undefined;\n\nconst referrerKey = {\n  scope: \"shared\",\n  key: \"referrer\",\n} as const;\n\nexport const pushNavigationSource = (\n  navigationEventId: LocalID,\n  consumed?: () => void\n) => {\n  tracker.variables.set({\n    ...referrerKey,\n    value: [getCurrentViewId()!, navigationEventId],\n  });\n\n  consumed &&\n    tracker.variables.get({\n      // Grr! Intellisense won't use the constant scope and key values if `...referrerKey`.\n      scope: referrerKey.scope,\n      key: referrerKey.key,\n      result: (current: any, previous: any, poll) =>\n        current?.value\n          ? poll()\n          : previous?.value?.[1] === navigationEventId && consumed(),\n    });\n};\n\nconst totalDuration = createTimer();\nconst visibleDuration = createTimer();\n\nlet activations = 1;\n\nexport const getVisibleDuration = () => visibleDuration();\n\nconst [addViewChangedListener, dispatchViewChanged] =\n  createEvent<[viewEvent: ViewEvent]>();\n\nexport { addViewChangedListener };\n\nexport const createViewDurationTimer = (started?: boolean) => {\n  const totalTime = createTimer(started, totalDuration);\n  const visibleTime = createTimer(started, visibleDuration);\n  const activeTime = createTimer(started, getActiveTime);\n  const activationsCounter = createTimer(started, () => activations);\n  return (toggle?: boolean, reset?: boolean): ViewTimingData => ({\n    totalTime: totalTime(toggle, reset),\n    visibleTime: visibleTime(toggle, reset),\n    activeTime: activeTime(toggle, reset),\n    activations: activationsCounter(toggle, reset),\n  });\n};\n\nconst timer = createViewDurationTimer();\nexport const getViewTimeOffset = () => timer();\n\nconst [addFrameListenerInternal, callOnFrame] =\n  createEvent<[frame: HTMLIFrameElement]>();\nexport const onFrame: typeof addFrameListenerInternal = (\n  listener,\n  triggerCurrent\n) => {\n  triggerCurrent &&\n    forEach(frames as any as Iterable<HTMLIFrameElement>, (frame) =>\n      listener(frame, () => false)\n    );\n  return addFrameListenerInternal(listener);\n};\n//export { addFrameListener as onFrame };\n\nconst knownFrames = new WeakSet<any>();\nconst frames = document.getElementsByTagName(\"iframe\");\n\nexport const context: TrackerExtensionFactory = {\n  id: \"context\",\n  setup(tracker) {\n    clock(\n      () =>\n        forEach(\n          frames as any as Iterable<HTMLIFrameElement>,\n          (frame) => add(knownFrames, frame) && callOnFrame(frame)\n        ),\n      1000\n    ).trigger();\n\n    // View definitions may be loaded asynchronously both before and after navigation happens.\n    // This means the `definition` property of the current view event is updated independently of its creation.\n    // If the event has already been sent, and additional patch event is sent with the definition.\n    // When a definition has been associated with the current view event, it will not be changed.\n    // Instead any new view definition that arrives before the next navigation is assumed to be for the next view event.\n\n    let pendingViewDefinition: View | undefined;\n\n    tracker.variables.get({\n      scope: \"view\",\n      key: \"view\",\n      result: (definition, _, poll) => {\n        if (\n          currentViewEvent == null ||\n          !definition?.value ||\n          currentViewEvent?.definition\n        ) {\n          // Buffer for next navigation.\n          pendingViewDefinition = definition?.value;\n        } else {\n          currentViewEvent.definition = definition.value;\n          if (currentViewEvent.metadata?.posted) {\n            // Send the definition as a patch because the view event has already been posted.\n            tracker.events.postPatch(currentViewEvent, {\n              definition: pendingViewDefinition,\n            });\n          }\n        }\n\n        return poll();\n      },\n    });\n\n    let viewIndex =\n      tryGetVariable({ scope: \"tab\", key: \"viewIndex\" })?.value ?? 0;\n    let tabIndex = tryGetVariable({ scope: \"tab\", key: \"tabIndex\" })?.value;\n\n    if (tabIndex == null) {\n      tabIndex =\n        tryGetVariable({ scope: \"shared\", key: \"tabIndex\" })?.value ??\n        // If we are the only tab, we'll see if we can get the number of previous tabs in the session\n        // from the session info variable.\n        (tryGetVariable({ scope: \"session\", key: SCOPE_INFO_KEY })?.value\n          ?.tabs as number) ??\n        0;\n      setLocalVariables(\n        {\n          scope: \"tab\",\n          key: \"tabIndex\",\n          value: tabIndex,\n        },\n        {\n          scope: \"shared\",\n          key: \"tabIndex\",\n          value: tabIndex + 1,\n        }\n      );\n    }\n\n    let currentLocation: string | null = nil;\n\n    const postView = (force = F) => {\n      if (\n        matchExHash(\"\" + currentLocation, (currentLocation = location.href)) &&\n        !force\n      ) {\n        return;\n      }\n\n      const {\n        source: href,\n        scheme,\n        host,\n      } = parseUri(location.href + \"\", true, true);\n      currentViewEvent = {\n        type: \"view\",\n        timestamp: now(),\n        clientId: nextId(),\n        tab: TAB_ID,\n        href,\n        path: location.pathname,\n        hash: location.hash || undefined,\n        domain: { scheme, host },\n        tabNumber: tabIndex + 1,\n        tabViewNumber: viewIndex + 1,\n        viewport: getViewport(),\n        duration: timer(undefined, true),\n      };\n\n      tabIndex === 0 && (currentViewEvent.firstTab = T);\n      tabIndex === 0 && viewIndex === 0 && (currentViewEvent.landingPage = T);\n\n      setLocalVariables({ scope: \"tab\", key: \"viewIndex\", value: ++viewIndex });\n\n      const qs = parseQueryString(location.href);\n      map(\n        [\"source\", \"medium\", \"campaign\", \"term\", \"content\"],\n        (p, _) =>\n          ((currentViewEvent!.utm ??= {})[p] = array(qs[`utm_${p}`])?.[0])\n      );\n\n      !(currentViewEvent.navigationType = pushPopNavigation) &&\n        performance &&\n        map(\n          performance.getEntriesByType(\"navigation\"),\n          (entry: PerformanceNavigationTiming) => {\n            currentViewEvent!.redirects = entry.redirectCount;\n            currentViewEvent!.navigationType = replace(\n              entry.type,\n              /\\_/g,\n              \"-\"\n            ) as any;\n          }\n        );\n\n      pushPopNavigation = undefined;\n\n      if ((currentViewEvent.navigationType ??= \"navigate\") === \"navigate\") {\n        // Try find related event and parent tab context if any.\n        // And only if navigating (not back/forward/refresh)\n\n        const referrer = tryGetVariable(referrerKey)?.value;\n\n        if (referrer && isInternalUrl(document.referrer)) {\n          currentViewEvent.view = referrer?.[0];\n          currentViewEvent.relatedEventId = referrer?.[1];\n          tracker.variables.set({ ...referrerKey, value: undefined });\n        }\n      }\n\n      // Referrer\n      const referrer = document.referrer || nil;\n      referrer &&\n        !isInternalUrl(referrer) &&\n        (currentViewEvent!.externalReferrer = {\n          href: referrer,\n          domain: parseDomain(referrer),\n        });\n\n      // If we already have a view definition ready, set this on the event, and reset the buffer.\n      currentViewEvent.definition = pendingViewDefinition;\n      pendingViewDefinition = undefined;\n\n      tracker.events.post(currentViewEvent);\n\n      tracker.events.registerEventPatchSource(currentViewEvent!, () => ({\n        duration: getViewTimeOffset(),\n      }));\n\n      dispatchViewChanged(currentViewEvent);\n    };\n\n    addPageVisibleListener((visible) => {\n      if (visible) {\n        visibleDuration(T);\n        ++activations;\n      } else {\n        visibleDuration(F);\n      }\n    });\n\n    listen(\n      window,\n      \"popstate\",\n      () => ((pushPopNavigation = \"back-forward\"), postView())\n    );\n    map([\"push\", \"replace\"], (name) => {\n      const inner = history[(name += \"State\")];\n      history[name] = (...args: any) => {\n        inner.apply(history, args);\n        pushPopNavigation = \"navigate\";\n        postView();\n      };\n    });\n\n    postView();\n\n    return {\n      processCommand: (command) =>\n        isChangeUserCommand(command) &&\n        (tracker(\n          command.username\n            ? { type: \"login\", username: command.username }\n            : { type: \"logout\" }\n        ),\n        T),\n\n      decorate: (event) => {\n        currentViewEvent &&\n          !isViewEvent(event) &&\n          !isEventPatch(event) &&\n          (event.view = currentViewEvent.clientId);\n      },\n    };\n  },\n};\n","import {\n  type ActivatedComponent,\n  type ActivatedContent,\n  type ConfiguredComponent,\n  type Rectangle,\n  type UserInteractionEvent,\n} from \"@tailjs/types\";\nimport {\n  F,\n  MaybeUndefined,\n  Nullish,\n  T,\n  array,\n  concat,\n  filter,\n  flatMap,\n  forEach,\n  get,\n  isString,\n  join,\n  map,\n  max,\n  push,\n  remove,\n  some,\n  unshift,\n  update,\n} from \"@tailjs/util\";\nimport {\n  BoundaryCommand,\n  BoundaryData,\n  TrackerExtensionFactory,\n  isDataBoundaryCommand,\n  isScanComponentsCommand,\n} from \"..\";\nimport {\n  NodeWithParentElement,\n  boundaryData,\n  createImpressionObserver,\n  forAncestorsOrSelf,\n  getRect,\n  parseTags,\n  scanAttributes,\n  trackerProperty,\n} from \"../lib\";\nexport type ActivatedDomComponent = ConfiguredComponent & ActivatedComponent;\n\nexport const componentDomConfiguration = Symbol(\"DOM configuration\");\n\nexport const parseActivationTags = (el: Element) =>\n  parseTags(el, undefined, (el) => map(array(get(boundaryData, el)?.tags)));\n\nconst hasComponentOrContent = (boundary?: BoundaryData<true> | null) =>\n  boundary?.component || boundary?.content;\n\nlet entry: BoundaryData<true> | undefined;\nexport const parseBoundaryTags = (el: Element) => {\n  return parseTags(\n    el,\n    (ancestor) =>\n      ancestor !== el && !!hasComponentOrContent(get(boundaryData, ancestor)),\n    (el) => {\n      entry = get(boundaryData, el)!;\n      return (\n        (entry = get(boundaryData, el)) &&\n        flatMap(concat(entry.component, entry.content, entry), \"tags\")\n      );\n    }\n  );\n};\n\nlet content: ActivatedContent[] | undefined;\nconst stripRects = (\n  component: ActivatedDomComponent,\n  keep?: boolean\n): ActivatedDomComponent =>\n  keep\n    ? component\n    : {\n        ...component,\n        rect: undefined,\n        content:\n          (content = component.content) &&\n          map(content, (content) => ({ ...content, rect: undefined })),\n      };\n\nconst enum IncludeState {\n  Secondary = 0,\n  Primary = 1,\n  Promoted = 2,\n}\n\nexport const getComponentContext = (\n  el: NodeWithParentElement,\n  directOnly = F,\n  includeRegion?: boolean | Nullish\n) => {\n  let collectedContent: ActivatedContent[] = [];\n\n  type Area = {} & string; // For clarity.\n  let collected: (ActivatedDomComponent | Area)[] = [];\n\n  let includeState = IncludeState.Secondary;\n  let rect: Rectangle | undefined;\n  forAncestorsOrSelf(el, (el) => {\n    const entry = get(boundaryData, el);\n\n    if (!entry) {\n      return;\n    }\n\n    if (hasComponentOrContent(entry)) {\n      const components = filter(\n        array(entry.component),\n        (entry) =>\n          includeState === IncludeState.Secondary ||\n          (!directOnly &&\n            ((includeState === IncludeState.Primary &&\n              entry.track?.secondary !== T) ||\n              entry.track?.promote))\n      );\n\n      rect =\n        ((includeRegion ?? some(components, (item) => item.track?.region)) &&\n          getRect(el)) ||\n        undefined;\n      const tags = parseBoundaryTags(el);\n      entry.content &&\n        unshift(\n          collectedContent,\n          ...map(entry.content, (item) => ({\n            ...item,\n            rect,\n            ...tags,\n          }))\n        );\n\n      components?.length &&\n        (unshift(\n          collected,\n          ...map(\n            components,\n            (item) => (\n              (includeState = max(\n                includeState,\n                item.track?.secondary // INV: Secondary components are only included here if we did not have any components from a child element.\n                  ? IncludeState.Primary\n                  : IncludeState.Promoted\n              )),\n              stripRects(\n                {\n                  ...item,\n                  content: collectedContent,\n                  rect,\n                  ...tags,\n                },\n                !!rect\n              )\n            )\n          )\n        ),\n        (collectedContent = []));\n    }\n\n    const area = entry.area || trackerProperty(el, \"area\");\n    area && unshift(collected, ...map(array(area)));\n  });\n\n  let areaPath: string[] | undefined;\n  let components: ActivatedComponent[] | undefined;\n\n  if (collectedContent.length) {\n    // Content without a containing component is gathered in an ID-less component.\n    push(collected, stripRects({ id: \"\", rect, content: collectedContent }));\n  }\n\n  forEach(collected, (item) => {\n    if (isString(item)) {\n      push((areaPath ??= []), item);\n    } else {\n      item.area ??= join(areaPath, \"/\");\n      unshift((components ??= []), item);\n    }\n  });\n\n  return components || areaPath\n    ? { components: components, area: join(areaPath, \"/\") }\n    : undefined;\n};\n\nexport const components: TrackerExtensionFactory = {\n  id: \"components\",\n  setup(tracker) {\n    const impressions = createImpressionObserver(tracker);\n\n    const normalizeBoundaryData = <T extends BoundaryData | Nullish>(\n      data: T\n    ): MaybeUndefined<T, BoundaryData<true>> =>\n      data == null\n        ? (undefined as any)\n        : ({\n            ...data,\n            component: array(data.component),\n            content: array(data.content),\n            tags: array(data.tags),\n          } as BoundaryData<true>);\n\n    const registerComponent = ({\n      boundary: el,\n      ...command\n    }: BoundaryCommand) => {\n      update(boundaryData, el, (current) =>\n        normalizeBoundaryData(\n          \"add\" in command\n            ? {\n                ...current,\n                component: concat(current?.component, command.component),\n                content: concat(current?.content, command.content),\n                area: command?.area ?? current?.area,\n                tags: concat(current?.tags, command.tags),\n                cart: command.cart ?? current?.cart,\n                track: command.track ?? current?.track,\n              }\n            : \"update\" in command\n            ? command.update(current)\n            : command\n        )\n      );\n\n      impressions(el, get(boundaryData, el));\n    };\n\n    return {\n      decorate(eventData) {\n        // Strip tracking configuration.\n        forEach((eventData as UserInteractionEvent).components, (component) =>\n          remove(component as any, \"track\")\n        );\n      },\n      processCommand(cmd) {\n        return isDataBoundaryCommand(cmd)\n          ? (registerComponent(cmd), T)\n          : isScanComponentsCommand(cmd)\n          ? (map(\n              scanAttributes(cmd.scan.attribute, cmd.scan.components),\n              registerComponent\n            ),\n            T)\n          : F;\n      },\n    };\n  },\n};\n","import {\n  Defined,\n  Falsish,\n  If,\n  IsAny,\n  MaybePromise,\n  NotFunction,\n  Nullish,\n  OmitNullish,\n  TogglePromise,\n  UnwrapPromiseLike,\n  Wrapped,\n  isObject,\n  isArray,\n  isBoolean,\n  isError,\n  isFunction,\n  isString,\n  unwrap,\n  MaybeUndefined,\n  ToggleReadonly,\n  isAwaitable,\n  MaybeOmit,\n} from \"..\";\n\nexport type ErrorGenerator = string | Error | (() => string | Error);\n\nexport const throwError = (\n  error: ErrorGenerator,\n  transform: (string: string) => Error = (message) => new Error(message)\n): never => {\n  throw isString((error = unwrap(error))) ? transform(error) : error;\n};\n\ntype CombineTypeTests<T> = T extends []\n  ? {}\n  : T extends [infer F, ...infer Rest]\n  ? F extends (value: any) => value is infer R\n    ? (IsAny<R> extends true ? T : R) & CombineTypeTests<Rest>\n    : never\n  : never;\n\nexport const validate = <\n  T,\n  Validator extends\n    | ((candidate: T) => candidate is any)\n    | ((candidate: T) => R)\n    | [\n        validate: (candidate: T) => any,\n        ...typeTests: ((candidate: T) => candidate is any)[]\n      ]\n    | (R & NotFunction),\n  R\n>(\n  value: T,\n  validate: Validator | R,\n  validationError?: ErrorGenerator,\n  undefinedError?: ErrorGenerator\n): Defined<\n  If<\n    IsAny<Validator>,\n    T,\n    Validator extends readonly [any, ...infer TypeTests]\n      ? CombineTypeTests<TypeTests>\n      : Validator extends ((value: any) => infer R) | infer R\n      ? R extends Falsish\n        ? never\n        : Validator extends (value: any) => value is infer R\n        ? Defined<R>\n        : T\n      : never\n  >\n> =>\n  (\n    isArray(validate)\n      ? validate.every((test) => test(value))\n      : isFunction(validate)\n      ? validate(value)\n      : validate\n  )\n    ? value\n    : required(value, undefinedError ?? validationError) &&\n      (throwError(validationError ?? \"Validation failed.\") as any);\n\nexport class InvariantViolatedError extends Error {\n  constructor(invariant?: string) {\n    super(invariant ? \"INV: \" + invariant : \"An invariant was violated.\");\n  }\n}\n\nexport const structuralEquals = (\n  value1: any,\n  value2: any,\n  depth = -1\n): boolean => {\n  if (value1 === value2) return true;\n  // interpret `null` and `undefined` as the same.\n  if ((value1 ?? value2) == null) return true;\n\n  if (isObject(value1) && isObject(value2) && value1.length === value2.length) {\n    let n = 0;\n    for (const key in value1) {\n      if (\n        value1[key] !== value2[key] &&\n        !structuralEquals(value1[key], value2[key], depth - 1)\n      ) {\n        return false;\n      }\n      ++n;\n    }\n    return n === Object.keys(value2).length;\n  }\n  return false;\n};\n\n/** Tests whether a value equals at least one of some other values.  */\nexport const equalsAny: <T extends readonly any[]>(\n  target: any,\n  ...values: T\n) => target is T[number] = ((\n  target: any,\n  singleValue: any,\n  ...otherValues: any\n) =>\n  target === singleValue ||\n  (otherValues.length > 0 &&\n    otherValues.some((value: any) => equalsAny(target, value)))) as any;\n\n/**\n * States an invariant.\n */\nexport const invariant = <T>(\n  test: Wrapped<T | false>,\n  description?: string\n): Defined<T> => {\n  const valid = unwrap(test);\n  return valid != null && valid !== false\n    ? (valid as any)\n    : throwError(new InvariantViolatedError(description));\n};\n\nexport const required = <T>(value: T, error?: ErrorGenerator): OmitNullish<T> =>\n  value != null\n    ? (value as any)\n    : throwError(\n        error ?? \"A required value is missing\",\n        (text) => new TypeError(text.replace(\"...\", \" is required.\"))\n      );\n\nexport const tryCatch = <T, E = true>(\n  expression: () => T,\n  errorHandler: E | (boolean | ((error?: any) => any) | Nullish) = true as any,\n  always?: () => void\n):\n  | T\n  | (E extends Nullish | true\n      ? never\n      : E extends false\n      ? undefined\n      : E extends (...args: any) => infer R\n      ? R extends Error\n        ? never\n        : R extends void\n        ? undefined\n        : R\n      : E) => {\n  try {\n    return expression();\n  } catch (e) {\n    return isFunction(errorHandler)\n      ? isError((e = errorHandler(e)))\n        ? throwError(e)\n        : e\n      : isBoolean(errorHandler)\n      ? console.error(errorHandler ? throwError(e) : e)\n      : (errorHandler as any);\n  } finally {\n    always?.();\n  }\n};\n\nexport type ErrorHandler = Nullish | boolean | ((error: any) => any);\ntype ErrorHandlerResult<Handler> = Handler extends true\n  ? never\n  : Handler extends (...args: any) => infer R\n  ? TogglePromise<UnwrapPromiseLike<R> extends Error ? never : R, R>\n  : void;\n\nconst maybeAwait = <T, R>(value: MaybePromise<T>, action: (value: T) => R): R =>\n  (value as any)?.then(action) ?? action(value as any);\n\nconst handleError = <Handler extends ErrorHandler>(\n  errorHandler: Handler,\n  error: any,\n  log = true\n): ErrorHandlerResult<Handler> =>\n  errorHandler === false\n    ? undefined\n    : errorHandler === true ||\n      errorHandler == null ||\n      isError((error = errorHandler(error)))\n    ? maybeAwait(\n        error,\n        (error) => (log && console.error(error), throwError(error))\n      )\n    : error;\n\ntype DeferredProperties<T> = { resolved?: Awaited<T> };\n\ntype NotDeferred = { resolved?: undefined };\n\nexport type Deferred<T> = (() => T) & DeferredProperties<T>;\n\nexport type DeferredAsync<T> = Deferred<MaybePromise<T>>;\n\nexport type MaybeDeferred<T> = (T & NotDeferred) | Deferred<T>;\nexport type MaybeDeferredAsync<T> =\n  | ((T | PromiseLike<T>) & NotDeferred)\n  | DeferredAsync<T>;\n\nexport const resolveDeferred: {\n  <T>(value: Deferred<T>): T;\n  <T>(value: T): T;\n} = (value: Deferred<any>) =>\n  isFunction(value) ? (value as any)?.resolved ?? value() : value;\n\n/** A value that is initialized lazily on-demand. */\nexport const deferred = <T>(\n  expression: Wrapped<T>\n): T extends PromiseLike<infer T> ? DeferredAsync<T> : Deferred<T> => {\n  let result: any;\n  const getter = (() => {\n    if (getter.initialized || result) {\n      // Result may either be the resolved value or a pending promise for the resolved value.\n      return result;\n    }\n    result = unwrap(expression) as any;\n    if (result.then) {\n      return (result = result.then((resolvedValue: any) => {\n        getter.initialized = true;\n        return (getter.resolved = result = resolvedValue);\n      }));\n    }\n    getter.initialized = true;\n    return (getter.resolved = result);\n  }) as any;\n  return getter;\n};\n\nexport const asDeferred = <T extends MaybeDeferred<any>>(\n  deferredOrResolved: T\n): T extends Deferred<any> ? T : Deferred<T> =>\n  isFunction(deferredOrResolved)\n    ? deferredOrResolved\n    : (Object.assign(() => deferredOrResolved, {\n        resolved: isAwaitable(deferredOrResolved)\n          ? undefined\n          : deferredOrResolved,\n      }) as any);\n\nexport interface DeferredPromise<T> extends PromiseLike<T> {\n  initialized: boolean;\n}\n\nexport type MaybeDeferredPromise<T> =\n  | (T & { initialized?: boolean })\n  | DeferredPromise<T>;\n\n/**\n * A promise that is initialized lazily on-demand.\n * For promises this is more convenient than {@link deferred}, since it just returns a promise instead of a function.\n */\nexport const deferredPromise = <T>(\n  expression: Wrapped<MaybePromise<T>>\n): DeferredPromise<T> => {\n  let promise: DeferredPromise<T> = {\n    initialized: true,\n    then: thenMethod(() => ((promise.initialized = true), unwrap(expression))),\n  };\n  return promise;\n};\n\nexport const thenMethod = <T>(\n  expression: Wrapped<MaybePromise<T>>\n): (<TResult1 = T, TResult2 = never>(\n  onfulfilled?:\n    | ((value: T) => TResult1 | PromiseLike<TResult1>)\n    | undefined\n    | null,\n  onrejected?:\n    | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n    | undefined\n    | null\n) => PromiseLike<TResult1 | TResult2>) => {\n  let result = deferred(expression);\n  return (onfullfilled?, onrejected?) =>\n    tryCatchAsync(result, [onfullfilled, onrejected] as any);\n};\n\nexport const tryCatchAsync = async <\n  T,\n  C = void,\n  E extends boolean | ((error: any) => MaybePromise<C>) = true,\n  T1 = T\n>(\n  expression: Wrapped<MaybePromise<T>>,\n  errorHandler: E = true as any,\n  always?: () => MaybePromise<any>\n): Promise<T1 | C> => {\n  try {\n    const result = (await unwrap(expression)) as any;\n    return isArray(errorHandler) ? errorHandler[0]?.(result) : result;\n  } catch (e) {\n    if (!isBoolean(errorHandler)) {\n      if (isArray(errorHandler)) {\n        if (!errorHandler[1]) throw e;\n        return errorHandler[1](e) as any;\n      }\n\n      const error = (await (errorHandler as any)?.(e)) as any;\n      if (error instanceof Error) throw error;\n      return error;\n    } else if (errorHandler) {\n      throw e;\n    } else {\n      // `false` means \"ignore\".\n      console.error(e);\n    }\n  } finally {\n    await always?.();\n  }\n\n  return undefined as any;\n};\n\n/**\n *  No-op function to validate types in TypeScript. Because function parameters are contravariant, passing an event that does not match on all properties will get red wiggly lines)\n */\nexport const restrict: {\n  <T>(item: T): T;\n} = (item: any) => item as any;\n","import {\n  Defined,\n  Extends,\n  IsAny,\n  MaybeUndefined,\n  ToggleReadonly,\n  tryCatch,\n} from \"..\";\n\n/**\n * The ECMAScript primitive types.\n */\nexport type Primitives =\n  | null\n  | undefined\n  | void\n  | boolean\n  | number\n  | bigint\n  | string\n  | symbol\n  | Date;\n\nexport type NonAsync =\n  | Primitives\n  | Iterable<any>\n  | ((...args: any[]) => any)\n  | RecordType;\n\n/**\n * Common function type used for projection of [key,value] entries.\n */\nexport type KeyValueProjection<K, V, R> = (\n  entry: [key: K, value: V],\n  index: number\n) => R;\n\n/**\n * Anything but a promise.\n */\nexport type NotPromise = { then?: never };\n\n/**\n * Anything but a function.\n */\nexport type NotFunction =\n  | bigint\n  | boolean\n  | null\n  | number\n  | string\n  | symbol\n  | undefined\n  | {\n      [key: string | number | symbol]: any;\n      [Symbol.hasInstance]?: never;\n    };\n\n/** Shorter than writing all this out, and slightly easier to read. */\nexport type Nullish = null | undefined;\n\n/** A record type that is neither iterable or a function. */\nexport type RecordType<K extends keyof any = keyof any, V = any> = object & {\n  readonly [P in K]?: V;\n} & {\n  [Symbol.iterator]?: never;\n  [Symbol.asyncIterator]?: never;\n  [Symbol.hasInstance]?: never;\n\n  then?(\n    onfulfilled?: ((value: any) => any) | undefined | null,\n    onrejected?: ((reason: any) => any) | undefined | null\n  ): never;\n};\n\nexport type UnwrapPromiseLike<T> = T extends PromiseLike<infer T>\n  ? UnwrapPromiseLike<T>\n  : T;\n\nexport type MaybePromise<T> = T | PromiseLike<T>;\n/**\n * Shorthand for a value that is optionally awaitable.\n */\nexport type TogglePromise<T, Toggle = boolean> = Toggle extends\n  | true\n  | PromiseLike<any>\n  ? T extends PromiseLike<any>\n    ? T\n    : PromiseLike<T>\n  : T extends PromiseLike<infer T>\n  ? UnwrapPromiseLike<T>\n  : T;\n\n/**\n * Trick for having a function that returns a non-null value, if a formal parameter always has a non-null value,\n * similar to .NET's [NotNullIfNotNull].\n *\n * If the actual parameter can have a null or undefined value the return value will include these options.\n *\n * `function example<T,A>(arg: (T|null|undefined)&A): string | Null<A> {...}`\n * `example(80)` returns `string`\n *  `const x: number|null; example(x)` returns `string|null`.\n *\n * There can also be a \"null\" default (so all Null'ish values maps to one value). If the function above returned `string | Null<T,undefined>`, then\n * `example(x)` returns `string|undefined`.\n *\n * @obsolete\n */\nexport type Nulls<T, NullLevels = null | undefined> = T extends\n  | null\n  | undefined\n  | void\n  ? T extends NullLevels | void\n    ? T & NullLevels\n    : NullLevels\n  : never;\n\n/** All keys of any type in a union */\nexport type AllKeys<Ts> = Ts extends infer T\n  ? unknown extends T\n    ? keyof any\n    : keyof T\n  : never;\n\n/** If any type in a union has a value for the given property that cannot be null'ish.*/\nexport type HasRequiredProperty<T, P> = true extends (\n  T extends infer T\n    ? true extends Extends<\n        Nullish,\n        keyof T extends P ? T[P & keyof T] : P extends keyof T ? T[P] : never\n      >\n      ? false\n      : true\n    : never\n)\n  ? true\n  : false;\n\nexport type IfNever<T, Default> = [T] extends [never] ? Default : T;\n\nexport type Filter<T, FilterTypes, Default = never> = IfNever<\n  T extends infer T ? (T extends FilterTypes ? T : never) : never,\n  Default\n>;\n\n/** Returns the type of a property for each type in a union when the type has the given property. */\nexport type Property<T, P> = T extends infer T\n  ? keyof T extends P\n    ? T[P & keyof T]\n    : P extends keyof T\n    ? T[P]\n    : never\n  : never;\n\n/**\n * Creates a new type where with all the properties from any of the specified types.\n * This can make life easier for code working with polymorphic types.\n */\n\nexport type CommonTypeTemplate<Ts> = {\n  [P in AllKeys<Ts>]?: Ts extends infer T\n    ? P extends keyof T\n      ? T[P]\n      : never\n    : never;\n};\n\n/**\n * Maps all null'ish types to `undefined`.\n */\nexport type Undefined<T> = T extends Nullish | void ? undefined : T;\n\nexport type ExpandTypes<\n  Ts,\n  Common = CommonTypeTemplate<Ts>\n> = Ts extends infer T\n  ? {\n      [P in keyof Common]: P extends keyof T ? T[P] : Common[P];\n    }\n  : never;\n\n/* JSON */\n\nexport type JsonArray = Json[];\n\nexport type JsonTuple = {\n  [TupleIndex in number]?: Json;\n};\n\nexport type JsonObject = {\n  [props: string | number]: Json;\n} & { [symbols: symbol]: never };\n\ntype JsonOnly<T> = T extends Json ? T : never;\n\n/**\n * All possible values that can be represented with JSON.\n */\nexport type Json<T = unknown> = unknown extends T\n  ? Nullish | string | number | boolean | JsonArray | JsonTuple | JsonObject\n  : Omit<\n      {\n        [P in keyof T]: JsonOnly<T[P]>;\n      },\n      symbol\n    >;\n\nexport type ToJsonAble<T> = { toJSON(): T };\n\n/** Minify friendly version of `false`. */\nexport const undefined = void 0;\n\n/** Caching this value potentially speeds up tests rather than using `Number.MAX_SAFE_INTEGER`. */\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\n\n/** Caching this value potentially speeds up tests rather than using `Number.MAX_SAFE_INTEGER`. */\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;\n\n/** Minify friendly version of `false`. */\nexport const F = false;\n\n/** Minify friendly version of `true`. */\nexport const T = true;\n\n/** Minify friendly version of `null`. */\nexport const nil = null;\n\nexport type NoOpFunction = (...args: any) => void;\n\n/** A function that does nothing. */\nexport const NOOP: NoOpFunction = () => {};\n\nexport type IdentityFunction = <T>(item: T, ...args: any) => T;\n\n/** The identity function (x)=>x. */\nexport const IDENTITY: IdentityFunction = (item: any) => item;\n\nexport type NullFilterFunction = <T>(item: T | Nullish) => boolean;\n\n/** A function that filters out values != null. */\nexport const FILTER_NULLISH: NullFilterFunction = (item: any) => item != nil;\n\nexport const NULL = 0;\nexport const UNDEFINED = 1;\nexport const BOOLEAN = 2;\nexport const NUMBER = 3;\nexport const BIGINT = 4;\nexport const STRING = 5;\nexport const ARRAY = 6;\nexport const OBJECT = 7;\nexport const DATE = 8;\nexport const SYMBOL = 9;\nexport const FUNCTION = 10;\nexport const ITERABLE = 11;\nexport const MAP = 12;\nexport const SET = 13;\nexport const PROMISE = 14;\n\nconst T1 = {\n  [\"n\"]: NUMBER,\n  [\"f\"]: FUNCTION,\n};\nconst T2 = {\n  [\"o\"]: BOOLEAN,\n  [\"i\"]: BIGINT,\n  [\"t\"]: STRING,\n  [\"y\"]: SYMBOL,\n};\n\nexport type TypeTester<T> = (value: any) => value is T;\nexport type TypeConverter<T> = <V, P extends boolean = true>(\n  value: V,\n  parse?: P\n) => T extends Nullish\n  ? undefined\n  : V extends T\n  ? V\n  : (true extends P ? T : never) | undefined;\n\n/** Using this cached value speeds up testing if an object is iterable seemingly by an order of magnitude. */\nexport const symbolIterator = Symbol.iterator;\n\n/** Using this cached value speeds up testing if an object is iterable seemingly by an order of magnitude. */\nexport const symbolAsyncIterator = Symbol.asyncIterator;\n\nexport const createTypeConverter =\n  <T>(\n    typeTester: TypeTester<T>,\n    parser?: (value: any) => T | undefined\n  ): TypeConverter<T> =>\n  (value: any, parse = true as any) =>\n    typeTester(value)\n      ? value\n      : parser && parse && value != null && (value = parser(value)) != null\n      ? value\n      : (undefined as any);\n\nexport const ifDefined = <T, P, R>(\n  value: T,\n  resultOrProperty: (\n    | (AllKeys<T> & (keyof any & {}))\n    | ((value: Exclude<T, Nullish>) => R)\n  ) &\n    P\n): MaybeUndefined<T, P extends keyof any ? Exclude<T, Nullish> : R> =>\n  isFunction(resultOrProperty)\n    ? value !== undefined\n      ? (resultOrProperty(value as any) as any)\n      : undefined\n    : value?.[resultOrProperty as any] !== undefined\n    ? value\n    : undefined;\n\nexport const isNullish = (value: any): value is undefined | void | null =>\n  value == null;\n\nexport const isBoolean = (value: any): value is boolean =>\n  typeof value === \"boolean\";\n\nexport const parseBoolean = createTypeConverter(isBoolean, (value) =>\n  value == 0 // Both numbers and string with the value 0 or 1\n    ? false\n    : value == 1\n    ? true\n    : value === \"false\"\n    ? false\n    : value === \"true\"\n    ? true\n    : undefined\n);\n\nexport const isTruish = <T>(value: T): value is Exclude<T, Falsish> => !!value;\n\nexport const isTrue = (value: any): value is true => value === T;\nexport const isNotTrue = <T>(value: T): value is Exclude<T, true> =>\n  value !== T;\n\nexport type Falsish = void | null | undefined | 0 | \"\" | false;\n\nexport const isFalsish = (value: any): value is Falsish => !value;\n\nexport const isFalse = (value: any): value is false => value === F;\nexport const isNotFalse = <T>(value: T): value is Exclude<T, false> =>\n  value !== F;\n\n/** An array where it is easy to conditionally leave elements out like `[\"item1\", condition&&\"item2\", undefined]`. */\nexport type MaybeFalsish<T> = T extends readonly (infer Item)[]\n  ? ToggleReadonly<MaybeFalsish<Item>[], T>\n  : T | Falsish;\n\nexport const truish: {\n  <T>(items: Iterable<T | Falsish>, keepUndefined?: false): T[];\n  <T>(items: Iterable<T>, keepUndefined: true): (T extends Falsish\n    ? undefined\n    : T)[];\n  <T extends { [Symbol.iterator]?: never } | string>(\n    value: T | Falsish\n  ): T extends Falsish ? undefined : Exclude<T, Falsish>;\n} = (value: any, keepUndefined?: boolean) =>\n  isArray(value)\n    ? keepUndefined\n      ? value.map((item) => (!!item ? item : undefined))\n      : value.filter((item: any) => !!item)\n    : !!value\n    ? (value as any)\n    : undefined;\n\nexport const isInteger: (value: any) => value is number =\n  Number.isSafeInteger as any;\n\nexport const isNumber = (value: any): value is number =>\n  typeof value === \"number\";\n\nexport const isFinite: (value: any) => value is number = Number.isFinite as any;\n\nexport const parseNumber = createTypeConverter(isNumber, (value) =>\n  isNaN((value = parseFloat(value))) ? undefined : value\n);\n\nexport const isBigInt = (value: any): value is bigint =>\n  typeof value === \"bigint\";\n\nexport const parseBigInt = createTypeConverter(isBigInt, (value) =>\n  tryCatch(() => BigInt(value))\n);\n\nexport const isString = (value: any): value is string =>\n  typeof value === \"string\";\n\nexport const toString = createTypeConverter(isString, (value) =>\n  value?.toString()\n);\n\nexport const isArray: (value: any) => value is any[] = Array.isArray;\n\nexport const isError = (value: any): value is Error => value instanceof Error;\n\n/**\n * Returns the value as an array following these rules:\n * - If the value is undefined (this does not include `null`), so is the return value.\n * - If the value is already an array its original value is returned unless `clone` is true. In that case a copy of the value is returned.\n * - If the value is iterable, an array containing its values is returned\n * - Otherwise, an array with the value as its single item is returned.\n */\nexport const array: {\n  // <T>(value: AsyncIterable<T>, clone?: boolean): MaybeUndefined<\n  //   [T][0],\n  //   Promise<T[]>\n  // >;\n  <T>(value: T, clone?: boolean): T extends Nullish\n    ? undefined\n    : T extends Iterable<infer Item>\n    ? T extends Item[]\n      ? T\n      : Item[]\n    : T[];\n} = (value: any, clone = false as any): any =>\n  value == null\n    ? undefined\n    : !clone && isArray(value)\n    ? value\n    : isIterable(value)\n    ? [...value]\n    : // : isAsyncIterable(value)\n      // ? toArrayAsync(value)\n      ([value] as any);\n\nexport const isObject = (value: any): value is Record<keyof any, any> =>\n  value !== null && typeof value === \"object\";\n\nconst objectPrototype = Object.prototype;\nconst getPrototypeOf = Object.getPrototypeOf;\n\nexport const isPlainObject = (\n  value: any\n): value is RecordType<keyof any, any> =>\n  value != null && getPrototypeOf(value) === objectPrototype;\n\nexport const hasProperty = <P extends keyof any>(\n  value: any,\n  property: P\n): value is { [Prop in P]: any } => isObject(value) && property in value;\n\nexport const hasMethods = <Names extends readonly (keyof any)[]>(\n  value: any,\n  ...names: Names\n): value is {\n  [P in Names[number]]: (...args: any) => any;\n} =>\n  value == null\n    ? false\n    : names.every((name) => typeof value[name] === \"function\");\n\nexport const hasMethod = <Name extends keyof any>(\n  value: any,\n  name: Name\n): value is {\n  [P in Name]: (...args: any) => any;\n} => typeof (value as any)?.[name] === \"function\";\n\nexport const isDate = (value: any): value is Date => value instanceof Date;\nexport const parseDate = createTypeConverter(isDate, (value) =>\n  isNaN((value = Date.parse(value))) ? undefined : value\n);\n\nexport const isSymbol = (value: any): value is symbol =>\n  typeof value === \"symbol\";\n\nexport const isFunction = (value: any): value is (...args: any) => any =>\n  typeof value === \"function\";\n\nexport const isIterable = (\n  value: any,\n  acceptStrings = false\n): value is Iterable<any> =>\n  !!(value?.[symbolIterator] && (typeof value === \"object\" || acceptStrings));\n\nexport const isAsyncIterable = (value: any): value is AsyncIterable<any> =>\n  !!value?.[symbolAsyncIterator];\n\nexport const toIterable = <T>(value: T | Iterable<T>): Iterable<T> =>\n  isIterable(value) ? value : [value];\n\nexport const isMap = (value: any): value is Map<any, any> =>\n  value instanceof Map;\n\nexport const isSet = (value: any): value is Set<any> => value instanceof Set;\n\nexport const isAwaitable = (value: any): value is Promise<any> => !!value?.then;\n\n/**\n * If the value is a promise, it will be awaited.\n */\nexport const awaitIfAwaitable = <T, R>(\n  value: T,\n  action: (value: T extends PromiseLike<infer T> ? T : T) => R\n): TogglePromise<R, T> =>\n  (value as any)?.then?.((value: any) => action(value)) ?? action(value as any);\n\nexport const typeCode = (value: any, typeName = typeof value) =>\n  value == null\n    ? value === null\n      ? NULL\n      : UNDEFINED\n    : T1[typeName[0]] ??\n      T2[typeName[1]] ??\n      (Array.isArray(value) ? ARRAY : value instanceof Date ? DATE : OBJECT);\n\n/**\n * Round a number of to the specified number of decimals.\n */\nexport const round = <T extends number | Nullish>(\n  number: T,\n  decimals?: number | boolean\n): MaybeUndefined<T, number> =>\n  number == null\n    ? (undefined as any)\n    : decimals === false\n    ? number\n    : ((decimals = Math.pow(10, !decimals || decimals === true ? 0 : decimals)),\n      Math.round(number * decimals) / decimals);\n\nexport const isJsonObject = (value: any): value is JsonObject =>\n  isPlainObject(value);\n\nconst testFirstLast = (s: string, first: string, last: string) =>\n  s[0] === first && s[s.length - 1] === last;\n\nexport const isJsonString = (value: any): boolean =>\n  isString(value) &&\n  (testFirstLast(value, \"{\", \"}\") || testFirstLast(value, \"[\", \"]\"));\n","import {\n  AllKeys,\n  AnyAll,\n  ArraysAsEmpty,\n  Entries,\n  Extends,\n  FILTER_NULLISH,\n  GeneralizeConstants,\n  If,\n  IfNot,\n  IterableOrArrayLike,\n  KeyValuePairsToObject,\n  KeyValueSource,\n  KeyValueSourcesToObject,\n  MAX_SAFE_INTEGER,\n  MaybeUndefined,\n  Minus,\n  Nullish,\n  OmitNullish,\n  Property,\n  RecordType,\n  StrictUndefined,\n  UndefinedIfEmpty,\n  add,\n  array,\n  get,\n  ifDefined,\n  isArray,\n  isBoolean,\n  isFalsish,\n  isFunction,\n  isIterable,\n  isMap,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isSet,\n  isString,\n  isTruish,\n  symbolIterator,\n  undefined,\n} from \".\";\n\nexport const UTF16MAX = 0xffff;\n\nlet stopInvoked = false;\nexport const stop = (yieldValue?: any) => ((stopInvoked = true), yieldValue);\n\nexport const toCharCodes = (s: string) =>\n  [...new Array(s.length)].map((_, i) => s.charCodeAt(i));\nexport const codePoint = (string: string, index: number = 0) =>\n  string.codePointAt(index)!;\n\nexport type IteratorSource =\n  | Nullish\n  | number\n  | Iterable<any>\n  | RecordType\n  | NavigatingIteratorStep;\n\nexport type IteratorSourceOf<T> =\n  | (T extends number ? number : never)\n  | Iterable<T>\n  | (T extends readonly [infer K, infer V]\n      ? K extends keyof any\n        ? RecordType<K, V>\n        : never\n      : never)\n  | NavigatingIteratorStep<T>;\n\nexport type IteratorItem<S extends IteratorSource> = unknown extends S\n  ? any\n  : S extends number\n  ? number\n  : S extends Iterable<infer T>\n  ? T\n  : S extends RecordType<infer K, infer V>\n  ? readonly [K, V]\n  : S extends ArrayLike<infer T>\n  ? T\n  : S extends (...args: any) => infer T | Nullish\n  ? T\n  : never;\n\nexport type IteratorItems<S extends readonly IteratorSource[]> =\n  S extends readonly [infer S]\n    ? IteratorItem<S & IteratorSource>\n    : S extends readonly [infer S, ...infer Rest]\n    ? IteratorItem<S & IteratorSource> | IteratorItems<Rest & IteratorSource[]>\n    : S extends readonly (infer S)[]\n    ? IteratorItem<S & IteratorSource>\n    : never;\n\nexport interface IteratorControl<S extends IteratorSource> {\n  source: S;\n  prev: IteratorItem<S> | undefined;\n  skip(): void;\n  end(): void;\n  end<P>(value: P): P;\n}\n\nexport type FunctionalIteratorAction<\n  S extends IteratorSource = IteratorSource,\n  Projection = any,\n  Value = IteratorItem<S>\n> = (\n  value: Value,\n  index: number\n) => Projection | readonly [any, any] | typeof stop | Nullish;\n\nexport type IteratorAction<\n  S extends IteratorSource = IteratorSource,\n  Projection = unknown,\n  Value = IteratorItem<S>\n> = AllKeys<IteratorItem<S>> | FunctionalIteratorAction<S, Projection, Value>;\n\n// We need both the inferred return value from the IteratorAction and the IteratorAction itself used as the parameter\n// in functions like `<S extends IteratorSource, Return, Action>(source: S, action: IteratorAction<S,Return> | P)=>IteratorProjection<S,Return,Action>.\n// It is important to set the generic type for Action's default value to undefined\n// This seems to be the only way we can both automatically infer non-readonly tuples from `()=>[\"test\", 1]` as tuples, and at the same time\n// allow property names from the source's items. If we did not include the parameter itself it would not be possible to differentiate\n// between property names and return values.\ntype IteratorProjection<\n  S extends IteratorSource,\n  Return,\n  Action,\n  Default = IteratorItem<S>\n> = Action extends Nullish\n  ? Default\n  : unknown extends Action\n  ? Default\n  : Action extends keyof any\n  ? Exclude<Property<IteratorItem<S>, Action>, Nullish>\n  : Return;\n\ntype IteratorProjectionWithUndefined<\n  S extends IteratorSource,\n  Return,\n  Action,\n  Default = IteratorItem<S>\n> =\n  | IteratorProjection<S, Return, Action, Default>\n  | (Action extends (...args: any) => infer R\n      ? R extends typeof stop\n        ? undefined\n        : StrictUndefined<R>\n      : Action extends keyof any\n      ? StrictUndefined<Property<IteratorItem<S>, Action>>\n      : never) extends infer T\n  ? T\n  : never;\n\ntype StartEndArgs<S extends IteratorSource> =\n  | []\n  | (S extends number\n      ? [offset?: number | Nullish]\n      : S extends NavigatingIteratorStep<infer T>\n      ? [seed?: T, maxIterations?: number]\n      : [start: number | Nullish, end?: number | Nullish]);\n\nexport type NavigatingIteratorStep<T = any> = (\n  current: T | undefined\n) => T | undefined;\n\ntype FlatIteratorItem<T, D extends number = 1, Object = false> = T extends\n  | undefined\n  | void\n  ? never\n  : D extends 0\n  ? T\n  : T extends\n      | Iterable<any>\n      | (Object extends true ? Record<keyof any, any> : never)\n  ? D extends 1\n    ? IteratorItem<T>\n    : FlatIteratorItem<IteratorItem<T>, Minus<D, 1>, Object>\n  : T;\n\nconst wrapProjection = <P>(\n  projection: P | undefined\n): undefined | ((item: any, index: number) => any) =>\n  projection == null\n    ? undefined\n    : isFunction(projection)\n    ? (projection as any)\n    : (item) => item[projection as any];\n\nfunction* createFilteringIterator<S extends IteratorSource, R, P>(\n  source: S,\n  projection?: IteratorAction<S, R> | P\n): Iterable<IteratorProjection<S, R, P>> {\n  if (source == null) return;\n  if (projection) {\n    projection = wrapProjection(projection)!;\n    let i = 0;\n    for (let item of source as any) {\n      if ((item = projection(item, i++)) != null) {\n        yield item;\n      }\n      if (stopInvoked) {\n        stopInvoked = false;\n        break;\n      }\n    }\n  } else {\n    for (let item of source as any) {\n      if (item != null) yield item;\n    }\n  }\n}\n\nfunction* createObjectIterator<S extends Record<keyof any, any>, R, P>(\n  source: S,\n  action?: IteratorAction<S, R> | P\n): Iterable<IteratorProjection<S, P, R>> {\n  action = wrapProjection(action);\n  let i = 0;\n  for (const key in source) {\n    let value = [key, source[key]] as any;\n    action && (value = action(value, i++));\n\n    if (value != null) {\n      yield value;\n    }\n    if (stopInvoked) {\n      stopInvoked = false;\n      break;\n    }\n  }\n}\n\nfunction* createRangeIterator(length = 0, offset?: number): Iterable<number> {\n  if (length < 0) {\n    offset ??= -length - 1;\n    while (length++) yield offset--;\n  } else {\n    offset ??= 0;\n    while (length--) yield offset++;\n  }\n}\n\nexport function* createStringIterator(\n  input: string,\n  start: number,\n  end: number\n): Iterable<[char: string, codePoint: number]> {\n  while (start < end) {\n    const codePoint = input.codePointAt(start)!;\n    let p = input[start++];\n    if (codePoint > UTF16MAX) {\n      start++;\n      p = String.fromCodePoint(codePoint);\n    }\n    yield [p, codePoint];\n  }\n}\n\nexport function* createNavigatingIterator<T>(\n  step: NavigatingIteratorStep<T>,\n  start?: T | undefined,\n  maxIterations = Number.MAX_SAFE_INTEGER\n): Iterator<T> {\n  if (start != null) yield start;\n  while (maxIterations-- && (start = step(start)) != null) {\n    yield start;\n  }\n}\n\nconst sliceAction = <S extends IteratorSource, R, P>(\n  action: IteratorAction<S, R> | P,\n  start: any,\n  end: any\n): P =>\n  (start ?? end) !== undefined\n    ? ((action = wrapProjection(action)!),\n      (start ??= 0),\n      (end ??= MAX_SAFE_INTEGER),\n      (value, index) =>\n        start--\n          ? undefined\n          : end!--\n          ? action\n            ? (action as any)(value, index)\n            : value\n          : end)\n    : (action as any);\n\nexport type IteratorFilter<S extends IteratorSource> = (\n  value: IteratorItem<S>,\n  index: number\n) => any;\n\n/** Faster way to exclude null'ish elements from an array than using {@link filter} or {@link map} */\nexport const filterArray = <T extends readonly any[] | undefined>(\n  array: T\n): T extends readonly (infer Item)[] ? OmitNullish<Item>[] : undefined =>\n  array?.filter(FILTER_NULLISH) as any;\n\nconst createIterator = <S extends IteratorSource, R, P>(\n  source: S,\n  projection?: IteratorAction<S, R> | P,\n  start?: any,\n  end?: any\n): Iterable<IteratorProjection<S, R, P>> =>\n  source == null\n    ? ([] as any)\n    : !projection && isArray(source)\n    ? filterArray(source)\n    : source[symbolIterator]\n    ? createFilteringIterator(\n        source,\n        start === undefined\n          ? projection\n          : sliceAction(projection, start as any, end)\n      )\n    : isObject(source)\n    ? createObjectIterator(\n        source as any,\n        sliceAction(projection, start as any, end)\n      )\n    : createIterator(\n        isFunction(source)\n          ? createNavigatingIterator(source, start, end)\n          : (createRangeIterator(source as number, start as any) as any),\n        projection\n      );\n\nconst mapToArray = <T, M>(\n  projected: Iterable<T>,\n  map: M\n): true extends M ? T[] : Iterable<T> =>\n  map && !isArray(projected) ? [...projected] : (projected as any);\n\ntype ProjectFunction = {\n  <S extends IteratorSource, R, P>(\n    source: S,\n    projection?: IteratorAction<S, R> | P,\n    ...rest: StartEndArgs<S>\n  ): Iterable<IteratorProjection<S, R, P>>;\n};\n\ntype MapFunction = {\n  <S extends IteratorSource, R, P>(\n    source: S,\n    projection?: IteratorAction<S, R> | P,\n    ...rest: StartEndArgs<S>\n  ): MaybeUndefined<S, Exclude<IteratorProjection<S, R, P>, Nullish>[]>;\n};\n\ntype FlatProjectFunction = <\n  S extends IteratorSource,\n  R,\n  P,\n  D extends number = 1,\n  O extends boolean = false\n>(\n  source: S,\n  projection?: IteratorAction<S, R> | P,\n  depth?: D,\n  expandObjects?: O,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<\n  S,\n  Iterable<FlatIteratorItem<IteratorProjection<S, R, P>, D, O>>\n>;\n\nexport const project: ProjectFunction = ((\n  source: any,\n  projection: any,\n  start: any,\n  end: any\n) => createIterator(source, projection, start, end)) as any;\n\nfunction* flattenInternal(\n  value: any,\n  depth: number,\n  expandObjects: boolean,\n  nested: boolean\n) {\n  if (value != null) {\n    if (value[symbolIterator] || (expandObjects && isObject(value))) {\n      for (const item of nested ? createIterator(value) : value) {\n        if (depth !== 1) {\n          yield* flattenInternal(item, depth - 1, expandObjects, true);\n        } else {\n          yield item;\n        }\n      }\n    } else {\n      yield value;\n    }\n  }\n}\nexport const flatten: FlatProjectFunction = (\n  source,\n  projection?,\n  depth = 1 as any,\n  expandObjects: any = false,\n  start?: any,\n  end?: any\n) =>\n  flattenInternal(\n    createIterator(source, projection as any, start, end),\n    depth + 1,\n    expandObjects,\n    false\n  ) as any;\n\nexport const map: MapFunction = (\n  source: any,\n  projection?: any,\n  start?: any,\n  end?: any\n) => {\n  projection = wrapProjection(projection);\n  if (isArray(source)) {\n    let i = 0;\n    const mapped: any[] = [];\n    start = start! < 0 ? source.length + start! : start ?? 0;\n    end = end! < 0 ? source.length + end! : end ?? source.length;\n    for (; start < end && !stopInvoked; start++) {\n      let value = source[start];\n      if ((projection ? (value = projection(value, i++)) : value) != null) {\n        mapped.push(value);\n      }\n    }\n    stopInvoked = false;\n    return mapped;\n  }\n  return source != null\n    ? array(project(source, projection, start, end))\n    : (undefined as any);\n};\n\nexport const mapAsync: <S extends IteratorSource, R, P>(\n  source: S,\n  projection: IteratorAction<S, R> | P,\n  ...rest: StartEndArgs<S>\n) => Promise<\n  MaybeUndefined<S, Exclude<Awaited<IteratorProjection<S, R, P>>, Nullish>[]>\n> = async (source: any, projection?: any, start?: any, end?: any) => {\n  projection = wrapProjection(projection);\n  const mapped: any = [];\n  await forEachAsync(\n    source,\n    async (item) => (item = await projection(item)) != null && mapped.push(item)\n  );\n  return mapped as any;\n};\n\nexport const zip = <Lhs extends IteratorSource, Rhs extends IteratorSource>(\n  lhs: Lhs,\n  rhs: Rhs\n): Iterable<[IteratorItem<Lhs>, IteratorItem<Rhs> | undefined]> => {\n  const it2 = createIterator(rhs)[Symbol.iterator]();\n  return createIterator(lhs, (lhs) => [lhs, it2.next()?.value] as [any, any]);\n};\n\nexport const distinct: {\n  <S extends IteratorSource, R, P>(\n    source: S,\n    projection?: IteratorAction<S, R>,\n    ...rest: StartEndArgs<S>\n  ): S extends undefined ? undefined : Set<IteratorProjection<S, R, P>>;\n  <S extends IteratorSource>(\n    source: S,\n    ...rest: StartEndArgs<S>\n  ): S extends undefined ? undefined : Set<IteratorItem<S>>;\n} = (source: any, projection?: any, start?: any, end?: any) =>\n  source != null\n    ? new Set<any>([...project(source, projection, start, end)])\n    : undefined;\n\nexport const single: {\n  <S extends IteratorSource, R, P>(\n    source: S,\n    projection?: IteratorAction<S, R> | P,\n    ...rest: StartEndArgs<S>\n  ): S extends undefined ? undefined : IteratorProjection<S, R, P> | undefined;\n  <S extends IteratorSource>(\n    source: S,\n    ...rest: StartEndArgs<S>\n  ): S extends undefined ? undefined : IteratorItem<S> | undefined;\n} = (source: any, projection?: any, start?: any, end?: any) =>\n  source == null\n    ? undefined\n    : (source = mapDistinct(source, projection, start, end) as any).length > 1\n    ? undefined\n    : source[0];\n\nexport const mapDistinct: MapFunction = (\n  source: any,\n  projection?: any,\n  start?: any,\n  end?: any\n) =>\n  source != null\n    ? [...(distinct as any)(source, projection, start, end)]\n    : source;\n\nexport function* concatIterators<S extends IteratorSource[]>(\n  ...iterators: S\n): Iterable<IteratorItems<S>> {\n  for (const iterator of iterators) {\n    if (!iterator) continue;\n    yield* createIterator(iterator);\n  }\n}\n\nexport const intersection = <\n  T,\n  A extends Iterable<T> | undefined,\n  B extends Iterable<T> | undefined,\n  MapToArray extends boolean = A extends any[]\n    ? true\n    : B extends any[]\n    ? true\n    : false\n>(\n  a: A,\n  b: B,\n  mapToArray?: MapToArray\n): MapToArray extends true ? T[] : Iterable<T> => {\n  if (!a || !b) return [];\n  isSet(b) && ([b, a] = [a, b] as any);\n  const lookup = isSet(a) ? a : new Set(a);\n  return filter(b, (value) => lookup.has(value), mapToArray) as any;\n};\n\nexport const intersects = (\n  a: Iterable<any> | undefined,\n  b: Iterable<any> | undefined\n) => !!count(intersection(a, b));\n\nexport const flatMapKv = <S extends IteratorSource, R, P, D extends number = 1>(\n  source: S,\n  action?: IteratorAction<S, R> | P,\n  depth: D = 1 as any\n): FlatIteratorItem<IteratorProjection<S, R, P>, D, true>[] =>\n  flatMap(source, action, depth, true);\n\nexport const flatMap: <\n  S extends IteratorSource,\n  R,\n  P,\n  D extends number = 1,\n  O extends boolean = false\n>(\n  source: S,\n  action?: IteratorAction<S, R> | P,\n  depth?: D,\n  expandObjects?: O,\n  ...rest: StartEndArgs<S>\n) => FlatIteratorItem<IteratorProjection<S, R, P>, D, O>[] = (\n  source,\n  action,\n  depth = 1 as any,\n  expandObjects = false as any,\n  start?: any,\n  end?: any\n) =>\n  array(\n    (flatten as any)(source, action, depth, expandObjects, start, end) as any\n  ) as any;\n\nconst traverseInternal = <T>(\n  root: T | T[] | undefined,\n  selector: (current: T) => Iterable<T> | undefined,\n  include: boolean,\n  results: T[],\n  seen: Set<T>\n) => {\n  if (isArray(root)) {\n    forEachInternal(root, (item) =>\n      traverseInternal(item, selector, include, results, seen)\n    );\n    return results;\n  }\n  if (!root || !add(seen, root)) {\n    return undefined;\n  }\n  include && results.push(root);\n  forEachInternal(selector(root), (item) =>\n    traverseInternal(item, selector, true, results, seen)\n  );\n\n  return results;\n};\n\ntype ConcatResult_<T> = T extends readonly []\n  ? never\n  : T extends readonly [infer Item, ...infer Rest]\n  ?\n      | Exclude<Item extends Iterable<infer T> ? T : Item, Nullish>\n      | ConcatResult_<Rest>\n  : T extends Iterable<infer Item>\n  ? Exclude<Item extends Iterable<infer T> ? T : Item, Nullish>\n  : never;\n\ntype ConcatResult<T> = ConcatResult_<T> extends never\n  ? undefined\n  : ConcatResult_<T>[];\n\ntype FinalIteratorItem<\n  T,\n  ArraysOnly = false,\n  MaxDepth extends number = -1\n> = MaxDepth extends 0\n  ? T\n  : T extends string\n  ? string\n  : T extends (\n      [ArraysOnly] extends [true]\n        ? readonly (infer T)[]\n        : IterableOrArrayLike<infer T>\n    )\n  ? FinalIteratorItem<\n      T,\n      ArraysOnly,\n      -1 extends MaxDepth ? -1 : Minus<MaxDepth, 1>\n    >\n  : T;\n\nexport const unnest = <\n  T extends readonly any[],\n  ArraysOnly extends boolean = false,\n  Depth extends number = -1\n>(\n  items: T,\n  arraysOnly: ArraysOnly,\n  depth: Depth = -1 as any\n): FinalIteratorItem<T, ArraysOnly>[] => {\n  if (!depth) return items as any;\n\n  const results: any[] = [];\n  const test = arraysOnly ? isArray : isIterable;\n  forEach(items, (item) =>\n    test(item)\n      ? results.push(...unnest(item, arraysOnly, depth - 1))\n      : item != null && results.push(item)\n  );\n  return results;\n};\n\nexport const unarray: {\n  <T extends readonly any[], Depth extends number = -1>(\n    items: T\n  ): FinalIteratorItem<T, true>[];\n  <T extends readonly any[]>(...items: T): FinalIteratorItem<T, true>[];\n} = (...items: any[]) => unnest(items.length === 1 ? items[0] : items, true);\n\nexport const concat: {\n  <T extends readonly any[]>(items: T):\n    | ConcatResult<T>\n    | IfNot<AnyAll<ArraysAsEmpty<T[number]>, false>>;\n  <T extends readonly any[]>(...items: T):\n    | ConcatResult<T>\n    | IfNot<AnyAll<ArraysAsEmpty<T[number]>, false>>;\n} = (...items: any[]) => {\n  let merged: any[] | undefined;\n  forEach(\n    items.length === 1 ? items[0] : items,\n    (item) => item != null && (merged ??= []).push(...(array(item) as any))\n  );\n  return merged as any;\n};\n\nexport const expand = <T>(\n  root: T | T[],\n  selector: (\n    current: Exclude<T, Nullish>\n  ) => Iterable<T | undefined> | undefined,\n  includeSelf = true\n): T extends undefined ? undefined : Exclude<T, Nullish>[] =>\n  traverseInternal(root, selector, includeSelf, [], new Set()) as any;\n\nconst forEachArray = (\n  source: readonly any[],\n  action: any,\n  start: any,\n  end: any\n) => {\n  let returnValue: any;\n  let i = 0;\n  start = start! < 0 ? source.length + start! : start ?? 0;\n  end = end! < 0 ? source.length + end! : end ?? source.length;\n  for (; start < end; start++) {\n    if (\n      source[start] != null &&\n      ((returnValue = action(source[start], i++) ?? returnValue), stopInvoked)\n    ) {\n      stopInvoked = false;\n      break;\n    }\n  }\n  return returnValue;\n};\n\nconst forEachIterable = (source: Iterable<any>, action: any) => {\n  let returnValue: any;\n  let i = 0;\n  for (let value of source as any) {\n    if (\n      value != null &&\n      ((returnValue = action(value, i++) ?? returnValue), stopInvoked)\n    ) {\n      stopInvoked = false;\n      break;\n    }\n  }\n  return returnValue;\n};\n\nconst forEachObject = (source: any, action: any) => {\n  let returnValue: any;\n  let i = 0;\n  for (let key in source) {\n    if (\n      ((returnValue = action([key, source[key]], i++) ?? returnValue),\n      stopInvoked)\n    ) {\n      stopInvoked = false;\n      break;\n    }\n  }\n  return returnValue;\n};\n\nexport const apply: <S, R, Args extends readonly any[]>(\n  source: S,\n  action: (\n    item: S extends IteratorSource ? IteratorItem<S> : OmitNullish<S>,\n    ...args: Args\n  ) => R,\n  ...args: Args\n) => S extends undefined ? undefined : Exclude<R, Nullish>[] = (\n  source,\n  action,\n  ...args\n) =>\n  source == null\n    ? undefined\n    : isIterable(source)\n    ? map(source, (item) => action(item as any, ...args))\n    : (action(source as any, ...args) as any);\n\nexport const applyAsync: <\n  S extends IteratorSource,\n  R extends PromiseLike<any>,\n  Args extends readonly any[]\n>(\n  source: S,\n  action: (item: IteratorItem<S>, ...args: Args) => R,\n  ...args: Args\n) => Promise<S extends undefined ? undefined : Exclude<R, Nullish>[]> = (\n  source,\n  action,\n  ...args\n) => mapAsync(source, (item) => action(item, ...args)) as any;\n\nconst forEachInternal: <S extends IteratorSource, R>(\n  source: S,\n  action?: IteratorAction<S, R>,\n  start?: any,\n  end?: any\n) => R | undefined = (source, action, start?: any, end?: any) => {\n  if (source == null) return;\n\n  if (isArray(source)) return forEachArray(source, action, start, end);\n  if (start === undefined) {\n    if (source[symbolIterator]) return forEachIterable(source as any, action);\n    if (typeof source === \"object\") return forEachObject(source, action);\n  }\n  let returnValue: any;\n  for (const value of createIterator(source, action, start, end)) {\n    value != null && (returnValue = value);\n  }\n\n  return returnValue;\n};\n\nexport const forEach = forEachInternal as {\n  <S extends IteratorSource, R>(\n    source: S,\n    action: FunctionalIteratorAction<S, R>,\n    ...rest: StartEndArgs<S>\n  ): R | undefined;\n};\n\nexport const forEachAsync: <\n  S extends IteratorSource,\n  R extends PromiseLike<any>\n>(\n  source: S,\n  action: IteratorAction<S, R>,\n  ...rest: StartEndArgs<S>\n) => Promise<R | undefined> = async (\n  source: any,\n  action: any,\n  start?: any,\n  end?: any\n) => {\n  if (source == null) return undefined;\n  let returnValue: any;\n  for (let item of project(source, action, start, end)) {\n    (item = (await item) as any) != null && (returnValue = item);\n    if (stopInvoked) {\n      stopInvoked = false;\n      break;\n    }\n  }\n  return returnValue;\n};\n\nexport const flatForEach = <\n  S extends IteratorSource,\n  R,\n  P,\n  Depth extends number,\n  O extends boolean = false\n>(\n  source: S,\n  action: IteratorAction<S, R> | P,\n  depth: Depth = 1 as any,\n  expandObjects: O = false as any,\n  ...rest: StartEndArgs<S>\n): FlatIteratorItem<IteratorProjection<S, R, P>, Depth, O> | undefined =>\n  forEachInternal(\n    flatten(source, undefined, depth, expandObjects, ...(rest as any)),\n    action as any\n  ) as any;\n\ntype KeyValueParts<T> = T extends readonly [infer Key, infer Value]\n  ? [Key, Value]\n  : [undefined, undefined];\n\nconst fromEntries = Object.fromEntries;\n\n/**\n * Like Object.fromEntries, but accepts any iterable source and a projection instead of just key/value pairs.\n * Properties with undefined values are not included in the resulting object.\n */\nexport const obj: {\n  <S extends KeyValueSource | Nullish>(source: S): MaybeUndefined<\n    S,\n    KeyValuePairsToObject<IteratorItem<S>>\n  >;\n  <S extends Iterable<KeyValueSource> | Nullish, G extends boolean>(\n    source: S,\n    group: G\n  ): S extends Nullish\n    ? undefined\n    : KeyValueSourcesToObject<IteratorItem<S>, G>;\n\n  <S extends IteratorSource | Nullish, R extends readonly [any, any], P>(\n    source: S,\n    selector: IteratorAction<S, R> | P,\n    merge?: (\n      current: KeyValueParts<IteratorProjection<S, R, P>>[1] | undefined,\n      value: KeyValueParts<IteratorProjection<S, R, P>>[1]\n    ) => KeyValueParts<IteratorProjection<S, R, P>>[1] | Nullish\n  ): KeyValuePairsToObject<IteratorProjection<S, R, P>>;\n} = ((source: any, selector?: any, merge?: any) => {\n  if (source == null) return undefined;\n\n  if (isBoolean(selector) || merge) {\n    let result = {} as any;\n    forEach(\n      source,\n      merge\n        ? (item, i) =>\n            (item = selector(item, i)) != null &&\n            (item[1] = merge(result[item[0]], item[1])) != null &&\n            (result[item[0]] = item[1])\n        : (source) =>\n            forEach(\n              source,\n              selector\n                ? (item) =>\n                    item?.[1] != null &&\n                    ((result[item[0]] ??= []).push(item[1]), result)\n                : (item) =>\n                    item?.[1] != null && ((result[item[0]] = item[1]), result)\n            )\n    );\n    return result;\n  }\n  return fromEntries(\n    map(\n      source,\n      selector\n        ? (item, index) => ifDefined(selector(item, index), 1)\n        : (item) => ifDefined(item, 1)\n    )!\n  );\n}) as any;\n\nexport const groupReduce: <\n  S extends IteratorSource,\n  Key,\n  Accumulator = unknown\n>(\n  source: S,\n  keySelector: (item: IteratorItem<S>, index: number) => Key,\n  reducer: (\n    accumulator: GeneralizeConstants<Accumulator>,\n    item: IteratorItem<S>,\n    index: number\n  ) => Accumulator,\n  seed?: Accumulator | (() => Accumulator),\n  ...reset: StartEndArgs<S>\n) => Map<Key, Accumulator> = (\n  source,\n  keySelector,\n  reducer,\n  seed,\n  start?: any,\n  end?: any\n) => {\n  const groups = new Map<any, any>();\n  const seedFactory = () => (isFunction(seed) ? seed() : seed);\n  const action: IteratorAction<any, any> = (item, index) => {\n    const key = keySelector(item, index);\n    let acc = groups.get(key) ?? seedFactory();\n    const value = reducer(acc, item, index);\n    if (value != null) {\n      groups.set(key, value);\n    }\n  };\n  forEachInternal(source, action, start, end);\n  return groups as any;\n};\n\nexport const group: <S extends IteratorSource, Key, R = IteratorItem<S>>(\n  source: S,\n  keySelector: (item: IteratorItem<S>, index: number) => Key,\n  valueSelector?: (item: IteratorItem<S>, index: number) => R,\n  ...rest: StartEndArgs<S>\n) => S extends undefined ? undefined : Map<Key, R[]> = (\n  source,\n  keySelector,\n  valueSelector = (item: any) => item,\n  start?: any,\n  end?: any\n) => {\n  if (source == null) return undefined as any;\n  const groups = new Map<any, any[]>();\n  (forEachInternal as any)(\n    source,\n    (item: any, index: number) => {\n      const key = keySelector(item, index);\n      const value = valueSelector(item, index);\n      get(groups, key as any, () => []).push(value);\n    },\n    start,\n    end\n  );\n  return groups as any;\n};\n\nexport const reduce: <\n  S extends IteratorSource,\n  Reducer extends (\n    ...args: [\n      accumulator: unknown extends Accumulator\n        ? any\n        : GeneralizeConstants<Accumulator>,\n      item: IteratorItem<S>,\n      index: number\n    ]\n  ) => GeneralizeConstants<Accumulator>,\n  Accumulator\n>(\n  source: S,\n  reducer: Reducer,\n  seed?: Accumulator | (() => Accumulator),\n  ...rest: StartEndArgs<S>\n) => Reducer extends (...args: any) => infer R\n  ? R | (unknown extends Accumulator ? undefined : never)\n  : never = (source, reducer, seed, start?: any, end?: any) => {\n  const seedFactory = () => (isFunction(seed) ? seed() : seed);\n  return (\n    forEachInternal(\n      source,\n      (value, index) =>\n        (seed =\n          ((reducer as any)(seed as any, value, index) as any) ??\n          seedFactory()),\n      start,\n      end\n    ) ?? (seedFactory() as any)\n  );\n};\n\ntype FilterItem<S extends IteratorSource, F> = F extends (\n  value: any,\n  ...args: any\n) => value is infer T\n  ? T\n  : IteratorItem<S>;\n\nexport const filter: {\n  <\n    S extends IteratorSource,\n    MapToArray extends boolean = S extends Nullish | readonly any[]\n      ? true\n      : false,\n    P extends IteratorFilter<S> = IteratorFilter<S>\n  >(\n    source: S,\n    predicate?: P,\n    map?: MapToArray,\n    ...rest: StartEndArgs<S>\n  ): MapToArray extends true\n    ? MaybeUndefined<S, FilterItem<S, P>[]>\n    : Iterable<FilterItem<S, P>>;\n} = (\n  source: IteratorSource,\n  predicate: IteratorFilter<any> = (item: any) => item != null,\n  map = isArray(source) as any,\n  start?: any,\n  end?: any\n) =>\n  mapToArray(\n    createIterator(\n      source,\n      (item, index) => (predicate(item, index) ? item : undefined),\n      start,\n      end\n    ),\n    map\n  ) as any;\n\nlet filterInternal = filter;\n\nexport const count: <S extends IteratorSource>(\n  source: S,\n  predicate?: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<S, number> = (\n  source: IteratorSource,\n  filter?: IteratorFilter<IteratorSource>,\n  start?: any,\n  end?: any\n) => {\n  if (source == null) return undefined as any;\n\n  let n: number;\n  if (filter) {\n    source = filterInternal(source, filter, false, start, end) as any;\n  } else {\n    if ((n = source![\"length\"] ?? source![\"size\"]) != null) {\n      return n;\n    }\n    if (!source[symbolIterator]) {\n      return Object.keys(source).length;\n    }\n  }\n  n = 0;\n  return forEachInternal(source, () => ++n) ?? (0 as any);\n};\n\nexport const sum: {\n  <S extends IteratorSourceOf<number>>(\n    source: S,\n    selector?: IteratorAction<S, number>,\n    ...rest: StartEndArgs<S>\n  ): number;\n  <S extends IteratorSource>(\n    source: S,\n    selector: IteratorAction<S, number>,\n    ...rest: StartEndArgs<S>\n  ): number;\n} = (\n  source: any,\n  selector: any = (item: any) => item,\n  start?: any,\n  end?: any\n) =>\n  reduce(\n    source,\n    (sum, value, index) => sum + (selector(value, index) ?? 0),\n    0,\n    start,\n    end\n  );\n\ntype CanBeEmptySource<S extends IteratorSource> = any[] extends S\n  ? true\n  : S extends { length: 0 } | 0 // Zero length range.\n  ? true\n  : S extends readonly any[] | number\n  ? false\n  : true;\n\ntype MinMaxFunction = {\n  <S extends readonly number[]>(...numbers: S | readonly [number]):\n    | (S extends readonly [] ? undefined : number)\n    | UndefinedIfEmpty<S>;\n  <S extends IteratorSource, R, P>(\n    source: S | readonly [number],\n    selector?: IteratorAction<S, R> | P,\n    ...rest: StartEndArgs<S>\n  ): true extends CanBeEmptySource<S>\n    ? number | undefined\n    : If<\n        Extends<IteratorProjectionWithUndefined<S, R, P>, number>,\n        number,\n        undefined\n      >;\n};\n\nexport const min: MinMaxFunction = (source: any, ...args: any[]) =>\n  source == null\n    ? undefined\n    : isNumber(source)\n    ? Math.min(source, ...args)\n    : reduce(\n        source,\n        (\n          min,\n          value,\n          index,\n          projected = args[1] ? args[1](value, index) : value\n        ) =>\n          min == null || (isNumber(project) && projected < min)\n            ? projected\n            : max,\n        undefined,\n        args[2],\n        args[3]\n      );\n\nexport const max: MinMaxFunction = (source: any, ...args: any[]) =>\n  source == null\n    ? undefined\n    : isNumber(source)\n    ? Math.max(source, ...args)\n    : reduce(\n        source,\n        (\n          max,\n          value,\n          index,\n          projected = args[1] ? args[1](value, index) : value\n        ) =>\n          max == null || (isNumber(projected) && projected > max)\n            ? projected\n            : max,\n        undefined,\n        args[2],\n        args[3]\n      );\n\nexport const values: <S extends IteratorSource>(\n  source: S,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<\n  S,\n  IteratorItem<S> extends readonly [any, infer Item] ? Item : IteratorItem<S>\n> = (source, start?: any, end?: any) =>\n  (map as any)(\n    source,\n    isPlainObject(source) ? (item: any) => item[1] : (item: any) => item,\n    start,\n    end\n  );\n\nexport const entries: <S extends Iterable<any> | RecordType>(\n  target: S\n) => Entries<S> = (target) =>\n  !isArray(target) && isIterable(target)\n    ? map(\n        target,\n        isMap(target)\n          ? (value) => value\n          : isSet(target)\n          ? (value) => [value, true]\n          : (value, index) => [index, value]\n      )\n    : isObject(target)\n    ? (Object.entries(target) as any)\n    : undefined;\n\nexport const keys: <S extends IteratorSource>(\n  source: S,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<\n  S,\n  IteratorItem<S> extends readonly [infer Key, any] ? Key : number\n> = (source, start?: any, end?: any) =>\n  (map as any)(\n    source,\n    isPlainObject(source)\n      ? (item: any) => item[0]\n      : (_item: any, i: number) => i,\n    start,\n    end\n  );\n\nexport const mapFirst: <S extends IteratorSource, R, P>(\n  source: S,\n  projection: IteratorAction<S, R> | P,\n  ...rest: StartEndArgs<S>\n) => IteratorProjection<S, R, P> | undefined = (\n  source,\n  projection,\n  start?: any,\n  end?: any\n) =>\n  source == null\n    ? undefined\n    : ((projection = wrapProjection(projection)!),\n      forEachInternal(\n        source,\n        (value, i) =>\n          !projection || (value = (projection as any)(value, i))\n            ? stop(value)\n            : undefined,\n        start,\n        end\n      ));\n\nexport const first: <S extends IteratorSource>(\n  source: S,\n  predicate?: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => IteratorItem<S> | undefined = (\n  source,\n  predicate?: IteratorFilter<any>,\n  start?: any,\n  end?: any\n) =>\n  source == null\n    ? undefined\n    : forEachInternal(\n        source,\n        (value, i) =>\n          !predicate || predicate(value, i) ? stop(value) : undefined,\n        start,\n        end\n      );\n\nexport const last: <S extends IteratorSource | undefined>(\n  source: S,\n  predicate?: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => IteratorItem<S> | undefined = (\n  source,\n  predicate?: any,\n  start?: any,\n  end?: any\n) =>\n  source == null\n    ? undefined\n    : isArray(source) || isString(source)\n    ? source[source.length - 1]\n    : forEachInternal(\n        source,\n        (item, i) => (!predicate || predicate(item, i) ? item : undefined),\n        start,\n        end\n      );\n\nexport const find: <S extends IteratorSource>(\n  source: S,\n  predicate: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<S, IteratorItem<S>> = (\n  source,\n  predicate,\n  start?: any,\n  end?: any\n) =>\n  source == null\n    ? undefined\n    : (source as any).find\n    ? (source as any).find(predicate)\n    : first(filterInternal(source as any, predicate, false, start, end));\n\nexport const rank = <S extends IteratorSource>(source: S) =>\n  createIterator(source, (item, i) => [item, i] as const);\n\nexport const some: <S extends IteratorSource>(\n  source: S,\n  predicate?: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<S, boolean> = (source, predicate, start?: any, end?: any) =>\n  source == null\n    ? undefined\n    : isPlainObject(source) && !predicate\n    ? Object.keys(source).length > 0\n    : (source as any).some?.(predicate ?? isTruish) ??\n      forEachInternal<any, boolean>(\n        source,\n        predicate\n          ? (item, index) => (predicate(item, index) ? stop(true) : false)\n          : () => stop(true),\n        start,\n        end\n      ) ??\n      false;\n\nexport const every: <S extends IteratorSource>(\n  source: S,\n  predicate?: IteratorFilter<S>,\n  ...rest: StartEndArgs<S>\n) => MaybeUndefined<S, boolean> = (source, predicate, start?: any, end?: any) =>\n  source == null\n    ? undefined\n    : (!(some as any)(\n        source,\n        predicate\n          ? (item: any, index: number) => !predicate(item, index)\n          : isFalsish,\n        start,\n        end\n      ) as any);\n\n/**\n * Array's `sort` function that offers a single function that is applied on each element instead of having to do it twice (`[...].sort(x,y)=>f(x)-f(y)`).\n * Default is to use the value directly.\n */\nexport const sort = <T extends any[] | Nullish, Item extends IteratorItem<T>>(\n  items: T,\n  rank: (item: Item) => number = (item) => item as any\n): MaybeUndefined<T, Item[]> =>\n  (items?.sort((lhs, rhs) => rank(lhs) - rank(rhs)), items) as any;\n\nexport const binarySearch: {\n  (arr: Array<number>, find: number): number;\n  <T = number>(arr: Array<T>, find: T, compare: (x: T, y: T) => number): number;\n} = <T = number>(\n  arr: Array<T>,\n  find: T,\n  compare: (x: T, y: T) => number = ((x: any, y: any) => x - y) as any\n) => {\n  let m = 0;\n  let n = arr.length - 1;\n  let cmp: number;\n  let k: number;\n  while (m <= n) {\n    k = (n + m) >> 1;\n    cmp = compare(find, arr[k]);\n    if (cmp > 0) {\n      m = k + 1;\n    } else if (cmp < 0) {\n      n = k - 1;\n    } else {\n      return k;\n    }\n  }\n  return ~m;\n};\n","import {\n  And,\n  Extends,\n  GeneralizeConstants,\n  If,\n  IsAny,\n  IteratorItem,\n  IteratorSourceOf,\n  KeyValuePairsToObject,\n  MaybeUndefined,\n  MethodOverloads,\n  Minus,\n  NotFunction,\n  Nullish,\n  PrettifyIntersection,\n  Primitives,\n  RecordType,\n  UnionToIntersection,\n  count,\n  forEach,\n  hasMethod,\n  isArray,\n  isFunction,\n  isMap,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isSet,\n  map,\n  obj,\n  throwError,\n} from \".\";\n\ntype ReadonlyMapLike<K = any, V = any> = {\n  has?(key: K): boolean;\n  get(key: K): V | undefined;\n};\n\n// #region Shared types\ntype MapLike<K = any, V = any> = ReadonlyMapLike<K, V> & {\n  set(key: K, value: V): any;\n  delete(key: K): any;\n  clear(): any;\n};\n\ntype ReadonlySetLike<K = any> = {\n  has(key: K): boolean;\n};\ntype SetLike<K = any> = ReadonlySetLike<K> & {\n  add(key: K): any;\n  delete(key: K): any;\n  clear(): any;\n};\n\ntype ReadonlyPropertyContainer<K extends any = any, V extends any = any> =\n  | RecordType\n  | readonly any[]\n  | ReadonlyMapLike<K, V>\n  | ReadonlySetLike<K>;\n\ntype PropertyContainer<K extends any = any, V extends any = any> =\n  | ReadonlyPropertyContainer<K, V>\n  | MapLike<K, V>\n  | SetLike<K>;\n\nexport type TupleIndices<T extends readonly any[]> = T extends readonly []\n  ? never\n  : number extends T[\"length\"]\n  ? number\n  : T extends readonly [any, ...infer Rest]\n  ? TupleIndices<Rest> | Rest[\"length\"]\n  : never;\n\nexport type KeyType<T extends ReadonlyPropertyContainer | Nullish> =\n  T extends Primitives\n    ? never\n    : T extends ReadonlyMapLike<infer K, any> | ReadonlySetLike<infer K>\n    ? K\n    : T extends readonly any[]\n    ? TupleIndices<T>\n    : keyof T;\n\nexport type ValueType<\n  T extends ReadonlyPropertyContainer | Nullish,\n  K = KeyType<T>,\n  Context extends undefined | \"get\" | \"set\" = undefined\n> = IsAny<T> extends true\n  ? any\n  : T extends Nullish\n  ? never\n  : K extends KeyType<T>\n  ? T extends ReadonlyMapLike<K, infer V>\n    ? V | If<Extends<Context, \"get\" | \"set\">, undefined>\n    : T extends ReadonlySetLike<K>\n    ? boolean\n    : T[K] | If<And<Extends<T, RecordType>, Extends<Context, \"set\">>, undefined>\n  : never;\n\n// #endregion\n\n// #region get\n\nconst updateSingle = (target: any, key: any, value: any) =>\n  setSingle(target, key, isFunction(value) ? value(get(target, key)) : value);\n\nconst setSingle = (target: any, key: any, value: any) => {\n  if (target.constructor === Object || isArray(target)) {\n    value === undefined ? delete target[key] : (target[key] = value);\n    return value;\n  }\n\n  value === undefined\n    ? target.delete\n      ? target.delete(key)\n      : delete target[key]\n    : target.set\n    ? target.set(key, value)\n    : target.add\n    ? value\n      ? target.add(key)\n      : target.delete(key)\n    : (target[key] = value);\n\n  return value;\n};\n\nexport const setSingleIfNotDefined = (\n  target: any,\n  key: any,\n  value: any,\n  error: (\n    key: string,\n    currentValue: any,\n    newValue: any,\n    target: any\n  ) => string | Error\n) => {\n  const currentValue = get(target, key);\n  if (currentValue != null) {\n    throwError(error(key, currentValue, value, target));\n  }\n  return setSingle(target, key, value);\n};\n\nexport const get: {\n  <T extends ReadonlyPropertyContainer | Nullish, K extends KeyType<T>>(\n    target: T,\n    key: K\n  ): ValueType<T, K, \"get\">;\n  <\n    T extends ReadonlyPropertyContainer | Nullish,\n    K extends KeyType<T>,\n    R extends\n      | ValueType<T, K>\n      | (() => ValueType<T, K>)\n      | undefined\n      | (() => ValueType<T, K> | undefined)\n  >(\n    target: T,\n    key: K,\n    init: R\n  ): ValueType<\n    T,\n    K,\n    R extends ValueType<T, K> | (() => ValueType<T, K>) ? undefined : \"get\"\n  >;\n} = <\n  T extends ReadonlyPropertyContainer | Nullish,\n  K extends KeyType<T>,\n  R extends ValueType<T, K> | undefined = undefined\n>(\n  target: T,\n  key: K | undefined,\n  init?: Wrapped<R>\n) => {\n  if (!target) return undefined as any;\n  if (target.constructor === Object && init == null) return target[key as any];\n\n  let value = (target as any).get\n    ? (target as any).get(key)\n    : (target as any).has\n    ? (target as any).has(key)\n    : target[key as any];\n\n  if (value === undefined && init != null) {\n    (value = isFunction(init) ? (init as any)() : init) != null &&\n      setSingle(target, key, value);\n  }\n  return value;\n};\n\n// #endregion\n\n// #region set and update\n\ntype UpdateFunction<\n  T extends ReadonlyPropertyContainer,\n  Key,\n  Current,\n  Factory\n> = Factory extends false\n  ? (\n      current: Current,\n      key: Key,\n      target: T\n    ) => GeneralizeConstants<ValueType<T, Key>> | undefined\n  : (key: Key, target: T) => GeneralizeConstants<ValueType<T, Key>>;\n\ntype Updater<\n  T extends ReadonlyPropertyContainer,\n  Key,\n  Current = ValueType<T, Key>,\n  SettersOnly = false,\n  Factory = false\n> = SettersOnly extends true\n  ? ValueType<T, Key> | (Factory extends true ? never : undefined)\n  : IsAny<T> extends true\n  ? NotFunction | UpdateFunction<any, any, any, Factory>\n  :\n      | (ValueType<T, Key> extends Function\n          ? never\n          : ValueType<T, Key> | (Factory extends true ? never : undefined))\n      | UpdateFunction<T, Key, Current, Factory>;\n\ntype UpdaterType<T, SettersOnly = false> = SettersOnly extends true\n  ? T\n  : T extends (...args: any) => infer T\n  ? T\n  : T;\n\ntype BulkUpdateObject<\n  T extends ReadonlyPropertyContainer,\n  SettersOnly = false,\n  Factory = false\n> = T extends MapLike | SetLike | any[]\n  ? {\n      [P in KeyType<T>]: Updater<T, P, ValueType<T, P>, SettersOnly, Factory>;\n    }\n  : { [P in keyof T & KeyType<T>]?: Updater<T, P, T[P], SettersOnly, Factory> };\n\ntype BulkUpdateKeyValue<\n  T extends ReadonlyPropertyContainer,\n  SettersOnly = false,\n  Factory = false,\n  K extends keyof T = keyof T\n> = IsAny<T> extends true\n  ? readonly [any, Updater<T, any, any, SettersOnly, Factory>]\n  : T extends MapLike | SetLike | any[]\n  ? readonly [\n      KeyType<T>,\n      Updater<T, KeyType<T>, ValueType<T, KeyType<T>>, SettersOnly, Factory>\n    ]\n  : K extends any\n  ? readonly [K, Updater<T, KeyType<T>, any, SettersOnly, Factory>]\n  : never;\n\ntype BulkUpdates<\n  T extends ReadonlyPropertyContainer,\n  SettersOnly = false,\n  Factory = false\n> =\n  | BulkUpdateObject<T, SettersOnly, Factory>\n  | Iterable<\n      | BulkUpdateKeyValue<T, SettersOnly, Factory>\n      | BulkUpdateObject<T, SettersOnly, Factory>\n    >\n  | readonly (readonly BulkUpdateKeyValue<T, SettersOnly, Factory>[])[];\n\ntype MergeResult_<Updates> = Updates extends Iterable<\n  infer Item extends readonly [keyof any, any]\n>\n  ? KeyValuePairsToObject<Item>\n  : Updates;\n\ntype MergeResult<T, Updates> = T extends RecordType\n  ? PrettifyIntersection<\n      T &\n        UnionToIntersection<\n          MergeResult_<\n            Updates extends Iterable<infer Updates> ? Updates : Updates\n          >\n        >\n    >\n  : T &\n      UnionToIntersection<\n        MergeResult_<\n          Updates extends Iterable<infer Updates> ? Updates : Updates\n        >\n      >;\n\ntype SetErrorHandler<T extends ReadonlyPropertyContainer | Nullish> = (\n  key: KeyType<T>,\n  currentValue: ValueType<T>,\n  newValue: ValueType<T>,\n  target: T\n) => string | Error;\n\ntype SettableKeyType<T extends PropertyContainer> = T extends readonly any[]\n  ? // `KeyType<T>` won't do.\n    // If this `keyof` constraint is not set TypeScript will only constrain values for readonly tuple items to T[number] and not T[K].\n    keyof T\n  : T extends RecordType\n  ? keyof any\n  : KeyType<T>;\n\ntype SettableValueType<T extends PropertyContainer, K> = K extends KeyType<T>\n  ?\n      | ValueType<T, K>\n      // `undefined` removes elements from maps and sets so also allowed.\n      | (T extends MapLike | SetLike ? undefined : never)\n  : T extends RecordType\n  ? any\n  : never;\n\ntype IsGeneralKey<T, S = keyof any> = S extends T ? true : false;\n\n/** List of keys in T that has undefined values. If Template does not allow undefined values for a key it is excluded from the results. */\ntype UndefinedKeys<\n  T,\n  Template = {},\n  K extends keyof T = keyof T\n> = K extends keyof T\n  ? T[K] extends undefined\n    ? K extends keyof Template\n      ? undefined extends Template[K]\n        ? K\n        : never\n      : K\n    : never\n  : never;\n\ntype AllKeys<T> = T extends infer T ? keyof T : never;\n\ntype AnyValue<T, K> = T extends infer T\n  ? K extends keyof T\n    ? T[K]\n    : never\n  : never;\n\ntype MergeObjects<T> = {\n  [P in AllKeys<T>]: AnyValue<T, P>;\n};\n\ntype KeyValueTupleToRecord<Item> = Item extends readonly [infer K, infer V]\n  ? {\n      [P in K & keyof any]: V;\n    }\n  : Item extends readonly (infer KV)[]\n  ? { [P in KV & keyof any]: KV }\n  : Item extends RecordType\n  ? Item\n  : never;\n\ntype AssignRecord<T, S> = {\n  [P in Exclude<\n    keyof T | keyof S,\n    IsGeneralKey<keyof T | keyof S> extends true ? never : UndefinedKeys<S, T>\n  >]: P extends keyof S\n    ? IsGeneralKey<P> extends true\n      ? AnyValue<S | T, P>\n      : P extends keyof T\n      ? S[P] extends T[P]\n        ? GeneralizeConstants<S[P]> extends T[P]\n          ? GeneralizeConstants<S[P]>\n          : S[P]\n        : never\n      : GeneralizeConstants<S[P]>\n    : P extends keyof T\n    ? T[P]\n    : never;\n};\n\ntype SetOrUpdateFunction<\n  SettersOnly,\n  ErrorHandler = false,\n  Readonly = false\n> = {\n  <\n    T extends\n      | If<Readonly, ReadonlyPropertyContainer, PropertyContainer>\n      | null\n      | undefined,\n    U extends Updater<\n      T extends Nullish ? never : T,\n      K,\n      ValueType<T, K>,\n      SettersOnly\n    >,\n    K extends KeyType<T>\n  >(\n    target: T,\n    key: K,\n    value: U,\n    ...args: ErrorHandler extends true ? [error: SetErrorHandler<T>] : []\n  ): UpdaterType<U>;\n  <\n    T extends\n      | If<Readonly, ReadonlyPropertyContainer, PropertyContainer>\n      | null\n      | undefined,\n    U\n  >(\n    target: T,\n    values: BulkUpdates<T extends Nullish ? never : T, SettersOnly> & U,\n    ...args: ErrorHandler extends true ? [error: SetErrorHandler<T>] : []\n  ): T;\n};\n\nexport const merge = <\n  Target,\n  Values extends readonly IteratorSourceOf<readonly [keyof any, any]>[]\n>(\n  target: Target,\n  ...values: Values\n): MaybeUndefined<Target, MergeResult<Target, Values>> => (\n  forEach(values, (values) =>\n    forEach(values, ([key, value]) => {\n      if (value != null) {\n        if (isPlainObject(target[key]) && isPlainObject(value)) {\n          merge(target[key], value);\n        } else {\n          target[key] = value;\n        }\n      }\n    })\n  ),\n  target as any\n);\n\nconst createSetOrUpdateFunction =\n  <SettersOnly, Error>(\n    setter: (target: any, key: any, value: any, error?: any) => any\n  ): SetOrUpdateFunction<SettersOnly, Error> =>\n  (target: PropertyContainer, key: any, value?: any, error?: any) => {\n    if (!target) return undefined;\n    if (value != undefined) {\n      return setter(target, key, value, error);\n    }\n\n    forEach(key, (item) =>\n      isArray(item)\n        ? setter(target, item[0], item[1])\n        : forEach(item, ([key, value]) => setter(target, key, value))\n    );\n\n    return target;\n  };\n\nexport const assign = createSetOrUpdateFunction<true, false>(setSingle);\nexport const update = createSetOrUpdateFunction<false, false>(updateSingle);\nexport const assignIfUndefined = createSetOrUpdateFunction<false, true>(\n  setSingleIfNotDefined\n);\n\nexport const swap = <T extends PropertyContainer, K extends KeyType<T>>(\n  target: T,\n  key: K,\n  value: ValueType<T, K>\n): ValueType<T, K, \"get\"> => {\n  const current = get(target, key) as any;\n  if (value !== current) setSingle(target, key, value);\n  return current as any;\n};\n\n// #endregion\n\nexport const add = <T extends PropertyContainer<any, boolean>>(\n  target: T,\n  key: KeyType<T>\n) =>\n  target instanceof Set || target instanceof WeakSet\n    ? target.has(key)\n      ? false\n      : (target.add(key), true)\n    : get(target, key) !== assign(target, key, true as any);\n\nexport const has = <T extends ReadonlyPropertyContainer>(\n  target: T,\n  key: KeyType<T>\n) =>\n  hasMethod(target, \"has\")\n    ? target.has(key)\n    : ((target as any).get?.(key) ?? (target as any)[key]) != null;\n\ntype RemoveDeepArgs<\n  T,\n  Current extends any[] = [],\n  Depth extends number = 20\n> = T extends PropertyContainer\n  ? Depth extends 0\n    ? Current\n    :\n        | (Depth extends 20 ? never : Current)\n        | RemoveDeepArgs<\n            ValueType<T>,\n            [...Current, KeyType<T>[] | KeyType<T>],\n            Minus<Depth, 1>\n          >\n  : Current;\n\ntype RemoveDeepValue<\n  T,\n  Args extends any[],\n  ArrayIt = false\n> = T extends PropertyContainer\n  ? ArrayIt extends true\n    ? (ValueType<T> | undefined)[]\n    : Args extends [KeyType<T>[]]\n    ? (ValueType<T> | undefined)[]\n    : Args extends [KeyType<T>]\n    ? ValueType<T> | undefined\n    : Args extends [infer R, ...infer Rest]\n    ? RemoveDeepValue<ValueType<T>, Rest, R extends any[] ? true : ArrayIt>\n    : never\n  : never;\n\ntype KeysArg<T extends PropertyContainer | Nullish> = T extends RecordType\n  ? readonly (keyof T | undefined)[]\n  : readonly (KeyType<T> | undefined)[];\n\nconst clearSingle = (target: any, key: any) => {\n  if ((target ?? key) == null) return undefined;\n\n  let current = get(target, key);\n\n  if (hasMethod(target, \"delete\")) {\n    target.delete(key);\n  } else {\n    delete target[key];\n  }\n  return current;\n};\n\n/**\n * Deletes the specified keys from the target and returns the target.\n */\nexport const del: {\n  <T extends PropertyContainer | undefined, K extends KeysArg<T>>(\n    target: T,\n    ...keys: K\n  ): T extends RecordType ? { [P in Exclude<keyof T, K[number]>]: T[P] } : T;\n} = (target: any, ...keys: any) =>\n  target &&\n  (assign(target, map(keys, (key) => [key, undefined]) as any) as any);\n\n/**\n * Removes one or more values from a property container specified by the provided key or array of keys.\n *\n * If more than one level of key arguments are specified, values will be removed from the property container at the deepest level.\n * If a property container becomes empty along the path of keys, it will be removed from its parent.\n *\n */\nexport const clear = <\n  T extends PropertyContainer | Nullish,\n  Args extends RemoveDeepArgs<T>\n>(\n  target: T,\n  ...keys: Args\n): RemoveDeepValue<T, Args> => {\n  const removed: any[] = [];\n  let array = false;\n\n  const clearStep = (\n    target: any,\n    index: number,\n    parent?: any,\n    parentKey?: any\n  ) => {\n    if (!target) return;\n    const targetKeys = keys[index];\n    if (index === keys.length - 1) {\n      if (isArray(targetKeys)) {\n        array = true;\n        targetKeys.forEach((key) => removed.push(clearSingle(target, key)));\n      } else {\n        removed.push(clearSingle(target, targetKeys));\n      }\n    } else {\n      if (isArray(targetKeys)) {\n        array = true;\n        targetKeys.forEach((key) =>\n          clearStep(get(target, key), index + 1, target, key)\n        );\n      } else {\n        clearStep(get(target, targetKeys), index + 1, target, targetKeys);\n      }\n      if (!count(target) && parent) {\n        remove(parent, parentKey);\n      }\n    }\n  };\n  clearStep(target, 0);\n  return array ? removed : removed[0];\n};\n\n/** Removes all entries from a set or map, and returns them. */\nexport const empty = <S extends SetLike | MapLike | undefined>(\n  target: S\n): MaybeUndefined<S, IteratorItem<S>[]> => {\n  if (!target) return undefined as any;\n\n  const entries = map(target);\n  target.clear();\n  return entries as any;\n};\n\n/**\n * Removes the specified key(s) from a property container and returns their value, or undefined if the container did not have the specified key.\n *\n * The difference between {@link clear} and this function is that it does not consider nested property containers and that arrays will be spliced (as opposed to `clear` where the index will be set to `undefined`).\n */\nexport const remove: {\n  <T extends PropertyContainer | Nullish, K extends KeyType<T> | undefined>(\n    target: T,\n    key: K\n  ): T extends Nullish ? T : ValueType<T, K, \"get\">;\n  <T extends PropertyContainer | Nullish, K extends KeysArg<T>>(\n    target: T,\n    keys: K\n  ): (T extends Nullish ? T : ValueType<T, K[number], \"get\">)[];\n} = (target: PropertyContainer, keys: any) => {\n  if (!target) return undefined;\n\n  if (isArray(keys)) {\n    // Sort array keys descending as they would otherwise not match their offset as the array is spliced along the way.\n    return (\n      isArray(target) && target.length > 1 ? keys.sort((x, y) => y - x) : keys\n    ).map((key) => remove(target, key));\n  }\n\n  return isArray(target)\n    ? keys < target.length\n      ? (target as any[]).splice(keys, 1)[0]\n      : undefined\n    : clearSingle(target, keys);\n};\n\ntype EntryToObject<Item> = Item extends readonly [infer K & keyof any, infer V]\n  ? {\n      [P in K & keyof any]: V;\n    }\n  : never;\n\ntype EntriesToObject<Entries> = UnionToIntersection<\n  InlinePropertyDescriptors<\n    Entries extends Nullish | boolean\n      ? {}\n      : Entries extends readonly [\n          Partial<Readonly<PropertyDescriptor>>,\n          ...infer Rest\n        ]\n      ? EntriesToObject<Rest[number]>\n      : Entries extends readonly [infer Item, ...infer Rest]\n      ? EntryToObject<Item> & EntriesToObject<Rest>\n      : Entries extends readonly (infer Items)[]\n      ? EntryToObject<Items>\n      : Entries\n  >\n>;\n\ntype InlinePropertyDescriptors<T> = {\n  [P in keyof T]: T[P] extends () => infer V | { value: infer V }\n    ? V\n    : T[P] extends { get(): infer V }\n    ? V\n    : T[P];\n};\n\ntype PropertyList =\n  | boolean\n  | null\n  | undefined\n  | readonly [defaults: Partial<PropertyDescriptor>, ...items: PropertyList[]]\n  | readonly (readonly [key: keyof any, value: any])[]\n  | RecordType;\n\nexport const define: {\n  <T, P extends readonly PropertyList[]>(\n    target: T,\n    ...properties: P\n  ): (T extends Function ? T : {}) &\n    PrettifyIntersection<T & EntriesToObject<P[number]>>;\n} = (target: any, ...args: readonly any[]) => {\n  const add = (arg: any, defaults?: any) => {\n    if (!arg) return;\n    let properties: readonly any[];\n    if (isArray(arg)) {\n      if (isPlainObject(arg[0])) {\n        // Tuple with the first item the defaults and the next the definitions with those defaults,\n        // ([{enumerable: false, ...}, ...])\n        (arg as any[]).splice(1).forEach((items) => add(items, arg[0]));\n        return;\n      }\n      // ([[key1, value1], [key2, value2], ...])\n      properties = arg;\n    } else {\n      // An object.\n      properties = map(arg)!;\n    }\n\n    properties.forEach(([key, value]) =>\n      Object.defineProperty(target, key, {\n        configurable: false,\n        enumerable: true,\n        writable: false,\n        ...defaults,\n        ...(isPlainObject(value) && (\"get\" in value || \"value\" in value)\n          ? value\n          : isFunction(value) && !value.length\n          ? { get: value }\n          : { value }),\n      })\n    );\n  };\n\n  args.forEach((arg) => add(arg));\n  return target as any;\n};\n\ntype PropertySelector<T> =\n  | keyof T\n  | {\n      [P in keyof T]?: PropertySelector<T[P]>;\n    }\n  | readonly (keyof T)[];\n\ntype SinglePickResult<T, Selected> = Selected extends\n  | (string & infer K)\n  | (infer K)[]\n  ? unknown extends K\n    ? T\n    : { [P in keyof T & K]: T[P] }\n  : keyof Selected extends infer Keys\n  ? {\n      [P in Keys & keyof any & keyof Selected]: P extends keyof T\n        ? Selected[P] extends true\n          ? T[P]\n          : SinglePickResult<T[P], Selected[P]>\n        : never;\n    }\n  : never;\n\ntype PickResults<T, Selectors> = PrettifyIntersection<\n  Selectors extends [infer Item, ...infer Rest]\n    ? unknown extends Item\n      ? T\n      : SinglePickResult<T, Item> & SinglePickResult<T, Rest>\n    : never\n>;\n\nexport const pick = <T, Selectors extends PropertySelector<T>[], U>(\n  source: T | (null | (undefined & U)),\n  ...args: Selectors\n): U extends undefined ? undefined : PickResults<T, Selectors> => {\n  if (source === undefined) return undefined as any;\n\n  return Object.fromEntries(\n    args\n      .flatMap((arg) =>\n        isObject(arg)\n          ? isArray(arg)\n            ? arg.map((args) =>\n                isArray(args)\n                  ? args.length === 1\n                    ? [args[0], source![args[0]]]\n                    : pick(source![args[0]], ...(args[1] as any[]))\n                  : [args, source![args]]\n              )\n            : Object.entries(args).map(([key, value]) => [\n                key,\n                value === true ? source![key] : pick(source![key], value),\n              ])\n          : ([[arg, source![arg]]] as any)\n      )\n      .filter((arg) => arg[1] != null)\n  ) as any;\n};\n\nexport type Wrapped<T> = T | (() => T);\n\nexport type Unwrap<T> = T extends () => infer R ? R : T;\n\nexport const unwrap: {\n  <T>(value: Wrapped<T>): T;\n} = (value: Wrapped<any>): any => (isFunction(value) ? value() : value);\n\nexport const unlock = <T extends ReadonlyPropertyContainer>(\n  readonly: T\n): T extends ReadonlyMapLike<infer K, infer V>\n  ? MapLike<K, V>\n  : T extends ReadonlySetLike<infer T>\n  ? SetLike<T>\n  : T => readonly as any;\n\nexport const wrap = <T>(\n  original: T,\n  wrap: (\n    original: T extends (...args: any) => any ? T : () => T,\n    ...args: T extends (...args: infer Args) => any ? Args : []\n  ) => T extends (...args: any) => infer R ? R : T\n): T =>\n  original == null\n    ? original\n    : isFunction(original)\n    ? (...args: any) => wrap(original as any, ...args)\n    : (wrap as any)(() => original as any);\n\n/** Creates a clone of an object (including arrays, sets and maps) at the specified depth. -1 means \"any depth\". */\nexport const clone = <T>(value: T, depth = -1): T =>\n  isArray(value)\n    ? depth\n      ? value.map((value) => clone(value, depth - 1))\n      : [...value]\n    : isPlainObject(value)\n    ? depth\n      ? obj(value as any, ([k, v]) => [k, clone(v, depth - 1)])\n      : { ...value }\n    : isSet(value)\n    ? new Set<any>(\n        depth\n          ? (map as any)(value, (value: any) => clone(value, depth - 1))\n          : value\n      )\n    : isMap(value)\n    ? new Map<any, any>(\n        depth\n          ? (map as any)(value, (value: any) =>\n              // Does not clone keys.\n              [value[0], clone(value[1], depth - 1)]\n            )\n          : value\n      )\n    : (value as any);\n\n/**\n * Very much like `Array.push` except it accepts anything with a `push ` method  (including non-generic overloads),\n * and returns the target so chaining is easier. Suitable for tight minification.\n */\nexport const push = <T extends { push: (...args: any) => any } | Nullish>(\n  target: T,\n  ...items: MethodOverloads<T, \"push\">[0]\n): T => target?.push(...(items as any))!;\n\n/**\n * Very much like `Array.pop` except it accepts anything with a `pop` method.\n * (Included or the sake of generality since we have {@link push}). Suitable for tight minification.\n */\nexport const pop = <T extends { pop(): R } | undefined, R>(\n  target: T\n): MaybeUndefined<T, R> => target?.pop() as any;\n\n/**\n * Very much like `Array.unshift` except it accepts anything with a `push ` method  (including non-generic overloads),\n * and returns the target so chaining is easier. Suitable for tight minification\n */\nexport const unshift = <T extends { unshift: (...args: any) => any } | Nullish>(\n  target: T,\n  ...items: MethodOverloads<T, \"unshift\">[0]\n): T => target?.unshift(...(items as any))!;\n\n/**\n * Very much like `Array.shift` except it accepts anything with a `shift` method.\n * (Included or the sake of generality since we have {@link unshift}). Suitable for tight minification. */\nexport const shift = <T extends { shift(): R } | undefined, R>(\n  target: T\n): MaybeUndefined<T, R> => target?.shift() as any;\n\n/**\n * Calculates the difference between the current version of an object, and the changed values specified.\n * If an updated property is numeric, the delta will be the difference between the updated and current number.\n * If an updated property is the same as the current value, it will not be included in the diff result,\n * otherwise this algorithm is no more sophisticated than just returning the new value in the diff (e.g. nothing special about strings).\n *\n * @returns A tuple with the first element being the differences between the updates and the current version,\n *  and the second element a clone of the current value with the changes applied.\n *  The latter should be passed as the second argument, next time the diff is calculated.\n */\nexport const diff = <T>(\n  updated: T,\n  previous: T | undefined\n): [delta: T, current: T] | undefined => {\n  if (!updated) return undefined;\n  if (!isPlainObject(previous)) return [updated, updated];\n\n  const delta: any = {};\n  let patchedValue: any;\n  let previousValue: number | undefined;\n\n  // If there are changes, this will be a clone of the previous value with the delta changes applied.\n  let patched: any;\n\n  if (isPlainObject(updated)) {\n    forEach(updated, ([key, value]) => {\n      if (value === previous[key]) {\n        // No changes.\n        return;\n      }\n\n      if (isPlainObject((patchedValue = value))) {\n        // deltaValue will be undefined if there are no changed in the child object.\n        if (!(value = diff(value, previous[key]))) {\n          return;\n        }\n        [value, patchedValue] = value;\n      } else if (isNumber(value) && isNumber(previousValue)) {\n        value = (patchedValue = value) - previousValue;\n      }\n\n      delta[key] = value;\n      (patched ??= clone(previous))[key] = patchedValue;\n    });\n    return patched ? [delta, patched] : undefined;\n  }\n\n  return undefined;\n};\n","import {\n  F,\n  MAX_SAFE_INTEGER,\n  MaybePromise,\n  T,\n  isBoolean,\n  isFunction,\n  isNotFalse,\n  isTrue,\n  promise,\n  tryCatchAsync,\n} from \".\";\n\nexport const MILLISECOND = 1;\nexport const SECOND = MILLISECOND * 1000;\nexport const MINUTE = SECOND * 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\nexport const FOREVER = MAX_SAFE_INTEGER;\n\nexport let now: (round?: boolean) => number =\n  typeof performance !== \"undefined\"\n    ? (round = T) =>\n        round ? Math.trunc(now(F)) : performance.timeOrigin + performance.now()\n    : Date.now;\n\nexport type Timer = {\n  (toggle?: boolean, reset?: boolean): number;\n};\n\nexport const reset = Symbol();\n\nexport const createTimer = (\n  started = true,\n  timeReference = () => now()\n): Timer => {\n  let t0: number = +started * timeReference();\n  let elapsed = 0;\n  let capturedElapsed: number;\n  return (toggle = started, reset?: boolean) => {\n    capturedElapsed = started\n      ? (elapsed += -t0 + (t0 = timeReference()))\n      : elapsed;\n    reset && (elapsed = 0);\n\n    (started = toggle) && (t0 = timeReference());\n\n    return capturedElapsed;\n  };\n};\n\n/**\n * The callback invoked when a {@link Clock} ticks.\n * If it returns `false` the clock will stop. Any other return value has no effect.\n */\nexport type ClockCallback = (\n  elapsed: number,\n  delta: number\n) => MaybePromise<any>;\n\nexport interface Clock {\n  readonly active: boolean;\n  readonly busy: boolean;\n  restart(frequency?: number, callback?: ClockCallback): Clock;\n  toggle(start: boolean, trigger?: boolean): Clock;\n  trigger(skipQueue?: boolean): Promise<boolean>;\n}\n\nexport interface ClockSettings {\n  frequency?: number;\n  queue?: boolean;\n  paused?: boolean;\n  trigger?: boolean;\n  once?: boolean;\n  callback?: ClockCallback;\n  raf?: boolean;\n}\n\n/** Light-weight version of {@link clock}. The trigger and cancel overloads returns true to enable chaining like `timeout(false)&&...` */\nexport const createTimeout = (\n  defaultTimeout = 0\n): {\n  (callback: () => void, timeout?: number): void;\n  (cancel: false): true;\n  (trigger: true): true;\n  (): boolean;\n} => {\n  let handle: number;\n  let currentCallback: (() => void) | undefined;\n\n  const stickyTimeout = (arg?: any, timeout = defaultTimeout) => {\n    if (arg === undefined) {\n      return !!currentCallback;\n    }\n    clearTimeout(handle);\n    if (isBoolean(arg)) {\n      arg && (timeout < 0 ? isNotFalse : isTrue)(currentCallback?.())\n        ? stickyTimeout(currentCallback)\n        : (currentCallback = undefined);\n    } else {\n      currentCallback = arg;\n      handle = setTimeout(\n        () => stickyTimeout(true, timeout),\n        timeout < 0 ? -timeout : timeout\n      );\n    }\n  };\n  return stickyTimeout as any;\n};\n\nexport const clock: {\n  (callback: ClockCallback, frequency: number): Clock;\n  (settings: ClockSettings): Clock;\n} = (\n  callbackOrSettings: ClockCallback | ClockSettings,\n  frequency = 0\n): Clock => {\n  const settings = isFunction(callbackOrSettings)\n    ? {\n        frequency,\n        callback: callbackOrSettings,\n      }\n    : callbackOrSettings;\n\n  let {\n    queue = true,\n    paused = false,\n    trigger = false,\n    once = false,\n    callback = () => {},\n    raf,\n  } = settings;\n  frequency = settings.frequency ?? 0;\n\n  let timeoutId = 0;\n  const mutex = promise(true).resolve();\n  const timer = createTimer(!paused);\n  let delta = timer();\n\n  const outerCallback = async (skipQueue?: boolean) => {\n    if (!timeoutId || (!queue && mutex.pending && skipQueue !== true)) {\n      return false;\n    }\n    (instance as any).busy = true;\n    if (skipQueue !== true) {\n      while (mutex.pending) {\n        await mutex;\n      }\n    }\n\n    !skipQueue && mutex.reset();\n\n    if (\n      (await tryCatchAsync(\n        () => callback!(timer(), -delta + (delta = timer())),\n        false,\n        () => !skipQueue && mutex.resolve()\n      )) === false ||\n      frequency <= 0 ||\n      once\n    ) {\n      reset(false);\n    }\n\n    return !((instance as any).busy = false);\n  };\n\n  const updateTimeout = () =>\n    (timeoutId = setTimeout(\n      () => (raf ? requestAnimationFrame(timeoutCallback) : timeoutCallback()),\n      frequency < 0 ? -frequency : frequency\n    ) as any);\n\n  const timeoutCallback = () => {\n    instance.active && outerCallback();\n    instance.active && updateTimeout();\n  };\n\n  const reset = (start: boolean, resetTimer = !start) => {\n    timer(start, resetTimer);\n    clearTimeout(timeoutId);\n    (instance as any).active = !!(timeoutId = start ? updateTimeout() : 0);\n    return instance;\n  };\n\n  const instance: Clock = {\n    active: false,\n    busy: false,\n    restart: (newFrequency, newCallback) => {\n      frequency = newFrequency ?? frequency;\n      callback = newCallback ?? callback;\n      return reset(true, true);\n    },\n    toggle: (start, trigger) =>\n      start !== instance.active\n        ? start\n          ? trigger\n            ? (reset(true), instance.trigger(), instance)\n            : reset(true)\n          : reset(false)\n        : instance,\n    trigger: async (skipQueue) =>\n      (await outerCallback(skipQueue)) && (reset(instance.active), true),\n  };\n\n  return instance.toggle(!paused, trigger);\n};\n","import {\n  If,\n  MaybePromise,\n  MaybeUndefined,\n  Nullish,\n  TogglePromise,\n  Unwrap,\n  Wrapped,\n  createTimer,\n  isFunction,\n  now,\n  throwError,\n  tryCatchAsync,\n  undefined,\n  unwrap,\n} from \".\";\n\nexport class ResettablePromise<T = void, E = any> implements PromiseLike<T> {\n  private _promise: OpenPromise<T>;\n\n  constructor() {\n    this.reset();\n  }\n\n  public get value() {\n    return this._promise.value;\n  }\n  public get error() {\n    return this._promise.error;\n  }\n  public get pending() {\n    return this._promise.pending;\n  }\n\n  public resolve(value: T, ifPending = false) {\n    this._promise.resolve(value, ifPending);\n    return this;\n  }\n\n  public reject(value?: E, ifPending = false) {\n    this._promise.reject(value, ifPending);\n    return this;\n  }\n\n  public reset() {\n    this._promise = new OpenPromise<T>();\n    return this;\n  }\n\n  public signal(value: T) {\n    this.resolve(value);\n    this.reset();\n    return this;\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | undefined\n      | null\n  ): PromiseLike<TResult1 | TResult2> {\n    return this._promise.then(onfulfilled, onrejected);\n  }\n}\n\nexport class OpenPromise<T = void, E = any> implements PromiseLike<T> {\n  private readonly _promise: Promise<T>;\n\n  public readonly resolve: (value: T, ifPending?: boolean) => this;\n  public readonly reject: (reason: E | undefined, ifPending?: boolean) => this;\n  public readonly value: (T extends void ? true : T) | undefined;\n  public readonly error: E | true;\n  public pending = true;\n\n  constructor() {\n    let captured: any[];\n    this._promise = new Promise((...args: any[]) => {\n      captured = args.map((inner, i) => (value: any, ifPending: boolean) => {\n        if (!this.pending) {\n          if (ifPending) return this;\n          throw new TypeError(\"Promise already resolved/rejected.\");\n        }\n\n        (this as any).pending = false;\n        (this as any)[i ? \"error\" : \"value\"] = value === undefined || value;\n        inner(value);\n        return this;\n      });\n    });\n\n    [this.resolve, this.reject] = captured!;\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined\n  ): Promise<TResult1 | TResult2> {\n    return this._promise.then(onfulfilled, onrejected);\n  }\n}\n\nexport interface Lock {\n  /**\n   * Wait until the lock is available. If a timeout is not specified or negative, the calling thread will wait indefinitely.\n   * If a owner ID is specified the lock will be reentrant for that ID.\n   */\n  <Ms extends number | undefined = undefined>(\n    timeout?: Ms,\n    ownerId?: string\n  ): Promise<(() => void) | If<Ms, undefined>>;\n\n  /**\n   * Performs the specified action when the lock becomes available.\n   * If a timeout is not specified or negative, the calling thread will wait indefinitely.\n   * If a owner ID is specified the lock will be reentrant for that ID.\n   */\n  <T, Ms extends number | undefined = undefined>(\n    action: () => MaybePromise<T>,\n    timeout?: Ms,\n    ownerId?: string\n  ): Promise<T | If<Ms, undefined>>;\n}\n\nexport type LockState = [owner: string | boolean, expires?: number];\n\nexport const createLock = (timeout?: number): Lock => {\n  const semaphore = promise<LockState | boolean>(true);\n  let state: LockState | undefined;\n\n  const wait = async (\n    arg1?: (() => any) | number,\n    arg2?: number | string,\n    arg3?: string\n  ) => {\n    if (isFunction(arg1)) {\n      const release = await wait(arg2 as number, arg3);\n      return release ? await tryCatchAsync(arg1, true, release) : undefined;\n    }\n    const ownerId = arg2 as string;\n\n    let ms = arg1 as number;\n    let renewInterval = 0;\n    while (state && ownerId !== state[0] && (state[1] ?? 0)! < now()) {\n      if (\n        (await (ms >= 0 ? race(delay(ms), semaphore) : semaphore)) === undefined\n      ) {\n        return undefined;\n      }\n      // If the above did not return undefined we got the semaphore.\n    }\n\n    const release = () => {\n      clearTimeout(renewInterval);\n      state = undefined;\n      semaphore.signal(false);\n    };\n\n    const renew = () => {\n      state = [ownerId ?? true, timeout ? now() - timeout : undefined];\n      timeout &&\n        (renewInterval = setTimeout(() => state && renew(), timeout / 2));\n    };\n    renew();\n\n    return release;\n  };\n  return wait;\n};\n\nexport const defer = (f: VoidFunction, ms = 0) =>\n  ms > 0 ? setTimeout(f, ms) : window.queueMicrotask(f);\n\nexport const delay = <\n  Delay extends number | Nullish,\n  T extends Wrapped<any> = void\n>(\n  ms: Delay,\n  value?: T\n): MaybeUndefined<Delay, TogglePromise<Unwrap<T>, true>> =>\n  ms == null || isFinite(ms)\n    ? !ms || ms <= 0\n      ? unwrap(value)!\n      : new Promise<any>((resolve) =>\n          setTimeout(async () => resolve(await unwrap(value)), ms)\n        )\n    : (throwError(`Invalid delay ${ms}.`) as any);\n\nexport const promise: {\n  <T = void>(resettable?: false): OpenPromise<T>;\n  <T = void>(resettable: true): ResettablePromise<T>;\n} = (resettable?: boolean) =>\n  resettable ? new ResettablePromise() : (new OpenPromise() as any);\n\ntype UnwrapPromiseArg<T> = T extends () => infer T ? Awaited<T> : Awaited<T>;\ntype UnwrapPromiseArgs<T extends any[]> = T extends readonly [infer Arg]\n  ? [UnwrapPromiseArg<Arg>]\n  : T extends readonly [infer Arg, ...infer Rest]\n  ? [UnwrapPromiseArg<Arg>, ...UnwrapPromiseArgs<Rest>]\n  : [];\n\nexport type AsyncValue<T> =\n  | undefined\n  | T\n  | PromiseLike<T>\n  | (() => T)\n  | (() => PromiseLike<T>);\n\nexport const waitAll = <Args extends AsyncValue<any>[]>(\n  ...args: Args\n): Promise<UnwrapPromiseArgs<Args>> =>\n  Promise.all(args.map((arg) => (isFunction(arg) ? arg() : arg))) as any;\n\nexport const race = <Args extends AsyncValue<any>[]>(\n  ...args: Args\n): Promise<UnwrapPromiseArgs<Args>[number]> =>\n  Promise.race(args.map((arg) => (isFunction(arg) ? arg() : arg))) as any;\n","import { filter, reduce } from \".\";\n\nexport type Rebinder = () => boolean;\nexport type Unbinder = () => boolean;\nexport type Binders = [unbind: Unbinder, rebind: Rebinder];\n\nexport type SourceListener<Args extends readonly any[]> = (\n  ...args: Args\n) => void;\nexport type Listener<Args extends readonly any[]> = (\n  ...args: [...args: Args, unbind: Unbinder]\n) => void;\n\nexport const createEventBinders = <Args extends any[]>(\n  listener: Listener<Args>,\n  attach: (listener: SourceListener<Args>) => void,\n  detach: (listener: SourceListener<Args>) => void\n): Binders => {\n  let bound = false;\n\n  const outerListener = (...args: Args) => listener(...args, unbind);\n\n  const unbind = () =>\n    bound !== (bound = false) && (detach(outerListener), true);\n\n  const rebind = () =>\n    bound !== (bound = true) && (attach(outerListener), true);\n\n  rebind();\n  return [unbind, rebind];\n};\n\nexport const joinEventBinders = (\n  ...binders: (Binders | undefined)[]\n): Binders => (\n  (binders = filter(binders)),\n  [\n    () => reduce(binders, (changed, binder) => binder![0]() || changed, false),\n    () => reduce(binders, (changed, binder) => binder![1]() || changed, false),\n  ]\n);\n\nexport type EventHandler<Args extends readonly any[]> = (\n  ...payload: Args\n) => void;\n\nexport const createEvent = <Args extends readonly any[]>(): [\n  listen: (listener: Listener<Args>, triggerCurrent?: boolean) => Binders,\n  dispatch: (...payload: Args) => void\n] => {\n  const listeners = new Set<SourceListener<Args>>();\n  let dispatchedArgs: Args | undefined;\n  return [\n    (handler, trigger) => {\n      const binders = createEventBinders(\n        handler as any,\n        (handler) => listeners.add(handler as any),\n        (handler) => listeners.delete(handler as any)\n      );\n      trigger &&\n        dispatchedArgs &&\n        (handler as any)(...dispatchedArgs, binders[0]);\n      return binders;\n    },\n    (...payload) => (\n      (dispatchedArgs = payload),\n      listeners.forEach((handler) => handler(...payload))\n    ),\n  ];\n};\n\nexport type ChainedEventHandler<Args extends any[], T> = (\n  ...args: [\n    ...args: Args,\n    next: {\n      (): T;\n      (...args: Args): T;\n    },\n    unbind: Unbinder\n  ]\n) => T;\n\ntype LinkedNode<T> = [\n  prev: LinkedNode<T> | undefined,\n  item: T,\n  next: LinkedNode<T> | undefined\n];\n\nexport const createChainedEvent = <T = void, Args extends any[] = []>(): [\n  register: (\n    handler: ChainedEventHandler<Args, T>,\n    priority?: number\n  ) => Binders,\n  invoke: (...args: Args) => T | undefined\n] => {\n  type Item = [\n    handler: ChainedEventHandler<Args, T>,\n    priority: number,\n    binders: Binders\n  ];\n  type Node = LinkedNode<Item>;\n  let head: Node | undefined;\n  let tail: Node | undefined;\n  let next: Node | undefined;\n\n  const register = (\n    handler: ChainedEventHandler<Args, T>,\n    // Make sure that handler gets rebound at their previous priority without jumping discrete increments.\n    // (It is deseriable to be able to specfiy priority 0 or  10 without having to think about how many 0s there are)\n    priority = (tail?.[1][1] ?? 0) + 0.000001\n  ) => {\n    const registerNode = (node?: Node) => {\n      let bound = true;\n      node ??= [\n        undefined,\n        [\n          handler,\n          priority,\n          [\n            () => {\n              if (!bound) return false;\n              node![0] ? (node![0][2] = node![2]) : (head = node![2]);\n              node![2] ? (node![2][0] = node![0]) : (tail = node![0]);\n              node![0] = node![2] = undefined;\n              return !(bound = false);\n            },\n            () => (bound ? false : (registerNode(node), (bound = true))),\n          ],\n        ],\n        undefined,\n      ];\n      next = head;\n      if (!next) {\n        head = tail = node;\n      } else if (priority >= tail![1][1]) {\n        node[0] = tail;\n        tail = tail![2] = node;\n      } else {\n        // INV: priority < tail.priority, so next will be non-null after loop;\n        while (next![1][1]! <= priority) {\n          next = next[2]!;\n        }\n\n        (node[0] = (node[2] = next)[0]) ? (node[0][2] = node) : (head = node);\n        next[0] = node;\n      }\n\n      return node[1][2];\n    };\n    return registerNode();\n  };\n\n  const invoke = (node: Node | undefined, args: Args) => (\n    (next = node?.[2]),\n    node\n      ? (node[1][0](\n          ...args,\n          (...nextArgs: Args) =>\n            invoke(next!, nextArgs.length ? nextArgs : args),\n          node[1][2][0]\n        ) as any)\n      : undefined\n  );\n\n  return [register, (...args) => invoke(head, args)];\n};\n","import {\r\n  IteratorAction,\r\n  IteratorSource,\r\n  MINUTE,\r\n  MaybeUndefined,\r\n  Nullish,\r\n  filter,\r\n  forEach,\r\n  isArray,\r\n  isBoolean,\r\n  isFunction,\r\n  isIterable,\r\n  isNumber,\r\n  isObject,\r\n  isString,\r\n  map,\r\n  push,\r\n  replace,\r\n  round,\r\n  undefined,\r\n} from \".\";\r\n\r\nexport const changeCase = <S extends string | null | undefined>(\r\n  s: S,\r\n  upper: boolean\r\n): S => (s == null ? s : upper ? s.toUpperCase() : s.toLowerCase()) as S;\r\n\r\nexport const changeIdentifierCaseStyle = (\r\n  identifier: string,\r\n  type: \"camel\" | \"pascal\" | \"kebab\" | \"snake\"\r\n) =>\r\n  identifier.replace(\r\n    /([_-]*)(\\$*(?:[A-Z]+|[a-z]))([a-z0-9]*)/g,\r\n    (_, underscores, initial, rest, index) =>\r\n      (underscores && (!index || type === \"kebab\" || type === \"snake\")\r\n        ? underscores.replace(/./g, type === \"snake\" ? \"-\" : \"_\")\r\n        : \"\") +\r\n      ((index && (type === \"kebab\" || type === \"snake\") && !underscores\r\n        ? type === \"snake\"\r\n          ? \"-\"\r\n          : \"_\"\r\n        : \"\") +\r\n        changeCase(initial, type === \"pascal\" || (type === \"camel\" && index)) +\r\n        changeCase(\r\n          type === \"kebab\" || type === \"snake\"\r\n            ? rest.replace(\r\n                /(?<=\\D)\\d|(?<=\\d)\\D/g,\r\n                type === \"kebab\" ? \"_$&\" : \"-$&\"\r\n              )\r\n            : rest,\r\n          false\r\n        ))\r\n  );\r\n\r\nexport type EnumerationSeparators = string | [last: string, other?: string];\r\n\r\n/**\r\n * Creates a string enumerating a list of value given a separator, optionally using a different separator between the last two items.\r\n *\r\n * @param values - The list of items to enumerator.\r\n * @param separator - The separator to use (defaults to \", \"). If given a tuple, the first item is the last separator without spaces.\r\n * The second item may optionally specify another separator than the default (\", \").\r\n *\r\n *\r\n * Useful for enumerations like \"item1, item2 and item 3\" (`separate([\"item1\", \"item2\", \"item3\"], [\"and\"])`).\r\n */\r\nexport const enumerate = (\r\n  values: any[] | undefined,\r\n  separator: EnumerationSeparators = [\"and\", \", \"]\r\n) =>\r\n  !values\r\n    ? undefined\r\n    : (values = map(values)).length === 1\r\n    ? values[0]\r\n    : isArray(separator)\r\n    ? [\r\n        values.slice(0, -1).join(separator[1] ?? \", \"),\r\n        \" \",\r\n        separator[0],\r\n        \" \",\r\n        values[values.length - 1],\r\n      ].join(\"\")\r\n    : values.join(separator ?? \", \");\r\n\r\n/**\r\n * Pluralizes a noun using standard English rules.\r\n * It is not very smart, so if the plural form is not just adding an \"s\" in the end unless the singular form already ends with \"s\",\r\n * it must be specified manually.\r\n *\r\n * @param singular - The singular form of the noun\r\n * @param n - The number of items that decides if the noun should be pluralized. If given an array the number will be postfixed.\r\n * @param plural - The plural form if it is different from adding an \"s\" to the singular form.\r\n * @returns The noun, pluralized if needed.\r\n */\r\nexport const pluralize = <\r\n  T extends string | Nullish,\r\n  N extends number | Nullish,\r\n  Plural extends string = string\r\n>(\r\n  singular: T,\r\n  n: N | [count: N],\r\n  plural?: Plural\r\n): T extends Nullish ? undefined : N extends Nullish ? undefined : string =>\r\n  singular == null\r\n    ? (undefined as any)\r\n    : isArray(n)\r\n    ? (n = n[0]) == null\r\n      ? undefined\r\n      : n + \" \" + pluralize(singular, n, plural)\r\n    : n == null\r\n    ? undefined!\r\n    : n === 1\r\n    ? singular\r\n    : plural ?? singular + \"s\";\r\n\r\nlet ansiSupported = true;\r\n\r\n/** Enables or disables ANSI formatting in console output. */\r\nexport const toggleAnsi = (toggle = true) => (ansiSupported = toggle);\r\n\r\n/**\r\n * Can colorize text using ANSI escape sequences.\r\n * See e.g. https://developer.chrome.com/docs/devtools/console/format-style for options.\r\n */\r\nexport const ansi = <Buffer extends string[] | undefined = undefined>(\r\n  value: string | string[],\r\n  ps: string | number,\r\n  buffer?: Buffer\r\n): Buffer extends undefined ? string : string[] =>\r\n  buffer\r\n    ? (ansiSupported && push(buffer, \"\\x1B[\", ps, \"m\"),\r\n      isArray(value) ? push(buffer, ...value) : push(buffer, value),\r\n      ansiSupported && push(buffer, \"\\x1B[m\"),\r\n      buffer)\r\n    : (ansi(value, ps, []).join(\"\") as any);\r\n\r\nconst indent = (buffer: string[], n: number, ...values: string[]) => (\r\n  push(buffer, \"  \".repeat(n), ...values), buffer\r\n);\r\nconst br = (buffer: string[], indents = 0) => (\r\n  indents > 0 && indent(buffer, indents), push(buffer, \"\\n\"), buffer\r\n);\r\n\r\nconst prettyPrint = (\r\n  value: any,\r\n  buffer: string[] = [],\r\n  indents = 0,\r\n  terminator = \"\"\r\n) => {\r\n  const wrap = (\r\n    start: string,\r\n    end: string,\r\n    content: (buffer: string[]) => void\r\n  ) => {\r\n    ansi(start, 90, buffer);\r\n    const subBuffer: string[] = [];\r\n    content(subBuffer);\r\n    subBuffer.length &&\r\n      (br(buffer, indents), push(buffer, ...subBuffer)) &&\r\n      indent(buffer, indents);\r\n\r\n    ansi(end, 90, buffer);\r\n  };\r\n\r\n  if (value == null) {\r\n    ansi(value === undefined ? \"(undefined)\" : \"(null)\", \"37;2\", buffer);\r\n  } else if (isIterable(value)) {\r\n    wrap(\"[\", \"]\", (buffer) =>\r\n      forEach(\r\n        value,\r\n        (value) => (\r\n          indent(buffer, indents),\r\n          prettyPrint(value, buffer, indents + 1, \",\\n\")\r\n        )\r\n      )\r\n    );\r\n  } else if (isObject(value)) {\r\n    wrap(\"{\", \"}\", (buffer) =>\r\n      forEach(\r\n        value,\r\n        ([key, value]) => (\r\n          indent(buffer, indents + 1),\r\n          ansi([\"\" + (key as any), \":\"], \"90;3\", buffer),\r\n          push(buffer, \" \"),\r\n          prettyPrint(value, buffer, indents + 1, \",\\n\")\r\n        )\r\n      )\r\n    );\r\n  } else if (isString(value)) {\r\n    ansi(value, 36, buffer);\r\n  } else if (isNumber(value) || isBoolean(value)) {\r\n    ansi(\"\" + value, 33, buffer);\r\n  } else {\r\n    push(buffer, value);\r\n  }\r\n  terminator && push(buffer, terminator);\r\n  return buffer;\r\n};\r\n\r\ntype UppercaseLetter =\r\n  | \"A\"\r\n  | \"B\"\r\n  | \"C\"\r\n  | \"D\"\r\n  | \"E\"\r\n  | \"F\"\r\n  | \"G\"\r\n  | \"H\"\r\n  | \"I\"\r\n  | \"J\"\r\n  | \"K\"\r\n  | \"L\"\r\n  | \"M\"\r\n  | \"N\"\r\n  | \"O\"\r\n  | \"P\"\r\n  | \"Q\"\r\n  | \"R\"\r\n  | \"S\"\r\n  | \"T\"\r\n  | \"U\"\r\n  | \"V\"\r\n  | \"W\"\r\n  | \"X\"\r\n  | \"Y\"\r\n  | \"Z\";\r\n\r\n/**\r\n * This is intended for prettifying enum names (like ServerWrite becomes 'server-write'), alas it does currently not work with\r\n * ts-json-schema-generator. Kept in the hope this will be supported one day.\r\n */\r\nexport type SnakeCase<\r\n  S extends string | Nullish,\r\n  First = true\r\n> = S extends Nullish\r\n  ? undefined\r\n  : S extends `${infer P}${infer Rest}`\r\n  ? [P, First] extends [UppercaseLetter, false]\r\n    ? `-${Lowercase<P>}${SnakeCase<Rest, false>}`\r\n    : `${Lowercase<P>}${SnakeCase<Rest, false>}`\r\n  : S extends string\r\n  ? Lowercase<S>\r\n  : undefined;\r\n\r\nexport const snakeCase = <S extends string | Nullish>(\r\n  s: S\r\n): MaybeUndefined<S, SnakeCase<S>> =>\r\n  replace(s, /(.)?([A-Z])/g, (_, prev, p) =>\r\n    ((prev ? prev + \"-\" : \"\") + p).toLowerCase()\r\n  ) as any;\r\n\r\nexport const quote = <T>(item: T, quoteChar = \"'\"): MaybeUndefined<T, string> =>\r\n  item == null ? (undefined as any) : quoteChar + item + quoteChar;\r\n\r\nexport const ellipsis = <T extends string | Nullish>(\r\n  text: T,\r\n  maxLength: number\r\n): T =>\r\n  text && ((text.length > maxLength ? text.slice(0, -1) + \"…\" : text) as any);\r\n\r\nexport const join: {\r\n  /**\r\n   *  Joins the specified items with a separator (default is \"\").\r\n   *  If the source is a string it will be returned as is.\r\n   *\r\n   *  The value `false` will be omitted to help syntax like `[condition && \"yes\"]`.   .\r\n   */\r\n  <S extends IteratorSource | string>(\r\n    source: S,\r\n    separator?: string | readonly [string, string]\r\n  ): MaybeUndefined<S, string>;\r\n\r\n  /**\r\n   * Joins the projection of the specified items with a separator (default is \"\").\r\n   * If the source is a string it will be considered an array with the string as its single element.\r\n   */\r\n  <S extends IteratorSource | string>(\r\n    source: S,\r\n    projection: IteratorAction<S extends string ? [string] : S>,\r\n    separator?: EnumerationSeparators\r\n  ): MaybeUndefined<S, string>;\r\n} = (source: any, projection: any, sep?: any) =>\r\n  source == null\r\n    ? undefined\r\n    : isFunction(projection)\r\n    ? enumerate(\r\n        map(isString(source) ? [source] : source, projection),\r\n        sep ?? \"\"\r\n      )\r\n    : isString(source)\r\n    ? source\r\n    : enumerate(\r\n        map(source, (item) => (item === false ? undefined : item)),\r\n        projection ?? \"\"\r\n      );\r\n\r\n/** Word statistics for a text. */\r\nexport type TextStats = {\r\n  /** The source text. */\r\n  text: string;\r\n\r\n  /** The number of characters in the text. */\r\n  length: number;\r\n\r\n  /** The number of word characters (a letter or number followed by any number of letters, numbers or apostrophes) in the text. */\r\n  characters: number;\r\n\r\n  /** The number of words in the text. A word is defined as a group of consecutive word characters. */\r\n  words: number;\r\n\r\n  /**\r\n   * The number of sentences in the text.\r\n   * A sentence is defined as any group of characters where at least one of them is a word character\r\n   * terminated by `.`, `!`, `?` or the end of the text.\r\n   */\r\n  sentences: number;\r\n\r\n  /**\r\n   * The LIX index for the text. The measure gives an indication of how difficult it is to read.\r\n   * (https://en.wikipedia.org/wiki/Lix_(readability_test))\r\n   */\r\n  lix: number;\r\n\r\n  /**\r\n   * The estimated time it will take for an average user to read all the text.\r\n   * The duration is in milliseconds since that is the time precision for ECMAScript timestamps.\r\n   *\r\n   * The estimate is assuming \"Silent reading time\" which seems to be 238 words per minute according\r\n   * to [Marc Brysbaert's research] (https://www.sciencedirect.com/science/article/abs/pii/S0749596X19300786?via%3Dihub)\r\n   *\r\n   */\r\n  readTime: number;\r\n\r\n  /**\r\n   * The character indices in the source text that demarcates specific fractions of the total numbers of word characters.\r\n   *\r\n   * Defaults to 0 %, 25 %, 50 %, 75 % and 100 % of the total number of letters respectively.\r\n   * The index is for the character after the last letter that that does not exceed the boundary.\r\n   * For example, the 25 % boundary of \"abcd\" is 1 (between a and b).\r\n   */\r\n  boundaries: { offset: number; wordsBefore: number; readTime: number }[];\r\n};\r\n\r\nexport const getTextStats = (\r\n  text: string,\r\n  boundaryLimits = [0, 0.25, 0.5, 0.75, 1]\r\n): TextStats => {\r\n  let charMatcher = /[\\p{L}\\p{N}][\\p{L}\\p{N}'’]*|([.!?]+)/gu;\r\n  let match: RegExpMatchArray | null;\r\n  let chars = 0;\r\n  let words = 0;\r\n  let longWords = 0;\r\n  let sentences = 0;\r\n\r\n  let hasWord = false;\r\n  while ((match = charMatcher.exec(text))) {\r\n    if (match[1]) {\r\n      hasWord && ++sentences;\r\n      hasWord = false;\r\n    } else {\r\n      hasWord = true;\r\n      chars += match[0].length;\r\n      match[0].length > 6 && ++longWords;\r\n      ++words;\r\n    }\r\n  }\r\n  hasWord && ++sentences;\r\n  charMatcher = /[\\p{L}\\p{N}]|([^\\p{L}\\p{N}]+)/gu;\r\n\r\n  const limits = boundaryLimits.map((boundary) => (boundary * chars) | 0);\r\n  const boundaries: TextStats[\"boundaries\"] = [];\r\n\r\n  let index = 0;\r\n  let prevIndex: number | undefined;\r\n  let wordsBefore = 0;\r\n  let inSentence = false;\r\n\r\n  do {\r\n    match = charMatcher.exec(text)!;\r\n    if (match?.[1]) {\r\n      // Word delimiter\r\n      inSentence && ++wordsBefore;\r\n    } else {\r\n      index = match?.index!;\r\n      let wasBoundary = false;\r\n      for (let i = 0; i < limits.length; i++) {\r\n        if (!limits[i]--) {\r\n          boundaries[i] = {\r\n            offset: prevIndex ?? index,\r\n            wordsBefore,\r\n            readTime: round(MINUTE * (wordsBefore / 238)),\r\n          };\r\n          wasBoundary = true;\r\n        }\r\n      }\r\n      (inSentence = !wasBoundary) || (wordsBefore = 0);\r\n      prevIndex = index + 1;\r\n    }\r\n  } while (match);\r\n\r\n  return {\r\n    text,\r\n    length: text.length,\r\n    characters: chars,\r\n    words,\r\n    sentences,\r\n    lix: round(words / sentences + (100 * longWords) / words),\r\n    readTime: round(MINUTE * (words / 238)),\r\n    boundaries,\r\n  };\r\n};\r\n","import {\n  AllKeys,\n  Entries,\n  Extends,\n  Nullish,\n  Property,\n  define,\n  entries,\n  isArray,\n  isNumber,\n  isObject,\n  isString,\n  obj,\n  throwError,\n  undefined,\n  quote,\n  enumerate,\n  array,\n  map,\n  isInteger,\n} from \".\";\n\nexport type ParsedValue<\n  T extends EnumHelper<any, any, any>,\n  V\n> = V extends Nullish\n  ? V\n  : T extends EnumHelper<infer T, infer Flags & boolean, any>\n  ? V extends keyof T\n    ? T[V]\n    : V extends T[keyof T]\n    ? V\n    : Flags extends true\n    ? number\n    : never\n  : never;\n\ntype EnumValue_<\n  Names extends string,\n  Enum,\n  Flags extends boolean,\n  Numeric\n> = boolean extends Numeric\n  ? Names | Enum | (Flags extends true ? (Names | Enum)[] : never)\n  : Numeric extends true\n  ? Enum\n  : Names | (Flags extends true ? Names[] : never);\n\nexport type EnumValueOf<\n  Helper extends EnumHelper<any, any, any>,\n  Numeric = boolean\n> = Helper extends EnumHelper<infer T, infer Flags & boolean, any>\n  ? EnumValue_<keyof T & string, T[keyof T], Flags & boolean, Numeric>\n  : never;\n\nexport type EnumValue<\n  Names extends Record<string, any>,\n  Enum,\n  Flags extends boolean,\n  Numeric\n> = EnumValue_<\n  Lowercase<keyof Names extends string ? keyof Names : never>,\n  Flags extends true ? Enum | (number & {}) : Enum,\n  Flags,\n  Numeric\n>;\n\nexport type EnumHelper<\n  T extends EnumSource,\n  Flags extends boolean,\n  PureFlags extends number\n> = ParseFunction<T, Flags, \"numeric\", never, true> &\n  Readonly<\n    {\n      /**\n       * The number of possible unique values in the enumeration.\n       */\n      length: number;\n      /**\n       * Converts the provided value to its numeric value or throws an exception if it does not match a value in the enumeration.\n       */\n      parse: ParseFunction<T, Flags, \"numeric\">;\n\n      /**\n       * Converts the provided value to its numeric value or returns `undefined` if it does not match a value in the enumeration.\n       */\n      tryParse: ParseFunction<T, Flags, \"numeric\", undefined>;\n\n      /**\n       * All values of the enumeration.\n       */\n      values: T[keyof T][];\n\n      /**\n       * All names and values of the enumeration.\n       */\n      entries: string extends keyof T\n        ? readonly [string, T[keyof T]][]\n        : Entries<T>;\n\n      /**\n       * Looks up a value and returns its name or array of names if the enumeration represents flags.\n       */\n      lookup: ParseFunction<T, Flags, \"lookup\">;\n\n      /**\n       * Looks up a value and returns its name if it matches a single value in the enumeration ,\n       * or an array of names if the enumeration represents flags and the value matches more than one.\n       */\n      format: ParseFunction<T, Flags, \"format\">;\n\n      /**\n       * Pretty prints an enumeration value with its name and values suitable for logging and error messages.\n       * For example \"The values 'test 1' or 'test 2'\".\n       */\n      logFormat(value: ParsableArg<T, Flags>, conjunction?: string): string;\n    } & (Flags extends true\n      ? {\n          /** Flag values that are not a combination of other flags (that is, a single bit). */\n          pure: readonly EntriesByValue<T, PureFlags>[];\n          map<R = T[keyof T]>(\n            flags: ParsableEnumTypeValue<T, boolean | undefined, Flags>,\n            map?: (entry: EntriesByValue<T, PureFlags>, index: number) => R\n          ): R[];\n        }\n      : {})\n  >;\n\ntype EnumSource = Record<string, string | number>;\n\ntype MaybeArray<T, Flags, ArrayIfArray = false> = Flags extends true\n  ? (ArrayIfArray extends true ? never : T) | T[]\n  : T;\n\ntype Lowercased<T extends EnumSource> = {\n  [P in keyof T & string as Lowercase<P>]: T[P];\n};\n\ntype Lookup<T extends EnumSource, V, Name extends boolean> = V extends never\n  ? never\n  : {\n      [P in keyof T]: V extends T[P] ? (Name extends true ? P : T[P]) : never;\n    } extends infer T\n  ? T[keyof T]\n  : never;\n\ntype ParsedValueInternal<T extends EnumSource, V, Flags> = V extends keyof T\n  ? T[V]\n  : V extends T[keyof T]\n  ? Lookup<T, V, false>\n  : [Flags, V] extends [true, number]\n  ? T[keyof T]\n  : never;\n\nexport type ParsableEnumTypeValue<\n  T extends EnumSource,\n  Numeric,\n  Flags extends boolean,\n  Enum extends number = T[keyof T] & number\n> =\n  | (boolean extends Numeric\n      ? MaybeArray<\n          | (Flags extends true ? number | Enum : Enum)\n          | keyof T\n          | (Flags extends true ? \"any\" | \"none\" : never),\n          Flags\n        >\n      : Numeric extends true\n      ? Flags extends true\n        ? Enum | (number & {})\n        : Enum\n      : Flags extends true\n      ? keyof T | readonly (keyof T)[]\n      : keyof T)\n  | (undefined extends Numeric ? undefined : never);\n\ntype ParsableArg<\n  T extends EnumSource,\n  Flags extends boolean\n> = ParsableEnumTypeValue<T, boolean | undefined, Flags>;\n\ntype ParseFunction<\n  T extends EnumSource,\n  Flags extends boolean,\n  Type extends \"numeric\" | \"lookup\" | \"format\",\n  InvalidValue extends undefined | never = never,\n  MainFunction = false\n> = {\n  <V extends string | number | symbol | null | undefined>(\n    value:\n      | V\n      | ParsableArg<T, Flags>\n      | (Flags extends true ? V[] | ParsableArg<T, Flags>[] : never),\n    ...args: MainFunction extends true ? [] : [validateNumbers?: boolean]\n  ): V extends null | undefined\n    ? undefined\n    : Type extends \"lookup\" | \"format\"\n    ? MaybeArray<\n        | (ParsedValueInternal<T, V, Flags> extends never\n            ? V extends string | number\n              ? keyof T | \"any\" | \"none\" | InvalidValue\n              : InvalidValue\n            : Lookup<T, ParsedValueInternal<T, V, Flags>, true>)\n        | (Type extends \"format\"\n            ? V extends keyof T | T[keyof T]\n              ? never\n              : \"any\" | \"none\"\n            : never),\n        Flags,\n        Type extends \"lookup\" ? true : false\n      >\n    : ParsedValueInternal<T, V, Flags> extends never\n    ? keyof any extends infer K\n      ? K extends V\n        ? T[keyof T] | InvalidValue\n        : never\n      : InvalidValue\n    : ParsedValueInternal<T, V, Flags>;\n};\n\ntype EntriesByValue<T extends Record<keyof any, any>, V extends keyof any> = {\n  [P in keyof T as T[P]]: readonly [P, T[P]];\n}[V] extends infer T // Use the infer trick to make vscode intellisense expand the values.\n  ? T\n  : never;\n\nconst isBit = (n: number) => ((n = Math.log2(n)), n === (n | 0));\n\nexport const createEnumAccessor = <\n  T extends EnumSource,\n  Flags extends boolean,\n  PureFlags extends number = 0\n>(\n  sourceEnum: T,\n  flags: Flags,\n  enumName: string,\n  pureFlags?: PureFlags\n): EnumHelper<Lowercased<T>, Flags, PureFlags> => {\n  const names: Record<string, number> = Object.fromEntries(\n    Object.entries(sourceEnum as any)\n      .filter(([key, value]) => isString(key) && isNumber(value))\n      .map(([key, value]) => [key.toLowerCase(), value])\n  ) as any;\n\n  const entries = Object.entries(names);\n  const values = Object.values(names);\n\n  const any = names[\"any\"] ?? values.reduce((any, flag) => any | flag, 0);\n\n  const nameLookup: Record<string, number> = flags\n    ? { ...names, any, none: 0 }\n    : names;\n\n  const valueLookup = Object.fromEntries(\n    Object.entries(nameLookup).map(([key, value]) => [value, key])\n  );\n\n  const parseValue = (value: any, validateNumbers?: boolean) =>\n    isInteger(value)\n      ? !flags && validateNumbers\n        ? valueLookup[value] != null\n          ? value\n          : undefined\n        : Number.isSafeInteger(value)\n        ? value\n        : undefined\n      : isString(value)\n      ? nameLookup[value] ??\n        nameLookup[value.toLowerCase()] ??\n        // Sometimes a number may have been stored as a string.\n        // Let's see if that is the case.\n        parseValue(parseInt(value), validateNumbers)\n      : undefined;\n\n  let invalid = false;\n  let carry: any;\n  let carry2: any;\n\n  const [tryParse, lookup] = flags\n    ? [\n        (value: any, validateNumbers?: boolean) =>\n          Array.isArray(value)\n            ? value.reduce(\n                (flags, flag) =>\n                  flag == null || invalid\n                    ? flags\n                    : (flag = parseValue(flag, validateNumbers)) == null\n                    ? ((invalid = true), undefined)\n                    : (flags ?? 0) | flag,\n                ((invalid = false), undefined as number | undefined)\n              )\n            : parseValue(value),\n        (value: any, format: boolean) =>\n          (value = tryParse(value, false)) == null\n            ? undefined\n            : format && (carry2 = valueLookup[value & any])\n            ? (carry = lookup(value & ~(value & any), false)).length\n              ? [carry2, ...carry]\n              : carry2\n            : ((value = entries\n                .filter(([, flag]) => flag && value & flag && isBit(flag))\n                .map(([name]) => name)),\n              format\n                ? value.length\n                  ? value.length === 1\n                    ? value[0]\n                    : value\n                  : \"none\"\n                : value),\n      ]\n    : [\n        parseValue,\n        (value: any) =>\n          (value = parseValue(value)) != null ? valueLookup[value] : undefined,\n      ];\n\n  let originalValue: any;\n  const parse = (value: any, validateNumbers?: boolean) =>\n    value == null\n      ? undefined\n      : (value = tryParse((originalValue = value), validateNumbers)) == null\n      ? throwError(\n          new TypeError(\n            `${JSON.stringify(originalValue)} is not a valid ${enumName} value.`\n          )\n        )\n      : value;\n\n  const pure = entries.filter(\n    ([, value]) => !pureFlags || ((pureFlags & value) === value && isBit(value))\n  );\n\n  return define(\n    (value: any) => parse(value),\n    [\n      { configurable: false, enumerable: false },\n      {\n        parse,\n        tryParse,\n        entries,\n        values,\n        lookup,\n        length: entries.length,\n        format: (value: any) => lookup(value, true),\n        logFormat: (value: any, c = \"or\") => (\n          (value = lookup(value, true)),\n          value === \"any\"\n            ? \"any \" + enumName\n            : `the ${enumName} ${enumerate(\n                map(array(value), (value) => quote(value)),\n                [c]\n              )}`\n        ),\n      } as const,\n      flags &&\n        ({\n          pure,\n          map: (flags: any, map?: (flag: any, index: number) => any) => (\n            (flags = parse(flags)),\n            pure\n              .filter(([, flag]) => flag & flags)\n              .map(map ?? (([, flag]) => flag))\n          ),\n        } as const),\n    ]\n  ) as any;\n};\n\ntype NumericValues<T, Flags> = Flags extends true ? number : T[keyof T];\n\ntype EnumPropertyType<Helper, Value> = Helper extends EnumHelper<\n  infer T,\n  infer Flags extends boolean,\n  any\n>\n  ? Extends<number | string, Value> extends true\n    ? NumericValues<T, Flags>\n    : Value extends infer Keys extends keyof T\n    ? T[Keys]\n    : Value extends NumericValues<T, Flags>\n    ? Value\n    : never\n  : never;\n\nexport type ParsedEnumResult<\n  T,\n  EnumProps extends readonly Record<string, EnumHelper<any, any, any>>[]\n> = T extends Nullish\n  ? T\n  : T extends readonly []\n  ? []\n  : T extends readonly [infer Item, ...infer Rest]\n  ? [\n      ParsedEnumResult<Item, EnumProps>,\n      ...(Rest extends readonly any[] ? ParsedEnumResult<Rest, EnumProps> : [])\n    ]\n  : T extends readonly (infer Item)[]\n  ? ParsedEnumResult<Item, EnumProps>[]\n  : T extends infer T\n  ? {\n      [P in keyof T]: P extends AllKeys<EnumProps[number]>\n        ? EnumPropertyType<Property<EnumProps[number], P>, T[P]>\n        : T[P];\n    }\n  : never;\n\n/**\n * Creates a function that parses the specified enum properties to their numeric values on the object provided.\n * Note that it does the parsing directly on the provided object and does not create a copy.\n */\nexport const createEnumPropertyParser: <\n  EnumProps extends readonly Record<string, EnumHelper<any, any, any>>[]\n>(\n  ...props: EnumProps\n) => <T>(value: T) => ParsedEnumResult<T, EnumProps> = ((\n  ...props: Record<string, EnumHelper<any, any, any>>[]\n) => {\n  const parsers = entries(obj(props, true));\n\n  const parse = (source: any) => (\n    isObject(source) &&\n      (isArray(source)\n        ? source.forEach((sourceItem, i) => (source[i] = parse(sourceItem)))\n        : parsers.forEach(([prop, parsers]) => {\n            let parsed = undefined;\n            let value: any;\n            if ((value = source[prop]) == null) return;\n            parsers.length === 1\n              ? (source[prop] = parsers[0].parse(value))\n              : parsers.forEach(\n                  (parser, i) =>\n                    !parsed &&\n                    (parsed =\n                      i === parsers.length - 1\n                        ? parser.parse(value)\n                        : parser.tryParse(value)) != null &&\n                    (source[prop] = parsed)\n                );\n          })),\n    source\n  );\n\n  return parse;\n}) as any;\n","import {\n  MaybeUndefined,\n  Nullish,\n  PickRequired,\n  PrettifyIntersection,\n  RecordType,\n  concat,\n  forEach,\n  isArray,\n  isString,\n  join,\n  map,\n  mapFirst,\n  match,\n  nil,\n  obj,\n  undefined,\n} from \".\";\n\ntype QueryStringDelimiterValue = boolean | readonly string[] | readonly [];\n\nexport type ParsedUri<\n  QueryStringDelimiters extends QueryStringDelimiterValue = QueryStringDelimiterValue\n> = {\n  /** The original URI that was parsed. */\n  source: string;\n  /** The name of the scheme excluding colon and slashes. */\n  scheme?: string;\n\n  /**\n   * Whether the scheme includes two slashes or not (in which case it is a urn).\n   * Slashes are only included when formatting the URI if this value is explicity `false`,\n   * or {@link scheme} has a value and it is not explicitly `true`.\n   *\n   * @default false\n   */\n  urn?: boolean;\n\n  /**\n   * User name, password, host and port as much as any of these are part of the URI.\n   * When formatting a parsed URI, this is not used, but rather the individual parts.\n   */\n  authority?: string;\n\n  user?: string;\n  password?: string;\n  host?: string;\n  port?: number;\n  path?: string;\n  query?: QueryStringDelimiters extends false\n    ? string\n    : ParsedQueryString<Exclude<QueryStringDelimiters, null>>;\n  fragment?: string;\n};\n\nexport const parameterList = Symbol();\nexport type ParsedQueryString<Delimiters extends QueryStringDelimiterValue> =\n  Record<\n    string,\n    Delimiters extends null | readonly [] | false ? string : string | string[]\n  > & {\n    [parameterList]: [\n      string,\n      Delimiters extends null | readonly [] | false ? string : string | string[]\n    ];\n  };\n\nexport const uriEncode = (value: any) =>\n  value != nil ? encodeURIComponent(value) : undefined;\n\nexport const parseKeyValue = (\n  value: string | Nullish,\n  arrayDelimiters: readonly string[] | readonly [] = [\"|\", \";\", \",\"],\n  decode = true\n):\n  | readonly [key: string, value: string | undefined, values: string[]]\n  | undefined => {\n  if (!value) return undefined;\n  const parts: [string, string, string[]] = value\n    .split(\"=\")\n    .map((v) =>\n      decode ? decodeURIComponent(v.trim()).replaceAll(\"+\", \" \") : v.trim()\n    ) as any;\n  parts[1] ??= \"\";\n  parts[2] =\n    (parts[1] &&\n      arrayDelimiters?.length &&\n      mapFirst(arrayDelimiters, (delim, _, split = parts[1]!.split(delim)) =>\n        split.length > 1 ? split : undefined\n      )) ||\n    (parts[1] ? [parts[1]] : []);\n  return parts;\n};\n\n// // Browsers accepts `//` as \"whatever the protocol is\" is links.\n// // A scheme can only be letters, digits, `+`, `-` and `.`.\n// // The slashes are captured so we can put the parsed URI correctly back together.\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\n// Scheme (group 1 and 2) = `//` or `name:` or `name://` = (?:(?:([\\w+.-]+):)?(\\/\\/)?)\n\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1\n// User Information (groups 4 and 5) = `user@` or `user:password@` = (?:([^:@]+)(?:\\:([^@]*))?@)\n\n// // If an IPv6 address is used with a port it is wrapped in square brackets.\n// // Otherwise a host is anything until port, path or query string.\n// // Se also https://serverfault.com/questions/205793/how-can-one-distinguish-the-host-and-the-port-in-an-ipv6-url about the brackets.\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2\n// Host (group 6 or 7) = `[ IPv6 or IPvFuture ]:port` or IPv6 or `IPv4:port` or `domain:port`  = (?:\\[([^\\]]+)\\]|([0-9:]+|[^/+]+?))\n\n// //Port is included in the optional host group to separate `about:blank` like schemes from `localhost:1337` like hosts\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3\n// Port (group 8) = (?::(\\d*))?\n\n// Authority (group 3) = User Information + Host + Port\n\n// // Anything until an optional query or fragment\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3\n// Path and  (group 9) = (\\/[^#?]*)\n\n// // Anything following a `?` until an optional fragment.\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.4\n// Query (group 10) = (?:\\?([^#]*))\n\n// // Anything following a pound sign until end.\n// // https://datatracker.ietf.org/doc/html/rfc3986#section-3.5\n// Fragment (group 11) = (?:#.*)\n\n// Everything put together\n// ^(?:(?:([\\w+.-]+):)?(?:\\/\\/)?)?((?:([^:@]+)(?:\\:([^@]*))?@)?(?:\\[([^\\]]+)\\]|([0-9:]+|[^/+]+?))?(?::(\\d*))?)?(\\/[^#?]*)?(?:\\?([^#]*))?(?:#(.*))?$\n\n/**\n * Parses an URI according to https://www.rfc-editor.org/rfc/rfc3986#section-2.1.\n * The parser is not pedantic about the allowed characters in each group\n *\n * @param uri The URI to parse\n * @param query Whether to parse the query into a record with each parameter and its value(s) or just the string.\n *  If an array is provided these are the characters that are used to split query string values. If this is empty, arrays are not parsed.\n * @returns A record with the different parts of the URI.\n */\nexport const parseUri = <\n  Uri extends string | Nullish,\n  QueryString extends QueryStringDelimiterValue = true,\n  RequireAuthority extends boolean = false\n>(\n  uri: Uri,\n  query: QueryString = true as any,\n  requireAuthority?: RequireAuthority\n): PrettifyIntersection<\n  RequireAuthority extends true\n    ? PickRequired<ParsedUri<QueryString>, \"scheme\" | \"host\" | \"urn\" | \"path\">\n    : ParsedUri<QueryString>,\n  true\n> =>\n  uri == nil\n    ? undefined\n    : (match(\n        uri,\n        /^(?:(?:([\\w+.-]+):)?(\\/\\/)?)?((?:([^:@]+)(?:\\:([^@]*))?@)?(?:\\[([^\\]]+)\\]|([0-9:]+|[^/+]+?))?(?::(\\d*))?)?(\\/[^#?]*)?(?:\\?([^#]*))?(?:#(.*))?$/g,\n        (\n          source: string,\n          scheme,\n          slashes,\n          authority,\n          user,\n          password,\n          bracketHost,\n          host,\n          port,\n          path,\n          queryString,\n          fragment\n        ) => {\n          const parsed: ParsedUri = {\n            source,\n            scheme,\n            urn: scheme ? !slashes : slashes ? false : undefined,\n            authority,\n            user,\n            password,\n            host: bracketHost ?? host,\n            port: port != null ? parseInt(port) : undefined,\n            path,\n            query:\n              query === false\n                ? queryString\n                : parseQueryString(queryString, query),\n            fragment,\n          };\n          parsed.path =\n            parsed.path ||\n            (parsed.authority ? (parsed.urn ? \"\" : \"/\") : undefined);\n          return parsed;\n        }\n      ) as any);\n\nexport const parseHttpHeader = <\n  V extends string | Nullish,\n  Delimiters extends QueryStringDelimiterValue = [\",\"]\n>(\n  query: V,\n  arrayDelimiters: Delimiters = [\",\"] as any,\n  decode = true\n): PrettifyIntersection<ParsedQueryString<Delimiters>> =>\n  parseParameters(query, \"; \", arrayDelimiters, decode);\n\nexport const parseQueryString = <\n  V extends string | Nullish,\n  Delimiters extends QueryStringDelimiterValue = true\n>(\n  query: V,\n  arrayDelimiters?: Delimiters,\n  decode = true\n): PrettifyIntersection<ParsedQueryString<Delimiters>> =>\n  parseParameters(query, \"&\", arrayDelimiters, decode);\n\nexport const parseParameters = <\n  V extends string | Nullish,\n  Delimiters extends QueryStringDelimiterValue = true\n>(\n  query: V,\n  separator: string,\n  arrayDelimiters?: Delimiters,\n  decode = true\n): PrettifyIntersection<ParsedQueryString<Delimiters>> => {\n  const list: [string, any][] = [];\n\n  const results =\n    query == nil\n      ? undefined\n      : (obj(\n          query?.match(/(?:^.*?\\?|^)([^#]*)/)?.[1]?.split(separator),\n          (\n            part,\n            _,\n            [key, value, values] = parseKeyValue(\n              part,\n              arrayDelimiters === false\n                ? []\n                : arrayDelimiters === true\n                ? undefined\n                : arrayDelimiters,\n              decode\n            ) ?? [],\n            kv: any\n          ) => (\n            (kv =\n              (key = key?.replace(/\\[\\]$/, \"\")) != null\n                ? arrayDelimiters !== false\n                  ? [key, values!.length > 1 ? values! : (value! as any)]\n                  : [key, value!]\n                : undefined),\n            list.push(kv),\n            kv\n          ),\n          (current, value) =>\n            current\n              ? arrayDelimiters !== false\n                ? concat(current, value)\n                : (current ? current + \",\" : \"\") + value\n              : value\n        ) as any);\n\n  results && (results[parameterList] = list);\n\n  return results;\n};\n\nexport const toQueryString = <\n  P extends\n    | Iterable<readonly [string, any]>\n    | RecordType<string, any>\n    | undefined\n>(\n  parameters: P,\n  delimiter = \",\"\n): MaybeUndefined<P, string> =>\n  parameters == nil\n    ? undefined\n    : (map(parameters, ([key, value]) =>\n        isString(key)\n          ? key +\n              \"=\" +\n              (isArray(value)\n                ? map(value, uriEncode).join(delimiter)\n                : uriEncode(value)) ?? \"\"\n          : undefined\n      )?.join(\"&\") as any);\n\nexport const appendQueryString = <Uri extends string | undefined>(\n  baseUri: Uri,\n  parameters:\n    | Record<string, any>\n    | Iterable<readonly [key: string, value: any]>\n    | undefined\n): MaybeUndefined<Uri, string> => {\n  if (!baseUri) return undefined!;\n  const qs = toQueryString(parameters);\n  return (baseUri.match(/^[^?]*/)![0] + (qs ? \"?\" + qs : \"\")) as any;\n};\n\nexport const mergeQueryString = <Uri extends string | undefined>(\n  currentUri: Uri,\n  parameters:\n    | Record<string, any>\n    | Iterable<readonly [key: string, value: any]>\n    | undefined\n): MaybeUndefined<Uri, string> => {\n  if (!currentUri) return undefined!;\n  const current = parseQueryString(currentUri);\n  forEach(parameters, ([key, value]) => (current[key] = current[key] ?? value));\n  return appendQueryString(currentUri, current) as any;\n};\n\nexport const formatUri = <Uri extends Omit<ParsedUri, \"source\">>(\n  uri: Uri\n): MaybeUndefined<Uri, string> =>\n  uri == nil\n    ? (undefined as any)\n    : join([\n        uri.scheme || uri.urn === false\n          ? (uri.scheme ? uri.scheme + \":\" : \"\") + (!uri.urn ? \"//\" : \"\")\n          : \"\",\n        uri.user,\n        uri.password ? \":\" + uri.password : undefined,\n        uri.user && \"@\",\n        uri.host,\n        uri.port ? \":\" + uri.port : undefined,\n        uri.path === \"/\" ? \"\" : uri.path,\n        uri.query &&\n          \"?\" + (isString(uri.query) ? uri.query : toQueryString(uri.query)),\n        uri.fragment && \"#\" + uri.fragment,\n      ]) || undefined!;\n","import { assign, forEach, some, sum } from \".\";\r\n\r\nexport type Interval<T> = [start: T, end: T];\r\nexport type Intervals<T = number> = ReadonlyArray<[start: T, end: T]> & {\r\n  /**\r\n   * Updates the intervals to include the specified start and end,\r\n   * and returns the updated total width.\r\n   *\r\n   */\r\n  push: (start: T, end: T) => number;\r\n\r\n  /** The total width of the intervals. */\r\n  width: number;\r\n};\r\n\r\nexport const createIntervals = <T = number>(\r\n  cmp: (x: T, y: T) => number = (x: any, y: any) => (x - y) as any,\r\n  width: (interval: Interval<T>) => number = (interval: any) =>\r\n    (interval[1] - interval[0]) as any\r\n): Intervals<T> => {\r\n  const ranges: Interval<T>[] = [];\r\n\r\n  return assign(ranges, {\r\n    push(start: T, end: T) {\r\n      let pending: Interval<T> | undefined = [start, end];\r\n\r\n      const finalize = (update: any = true) =>\r\n        update\r\n          ? ((ranges as any).width = ranges.reduce(\r\n              (sum, interval) => sum + width(interval),\r\n              0\r\n            ))\r\n          : (ranges as any).width;\r\n\r\n      let changed: any;\r\n      for (let i = 0; i < ranges.length; i++) {\r\n        let current = ranges[i];\r\n        if (cmp(pending[1], current[0]) < 0) {\r\n          // Ends before next start. Insert before.\r\n          return finalize(ranges.splice(i, 0, pending));\r\n        } else if (cmp(pending[0], current[1]) <= 0) {\r\n          if (cmp(pending[0], current[0]) < 0) {\r\n            // Expand left (changed).\r\n            changed = current[0] = pending[0];\r\n          }\r\n          if (cmp(pending[1], current[1]) > 0) {\r\n            // Expand right (changed).\r\n            changed = current[1] = pending[1];\r\n          }\r\n          if (ranges[i + 1]?.[0] < current[1]) {\r\n            // Detach the current range since it is to be merged with the next.\r\n            changed = pending = ranges.splice(i--, 1)[0];\r\n          } else {\r\n            // Only update the total width if the current range was expanded or merged.\r\n            return finalize(changed != null);\r\n          }\r\n        }\r\n      }\r\n\r\n      // If there still is a pending range it means its start comes after the current end.\r\n      // Only update width in that case.\r\n      return finalize(pending && (ranges[ranges.length] = pending));\r\n    },\r\n    width: 0,\r\n  }) as any;\r\n};\r\n","import { EnumValue, Nullish, createEnumAccessor, isNumber } from \"@tailjs/util\";\nimport { DataPurposeFlags, DataPurposeValue, dataPurposes } from \".\";\n\n/**\n * Defines to which extend a piece of information relates to a natural person (user of your app or website).\n *\n * Tail.js requires all data points (data types and their properties) to be classified to prevent any data from being stored or otherwise used beyond a user's consent.\n *\n * YOU (or client and/or employer) are responsible for the legality of the collection of data, its classification at any level of consent for any duration of time - not tail.js, even with its default settings, intended design or implementation.\n *\n */\nexport enum DataClassification {\n  /**\n   * The data cannot reasonably be linked to a specific user after the user leaves the website or app, and their session ends.\n   *\n   * Tail.js will collect this kind of data in a way that does not use cookies or rely on other information persisted in the user's device.\n   *\n   * Identifying returning visitors will not be possible at this level.\n   * In-session personalization will be possible based on the actions a user has taken such as adding or removing things to a shopping basket, or reading an article.\n   *\n   * As always, YOU (or client and/or employer) are responsible for the legality of the collection of data, its classification at any level of consent for any duration of time - not tail.js, even with its default settings, intended design or implementation.\n   */\n  Anonymous = 0,\n\n  /**\n   * The data may possibly identify the user if put into context with other data, yet not specifically on its own.\n   *\n   * Examples of data you should classify as at least indirect personal data are IP addresses, detailed location data, and randomly generated device IDs persisted over time to track returning visitors.\n   *\n   * Identifying returning visitors will be possible at this level of consent, but not across devices.\n   * Some level of personalization to returning visitors will be possible without knowing their specific preferences with certainty.\n   *\n   * This level is the default when a user has consented to necessary information being collected via a  cookie disclaimer or similar.\n   *\n   * As always, YOU (or client and/or employer) are responsible for the legality of the collection of data, its classification at any level of consent for any duration of time - not tail.js, even with its default settings, intended design or implementation.\n   */\n  Indirect = 1,\n\n  /**\n   * The data directly identifies the user on its own.\n   *\n   * Examples are name, username, street address and email address.\n   *\n   * Identifying returning visitors across devices will be possible at this level of consent.\n   * Personalization based on past actions such as purchases will also be possible.\n   *\n   * This level is the default should be considered the default level if users are offered an option to create a user profile or link an existing user profile from an external identity provider (Google, GitHub, Microsoft etc.).\n   *\n   * Please note it is possible to access user data even when nothing is tracked beyond the bla... level\n   *\n   * As always, YOU (or client and/or employer) are responsible for the legality of the collection of data, its classification at any level of consent for any duration of time - not tail.js, even with default settings.\n   */\n  Direct = 2,\n\n  /**\n   * Sensitive data about a user.\n   *\n   * Examples are data related to health, financial matters, race, political and religious views, and union membership.\n   * If the user is given the option to consent at this level, it should be very clear, and you must make sure that all levels of your tail.js implementation and connected services meets the necessary levels of compliance for this in your infrastructure.\n   *\n   * Identifying returning visitors across devices will be possible at this level of consent.\n   * and so will advanced personalization.\n   *\n   * As always, YOU (or client and/or employer) are responsible for the legality of the collection of data, its classification at any level of consent for any duration of time - not tail.js, even with default settings.\n   */\n  Sensitive = 3,\n}\n\nexport const dataClassification = createEnumAccessor(\n  DataClassification,\n  false,\n  \"data classification\"\n);\n\nexport type DataClassificationValue<Numeric = boolean> = EnumValue<\n  typeof DataClassification,\n  DataClassification,\n  false,\n  Numeric\n> extends infer T\n  ? T\n  : never;\n\nexport type DataUsageAttributes<NumericEnums = true> = {\n  classification: DataClassificationValue<NumericEnums>;\n  purposes: DataPurposeValue<NumericEnums>;\n};\n\nexport type ParsableDataUsageAttributes = {\n  classification?: DataClassificationValue;\n  level?: DataClassificationValue;\n  purpose?: DataPurposeValue;\n  purposes?: DataPurposeValue;\n};\n\nexport const dataUsageEquals = (\n  lhs: ParsableDataUsageAttributes | Nullish,\n  rhs: ParsableDataUsageAttributes | Nullish\n) =>\n  dataClassification.parse(lhs?.classification ?? lhs?.level) ===\n    dataClassification.parse(rhs?.classification ?? rhs?.level) &&\n  dataPurposes.parse(lhs?.purposes ?? lhs?.purposes) ===\n    dataPurposes.parse(rhs?.purposes ?? rhs?.purposes);\n\nexport const parseDataUsage = <T extends ParsableDataUsageAttributes | Nullish>(\n  classificationOrConsent: T,\n  defaults?: Partial<DataUsageAttributes<boolean>>\n): T extends {}\n  ? DataUsageAttributes<true> & Omit<T, keyof ParsableDataUsageAttributes>\n  : undefined =>\n  classificationOrConsent == null\n    ? (undefined as any)\n    : isNumber(classificationOrConsent.classification) &&\n      isNumber(classificationOrConsent.purposes)\n    ? classificationOrConsent\n    : {\n        ...classificationOrConsent,\n        level: undefined,\n        purpose: undefined,\n        classification: dataClassification.parse(\n          classificationOrConsent.classification ??\n            classificationOrConsent.level ??\n            defaults?.classification ??\n            DataClassification.Anonymous\n        ),\n        purposes: dataPurposes.parse(\n          classificationOrConsent.purposes ??\n            classificationOrConsent.purpose ??\n            defaults?.purposes ??\n            DataPurposeFlags.Necessary\n        ),\n      };\n","import { EnumValue, createEnumAccessor } from \"@tailjs/util\";\r\n\r\n/** Data purposes are flags that can be combined, so if multiple are needed you can combine them with bitwise OR (the `|` operator).  */\r\nexport type DataPurposesFlagHint = number & {};\r\n\r\n// Grr... We need to write out the calculated numbers for each enum value. Otherwise stupid JSON schema generator won't work.\r\n// Also ts-json-schema-generator does not support template literals, hence automatic PascalCase to snake-case doesn't work.\r\n// This is why non-standard the syntax convention with underscores in enum names are used, since \"serverwrite\" looks horrible,\r\n// but \"server_write\" is acceptable.\r\n\r\n/** Purposes data can be used for, including combinations of {@link DataPurpose} */\r\nexport enum DataPurposeFlags {\r\n  /** Data without a purpose will not get stored and cannot be used for any reason. This can be used to disable parts of a schema. */\r\n  None = 0,\r\n\r\n  /**\r\n   * Data stored for this purpose is vital for the system, website or app to function.\r\n   */\r\n  Necessary = 1,\r\n\r\n  /**\r\n   * Data stored for this purpose is used for personalization or otherwise adjust the appearance of a website or app\r\n   * according to a user's preferences.\r\n   *\r\n   * DO NOT use this category if the data may be shared with third parties or otherwise used for targeted marketing outside the scope\r\n   * of the website or app. Use {@link DataPurposeFlags.Targeting} instead.\r\n   *\r\n   * It may be okay if the data is only used for different website and apps that relate to the same product or service.\r\n   * This would be the case if a user is able to use an app and website interchangeably for the same service. Different areas of a brand may\r\n   * also be distributed across multiple domain names.\r\n   *\r\n   */\r\n  Functionality = 2,\r\n\r\n  /**\r\n   * Data stored for this purpose is used to gain insights on how users interact with a website or app optionally including\r\n   * demographics and similar traits with the purpose of optimizing the website or app.\r\n   *\r\n   * DO NOT use this category if the data may be shared with third parties or otherwise used for targeted marketing outside the scope\r\n   * of the website or app. Use {@link DataPurposeFlags.Targeting} instead.\r\n   *\r\n   * It may be okay if the data is only used for different website and apps that relate to the same product or service.\r\n   * This would be the case if a user is able to use an app and website interchangeably for the same service. Different areas of a brand may\r\n   * also be distributed across multiple domain names.\r\n   *\r\n   */\r\n  Performance = 4,\r\n\r\n  /**\r\n   * Data stored for this purpose may be similar to both functionality and performance data, however it may be shared with third parties\r\n   * or otherwise used to perform marketing outside the scope of the specific website or app.\r\n   *\r\n   * If the data is only used for different website and apps that relate to the same product or service, it might not be necessary\r\n   * to use this category.\r\n   * This would be the case if a user is able to use an app and website interchangeably for the same service. Different areas of a brand may\r\n   * also be distributed across multiple domain names.\r\n   */\r\n  Targeting = 8,\r\n\r\n  /**\r\n   * Data stored for this purpose is used for security purposes. As examples, this can both be data related to securing an authenticated user's session,\r\n   * or for a website to guard itself against various kinds of attacks.\r\n   *\r\n   * This is implicitly also `Necessary`.\r\n   */\r\n  Security = 16,\r\n\r\n  /**\r\n   * Data stored for this purpose may be similar to the performance category, however it is specifically\r\n   * only used for things such as health monitoring, system performance and error logging and unrelated to user behavior.\r\n   *\r\n   * This is implicitly also `Necessary`.\r\n   */\r\n  Infrastructure = 32,\r\n\r\n  /**\r\n   * Any purposes that is permissable for anonymous users.\r\n   */\r\n  Any_Anonymous = 49, // DataPurposes.Necessary | DataPurposes.Infrastructure | DataPurposes.Security,\r\n\r\n  /**\r\n   * Data can be used for any purpose.\r\n   *\r\n   * Flags with a higher value than this are used for restrictions on who can access the data rather what it is used for.\r\n   */\r\n  Any = 63,\r\n\r\n  /**\r\n   * The data is not available client-side.\r\n   * Note that this is a special flag that is not included in \"Any\"\r\n   */\r\n  Server = 2048,\r\n\r\n  /**\r\n   * The data can only be updated server-side and is read-only client-side.\r\n   *\r\n   * Note that this is a special flag that is not included in \"Any\".\r\n   */\r\n  Server_Write = 4096,\r\n}\r\n\r\nexport type DataPurpose =\r\n  | DataPurposeFlags.Necessary\r\n  | DataPurposeFlags.Functionality\r\n  | DataPurposeFlags.Performance\r\n  | DataPurposeFlags.Targeting\r\n  | DataPurposeFlags.Security\r\n  | DataPurposeFlags.Infrastructure\r\n  | DataPurposeFlags.Server\r\n  | DataPurposeFlags.Server_Write;\r\n\r\nconst purePurposes: DataPurpose =\r\n  DataPurposeFlags.Necessary |\r\n  DataPurposeFlags.Functionality |\r\n  DataPurposeFlags.Performance |\r\n  DataPurposeFlags.Targeting |\r\n  DataPurposeFlags.Security |\r\n  DataPurposeFlags.Infrastructure |\r\n  DataPurposeFlags.Server;\r\n\r\nexport const dataPurposes = createEnumAccessor(\r\n  DataPurposeFlags as typeof DataPurposeFlags,\r\n  true,\r\n  \"data purpose\",\r\n  purePurposes\r\n);\r\n\r\nexport const singleDataPurpose = createEnumAccessor(\r\n  DataPurposeFlags as typeof DataPurposeFlags,\r\n  false,\r\n  \"data purpose\",\r\n  0\r\n);\r\n\r\nexport type DataPurposeValue<Numeric = boolean> = EnumValue<\r\n  typeof DataPurposeFlags,\r\n  DataPurposeFlags,\r\n  true,\r\n  Numeric\r\n>;\r\n","import type { TrackedEvent } from \".\";\n\n/** The shape of the patch data for a {@link TrackedEvent} */\nexport type EventPatch<T extends TrackedEvent = TrackedEvent> = Partial<\n  Omit<T, \"type\">\n> & {\n  type: `${T[\"type\"]}_patch`;\n} & Required<Pick<TrackedEvent, \"patchTargetId\">>;\n\nexport const isEventPatch = (value: any): value is EventPatch =>\n  !!value?.patchTargetId;\n","import {\n  EnumValue,\n  FILTER_NULLISH,\n  MaybePick,\n  MaybeUndefined,\n  Nullish,\n  ParsedEnumResult,\n  PartialExcept,\n  PrettifyIntersection,\n  createEnumAccessor,\n  createEnumPropertyParser,\n  isArray,\n} from \"@tailjs/util\";\nimport {\n  DataClassification,\n  DataClassificationValue,\n  DataPurposeFlags,\n  DataPurposeValue,\n  Timestamp,\n  dataClassification,\n  dataPurposes,\n  singleDataPurpose,\n} from \"..\";\n\nexport enum VariableScope {\n  /** Global variables. */\n  Global = 0,\n\n  /**\n   * Variables related to an external identity.\n   * One use case could be used to augment data a CMS with real-time data related to personalization or testing.\n   */\n  Entity = 1,\n\n  /** Variables related to sessions. */\n  Session = 2,\n\n  /** Variables related to a device (browser or app). */\n  Device = 3,\n\n  /** Variables related to an identified user. */\n  User = 4,\n}\n\nexport const variableScope = createEnumAccessor(\n  VariableScope as typeof VariableScope,\n  false,\n  \"variable scope\"\n);\n\nexport type VariableScopeValue<Numeric extends boolean | undefined = boolean> =\n  EnumValue<typeof VariableScope, VariableScope, false, Numeric> extends infer T\n    ? T\n    : never;\n\n/** Transforms properties with known enum types to their parsable counterparts. */\nexport type Parsable<T, Numeric extends boolean | undefined = boolean> = {\n  [P in keyof T]: T[P] extends DataClassification | undefined | null\n    ? DataClassificationValue<MaybeUndefined<T[P], Numeric>>\n    : T[P] extends DataPurposeFlags | undefined | null\n    ? DataPurposeValue<MaybeUndefined<T[P], Numeric>>\n    : T[P] extends VariableScope | undefined | null\n    ? VariableScopeValue<MaybeUndefined<T[P], Numeric>>\n    : Parsable<T[P], Numeric>;\n};\n\n/**\n * Uniquely addresses a variable by scope, target and key name.\n */\nexport interface VariableKey<NumericEnums extends boolean = boolean> {\n  /** The scope the variable belongs to. */\n  scope: VariableScopeValue<NumericEnums>;\n\n  /**\n   * The name of the variable.\n   *\n   * A key may have a prefix that decides which variable storage it is routed to.\n   * The prefix and the key are separated by colon (`prefix:key`). Additional colons will be considered part of the variable name.\n   * To address a variable with a colon in its name without prefix use `:key`, for example `:colon:in:my:name`.\n   */\n  key: string;\n\n  /**\n   * The ID of the entity in the scope the variable belongs to.\n   * This is ignored for global variables, and can be set to `\"\"`.\n   */\n  targetId?: string;\n}\n\nexport type RestrictedVariable<\n  T = any,\n  NumericEnums extends boolean = true,\n  TrackerScoped extends boolean = true\n> = RestrictVariableTargets<Variable<T, NumericEnums>, TrackerScoped>;\n\ntype RestrictVariableItemTargets<\n  T extends readonly any[],\n  TrackerScoped extends boolean\n> = T extends readonly []\n  ? []\n  : T extends [infer Item, ...infer Rest]\n  ? [\n      RestrictVariableTargets<Item, TrackerScoped>,\n      ...RestrictVariableItemTargets<Rest, TrackerScoped>\n    ]\n  : T extends readonly (infer T)[]\n  ? RestrictVariableTargets<T, TrackerScoped>[]\n  : never;\n\ntype TrackerScopeValue =\n  | VariableScope.User\n  | \"user\"\n  | VariableScope.Device\n  | \"device\"\n  | VariableScope.Session\n  | \"session\";\n\nexport type RestrictVariableTargets<\n  T,\n  TrackerScoped extends boolean = true\n> = boolean extends TrackerScoped\n  ? T\n  : T extends readonly any[]\n  ? RestrictVariableItemTargets<T, TrackerScoped>\n  : T extends { current: infer C }\n  ? PrettifyIntersection<\n      Omit<T, \"current\"> & {\n        current: RestrictVariableTargets<C, TrackerScoped>;\n      }\n    >\n  : PrettifyIntersection<\n      T extends { scope: any; targetId?: any }\n        ? Omit<T, \"targetId\"> &\n            (\n              | {\n                  scope:\n                    | VariableScope.Global\n                    | \"global\"\n                    | (TrackerScoped extends true ? TrackerScopeValue : never);\n                  targetId?: undefined;\n                }\n              | {\n                  scope:\n                    | (TrackerScoped extends true ? never : TrackerScopeValue)\n                    | VariableScope.Entity\n                    | \"entity\";\n                  targetId: T[\"targetId\"] & string;\n                }\n            )\n        : T\n    >;\n\nexport const isTrackerScoped = (\n  value: any\n): value is { scope: TrackerScopeValue } =>\n  variableScope(value?.scope) >= VariableScope.Session;\n\n/** Removes target ID from tracker scoped variables and variable results. */\nexport const restrictTargets = <T>(value: T): RestrictVariableTargets<T> => (\n  isArray(value)\n    ? value.map(restrictTargets)\n    : isTrackerScoped(value) && delete (value as any).targetId,\n  (value as any)?.current && restrictTargets((value as any).current),\n  value as any\n);\n\n/**\n * A {@link VariableKey} that optionally includes the expected version of a variable value.\n * This is used for \"if none match\" queries to invalidate caches efficiently.\n */\nexport interface VersionedVariableKey<NumericEnums extends boolean = boolean>\n  extends VariableKey<NumericEnums> {\n  version?: string;\n}\n\n/**\n * Defines how the value of variable is classified and for which purposes it can be used.\n */\nexport interface VariableUsage<NumericEnums extends boolean = boolean> {\n  /**\n   * The legal classification of the kind of data a variable holds.\n   * This limits which data will be stored based on a user's consent.\n   */\n  classification: DataClassificationValue<NumericEnums>;\n\n  /**\n   * Optionally defines the possible uses of the data a variables holds (they are binary flags).\n   * When a variable is requested by some logic, it may be stated what the data is used for.\n   * If the user has not consented to data being used for this purpose the variable will not be avaiable.\n   */\n  purposes: DataPurposeValue<NumericEnums>;\n}\n\nexport const Necessary: VariableUsage<true> = {\n  classification: DataClassification.Anonymous,\n  purposes: DataPurposeFlags.Necessary,\n};\n\nexport interface VariableMetadata {\n  /**\n   * Optionally categorizes variables.\n   *\n   * For example, the tag `address` could be used for all variables related to a user's address,\n   * or `newsletter` for everything related to newsletter subscriptions.\n   */\n  tags?: string[];\n\n  /**\n   * This is a hint to variable storages that the variable should be deleted if it has not been\n   * accessed for this amount of time (time to live).\n   *\n   * Variable storages can decide how accurately they want to enforce this in the background,\n   * yet it will be accurate from a client perspective assuming the storage provides accurate access timestamps.\n   *\n   * Tail.js uses \"delete on read\" based on the time the variable was last accessed if its\n   * storage has not yet cleaned it.\n   */\n  ttl?: number;\n}\n\n/**\n * Information about when a variable's value was modified and a unique version (ETag) used for conflict resolution\n * in case multiple processes try to update it at the same time (optimistic concurrency).\n *\n * Only the version, and not the modified timestamp must be relied on during conflict resolution.\n */\nexport interface VariableVersion {\n  /**\n   * When the variable was created (Unix timestamp in milliseconds).\n   */\n  created: Timestamp;\n\n  /**\n   * When the variable was last modified. (Unix  ms).\n   */\n  modified: Timestamp;\n\n  /**\n   * When the variable was last accessed (Unix ms).\n   */\n  accessed: Timestamp;\n\n  /**\n   * A unique token that changes every time a variable is updated.\n   *\n   * It follows the semantics of a \"weak\" ETag in the HTTP protocol.\n   * How the value is generated is an internal implementation detail specific to the storage that manages the variable.\n   *\n   *\n   */\n  version: string;\n}\n\n/**\n * All data related to a variable except its value.\n */\nexport interface VariableHeader<NumericEnums extends boolean = true>\n  extends VariableKey<NumericEnums>,\n    VariableUsage<NumericEnums>,\n    VariableMetadata,\n    VariableVersion {}\n\n/**\n * A variable is a specific piece of information that can be classified and changed independently.\n * A variable can either be global or related to a specific entity or tracker scope.\n */\nexport interface Variable<T = any, NumericEnums extends boolean = true>\n  extends VariableHeader<NumericEnums> {\n  /**\n   * The value of the variable is read-only. Trying to update its value in its storage will result in an error.\n   */\n  readonly?: boolean;\n\n  /**\n   * The value of the variable. It must only be undefined in a set operation in which case it means \"delete\".\n   */\n  value: T;\n}\n\n/**\n * The information needed about a variable to validate whether it complies with a user's consents,\n * or meets other authorization based requirements.\n */\nexport type VariableValidationBasis<NumericEnums extends boolean = boolean> =\n  VariableKey<NumericEnums> & Partial<VariableUsage<NumericEnums>>;\n\n/** Returns a description of a key that can be used for logging and error messages.  */\nexport const formatKey = (key: VariableKey<true> | VariableKey) =>\n  `'${key.key}' in ${variableScope.format(key.scope)} scope`;\n\n/** The individual parts of a key specified as string. */\nexport type ParsedKey = {\n  /** The prefix of the key, or the empty string if none. */\n  prefix: string;\n\n  /** The excluding its prefix. */\n  key: string;\n\n  /** The original key string. */\n  sourceKey: string;\n\n  /** For queries. */\n  not?: boolean;\n};\n\nexport const stripPrefix = <T extends VariableKey | undefined>(key: T): T =>\n  key && { ...key, key: parseKey(key.key).key };\n\n/** Returns the individual parts of a key specified as a string.  */\nexport const parseKey = <T extends string | undefined>(\n  sourceKey: T\n): MaybeUndefined<T, ParsedKey> => {\n  if (sourceKey == null) return undefined as any;\n  const not = sourceKey[0] === \"!\";\n  if (not) {\n    sourceKey = (sourceKey.slice(1) as T)!;\n  }\n  const prefixIndex = sourceKey.indexOf(\":\");\n  const prefix = prefixIndex < 0 ? \"\" : sourceKey.substring(0, prefixIndex);\n  const key = prefixIndex > -1 ? sourceKey.slice(prefixIndex + 1) : sourceKey;\n\n  return {\n    prefix,\n    key,\n    sourceKey,\n    not,\n  } as any;\n};\n\nexport const VariableEnumProperties = {\n  scope: variableScope,\n  purpose: singleDataPurpose,\n  purposes: dataPurposes,\n  classification: dataClassification,\n} as const;\n\nexport const toNumericVariableEnums: <T>(\n  value: T\n) => ParsedEnumResult<T, [typeof VariableEnumProperties]> =\n  createEnumPropertyParser(VariableEnumProperties);\n\nexport const extractKey = <\n  T,\n  C extends undefined | Partial<VariableUsage> = undefined\n>(\n  variable: T & PartialExcept<VariableKey, \"key\">,\n  classificationSource?: C\n): T extends undefined\n  ? undefined\n  : T extends VariableKey\n  ? PrettifyIntersection<\n      MaybePick<T, keyof VariableKey> &\n        (\"scope\" extends keyof T\n          ? {\n              scope: VariableScope;\n            }\n          : never) &\n        (C extends undefined\n          ? {}\n          : MaybePick<C & Partial<VariableUsage<true>>, keyof VariableUsage>)\n    >\n  : never =>\n  variable\n    ? ({\n        scope: variableScope(variable.scope),\n        targetId: variable.targetId,\n        key: variable.key,\n        ...(classificationSource && {\n          classification: dataClassification(\n            classificationSource.classification\n          ),\n          purposes: dataPurposes(classificationSource.purposes),\n        }),\n      } as Required<VariableKey> as any)\n    : undefined;\n\nexport const sortVariables = <\n  T extends ({ scope: number; key: string } | Nullish)[] | Nullish\n>(\n  variables: T\n): T extends readonly any[] ? (T[number] & {})[] : undefined =>\n  variables\n    ?.filter(FILTER_NULLISH)\n    .sort((x, y) =>\n      x!.scope === y!.scope\n        ? x!.key.localeCompare(y!.key, \"en\")\n        : x!.scope - y!.scope\n    ) as any;\n","import {\n  AllKeys,\n  EnumValue,\n  Extends,\n  If,\n  IfNot,\n  IsAny,\n  MaybeArray,\n  MaybePick,\n  MaybeUndefined,\n  Nullish,\n  PrettifyIntersection,\n  array,\n  createEnumAccessor,\n  deferredPromise,\n  filter,\n  isArray,\n  map,\n  throwError,\n  tryCatchAsync,\n  undefined,\n} from \"@tailjs/util\";\nimport { Variable, VariableGetResult, VariableSetResult, formatKey } from \"..\";\n\ntype SuccessStatus<ChangedOnly = false> =\n  | VariableResultStatus.Success\n  | VariableResultStatus.Created\n  | IfNot<ChangedOnly, VariableResultStatus.Unchanged>;\n\ntype VariableSuccessResult<\n  R,\n  Filter extends VariableSuccessResultFilter = \"all\",\n  Return extends VariableResultType = \"result\"\n> = R extends {\n  current: infer V;\n  status: SuccessStatus<Extends<\"changed\", Filter>>;\n} // Set result\n  ? Return extends \"result\"\n    ? R\n    : Return extends \"variable\"\n    ? V\n    : V extends { value: infer V }\n    ? V\n    : never\n  : R extends {\n      value?: infer V;\n      status:\n        | SuccessStatus<Extends<\"changed\", Filter>>\n        | IfNot<\n            Extends<\"value\", Filter>,\n            VariableResultStatus.NotFound | VariableResultStatus.Unchanged\n          >;\n    } // Get result\n  ? Return extends \"result\"\n    ? R\n    : Return extends \"variable\"\n    ? MaybePick<R, keyof Variable>\n    : V\n  : never;\n\nexport type VariableSuccessResultFilter = \"value\" | \"changed\" | \"all\";\nexport type VariableResultType = \"value\" | \"variable\" | \"result\";\nexport type VariableSuccessResults<\n  Results,\n  Filter extends VariableSuccessResultFilter = \"all\",\n  Return extends VariableResultType = \"result\"\n> = Results extends undefined\n  ? undefined\n  : Results extends readonly []\n  ? []\n  : Results extends readonly [infer Item, ...infer Rest]\n  ? [\n      VariableSuccessResult<Item, Filter, Return>,\n      ...VariableSuccessResults<Rest, Filter, Return>\n    ]\n  : Results extends readonly (infer Item)[]\n  ? VariableSuccessResult<Item, Filter, Return>[]\n  : VariableSuccessResult<Results, Filter, Return>;\n\nexport type FilterVariableResults<\n  Results,\n  SuccessOnly extends boolean = false,\n  Filter extends VariableSuccessResultFilter = \"all\"\n> = If<SuccessOnly, Results, VariableSuccessResults<Results, Filter>>;\n\nexport type VariableResultPromise<\n  T extends readonly any[] = readonly any[],\n  Push = undefined\n> = T[number] extends never\n  ? never\n  : PromiseLike<VariableSuccessResults<T>> &\n      PrettifyIntersection<\n        {\n          all: PromiseLike<T>;\n          changed: PromiseLike<VariableSuccessResults<T, \"changed\">>;\n          values: PromiseLike<VariableSuccessResults<T, \"all\", \"value\">>;\n          variables: PromiseLike<VariableSuccessResults<T, \"all\", \"variable\">>;\n          /** Run the operation in the background, and handle errors without crashing the app. */\n        } & (Push extends true | ((arg: any) => void)\n          ? { push(): VariableResultPromise<T, false> }\n          : {}) &\n          (T[\"length\"] extends 1\n            ? {\n                value: PromiseLike<\n                  VariableSuccessResults<T, \"all\", \"value\">[0]\n                >;\n                result: PromiseLike<\n                  Exclude<VariableSuccessResults<T>[0], undefined>\n                >;\n                variable: PromiseLike<\n                  VariableSuccessResults<T, \"all\", \"variable\">[0]\n                >;\n              }\n            : {})\n      >;\n\nexport enum VariableResultStatus {\n  Success = 200,\n  Created = 201,\n  Unchanged = 304,\n  Denied = 403,\n  NotFound = 404,\n  ReadOnly = 405,\n  Conflict = 409,\n  Unsupported = 501,\n  Invalid = 400,\n  Error = 500,\n}\n\nexport const resultStatus = createEnumAccessor(\n  VariableResultStatus as typeof VariableResultStatus,\n  false,\n  \"variable set status\"\n);\n\nexport type ResultStatusValue<Numeric extends boolean | undefined = boolean> =\n  EnumValue<\n    typeof VariableResultStatus,\n    VariableResultStatus,\n    false,\n    Numeric\n  > extends infer T\n    ? T\n    : never;\n\nexport const toVariableResultPromise = <T extends readonly any[], Push>(\n  getResults: () => PromiseLike<T>,\n  errorHandlers?: ErrorHandlerParameter<T>,\n  push?: Push &\n    ((results: Exclude<VariableSuccessResult<T[number]>, undefined>[]) => void)\n): VariableResultPromise<T, Push> => {\n  const results = getResults();\n\n  let mapResults = (results: any): any[] => results;\n  let unwrappedResults: any;\n  const property = (\n    map: (\n      results: VariableSuccessResult<VariableGetResult | VariableSetResult>[]\n    ) => any,\n    errorHandler = handleResultErrors\n  ) =>\n    deferredPromise(\n      async () =>\n        (unwrappedResults = mapResults(\n          errorHandler(await results, errorHandlers)\n        )) && map(unwrappedResults)\n    );\n\n  const promise: Record<AllKeys<VariableResultPromise<any, true>>, any> = {\n    then: property((items) => items).then,\n    all: property(\n      (items) => items,\n      (items) => items\n    ),\n    changed: property((items) => filter(items, (item) => item.status < 300)),\n    variables: property((items) => map(items, getResultVariable)),\n    values: property((items) =>\n      map(items, (item) => getResultVariable(item)?.value)\n    ),\n    push: () => (\n      (mapResults = (results) => (\n        push?.(map(getSuccessResults(results) as any[])), results\n      )),\n      promise as any\n    ),\n\n    value: property((items) => getResultVariable(items[0])?.value),\n    variable: property((items) => getResultVariable(items[0])),\n    result: property((items) => items[0]),\n  };\n\n  return promise as any;\n};\n\ntype ValidatableResult<V = {}> =\n  | (V & {\n      status: VariableResultStatus;\n      error?: any;\n    } & (\n        | {\n            current?: V & { version?: string };\n            source?: KeyLike;\n          }\n        | KeyLike\n      ))\n  | Nullish;\n\nexport const getSuccessResults = <\n  R extends readonly ValidatableResult[] | undefined\n>(\n  results: R\n): VariableSuccessResults<R> =>\n  results?.map((result) => (result?.status! < 400 ? result : undefined)) as any;\n\ntype KeyLike = { scope: any; key: any; targetId?: any };\n\nexport const getResultKey = <R extends ValidatableResult>(\n  result: R\n): MaybeUndefined<\n  R,\n  R extends { source: KeyLike }\n    ? R[\"source\"]\n    : R extends KeyLike\n    ? R\n    : undefined\n> =>\n  (result as VariableSetResult)?.source?.key != null\n    ? (result as VariableSetResult).source\n    : (result as any)?.key != null\n    ? result\n    : (undefined as any);\n\nexport const getResultVariable = <R extends ValidatableResult>(\n  result: R\n): If<\n  IsAny<R>,\n  Variable<any, true>,\n  R extends undefined\n    ? undefined\n    : R extends { current: infer V }\n    ? V\n    : R extends { value: any }\n    ? R\n    : undefined\n> =>\n  isSuccessResult(result)\n    ? (result as VariableSetResult).current ?? (result as any)\n    : undefined;\n\nexport const isSuccessResult = <RequireValue extends boolean = false>(\n  result: any,\n  requireValue: RequireValue = false as any\n): result is\n  | ({ status: VariableResultStatus.Success | VariableResultStatus.Created } & (\n      | Variable<any, true>\n      | { current: Variable<any, true> }\n    ))\n  | (RequireValue extends true\n      ? never\n      : {\n          status:\n            | VariableResultStatus.Unchanged\n            | VariableResultStatus.NotFound;\n          value?: undefined;\n        }) =>\n  requireValue\n    ? result?.status! < 300\n    : result?.status! < 400 || result?.status === 404;\n\ntype ErrorHandler<Result = any> = Result extends undefined\n  ? undefined\n  : undefined | ((result: Result, errorMessage: string) => void | boolean);\n\ntype ErrorHandlerParameter<Results> = Results extends readonly []\n  ? readonly []\n  : Results extends readonly [infer Item, ...infer Rest]\n  ? readonly [ErrorHandler<Item>, ...ErrorHandlerParameter<Rest>]\n  : Results extends readonly (infer Item)[]\n  ? readonly ErrorHandler<Item>[]\n  : ErrorHandler<Results>;\n\nexport const handleResultErrors = <\n  Results extends MaybeArray<ValidatableResult, true>,\n  ErrorHandlers extends ErrorHandlerParameter<Results>,\n  RequireValue = false\n>(\n  results: Results,\n  errorHandlers?: ErrorHandlers,\n  requireValue?: RequireValue\n): FilterVariableResults<Results, true, If<RequireValue, \"value\", \"all\">> => {\n  const errors: string[] = [];\n  let errorHandler: ErrorHandler;\n  let errorMessage: string;\n  const successResults = map(\n    array(results),\n    (result, i) =>\n      result &&\n      (result.status < 400 || (!requireValue && result.status === 404) // Not found can only occur for get requests, and those are all right.\n        ? (result as any)\n        : ((errorMessage = `${formatKey(\n            (result as VariableSetResult).source ?? result\n          )} could not be ${\n            (result as VariableSetResult).status === 404\n              ? \"found.\"\n              : `${\n                  (result as VariableSetResult).source ||\n                  result.status !== VariableResultStatus.Error\n                    ? \"set\"\n                    : \"read\"\n                } because ${\n                  result.status === VariableResultStatus.Conflict\n                    ? `of a conflict. The expected version '${\n                        (result as VariableSetResult).source?.version\n                      }' did not match the current version '${\n                        (result as VariableSetResult).current?.version\n                      }'.`\n                    : result.status === VariableResultStatus.Denied\n                    ? result.error ?? \"the operation was denied.\"\n                    : result.status === VariableResultStatus.Invalid\n                    ? result.error ?? \"the value does not conform to the schema\"\n                    : result.status === VariableResultStatus.ReadOnly\n                    ? \"it is read only.\"\n                    : result.status === VariableResultStatus.Error\n                    ? `of an unexpected error: ${result.error}`\n                    : \"of an unknown reason.\"\n                }`\n          }`),\n          ((errorHandler = errorHandlers?.[i]) == null ||\n            errorHandler(result, errorMessage) !== false) &&\n            errors.push(errorMessage),\n          undefined))\n  );\n\n  if (errors.length) return throwError(errors.join(\"\\n\"));\n  return isArray(results) ? successResults : (successResults?.[0] as any);\n};\n\nexport const requireFound = <\n  T extends MaybeArray<VariableGetResult | undefined> | undefined\n>(\n  variable: T\n): VariableSuccessResult<T, \"value\"> =>\n  variable == null\n    ? throwError(\"No variable.\")\n    : (handleResultErrors(variable, undefined, true) as any);\n","import {\r\n  EnumValue,\r\n  If,\r\n  Json,\r\n  MaybeArray,\r\n  MaybePromise,\r\n  Nullish,\r\n  ParsedValue,\r\n  PartialExcept,\r\n  PickPartial,\r\n  PrettifyIntersection,\r\n  ReplaceProperties,\r\n  ToggleReadonly,\r\n  TupleOrArray,\r\n  createEnumAccessor,\r\n  isFunction,\r\n} from \"@tailjs/util\";\r\nimport {\r\n  Variable,\r\n  VariableGetter,\r\n  VariableKey,\r\n  VariableMetadata,\r\n  VariableResultStatus,\r\n  VariableUsage,\r\n  VariableVersion,\r\n  VersionedVariableKey,\r\n  variableScope,\r\n} from \"..\";\r\n\r\n/**\r\n * Defines options for creating, updating or deleting a variable.\r\n */\r\nexport type VariableSetter<\r\n  T = any,\r\n  K extends string = string,\r\n  Validated = boolean\r\n> = { key: K } & (\r\n  | (VariableValueSetter<T, Validated> & { patch?: undefined })\r\n  | VariablePatch<T, Validated>\r\n);\r\n\r\nexport type VariableSetters<\r\n  SetterType extends Partial<VariableSetter<any>> | boolean,\r\n  Inferred extends VariableSetters<SetterType> = never\r\n> =\r\n  | Inferred\r\n  | TupleOrArray<\r\n      | (SetterType extends boolean\r\n          ? VariableSetter<any, string, SetterType>\r\n          : SetterType)\r\n      | Nullish\r\n    >;\r\n\r\nexport type VariableSetResult<\r\n  T = any,\r\n  Source extends VariableSetter<T> = VariableSetter<T>\r\n> =\r\n  | VariableSetSuccessResult<T, Source>\r\n  | ({\r\n      source: Source;\r\n    } & (\r\n      | {\r\n          status: VariableResultStatus.Conflict;\r\n          current: VariableSetResultValue<Source>;\r\n        }\r\n      | ((\r\n          | {\r\n              status:\r\n                | VariableResultStatus.ReadOnly\r\n                | VariableResultStatus.Invalid\r\n                | VariableResultStatus.Denied\r\n                | VariableResultStatus.NotFound\r\n                | VariableResultStatus.Unsupported;\r\n\r\n              error?: any;\r\n            }\r\n          | {\r\n              status: VariableResultStatus.Error;\r\n              transient?: boolean;\r\n              error: any;\r\n            }\r\n        ) & { current?: never })\r\n    ));\r\n\r\nexport type VariableSetSuccessResult<\r\n  T = any,\r\n  Source extends VariableSetter<T> = VariableSetter<T>\r\n> = {\r\n  status:\r\n    | VariableResultStatus.Success\r\n    | VariableResultStatus.Unchanged\r\n    | (VariableSetResultValue<Source> extends undefined\r\n        ? never\r\n        : VariableResultStatus.Created);\r\n\r\n  current: VariableSetResultValue<Source>;\r\n\r\n  source: Source;\r\n};\r\n\r\nexport interface VariablePatchSource<T = any> extends Variable<T> {\r\n  value: T;\r\n}\r\n\r\nexport type VariablePatchResult<T = any, Validated = boolean> =\r\n  | (VariableMetadata &\r\n      (Partial<VariableUsage<If<Validated, true, boolean>>> & {\r\n        value: T | Nullish;\r\n      }))\r\n  | undefined;\r\n\r\nexport type VariablePatchAction<T = any, Validated = boolean> = (\r\n  current: VariablePatchSource<T> | undefined\r\n) => MaybePromise<VariablePatchResult<T, Validated> | Nullish>;\r\n\r\nexport enum VariablePatchType {\r\n  Add = 0,\r\n  Min = 1,\r\n  Max = 2,\r\n  IfMatch = 3,\r\n  IfNoneMatch = 4,\r\n}\r\n\r\nexport type VariablePatchTypeValue<\r\n  Numeric extends boolean | undefined = boolean\r\n> = EnumValue<\r\n  typeof VariablePatchType,\r\n  VariablePatchType,\r\n  false,\r\n  Numeric\r\n> extends infer T\r\n  ? T\r\n  : never;\r\n\r\nexport const patchType = createEnumAccessor(\r\n  VariablePatchType as typeof VariablePatchType,\r\n  false,\r\n  \"variable patch type\"\r\n);\r\n\r\nexport type VariableValueSetter<\r\n  T = any,\r\n  Validated = false\r\n> = (VersionedVariableKey<If<Validated, true, boolean>> &\r\n  Partial<VariableUsage<If<Validated, true, boolean>>> &\r\n  VariableMetadata & { value: T | undefined }) & {\r\n  /**\r\n   * Ignore versioning (optimistic concurrency), and save the value regardless.\r\n   * Consider your scenario before doing this.\r\n   */\r\n  force?: boolean;\r\n};\r\n\r\nexport type VariableValuePatchSetter<\r\n  T = any,\r\n  Validated = boolean\r\n> = VariableKey<If<Validated, true, boolean>> &\r\n  Partial<Variable<T, If<Validated, true, boolean>>> &\r\n  Partial<VariableUsage<If<Validated, true, boolean>>> &\r\n  ({\r\n    selector?: string;\r\n  } & (\r\n    | {\r\n        patch: VariablePatchType.Add | \"add\";\r\n        /**\r\n         * The amount to add (subtract if negative).\r\n         */\r\n        value: number;\r\n        /**\r\n         * The initial value if none exists.\r\n         * @default 0\r\n         */\r\n        seed?: number;\r\n      }\r\n    | {\r\n        patch: VariablePatchType.Min | VariablePatchType.Max | \"min\" | \"max\";\r\n        value: number;\r\n      }\r\n    | {\r\n        patch:\r\n          | VariablePatchType.IfMatch\r\n          | \"ifMatch\"\r\n          | VariablePatchType.IfNoneMatch\r\n          | \"ifNoneMatch\";\r\n        match: T | undefined;\r\n        value: T | undefined;\r\n      }\r\n  ));\r\n\r\nexport type VariablePatchActionSetter<\r\n  T = any,\r\n  Validated = boolean\r\n> = VariableKey<If<Validated, true, boolean>> &\r\n  VariableKey &\r\n  Partial<Variable<T, If<Validated, true, boolean>>> & {\r\n    patch: VariablePatchAction<T, Validated>;\r\n    value?: undefined;\r\n  };\r\n\r\nexport type VariablePatch<T = any, Validated = boolean> =\r\n  | VariablePatchActionSetter<T, Validated>\r\n  | VariableValuePatchSetter<T, Validated>;\r\n\r\nexport type StripPatchFunctions<\r\n  T extends MaybeArray<VariableGetter | VariableSetter | Nullish, true>\r\n> = T extends Nullish\r\n  ? T\r\n  : T extends readonly any[]\r\n  ? StripPatchFunctionItems<T>\r\n  : T extends VariableGetter\r\n  ? T & { init?: Json }\r\n  : Exclude<VariableSetter, VariablePatchActionSetter>;\r\n\r\nexport const isVariablePatchAction = (\r\n  setter: any\r\n): setter is { patch: VariablePatchAction } => isFunction(setter?.[\"patch\"]);\r\n\r\n/**\r\n * Any variable setter that only has numeric enum values.\r\n */\r\nexport type ValidatedVariableSetter = VariableSetter<any, string, true>;\r\n\r\nexport type MapVariableSetResult<Source> = Source extends VariableSetter<\r\n  infer T\r\n>\r\n  ? VariableSetResult<T, Source>\r\n  : never;\r\n\r\nexport type VariableSetResults<K extends readonly any[] = any[]> =\r\n  K extends readonly []\r\n    ? []\r\n    : K extends readonly [infer Item, ...infer Rest]\r\n    ? [MapVariableSetResult<Item>, ...VariableSetResults<Rest>]\r\n    : K extends readonly (infer T)[]\r\n    ? MapVariableSetResult<T>[]\r\n    : unknown extends K\r\n    ? any\r\n    : never;\r\n\r\ntype StripPatchFunctionItems<\r\n  T extends readonly (VariableGetter | VariableSetter)[]\r\n> = T extends readonly []\r\n  ? []\r\n  : T extends readonly [infer T, ...infer Rest]\r\n  ? [\r\n      StripPatchFunctions<T & (VariableGetter | VariableSetter)>,\r\n      ...StripPatchFunctionItems<\r\n        Rest & readonly (VariableGetter | VariableSetter)[]\r\n      >\r\n    ]\r\n  : T extends readonly any[]\r\n  ? ToggleReadonly<StripPatchFunctions<T[number]>[], T>\r\n  : never;\r\n\r\ntype PickScopeAndTarget<T> = T extends { scope: infer Scope }\r\n  ? T extends { targetId: infer Target }\r\n    ? { scope: ParsedValue<typeof variableScope, Scope>; targetId: Target }\r\n    : { scope: ParsedValue<typeof variableScope, Scope> }\r\n  : {};\r\n\r\ntype KeepVariableTarget<Source extends VariableSetter, T> = T extends undefined\r\n  ? undefined\r\n  : ReplaceProperties<Variable<T, true>, PickScopeAndTarget<Source>>;\r\n\r\ntype VariableSetResultValue<Source extends VariableSetter> =\r\n  PrettifyIntersection<\r\n    KeepVariableTarget<Source, VariableSetResultValue_<Source>>\r\n  >;\r\n\r\ntype VariableSetResultValue_<Source extends VariableSetter> = Source extends {\r\n  patch: infer R & {};\r\n}\r\n  ? R extends (current: any) => infer R | { value: infer T }\r\n    ?\r\n        | (T extends undefined ? undefined : T)\r\n        | (R extends undefined ? undefined : never)\r\n    : R extends { match: any; value: infer T }\r\n    ? T extends undefined\r\n      ? undefined\r\n      : T\r\n    : R extends { type: VariablePatchTypeValue }\r\n    ? number\r\n    : never\r\n  : Source extends { value: infer T }\r\n  ? T extends undefined\r\n    ? undefined\r\n    : T\r\n  : never;\r\n","import type {\n  CartUpdatedEvent,\n  ComponentClickEvent,\n  EventMetadata,\n  LocalID,\n  Session,\n  Tagged,\n  Timestamp,\n  Uuid,\n  ViewEvent,\n} from \"..\";\n\n/**\n * The base type for all events that are tracked.\n *\n * The naming convention is:\n * - If the event represents something that can also be considered an entity like \"a page view\", \"a user location\" etc. the name should be a (deverbal) noun.\n * - If the event only indicates something that happened, like \"session started\", \"view ended\" etc. the name should be a verb in the past tense.\n *\n * @id urn:tailjs:core:event\n * @privacy censor-ignore anonymous necessary\n */\nexport interface TrackedEvent extends Tagged {\n  /**\n   * The type name of the event.\n   *\n   * This MUST be set to a constant value in extending interfaces and implementing classes for the event to be registered.\n   * */\n  type: string;\n\n  /**\n   * The ID of the schema the event comes from. It is suggested that the schema ID includes a SemVer version number in the end. (e.g. urn:tailjs:0.9.0 or https://www.blah.ge/schema/3.21.0)\n   */\n  schema?: string;\n\n  /**\n   * This is assigned by the server. Only use {@link clientId} client-side.\n   *\n   */\n  id?: Uuid;\n\n  /**\n   * This is set by the client and used to when events reference each other.\n   */\n  clientId?: LocalID;\n\n  /** These properties are used to track the state of the event as it gets collected, and is not persisted. */\n  metadata?: EventMetadata;\n\n  /**\n   * If set, it means this event contains updates to an existing event with this {@link clientId}, and should not be considered a separate event.\n   * It must have the target event's {@link TrackedEvent.type} postfixed with \"_patch\" (for example \"view_patch\").\n   *\n   * Numbers in patches are considered incremental which means the patch will include the amount to add to an existing number (or zero if it does not yet have a value).\n   * All other values are just overwritten with the patch values.\n   *\n   * Please pay attention to this property when doing analytics lest you may over count otherwise.\n   *\n   * Patches are always considered passive, cf. {@link EventMetadata.passive}.\n   */\n  patchTargetId?: LocalID;\n\n  /**\n   * The client ID of the event that caused this event to be triggered or got triggered in the same context.\n   * For example, a {@link NavigationEvent} may trigger a {@link ViewEvent},\n   * or a {@link CartUpdatedEvent} may be triggered with a {@link ComponentClickEvent}.\n   *\n   */\n  relatedEventId?: LocalID;\n\n  /**\n   * The session associated with the event.\n   */\n  session?: Session;\n\n  /**\n   * When applicable, the view where the event happened (related by {@link ViewEvent}).\n   */\n  view?: LocalID;\n\n  /**\n   * This timestamp will always have a value before it reaches a backend.\n   * If specified, it must be a negative number when sent from the client (difference between when the event was generated and when is was posted in milliseconds).\n   *\n   * @default now\n   */\n  timestamp?: Timestamp;\n}\n\nexport const isTrackedEvent = (ev: any): ev is TrackedEvent =>\n  ev && typeof ev.type === \"string\";\n","import type {\n  Domain,\n  Integer,\n  LocalID,\n  TrackedEvent,\n  View,\n  ViewTimingData,\n  Viewport,\n} from \"..\";\nimport { typeTest } from \"../util/type-test\";\n\nexport interface ClickIds {\n  google?: string;\n  googleDoubleClick?: string;\n  facebook?: string;\n  microsoft?: string;\n  googleAnalytics?: string;\n}\n\n/**\n * This event is sent a user navigates between views. (page, screen or similar).\n *\n * This event does not\n *\n */\nexport interface ViewEvent extends TrackedEvent {\n  type: \"view\";\n\n  /**\n   * @inheritdoc\n   */\n  clientId: LocalID;\n\n  /**\n   * The primary content used to generate the view including the personalization that led to the decision, if any.\n   * If views are loaded asynchronously in a way where they are not available immediately after a user navigates to a URL\n   * on the website, the view definition may follow from a separate patch event.\n   */\n  definition?: View;\n\n  /**\n   * The tab where the view was shown.\n   */\n  tab?: LocalID;\n\n  /**\n   * The fully qualified URL as shown in the address line of the browser excluding the domain.\n   */\n  href: string;\n\n  /**\n   * The hash part of the URL (/about-us#address).\n   */\n  hash?: string;\n\n  /**\n   * The path portion of the URL.\n   */\n  path?: string;\n\n  /** For how long the view was active. This is set via patches */\n  duration?: ViewTimingData;\n\n  /**\n   * The HTTP status for the response associated with the view.\n   *\n   * @default 200\n   */\n  httpStatus?: number;\n\n  /**\n   * Urchin Tracking Module (UTM) parameters as defined by (Wikipedia)[https://en.wikipedia.org/wiki/UTM_parameters].\n   */\n  utm?: {\n    source?: string;\n    medium?: string;\n    campaign?: string;\n    term?: string;\n    content?: string;\n  };\n  /**\n   * The query string parameters in the URL, e.g. utm_campaign.\n   * Each parameter can have multiple values, for example If the parameter is specified more than once.\n   * If the parameter is only specified once pipes, semicolons and commas are assumed to separate values (in that order).\n   * A parameter without a value will get recorded as an empty string.\n   * @example The URL https://www.foo.com/?utm_source=bar&utm_campaign=campaign1,campaign2&flag&gclid=123xyz&p1=a&p1=b&p2=a;b,c;d has these parameters:\n   *  utm_source = [\"bar\"] \\\n   *  utm_campaign = [\"campaign1\", \"campaign2\"] \\\n   *  gclid = [\"123xyz\"] \\\n   *  flag = [\"\"] \\\n   *  gclid=[\"123xyz\"] \\\n   *  p1=[\"a\", \"b\"] \\\n   *  p2=[\"a\", \"b,c\", \"d\"]\n   */\n  queryString?: Record<string, string[]>;\n\n  // queryString?: {\n  //   source: Record<string, string>;\n  //   parsed: Record<string, string[]>;\n  // };\n\n  /**\n   * The domain part of the href, if any.\n   */\n  domain?: Domain;\n\n  /**\n   * Indicates that this was the first view in the first tab the user opened.\n   * Note that this is NOT tied to the session. If a user closes all tabs and windows for the site and then later navigates back to the site in the same session this flag will be set again.\n   * @default false\n   */\n  landingPage?: boolean;\n\n  /**\n   * Indicates that no other tabs were open when the view happened.\n   * This flag allows a backend to extend the definition of a session that can last indefinitely but still restart after inactivity.\n   * By measuring the time between a view with this flag and the previous event from the same device, it is possible to see for how long the device has been away from the site.\n   * @default false\n   */\n  firstTab?: boolean;\n\n  /**\n   * The tab number in the current session.\n   */\n  tabNumber?: Integer;\n\n  /**\n   * The view number in the current tab.\n   * This is kept as a convenience, yet technically redundant since it follows from timestamps and context.\n   * @default 1\n   */\n  tabViewNumber?: Integer;\n\n  /**\n   * Number of redirects that happened during navigation to this view.*/\n  redirects?: Integer;\n\n  /**\n   * Navigation type.\n   */\n  navigationType?: \"navigate\" | \"back-forward\" | \"prerender\" | \"reload\";\n\n  /**\n   * Indicates whether the event was manually triggered through a tracker command, or happened automatically by the tracker's ability to infer navigation.\n   *\n   * @default \"automatic\"\n   */\n  mode?: \"manual\" | \"automatic\";\n\n  /**\n   * External referrer. Internal referrers follows from the event's {@link TrackedEvent[\"relatedView\"]} field.\n   */\n  externalReferrer?: {\n    href?: string;\n    domain?: Domain;\n  };\n\n  /**\n   * The size of the user's viewport (e.g. browser window) and how much it was scrolled when the page was opened.\n   */\n  viewport?: Viewport;\n\n  /**\n   * The type of view, e.g. \"page\" or \"screen\".\n   *\n   * @default \"page\"\n   */\n  viewType?: string;\n}\n\nexport const isViewEvent = typeTest<ViewEvent>(\"view\");\n","import type { TrackedEvent } from \"..\";\n\nexport const typeTest =\n  <T extends TrackedEvent>(...types: string[]) =>\n  (ev: any): ev is T =>\n    ev?.type && types.some((type) => type === ev?.type);\n","import {\n  DataClassification,\n  DataPurposeFlags,\n  MapVariableGetResult,\n  MapVariableSetResult,\n  RestrictVariableTargets,\n  StripPatchFunctions,\n  Variable,\n  VariableEnumProperties,\n  VariableGetResult,\n  VariableGetter,\n  VariableKey,\n  VariableResultStatus,\n  VariableSetResult,\n  VariableSetter,\n  variableScope,\n} from \"@tailjs/types\";\nimport {\n  EnumValue,\n  GeneralizeConstants,\n  If,\n  IfNot,\n  IsAny,\n  MaybeUndefined,\n  Nullish,\n  PrettifyIntersection,\n  ToggleArray,\n  UnknownIsAny,\n  createEnumAccessor,\n  createEnumPropertyParser,\n  isString,\n} from \"@tailjs/util\";\n\nimport type { LocalID, VariableScopeValue, View } from \"@tailjs/types\";\n\nexport type ReferringViewData = [\n  viewId: LocalID,\n  relatedEventId: LocalID | undefined\n];\n\ntype ReservedVariableDefinitions = {\n  view: View;\n  tags: string[];\n  rendered: boolean;\n  loaded: boolean;\n  tabIndex: number;\n  viewIndex: number;\n  scripts: Record<string, \"pending\" | \"loaded\" | \"failed\">;\n  referrer: ReferringViewData;\n};\n\nexport type ReservedVariableType<\n  K,\n  Default = any\n> = K extends ReservedVariableKey\n  ? ReservedVariableDefinitions[K]\n  : UnknownIsAny<Default>;\n\nexport type ReservedVariableKey = keyof ReservedVariableDefinitions;\n\nexport type LocalVariableKey = ReservedVariableKey | (string & {});\n\nexport enum LocalVariableScope {\n  /** Variables are only available in memory in the current view. */\n  View = -3,\n\n  /** Variables are only available in memory in the current tab, including between views in the same tab as navigation occurs. */\n  Tab = -2,\n\n  /** Variables are only available in memory and shared between all tabs. */\n  Shared = -1,\n}\n\nexport const localVariableScope = createEnumAccessor(\n  LocalVariableScope as typeof LocalVariableScope,\n  false,\n  \"local variable scope\"\n);\n\nexport const anyVariableScope = (scope: string | number) =>\n  localVariableScope.tryParse(scope) ?? variableScope(scope);\n\nexport const formatAnyVariableScope = (scope: string | number) =>\n  localVariableScope.format(scope) ?? variableScope.format(scope);\n\nexport type LocalVariableScopeValue<\n  Numeric extends boolean | undefined = boolean\n> = EnumValue<\n  typeof LocalVariableScope,\n  LocalVariableScope,\n  false,\n  Numeric\n> extends infer T\n  ? T\n  : never;\n\nexport type LocalVariableHeader<NumericEnums extends boolean = boolean> = {\n  key: LocalVariableKey;\n  scope: LocalVariableScopeValue<NumericEnums>;\n  targetId?: undefined;\n  classification?: DataClassification.Anonymous;\n  purposes?: DataPurposeFlags.Necessary;\n  version?: string;\n};\n\nexport type ReservedVariables<\n  K extends ReservedVariableKey = ReservedVariableKey\n> = K extends infer K\n  ? LocalVariable<\n      ReservedVariableDefinitions[K & ReservedVariableKey],\n      K & string\n    >\n  : never;\n\ntype LocalVariable<\n  T = unknown,\n  K extends string = LocalVariableKey,\n  NumericEnums extends boolean = true\n> = PrettifyIntersection<\n  {\n    key: K;\n    value: T;\n  } & LocalVariableHeader<NumericEnums>\n>;\n\ntype LocalVariableGetResult<\n  T = any,\n  K = LocalVariableKey,\n  Patched = false\n> = PrettifyIntersection<\n  (\n    | ({\n        status:\n          | VariableResultStatus.Success\n          | VariableResultStatus.Unchanged\n          | VariableResultStatus.Created;\n      } & LocalVariable<T, K & string>)\n    | IfNot<\n        Patched,\n        {\n          status: VariableResultStatus.NotFound;\n          value?: undefined;\n        }\n      >\n  ) &\n    LocalVariableHeader<true> & { key: K }\n>;\n\ntype LocalVariableSetResult<T, Source> = PrettifyIntersection<{\n  source: Source;\n  status:\n    | VariableResultStatus.Success\n    | VariableResultStatus.Unchanged\n    | VariableResultStatus.Created;\n  current: Source extends { value: infer Value }\n    ? Value extends undefined\n      ? undefined\n      : LocalVariable<T, Source extends { key: infer K } ? K & string : string>\n    : never;\n}>;\nexport type ClientVariable<\n  T = any,\n  K extends string = string,\n  Local = boolean,\n  NumericEnums extends boolean = true\n> = Local extends true\n  ? LocalVariable<T, K, NumericEnums>\n  : { key: K } & Omit<\n      RestrictVariableTargets<Variable<T, NumericEnums>>,\n      \"key\"\n    >;\n\nexport type VariableCacheSettings = {\n  /**\n   * The maximum number of milliseconds the value of this variable can be cached.\n   * If omitted or `true` the default value of 3 seconds will be used.\n   * `false` or 0 means the variable will not be cached.\n   */\n  cache?: number | boolean;\n};\n\nexport type ClientVariableCallback<\n  T = any,\n  K extends string = string & {},\n  Local = boolean\n> = (\n  value: ClientVariable<T, K, Local> | undefined,\n  previous: ClientVariable<T, K, Local> | undefined,\n  poll: () => void\n) => void;\n\nexport type ClientVariableGetter<\n  T = any,\n  K extends string = string & {},\n  Local = boolean\n> = PrettifyIntersection<\n  (Local extends true\n    ? { key: K } & LocalVariableHeader & {\n          init?: { value: GeneralizeConstants<T> | undefined };\n        }\n    : StripPatchFunctions<\n        RestrictVariableTargets<VariableGetter<T, K, false>, true>\n      >) & {\n    /**\n     * A callback to do something with the result.\n     * If the second function is invoked the variable will be polled for changes, and the callback will be invoked\n     * next time the value changes. To keep polling, keep calling the poll function every time the callback is invoked.\n     */\n    result?: ToggleArray<ClientVariableCallback<T, K, Local>>;\n\n    /**\n     * If the get requests fails this callback will be called instead of the entire operation throwing an error.\n     * If it returns `false` an error will still be thrown.\n     */\n    error?: (\n      result: ClientVariableGetResult<T, K, boolean, Local>,\n      error: string\n    ) => void | boolean;\n\n    /**\n     * Do not accept a cached version of the variable.\n     */\n    refresh?: boolean;\n  } & VariableCacheSettings\n>;\n\nexport type ClientVariableSetter<\n  T = any,\n  K extends string = string,\n  Local extends boolean = boolean,\n  HasResultHandler extends boolean = true\n> = PrettifyIntersection<\n  (Local extends true\n    ? LocalVariable<GeneralizeConstants<T> | undefined, K, boolean> & {\n        patch?: undefined;\n      }\n    : StripPatchFunctions<\n        RestrictVariableTargets<VariableSetter<T, K, false>, true>\n      >) & {\n    /** A callback that will get invoked when the set operation has completed. */\n    result?: HasResultHandler extends true\n      ? (\n          result: ClientVariableSetResult<\n            T,\n            ClientVariableSetter<T, K, Local, false>\n          >\n        ) => void\n      : undefined;\n\n    /**\n     * If the get requests fails this callback will be called instead of the entire operation throwing an error.\n     * If it returns `false` an error will still be thrown.\n     */\n    error?: (\n      result: ClientVariableSetResult<\n        any,\n        Local extends true\n          ? ClientVariableSetter<any, any, true>\n          : ClientVariableSetter<any, any, false>\n      >,\n      error: string\n    ) => void | boolean;\n  } & VariableCacheSettings\n>;\n\nexport type ClientScopeValue<\n  NumericEnums extends boolean = boolean,\n  Local extends boolean = boolean\n> = Local extends true\n  ? LocalVariableScopeValue<NumericEnums>\n  : VariableScopeValue<NumericEnums>;\n\nexport type ClientVariableKey<\n  NumericEnums extends boolean = boolean,\n  Local extends boolean = boolean\n> = Local extends false\n  ? VariableKey<NumericEnums>\n  : { key: string; scope: LocalVariableScopeValue<NumericEnums> };\n\ntype MapLocalGetResult<Getter> = Getter extends ClientVariableGetter<\n  infer T,\n  infer K & string,\n  true\n>\n  ? LocalVariableGetResult<\n      ReservedVariableType<K, T>,\n      K,\n      Getter extends { init: { value?: infer V } }\n        ? If<IsAny<V>, false, undefined extends V ? false : true>\n        : false\n    >\n  : Getter extends Nullish\n  ? undefined\n  : never;\n\ntype MapLocalSetResult<Setter> = Setter extends ClientVariableSetter<\n  infer T,\n  infer K & string,\n  true\n>\n  ? LocalVariableSetResult<\n      T extends undefined ? undefined : ReservedVariableType<K, T>,\n      Setter\n    >\n  : Setter extends Nullish\n  ? undefined\n  : never;\n\ntype MapClientVariableResult<P, Getter> = P extends {\n  scope: LocalVariableScopeValue;\n}\n  ? If<Getter, MapLocalGetResult<P>, MapLocalSetResult<P>>\n  : RestrictVariableTargets<\n      If<Getter, MapVariableGetResult<P>, MapVariableSetResult<P>>\n    >;\n\nexport type ClientVariableGetResult<\n  T = any,\n  K extends string = string,\n  Patched = boolean,\n  Local = boolean\n> = Local extends true\n  ? LocalVariableGetResult<T, K, Patched>\n  : RestrictVariableTargets<VariableGetResult<T, K, Patched>>;\n\nexport type ClientVariableSetResult<\n  T = any,\n  Source extends ClientVariableSetter = ClientVariableSetter<\n    any,\n    string,\n    boolean\n  >\n> = Source extends ClientVariableSetter<any, any, true>\n  ? LocalVariableSetResult<T, Source>\n  : Source extends ClientVariableSetter<any, any, false>\n  ? RestrictVariableTargets<VariableSetResult<T, Source>>\n  : any;\n\nexport type ClientVariableResults<\n  P extends readonly any[],\n  Getters\n> = P extends readonly []\n  ? []\n  : P extends readonly [infer Result, ...infer Rest]\n  ? readonly [\n      MapClientVariableResult<Result, Getters>,\n      ...ClientVariableResults<Rest, Getters>\n    ]\n  : P extends readonly (infer Result)[]\n  ? readonly MapClientVariableResult<Result, Getters>[]\n  : never;\n\nexport const isLocalScopeKey = (\n  key: any\n): key is {\n  scope: LocalVariableScopeValue;\n} => !!localVariableScope.tryParse(key?.scope);\n\nexport const toNumericVariableEnums = createEnumPropertyParser(\n  { scope: localVariableScope },\n  VariableEnumProperties\n);\n\nexport const variableKeyToString: <\n  S extends\n    | ClientVariableKey\n    | { source?: ClientVariableKey }\n    | string\n    | Nullish\n>(\n  key: S\n) => MaybeUndefined<S, string> = (key: any): any =>\n  key == null\n    ? undefined\n    : isString(key)\n    ? key\n    : key.source\n    ? variableKeyToString(key.source)!\n    : `${anyVariableScope(key.scope)}\\0${key.key}\\0${key.targetId ?? \"\"}`;\n\nexport const stringToVariableKey = (key: string): ClientVariableKey => {\n  const parts = key.split(\"\\0\");\n  return {\n    scope: +parts[0],\n    key: parts[1],\n    targetId: parts[2],\n  } as any;\n};\n","import { CLIENT_STORAGE_PREFIX } from \"@constants\";\n\nimport { TrackedEvent } from \"@tailjs/types\";\nimport { Nullish, throwError } from \"@tailjs/util\";\n\nexport const DEBUG = true;\nexport const HEARTBEAT_FREQUENCY = 5_000;\nexport const REQUEST_LOCK_KEY = CLIENT_STORAGE_PREFIX + \"rq\";\nexport const VARIABLE_POLL_FREQUENCY = 3_000;\nexport const VARIABLE_CACHE_DURATION = 3_000;\nexport const EVENT_POST_FREQUENCY = 5000;\n\nexport const NOT_INITIALIZED = () => () => throwError(\"Not initialized.\");\n\nexport type TrackerContext = {\n  deviceSessionId?: string;\n\n  applyEventExtensions(event: TrackedEvent): TrackedEvent | undefined;\n\n  validateKey: {\n    (key: string | Nullish, throwIfInvalid?: true): true;\n    (key: string | Nullish, throwIfInvalid: false): boolean;\n  };\n};\n","import { toggleAnsi, type Nullish } from \"@tailjs/util\";\n\nexport const SSR = typeof window === \"undefined\";\n\nconst win = window;\nconst doc = document;\nconst nav = navigator;\nconst body = doc.body;\nconst loc = location;\nconst perf = performance;\nconst hist = win.history;\nexport {\n  body,\n  doc as document,\n  hist as history,\n  loc as location,\n  nav as navigator,\n  perf as performance,\n  win as window,\n};\n\nexport const createElement = (tagName: string) => doc.createElement(tagName);\n\nexport const matchSelector = (node: Element | Nullish, selector: string) =>\n  !!node?.matches(selector);\n\ntoggleAnsi(!!(win as any).chrome);\n","import type { TrackerClientConfiguration } from \"..\";\n\nexport const isTracker = \"__isTracker\";\n\nexport const trackerConfig: Required<TrackerClientConfiguration> = {\n  name: \"tail\",\n  src: \"/_t.js\",\n  disabled: false,\n  postEvents: true,\n  postFrequency: 2000,\n  requestTimeout: 5000,\n  encryptionKey: null,\n  key: null,\n  apiKey: null,\n  json: false,\n\n  /**\n   * Log events to the browser's developer console.\n   */\n  impressionThreshold: 1000,\n  captureContextMenu: true,\n\n  tags: { default: [\"data-id\", \"data-name\"] },\n};\n","const codes: number[] = [];\nconst chars: number[] = [];\nexport const charCode = (s: string, index = 0) => s.charCodeAt(index);\nexport const fromCharCodes = (chars: number[]) => String.fromCharCode(...chars);\n\n[...\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"].forEach(\n  (p, i) => (codes[(chars[i] = p.charCodeAt(0))] = i)\n);\n\n/**\n * Encodes an array of bytes to Base64URL without padding (URL safe Base64 using `-` and `_` instead of `+` and `/`).\n *\n * (thanks to Jon Leighton at https://gist.github.com/jonleighton/958841).\n */\nexport const to64u = (bytes: Uint8Array) => {\n  let i = 0;\n  let chunk: number;\n  const n = bytes.length;\n\n  const base64: number[] = [];\n  while (i < n) {\n    chunk = (bytes[i++] << 16) | (bytes[i++] << 8) | bytes[i++];\n    base64.push(\n      chars[(chunk & 16515072) >> 18],\n      chars[(chunk & 258048) >> 12],\n      chars[(chunk & 4032) >> 6],\n      chars[chunk & 63]\n    );\n  }\n  base64.length += n - i;\n\n  return fromCharCodes(base64);\n};\n\n/**\n * Decodes a BaseURL encoded string (without padding).\n */\nexport const from64u = (encoded: string) => {\n  let i = 0;\n  let j = 0;\n  let p: number;\n  const n = encoded.length;\n  const bytes = new Uint8Array(3 * ((n / 4) | 0) + (((n + 3) & 3) % 3));\n  while (i < n) {\n    bytes[j++] =\n      (codes[charCode(encoded, i++)] << 2) |\n      ((p = codes[charCode(encoded, i++)]) >> 4);\n    if (i < n) {\n      bytes[j++] = ((p & 15) << 4) | ((p = codes[charCode(encoded, i++)]) >> 2);\n      if (i < n) {\n        bytes[j++] = ((p & 3) << 6) | codes[charCode(encoded, i++)];\n      }\n    }\n  }\n  return bytes;\n};\n\n/**\n * Decodes the specified UTF8 bytes to a string.\n *\n * [Thanks!](https://gist.github.com/Yaffle/5458286)\n */\nexport const decodeUtf8 = <T extends Uint8Array | string | null | undefined>(\n  octets: T\n): T extends null | undefined ? undefined : string => {\n  if (octets == null) return undefined as any;\n  if (typeof octets === \"string\") return octets as any;\n\n  const chars: number[] = [];\n  let i = 0;\n  while (i < octets.length) {\n    let octet = octets[i];\n    let bytesNeeded = 0;\n    let codePoint = 0;\n    if (octet <= 0x7f) {\n      bytesNeeded = 0;\n      codePoint = octet & 0xff;\n    } else if (octet <= 0xdf) {\n      bytesNeeded = 1;\n      codePoint = octet & 0x1f;\n    } else if (octet <= 0xef) {\n      bytesNeeded = 2;\n      codePoint = octet & 0x0f;\n    } else if (octet <= 0xf4) {\n      bytesNeeded = 3;\n      codePoint = octet & 0x07;\n    }\n    if (octets.length - i - bytesNeeded > 0) {\n      var k = 0;\n      while (k < bytesNeeded) {\n        octet = octets[i + k + 1];\n        codePoint = (codePoint << 6) | (octet & 0x3f);\n        k += 1;\n      }\n    } else {\n      codePoint = 0xfffd;\n      bytesNeeded = octets.length - i;\n    }\n    chars.push(codePoint);\n    i += bytesNeeded + 1;\n  }\n\n  return String.fromCodePoint(...chars) as any;\n};\n","import { Nullish, isBoolean } from \"@tailjs/util\";\n\n/** The number of leading entropy bytes. */\nconst ENTROPY = 4;\n/** The padding length. Cipher texts will always be a multiple of this. */\nconst MAX_PADDING = 16;\n\n// https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV_hash_parameters\ntype Fnv1aConfiguration = [offset: bigint, prime: bigint];\nconst FNVs: Record<number, Fnv1aConfiguration> = {\n  32: [0x811c9dc5n, 0x01000193n],\n  64: [0xcbf29ce484222325n, 0x100000001b3n],\n  128: [0x6c62272e07bb014262b821756295c58dn, 0x1000000000000000000013bn],\n};\n\n/** A random byte. */\nconst entropy = (max = 256) => (max * Math.random()) | 0;\n\nexport type HashFunction<T> = {\n  (value: T, bits?: 32 | 64 | 128): string;\n  <B extends boolean>(value: T, numeric: B): B extends true ? number : string;\n};\n\nexport type CipherFunction = (data: Uint8Array) => Uint8Array;\nexport type CipherFunctions = [\n  CipherFunction,\n  CipherFunction,\n  HashFunction<Uint8Array>\n];\n\n/**\n * Linear-feedback shift register encryption with leading entropy and fixed padding.\n *\n * Used for on-the-fly encryption. It is not the strongest encryption, yet it is annoyingly challenging to break.\n * Due to entropy the same text with the same key will result in a different cipher text every time.\n *\n *\n * \"It is fast and small.\", Bob said to Alice. \"It is all right.\", she replied.\n *\n * (Adapted from http://quinnftw.com/xor-ciphers/).\n */\nexport const lfsr = (key?: string | Nullish): CipherFunctions => {\n  /** Number of source bytes for (en/de)cryption. */\n  let n: number;\n  /** Source byte index. */\n  let i: number;\n  /** Target byte index. */\n  let j: number;\n  /** Padding length. */\n  let pad: number;\n\n  /** Holds the (en/de)crypted bytes. */\n  let target: Uint8Array;\n\n  /** Hash code. */\n  let hash = 0n;\n\n  /** Bits for FNV-1a hash code. */\n  let bits = 0;\n\n  /** Prime for FNV-1a hash code. */\n  let prime = 0n;\n\n  /**\n   * The sliding window with the past ciphers used to update for the mixer.\n   * It works as a linear feedback shfit register to bolster against frequency analysis.\n   *\n   * http://quinnftw.com/xor-ciphers/.\n   */\n  let window: number[] = [];\n\n  /** The mixer used to iteratively update the key while (en/de)crypting. */\n  let mixer = 0;\n  /** The mixer modulo 256. */\n  let mixer255 = 0;\n\n  /** Current start of the mixer window. */\n  let iw = 0;\n  /** Initial mixer. */\n  let mixer0 = 0;\n  /** Initial bytes for the mixer. */\n  const window0: number[] = [];\n\n  for (\n    iw = 0;\n    iw < key?.length!;\n    mixer0 += window0[iw] = key!.charCodeAt(iw++)\n  );\n\n  /** Resets the mixer when (en/de)cryption starts. */\n  const resetMixer = key\n    ? () => {\n        window = [...window0];\n        mixer255 = (mixer = mixer0) & 255;\n        iw = -1;\n      }\n    : () => {};\n\n  /** Updates the mixer with the (en/de)crypted byte. */\n  const updateMixer = (c: number) => (\n    (mixer255 =\n      (mixer +=\n        // Subtract the byte leaving the window.\n        -window[(iw = (iw + 1) % window.length)] +\n        // Add the byte entering the window.\n        (window[iw] = c)) & 255),\n    c\n  );\n\n  return [\n    // Encrypt\n    key\n      ? (source) => {\n          resetMixer();\n          n = source.length;\n          pad = MAX_PADDING - ((n + ENTROPY) % MAX_PADDING);\n          target = new Uint8Array(ENTROPY + n + pad);\n\n          for (j = 0; j < ENTROPY - 1; target[j++] = updateMixer(entropy()));\n\n          // Align last entropy byte to max padding and add padding.\n          target[j++] = updateMixer(\n            mixer255 ^ (MAX_PADDING * entropy(256 / MAX_PADDING) + pad)\n          );\n\n          for (i = 0; i < n; target[j++] = updateMixer(mixer255 ^ source[i++]));\n          while (pad--) target[j++] = entropy();\n\n          return target;\n        }\n      : (source) => source,\n\n    // Decrypt\n    key\n      ? (source) => {\n          resetMixer();\n          for (i = 0; i < ENTROPY - 1; updateMixer(source[i++]));\n          n =\n            source.length -\n            ENTROPY -\n            // Padding. If padding is zero, all last PADDING characters are padding.\n            ((mixer255 ^ updateMixer(source[i++])) % MAX_PADDING ||\n              MAX_PADDING);\n          if (n <= 0) return new Uint8Array(0);\n\n          target = new Uint8Array(n);\n\n          for (j = 0; j < n; target[j++] = mixer255 ^ updateMixer(source[i++]));\n          return target;\n        }\n      : (cipher) => cipher,\n\n    // FNV1a hash code.\n    (source: Uint8Array, numericOrBits: any = 64) => {\n      if (source == null) return null;\n      bits = isBoolean(numericOrBits) ? 64 : numericOrBits;\n\n      resetMixer();\n\n      [hash, prime] = FNVs[bits];\n\n      for (\n        i = 0;\n        i < source.length;\n        hash = BigInt.asUintN(\n          bits,\n          (hash ^ BigInt(mixer255 ^ updateMixer(source[i++]))) * prime\n        )\n      );\n\n      return numericOrBits === true\n        ? Number(\n            BigInt(Number.MIN_SAFE_INTEGER) +\n              (hash % BigInt(Number.MAX_SAFE_INTEGER - Number.MIN_SAFE_INTEGER))\n          )\n        : (hash.toString(36) as any);\n    },\n  ];\n};\n","﻿(function () {\r\n\t\"use strict\";\r\n\r\n\t// Serializes a value to a MessagePack byte array.\r\n\t//\r\n\t// data: The value to serialize. This can be a scalar, array or object.\r\n\t// options: An object that defines additional options.\r\n\t// - multiple: (boolean) Indicates whether multiple values in data are concatenated to multiple MessagePack arrays. Default: false.\r\n\t// - invalidTypeReplacement:\r\n\t//   (any) The value that is used to replace values of unsupported types.\r\n\t//   (function) A function that returns such a value, given the original value as parameter.\r\n\tfunction serialize(data, options) {\r\n\t\tif (options && options.multiple && !Array.isArray(data)) {\r\n\t\t\tthrow new Error(\"Invalid argument type: Expected an Array to serialize multiple values.\");\r\n\t\t}\r\n\t\tconst pow32 = 0x100000000;   // 2^32\r\n\t\tlet floatBuffer, floatView;\r\n\t\tlet array = new Uint8Array(128);\r\n\t\tlet length = 0;\r\n\t\tif (options && options.multiple) {\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tappend(data[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tappend(data);\r\n\t\t}\r\n\t\treturn array.subarray(0, length);\r\n\r\n\t\tfunction append(data, isReplacement) {\r\n\t\t\tswitch (typeof data) {\r\n\t\t\t\tcase \"undefined\":\r\n\t\t\t\t\tappendNull(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\tappendBoolean(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"number\":\r\n\t\t\t\t\tappendNumber(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"string\":\r\n\t\t\t\t\tappendString(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"object\":\r\n\t\t\t\t\tif (data === null)\r\n\t\t\t\t\t\tappendNull(data);\r\n\t\t\t\t\telse if (data instanceof Date)\r\n\t\t\t\t\t\tappendDate(data);\r\n\t\t\t\t\telse if (Array.isArray(data))\r\n\t\t\t\t\t\tappendArray(data);\r\n\t\t\t\t\telse if (data instanceof Uint8Array || data instanceof Uint8ClampedArray)\r\n\t\t\t\t\t\tappendBinArray(data);\r\n\t\t\t\t\telse if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Uint16Array ||\r\n\t\t\t\t\t\tdata instanceof Int32Array || data instanceof Uint32Array ||\r\n\t\t\t\t\t\tdata instanceof Float32Array || data instanceof Float64Array)\r\n\t\t\t\t\t\tappendArray(data);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tappendObject(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!isReplacement && options && options.invalidTypeReplacement) {\r\n\t\t\t\t\t\tif (typeof options.invalidTypeReplacement === \"function\")\r\n\t\t\t\t\t\t\tappend(options.invalidTypeReplacement(data), true);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tappend(options.invalidTypeReplacement, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow new Error(\"Invalid argument type: The type '\" + (typeof data) + \"' cannot be serialized.\");\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction appendNull(data) {\r\n\t\t\tappendByte(0xc0);\r\n\t\t}\r\n\r\n\t\tfunction appendBoolean(data) {\r\n\t\t\tappendByte(data ? 0xc3 : 0xc2);\r\n\t\t}\r\n\r\n\t\tfunction appendNumber(data) {\r\n\t\t\tif (isFinite(data) && Number.isSafeInteger(data)) {\r\n\t\t\t\t// Integer\r\n\t\t\t\tif (data >= 0 && data <= 0x7f) {\r\n\t\t\t\t\tappendByte(data);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data < 0 && data >= -0x20) {\r\n\t\t\t\t\tappendByte(data);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data > 0 && data <= 0xff) {   // uint8\r\n\t\t\t\t\tappendBytes([0xcc, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data >= -0x80 && data <= 0x7f) {   // int8\r\n\t\t\t\t\tappendBytes([0xd0, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data > 0 && data <= 0xffff) {   // uint16\r\n\t\t\t\t\tappendBytes([0xcd, data >>> 8, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data >= -0x8000 && data <= 0x7fff) {   // int16\r\n\t\t\t\t\tappendBytes([0xd1, data >>> 8, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data > 0 && data <= 0xffffffff) {   // uint32\r\n\t\t\t\t\tappendBytes([0xce, data >>> 24, data >>> 16, data >>> 8, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data >= -0x80000000 && data <= 0x7fffffff) {   // int32\r\n\t\t\t\t\tappendBytes([0xd2, data >>> 24, data >>> 16, data >>> 8, data]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data > 0 && data <= 0xffffffffffffffff) {   // uint64\r\n\t\t\t\t\t// Split 64 bit number into two 32 bit numbers because JavaScript only regards\r\n\t\t\t\t\t// 32 bits for bitwise operations.\r\n\t\t\t\t\tlet hi = data / pow32;\r\n\t\t\t\t\tlet lo = data % pow32;\r\n\t\t\t\t\tappendBytes([0xd3, hi >>> 24, hi >>> 16, hi >>> 8, hi, lo >>> 24, lo >>> 16, lo >>> 8, lo]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data >= -0x8000000000000000 && data <= 0x7fffffffffffffff) {   // int64\r\n\t\t\t\t\tappendByte(0xd3);\r\n\t\t\t\t\tappendInt64(data);\r\n\t\t\t\t}\r\n\t\t\t\telse if (data < 0) {   // below int64\r\n\t\t\t\t\tappendBytes([0xd3, 0x80, 0, 0, 0, 0, 0, 0, 0]);\r\n\t\t\t\t}\r\n\t\t\t\telse {   // above uint64\r\n\t\t\t\t\tappendBytes([0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Float\r\n\t\t\t\tif (!floatView) {\r\n\t\t\t\t\tfloatBuffer = new ArrayBuffer(8);\r\n\t\t\t\t\tfloatView = new DataView(floatBuffer);\r\n\t\t\t\t}\r\n\t\t\t\tfloatView.setFloat64(0, data);\r\n\t\t\t\tappendByte(0xcb);\r\n\t\t\t\tappendBytes(new Uint8Array(floatBuffer));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction appendString(data) {\r\n\t\t\tlet bytes = encodeUtf8(data);\r\n\t\t\tlet length = bytes.length;\r\n\r\n\t\t\tif (length <= 0x1f)\r\n\t\t\t\tappendByte(0xa0 + length);\r\n\t\t\telse if (length <= 0xff)\r\n\t\t\t\tappendBytes([0xd9, length]);\r\n\t\t\telse if (length <= 0xffff)\r\n\t\t\t\tappendBytes([0xda, length >>> 8, length]);\r\n\t\t\telse\r\n\t\t\t\tappendBytes([0xdb, length >>> 24, length >>> 16, length >>> 8, length]);\r\n\r\n\t\t\tappendBytes(bytes);\r\n\t\t}\r\n\r\n\t\tfunction appendArray(data) {\r\n\t\t\tlet length = data.length;\r\n\r\n\t\t\tif (length <= 0xf)\r\n\t\t\t\tappendByte(0x90 + length);\r\n\t\t\telse if (length <= 0xffff)\r\n\t\t\t\tappendBytes([0xdc, length >>> 8, length]);\r\n\t\t\telse\r\n\t\t\t\tappendBytes([0xdd, length >>> 24, length >>> 16, length >>> 8, length]);\r\n\r\n\t\t\tfor (let index = 0; index < length; index++) {\r\n\t\t\t\tappend(data[index]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction appendBinArray(data) {\r\n\t\t\tlet length = data.length;\r\n\r\n\t\t\tif (length <= 0xff)\r\n\t\t\t\tappendBytes([0xc4, length]);\r\n\t\t\telse if (length <= 0xffff)\r\n\t\t\t\tappendBytes([0xc5, length >>> 8, length]);\r\n\t\t\telse\r\n\t\t\t\tappendBytes([0xc6, length >>> 24, length >>> 16, length >>> 8, length]);\r\n\r\n\t\t\tappendBytes(data);\r\n\t\t}\r\n\r\n\t\tfunction appendObject(data) {\r\n\t\t\tlet length = 0;\r\n\t\t\tfor (let key in data) {\r\n\t\t\t\tif (data[key] !== undefined) {\r\n\t\t\t\t\tlength++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (length <= 0xf)\r\n\t\t\t\tappendByte(0x80 + length);\r\n\t\t\telse if (length <= 0xffff)\r\n\t\t\t\tappendBytes([0xde, length >>> 8, length]);\r\n\t\t\telse\r\n\t\t\t\tappendBytes([0xdf, length >>> 24, length >>> 16, length >>> 8, length]);\r\n\r\n\t\t\tfor (let key in data) {\r\n\t\t\t\tlet value = data[key];\r\n\t\t\t\tif (value !== undefined) {\r\n\t\t\t\t\tappend(key);\r\n\t\t\t\t\tappend(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction appendDate(data) {\r\n\t\t\tlet sec = data.getTime() / 1000;\r\n\t\t\tif (data.getMilliseconds() === 0 && sec >= 0 && sec < 0x100000000) {   // 32 bit seconds\r\n\t\t\t\tappendBytes([0xd6, 0xff, sec >>> 24, sec >>> 16, sec >>> 8, sec]);\r\n\t\t\t}\r\n\t\t\telse if (sec >= 0 && sec < 0x400000000) {   // 30 bit nanoseconds, 34 bit seconds\r\n\t\t\t\tlet ns = data.getMilliseconds() * 1000000;\r\n\t\t\t\tappendBytes([0xd7, 0xff, ns >>> 22, ns >>> 14, ns >>> 6, ((ns << 2) >>> 0) | (sec / pow32), sec >>> 24, sec >>> 16, sec >>> 8, sec]);\r\n\t\t\t}\r\n\t\t\telse {   // 32 bit nanoseconds, 64 bit seconds, negative values allowed\r\n\t\t\t\tlet ns = data.getMilliseconds() * 1000000;\r\n\t\t\t\tappendBytes([0xc7, 12, 0xff, ns >>> 24, ns >>> 16, ns >>> 8, ns]);\r\n\t\t\t\tappendInt64(sec);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction appendByte(byte) {\r\n\t\t\tif (array.length < length + 1) {\r\n\t\t\t\tlet newLength = array.length * 2;\r\n\t\t\t\twhile (newLength < length + 1)\r\n\t\t\t\t\tnewLength *= 2;\r\n\t\t\t\tlet newArray = new Uint8Array(newLength);\r\n\t\t\t\tnewArray.set(array);\r\n\t\t\t\tarray = newArray;\r\n\t\t\t}\r\n\t\t\tarray[length] = byte;\r\n\t\t\tlength++;\r\n\t\t}\r\n\r\n\t\tfunction appendBytes(bytes) {\r\n\t\t\tif (array.length < length + bytes.length) {\r\n\t\t\t\tlet newLength = array.length * 2;\r\n\t\t\t\twhile (newLength < length + bytes.length)\r\n\t\t\t\t\tnewLength *= 2;\r\n\t\t\t\tlet newArray = new Uint8Array(newLength);\r\n\t\t\t\tnewArray.set(array);\r\n\t\t\t\tarray = newArray;\r\n\t\t\t}\r\n\t\t\tarray.set(bytes, length);\r\n\t\t\tlength += bytes.length;\r\n\t\t}\r\n\r\n\t\tfunction appendInt64(value) {\r\n\t\t\t// Split 64 bit number into two 32 bit numbers because JavaScript only regards 32 bits for\r\n\t\t\t// bitwise operations.\r\n\t\t\tlet hi, lo;\r\n\t\t\tif (value >= 0) {\r\n\t\t\t\t// Same as uint64\r\n\t\t\t\thi = value / pow32;\r\n\t\t\t\tlo = value % pow32;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Split absolute value to high and low, then NOT and ADD(1) to restore negativity\r\n\t\t\t\tvalue++;\r\n\t\t\t\thi = Math.abs(value) / pow32;\r\n\t\t\t\tlo = Math.abs(value) % pow32;\r\n\t\t\t\thi = ~hi;\r\n\t\t\t\tlo = ~lo;\r\n\t\t\t}\r\n\t\t\tappendBytes([hi >>> 24, hi >>> 16, hi >>> 8, hi, lo >>> 24, lo >>> 16, lo >>> 8, lo]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Deserializes a MessagePack byte array to a value.\r\n\t//\r\n\t// array: The MessagePack byte array to deserialize. This must be an Array or Uint8Array containing bytes, not a string.\r\n\t// options: An object that defines additional options.\r\n\t// - multiple: (boolean) Indicates whether multiple concatenated MessagePack arrays are returned as an array. Default: false.\r\n\tfunction deserialize(array, options) {\r\n\t\tconst pow32 = 0x100000000;   // 2^32\r\n\t\tlet pos = 0;\r\n\t\tif (array instanceof ArrayBuffer) {\r\n\t\t\tarray = new Uint8Array(array);\r\n\t\t}\r\n\t\tif (typeof array !== \"object\" || typeof array.length === \"undefined\") {\r\n\t\t\tthrow new Error(\"Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.\");\r\n\t\t}\r\n\t\tif (!array.length) {\r\n\t\t\tthrow new Error(\"Invalid argument: The byte array to deserialize is empty.\");\r\n\t\t}\r\n\t\tif (!(array instanceof Uint8Array)) {\r\n\t\t\tarray = new Uint8Array(array);\r\n\t\t}\r\n\t\tlet data;\r\n\t\tif (options && options.multiple) {\r\n\t\t\t// Read as many messages as are available\r\n\t\t\tdata = [];\r\n\t\t\twhile (pos < array.length) {\r\n\t\t\t\tdata.push(read());\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Read only one message and ignore additional data\r\n\t\t\tdata = read();\r\n\t\t}\r\n\t\treturn data;\r\n\r\n\t\tfunction read() {\r\n\t\t\tconst byte = array[pos++];\r\n\t\t\tif (byte >= 0x00 && byte <= 0x7f) return byte;   // positive fixint\r\n\t\t\tif (byte >= 0x80 && byte <= 0x8f) return readMap(byte - 0x80);   // fixmap\r\n\t\t\tif (byte >= 0x90 && byte <= 0x9f) return readArray(byte - 0x90);   // fixarray\r\n\t\t\tif (byte >= 0xa0 && byte <= 0xbf) return readStr(byte - 0xa0);   // fixstr\r\n\t\t\tif (byte === 0xc0) return null;   // nil\r\n\t\t\tif (byte === 0xc1) throw new Error(\"Invalid byte code 0xc1 found.\");   // never used\r\n\t\t\tif (byte === 0xc2) return false;   // false\r\n\t\t\tif (byte === 0xc3) return true;   // true\r\n\t\t\tif (byte === 0xc4) return readBin(-1, 1);   // bin 8\r\n\t\t\tif (byte === 0xc5) return readBin(-1, 2);   // bin 16\r\n\t\t\tif (byte === 0xc6) return readBin(-1, 4);   // bin 32\r\n\t\t\tif (byte === 0xc7) return readExt(-1, 1);   // ext 8\r\n\t\t\tif (byte === 0xc8) return readExt(-1, 2);   // ext 16\r\n\t\t\tif (byte === 0xc9) return readExt(-1, 4);   // ext 32\r\n\t\t\tif (byte === 0xca) return readFloat(4);   // float 32\r\n\t\t\tif (byte === 0xcb) return readFloat(8);   // float 64\r\n\t\t\tif (byte === 0xcc) return readUInt(1);   // uint 8\r\n\t\t\tif (byte === 0xcd) return readUInt(2);   // uint 16\r\n\t\t\tif (byte === 0xce) return readUInt(4);   // uint 32\r\n\t\t\tif (byte === 0xcf) return readUInt(8);   // uint 64\r\n\t\t\tif (byte === 0xd0) return readInt(1);   // int 8\r\n\t\t\tif (byte === 0xd1) return readInt(2);   // int 16\r\n\t\t\tif (byte === 0xd2) return readInt(4);   // int 32\r\n\t\t\tif (byte === 0xd3) return readInt(8);   // int 64\r\n\t\t\tif (byte === 0xd4) return readExt(1);   // fixext 1\r\n\t\t\tif (byte === 0xd5) return readExt(2);   // fixext 2\r\n\t\t\tif (byte === 0xd6) return readExt(4);   // fixext 4\r\n\t\t\tif (byte === 0xd7) return readExt(8);   // fixext 8\r\n\t\t\tif (byte === 0xd8) return readExt(16);   // fixext 16\r\n\t\t\tif (byte === 0xd9) return readStr(-1, 1);   // str 8\r\n\t\t\tif (byte === 0xda) return readStr(-1, 2);   // str 16\r\n\t\t\tif (byte === 0xdb) return readStr(-1, 4);   // str 32\r\n\t\t\tif (byte === 0xdc) return readArray(-1, 2);   // array 16\r\n\t\t\tif (byte === 0xdd) return readArray(-1, 4);   // array 32\r\n\t\t\tif (byte === 0xde) return readMap(-1, 2);   // map 16\r\n\t\t\tif (byte === 0xdf) return readMap(-1, 4);   // map 32\r\n\t\t\tif (byte >= 0xe0 && byte <= 0xff) return byte - 256;   // negative fixint\r\n\t\t\tconsole.debug(\"msgpack array:\", array);\r\n\t\t\tthrow new Error(\"Invalid byte value '\" + byte + \"' at index \" + (pos - 1) + \" in the MessagePack binary data (length \" + array.length + \"): Expecting a range of 0 to 255. This is not a byte array.\");\r\n\t\t}\r\n\r\n\t\tfunction readInt(size) {\r\n\t\t\tlet value = 0;\r\n\t\t\tlet first = true;\r\n\t\t\twhile (size-- > 0) {\r\n\t\t\t\tif (first) {\r\n\t\t\t\t\tlet byte = array[pos++];\r\n\t\t\t\t\tvalue += byte & 0x7f;\r\n\t\t\t\t\tif (byte & 0x80) {\r\n\t\t\t\t\t\tvalue -= 0x80;   // Treat most-significant bit as -2^i instead of 2^i\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue *= 256;\r\n\t\t\t\t\tvalue += array[pos++];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tfunction readUInt(size) {\r\n\t\t\tlet value = 0;\r\n\t\t\twhile (size-- > 0) {\r\n\t\t\t\tvalue *= 256;\r\n\t\t\t\tvalue += array[pos++];\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tfunction readFloat(size) {\r\n\t\t\tlet view = new DataView(array.buffer, pos + array.byteOffset, size);\r\n\t\t\tpos += size;\r\n\t\t\tif (size === 4)\r\n\t\t\t\treturn view.getFloat32(0, false);\r\n\t\t\tif (size === 8)\r\n\t\t\t\treturn view.getFloat64(0, false);\r\n\t\t}\r\n\r\n\t\tfunction readBin(size, lengthSize) {\r\n\t\t\tif (size < 0) size = readUInt(lengthSize);\r\n\t\t\tlet data = array.subarray(pos, pos + size);\r\n\t\t\tpos += size;\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\tfunction readMap(size, lengthSize) {\r\n\t\t\tif (size < 0) size = readUInt(lengthSize);\r\n\t\t\tlet data = {};\r\n\t\t\twhile (size-- > 0) {\r\n\t\t\t\tlet key = read();\r\n\t\t\t\tdata[key] = read();\r\n\t\t\t}\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\tfunction readArray(size, lengthSize) {\r\n\t\t\tif (size < 0) size = readUInt(lengthSize);\r\n\t\t\tlet data = [];\r\n\t\t\twhile (size-- > 0) {\r\n\t\t\t\tdata.push(read());\r\n\t\t\t}\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\tfunction readStr(size, lengthSize) {\r\n\t\t\tif (size < 0) size = readUInt(lengthSize);\r\n\t\t\tlet start = pos;\r\n\t\t\tpos += size;\r\n\t\t\treturn decodeUtf8(array, start, size);\r\n\t\t}\r\n\r\n\t\tfunction readExt(size, lengthSize) {\r\n\t\t\tif (size < 0) size = readUInt(lengthSize);\r\n\t\t\tlet type = readUInt(1);\r\n\t\t\tlet data = readBin(size);\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\treturn readExtDate(data);\r\n\t\t\t}\r\n\t\t\treturn { type: type, data: data };\r\n\t\t}\r\n\r\n\t\tfunction readExtDate(data) {\r\n\t\t\tif (data.length === 4) {\r\n\t\t\t\tlet sec = ((data[0] << 24) >>> 0) +\r\n\t\t\t\t\t((data[1] << 16) >>> 0) +\r\n\t\t\t\t\t((data[2] << 8) >>> 0) +\r\n\t\t\t\t\tdata[3];\r\n\t\t\t\treturn new Date(sec * 1000);\r\n\t\t\t}\r\n\t\t\tif (data.length === 8) {\r\n\t\t\t\tlet ns = ((data[0] << 22) >>> 0) +\r\n\t\t\t\t\t((data[1] << 14) >>> 0) +\r\n\t\t\t\t\t((data[2] << 6) >>> 0) +\r\n\t\t\t\t\t(data[3] >>> 2);\r\n\t\t\t\tlet sec = ((data[3] & 0x3) * pow32) +\r\n\t\t\t\t\t((data[4] << 24) >>> 0) +\r\n\t\t\t\t\t((data[5] << 16) >>> 0) +\r\n\t\t\t\t\t((data[6] << 8) >>> 0) +\r\n\t\t\t\t\tdata[7];\r\n\t\t\t\treturn new Date(sec * 1000 + ns / 1000000);\r\n\t\t\t}\r\n\t\t\tif (data.length === 12) {\r\n\t\t\t\tlet ns = ((data[0] << 24) >>> 0) +\r\n\t\t\t\t\t((data[1] << 16) >>> 0) +\r\n\t\t\t\t\t((data[2] << 8) >>> 0) +\r\n\t\t\t\t\tdata[3];\r\n\t\t\t\tpos -= 8;\r\n\t\t\t\tlet sec = readInt(8);\r\n\t\t\t\treturn new Date(sec * 1000 + ns / 1000000);\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Invalid data length for a date value.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Encodes a string to UTF-8 bytes.\r\n\tfunction encodeUtf8(str) {\r\n\t\t// Prevent excessive array allocation and slicing for all 7-bit characters\r\n\t\tlet ascii = true, length = str.length;\r\n\t\tfor (let x = 0; x < length; x++) {\r\n\t\t\tif (str.charCodeAt(x) > 127) {\r\n\t\t\t\tascii = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Based on: https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\r\n\t\tlet i = 0, bytes = new Uint8Array(str.length * (ascii ? 1 : 4));\r\n\t\tfor (let ci = 0; ci !== length; ci++) {\r\n\t\t\tlet c = str.charCodeAt(ci);\r\n\t\t\tif (c < 128) {\r\n\t\t\t\tbytes[i++] = c;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (c < 2048) {\r\n\t\t\t\tbytes[i++] = c >> 6 | 192;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (c > 0xd7ff && c < 0xdc00) {\r\n\t\t\t\t\tif (++ci >= length)\r\n\t\t\t\t\t\tthrow new Error(\"UTF-8 encode: incomplete surrogate pair\");\r\n\t\t\t\t\tlet c2 = str.charCodeAt(ci);\r\n\t\t\t\t\tif (c2 < 0xdc00 || c2 > 0xdfff)\r\n\t\t\t\t\t\tthrow new Error(\"UTF-8 encode: second surrogate character 0x\" + c2.toString(16) + \" at index \" + ci + \" out of range\");\r\n\t\t\t\t\tc = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n\t\t\t\t\tbytes[i++] = c >> 18 | 240;\r\n\t\t\t\t\tbytes[i++] = c >> 12 & 63 | 128;\r\n\t\t\t\t}\r\n\t\t\t\telse bytes[i++] = c >> 12 | 224;\r\n\t\t\t\tbytes[i++] = c >> 6 & 63 | 128;\r\n\t\t\t}\r\n\t\t\tbytes[i++] = c & 63 | 128;\r\n\t\t}\r\n\t\treturn ascii ? bytes : bytes.subarray(0, i);\r\n\t}\r\n\r\n\t// Decodes a string from UTF-8 bytes.\r\n\tfunction decodeUtf8(bytes, start, length) {\r\n\t\t// Based on: https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\r\n\t\tlet i = start, str = \"\";\r\n\t\tlength += start;\r\n\t\twhile (i < length) {\r\n\t\t\tlet c = bytes[i++];\r\n\t\t\tif (c > 127) {\r\n\t\t\t\tif (c > 191 && c < 224) {\r\n\t\t\t\t\tif (i >= length)\r\n\t\t\t\t\t\tthrow new Error(\"UTF-8 decode: incomplete 2-byte sequence\");\r\n\t\t\t\t\tc = (c & 31) << 6 | bytes[i++] & 63;\r\n\t\t\t\t}\r\n\t\t\t\telse if (c > 223 && c < 240) {\r\n\t\t\t\t\tif (i + 1 >= length)\r\n\t\t\t\t\t\tthrow new Error(\"UTF-8 decode: incomplete 3-byte sequence\");\r\n\t\t\t\t\tc = (c & 15) << 12 | (bytes[i++] & 63) << 6 | bytes[i++] & 63;\r\n\t\t\t\t}\r\n\t\t\t\telse if (c > 239 && c < 248) {\r\n\t\t\t\t\tif (i + 2 >= length)\r\n\t\t\t\t\t\tthrow new Error(\"UTF-8 decode: incomplete 4-byte sequence\");\r\n\t\t\t\t\tc = (c & 7) << 18 | (bytes[i++] & 63) << 12 | (bytes[i++] & 63) << 6 | bytes[i++] & 63;\r\n\t\t\t\t}\r\n\t\t\t\telse throw new Error(\"UTF-8 decode: unknown multibyte start 0x\" + c.toString(16) + \" at index \" + (i - 1));\r\n\t\t\t}\r\n\t\t\tif (c <= 0xffff) str += String.fromCharCode(c);\r\n\t\t\telse if (c <= 0x10ffff) {\r\n\t\t\t\tc -= 0x10000;\r\n\t\t\t\tstr += String.fromCharCode(c >> 10 | 0xd800)\r\n\t\t\t\tstr += String.fromCharCode(c & 0x3FF | 0xdc00)\r\n\t\t\t}\r\n\t\t\telse throw new Error(\"UTF-8 decode: code point 0x\" + c.toString(16) + \" exceeds UTF-16 reach\");\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\r\n\t// The exported functions\r\n\tlet msgpack = {\r\n\t\tserialize: serialize,\r\n\t\tdeserialize: deserialize,\r\n\r\n\t\t// Compatibility with other libraries\r\n\t\tencode: serialize,\r\n\t\tdecode: deserialize\r\n\t};\r\n\r\n\t// Environment detection\r\n\tif (typeof module === \"object\" && module && typeof module.exports === \"object\") {\r\n\t\t// Node.js\r\n\t\tmodule.exports = msgpack;\r\n\t}\r\n\telse {\r\n\t\t// Global object\r\n\t\twindow[window.msgpackJsName || \"msgpack\"] = msgpack;\r\n\t}\r\n\r\n})();\r\n","import {\n  CONTEXT_NAV_QUERY,\n  EVENT_HUB_QUERY,\n  VARIABLES_QUERY,\n} from \"@constants\";\n\nimport {\n  F,\n  T,\n  ansi,\n  isFunction,\n  isObject,\n  join,\n  parseUri,\n  replace,\n  split,\n  type Nullish,\n} from \"@tailjs/util\";\nimport { jsonEncode } from \"@tailjs/transport\";\nimport { document } from \".\";\n\nexport const ERR_BUFFER_OVERFLOW = \"buffer-overflow\";\nexport const ERR_POST_FAILED = \"post-failed\";\nexport const ERR_INVALID_COMMAND = \"invalid-command\";\nexport const ERR_INTERNAL_ERROR = \"internal-error\";\nexport const ERR_ARGUMENT_ERROR = \"invalid-argument\";\nexport const ERR_RESERVED = \"reserved\";\nexport const ERR_CONFIG_LOCKED = \"config-locked\";\nexport const ERR_DUPLICATE_KEY = \"key\";\n\nconst src = split(\"\" + document.currentScript![\"src\"], \"#\");\nconst args = split(\"\" + (src[1] || \"\"), \";\");\n\nexport const SCRIPT_SRC = src[0];\nexport const TRACKER_DOMAIN = args[1] || parseUri(SCRIPT_SRC, false)?.host!;\n\nexport const isInternalUrl = (url: string | Nullish) =>\n  !!(\n    TRACKER_DOMAIN && parseUri(url, false)?.host?.endsWith(TRACKER_DOMAIN) === T\n  );\n\nexport const mapUrl = (...urlParts: string[]) =>\n  replace(join(urlParts), /(^(?=\\?))|(^\\.(?=\\/))/, SCRIPT_SRC.split(\"?\")[0]);\n\nexport const VAR_URL = mapUrl(\"?\", EVENT_HUB_QUERY);\nexport const MNT_URL = mapUrl(\"?\", CONTEXT_NAV_QUERY);\nexport const USR_URL = mapUrl(\"?\", VARIABLES_QUERY);\n\nexport const groupValue = Symbol();\nexport const childGroups = Symbol();\n\nexport const debug = (\n  value: any,\n  group?: string,\n  collapsed = T,\n  nested = F\n) => {\n  group &&\n    (collapsed ? console.groupCollapsed : console.group)(\n      (nested ? \"\" : ansi(\"tail.js: \", \"90;3\")) + group\n    );\n  const children = value?.[childGroups];\n  children && (value = value[groupValue]);\n  value != null &&\n    console.log(\n      isObject(value)\n        ? ansi(jsonEncode(value), \"94\")\n        : // ? window[\"chrome\"]\n        //   ? prettyPrint(value).join(\"\")\n        //   : JSON.stringify(value, null, 2)\n        isFunction(value)\n        ? \"\" + value\n        : value\n    );\n  children &&\n    children.forEach(([value, group, collapsed]) =>\n      debug(value, group, collapsed, true)\n    );\n\n  group && console.groupEnd();\n};\n","import { createEvent, type Nullish } from \"@tailjs/util\";\nimport { Decoder, Encoder, createTransport } from \"@tailjs/transport\";\nimport { DEBUG, NOT_INITIALIZED } from \".\";\n\nexport const [httpEncode, httpDecode] = createTransport();\n\nexport let [httpEncrypt, httpDecrypt] = [\n  NOT_INITIALIZED,\n  NOT_INITIALIZED,\n] as any as [Encoder, Decoder];\n\nexport let USE_ENCRYPTION = true;\n\nexport const [addEncryptionNegotiatedListener, dispatchEncryptionNegotiated] =\n  createEvent<[httpEncrypt: Encoder, httpDecrypt: Decoder]>();\n\nexport const setStorageKey = (key: string | Nullish) => {\n  if (httpDecrypt !== NOT_INITIALIZED) return;\n\n  [httpEncrypt, httpDecrypt] = createTransport(key, {\n    json: !key,\n    prettify: false,\n  });\n\n  USE_ENCRYPTION = !!key;\n\n  dispatchEncryptionNegotiated(httpEncrypt, httpDecrypt);\n};\n","import { NonAsync, isString } from \"@tailjs/util\";\r\n\r\nexport const errorLogger = (source: any) => (error: any) =>\r\n  logError(source, error);\r\n\r\nexport const logError: {\r\n  (source: any, message: string | undefined, ...args: any[]): void;\r\n  (source: any, arg1: Exclude<NonAsync, string>, ...args: any[]): void;\r\n} = (...args: any[]) => {\r\n  let source = args.shift();\r\n  let message = isString(args[1])\r\n    ? args.shift()\r\n    : args[1]?.message ?? \"An error occurred\";\r\n  console.error(message, source.id ?? source, ...args);\r\n};\r\n","import { clock, createEvent, createTimer } from \"@tailjs/util\";\nimport { listen } from \".\";\n\ntype PageLoadListenerArgs = [loaded: boolean, stateDuration: number];\nconst [addPageLoadedListener, dispatchPageLoaded] =\n  createEvent<PageLoadListenerArgs>();\n\nconst [addPageVisibleListener, dispatchPageVisible] =\n  createEvent<[visible: boolean, unloading: boolean, delta: number]>();\n\nconst maybeDispatchPageLoaded = (newLoaded: boolean) =>\n  loaded !== (loaded = newLoaded) &&\n  dispatchPageLoaded((loaded = false), sleepTimer(true, true));\n\nconst maybeDispatchPageVisible = (loaded: boolean) =>\n  visible !==\n    (visible = loaded ? document.visibilityState === \"visible\" : false) &&\n  dispatchPageVisible(visible, !loaded, visibleTimer(true, true));\n\n// A visibilitychange event may not be triggered if the page BF cache loads/unloads.\naddPageLoadedListener(maybeDispatchPageVisible);\n\nlet loaded = true;\nlet visible = false;\nlet visibleTimer = createTimer(false);\nlet sleepTimer = createTimer(false);\nlisten(window, [\"pagehide\", \"freeze\"], () => maybeDispatchPageLoaded(false));\nlisten(window, [\"pageshow\", \"resume\"], () => maybeDispatchPageLoaded(true));\nlisten(\n  document,\n  \"visibilitychange\",\n  () => (\n    maybeDispatchPageVisible(true), visible && maybeDispatchPageLoaded(true)\n  )\n);\n\ndispatchPageLoaded(loaded, sleepTimer(true, true));\n\ntype PageActivatedListenerArgs = [activated: boolean, totalDuration: number];\nlet activated = false;\nlet activeTime = createTimer(false);\n\nconst [addPageActivatedListener, dispatchPageActivated] =\n  createEvent<PageActivatedListenerArgs>();\n\nconst activationTimeout = clock({\n  callback: () =>\n    activated && dispatchPageActivated((activated = false), activeTime(false)),\n  frequency: 20000,\n  once: true,\n  paused: true,\n});\nconst setActivated = () =>\n  !activated &&\n  (dispatchPageActivated((activated = true), activeTime(true)),\n  activationTimeout.restart());\n\nlisten(window, [\"focus\", \"scroll\"], setActivated);\nlisten(window, \"blur\", () => activationTimeout.trigger());\n\nlisten(\n  document.body,\n  [\"keydown\", \"pointerdown\", \"pointermove\", \"scroll\"],\n  setActivated\n);\n\nsetActivated();\n\nexport const getActiveTime = () => activeTime();\nexport {\n  addPageActivatedListener,\n  addPageLoadedListener,\n  addPageVisibleListener,\n};\n","import { CLIENT_STATE_CHANNEL_ID } from \"@constants\";\n\nimport { Uuid } from \"@tailjs/types\";\nimport {\n  MaybeUndefined,\n  Nullish,\n  assign,\n  clear,\n  clock,\n  concat,\n  createEvent,\n  filter,\n  forEach,\n  map,\n  now,\n  obj,\n  replace,\n} from \"@tailjs/util\";\nimport {\n  GetterIntellisense,\n  HEARTBEAT_FREQUENCY,\n  NOT_INITIALIZED,\n  VARIABLE_CACHE_DURATION,\n  addEncryptionNegotiatedListener,\n  addPageLoadedListener,\n  listen,\n} from \".\";\nimport {\n  ClientVariable,\n  ClientVariableGetter,\n  ClientVariableResults,\n  LocalVariableScope,\n  toNumericVariableEnums,\n  variableKeyToString,\n} from \"..\";\n\nexport interface TabState {\n  id: string;\n  heartbeat: number;\n  viewId?: string;\n}\n\ninterface StateVariableMetadata {\n  cache: [timestamp: number, expires: number];\n}\n\nexport type StateVariable = ClientVariable & StateVariableMetadata;\n\nexport interface State {\n  knownTabs: Record<string, TabState>;\n  /** All variables except local. */\n  variables: Record<string, StateVariable>;\n}\n\nlet localId = 0;\n\nexport let TAB_ID: string = undefined as any;\nexport const nextId = () => (TAB_ID ?? NOT_INITIALIZED()) + \"_\" + nextLocalId();\nexport const nextLocalId = () =>\n  (now(true) - (parseInt(TAB_ID.slice(0, -2), 36) || 0)).toString(36) +\n  \"_\" +\n  (++localId).toString(36);\n\nconst randomValues = (arg: any) => crypto.getRandomValues(arg);\nexport const uuidv4 = (): Uuid =>\n  replace(\n    ([1e7] as any) + -1e3 + -4e3 + -8e3 + -1e11,\n    /[018]/g,\n    (c: any) => (\n      (c *= 1),\n      (c ^ (randomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n    )\n  );\n\n/** All variables, both local and others. */\nlet tabVariables: Record<string, StateVariable> = {};\n\nconst tabState: TabState = {\n  id: TAB_ID,\n  heartbeat: now(),\n};\n\nconst state: State = {\n  knownTabs: {\n    [TAB_ID]: tabState,\n  },\n  variables: {},\n};\n\ntype StateMessage =\n  | { type: \"query\"; payload?: undefined }\n  | {\n      type: \"set\";\n      payload: State;\n    }\n  | {\n      type: \"patch\";\n      payload: Record<string, StateVariable | undefined>;\n    }\n  | {\n      type: \"tab\";\n      payload: TabState | undefined;\n    };\n\nconst [addStateListener, dispatchState] = createEvent<\n  | [event: \"ready\", state: State, self: boolean]\n  | [event: \"tab\", tab: TabState, self: boolean]\n>();\n\nconst [addVariablesChangedListener, dispatchVariablesChanged] =\n  createEvent<\n    [\n      changes: [current: StateVariable, previous: StateVariable | undefined][],\n      all: Readonly<typeof tabVariables>,\n      local: boolean\n    ]\n  >();\n\nexport { addVariablesChangedListener };\n\nlet post: (message: StateMessage, target?: string) => void = NOT_INITIALIZED;\n\nexport const tryGetVariable: {\n  <K extends ClientVariableGetter>(key: K | GetterIntellisense[0]):\n    | (ClientVariableResults<[K], true>[0] & StateVariableMetadata)\n    | undefined;\n  <K extends string | Nullish>(key: K): StateVariable | undefined;\n} = (key: any) => tabVariables[variableKeyToString(key)!] as any;\n\nexport const setLocalVariables = (\n  ...variables: ClientVariable<any, string, true, boolean>[]\n) =>\n  updateVariableState(\n    (variables as StateVariable[]).map(\n      (variable: StateVariable) => (\n        (variable.cache = [now(), VARIABLE_CACHE_DURATION]),\n        toNumericVariableEnums(variable)\n      )\n    )\n  );\n\nconst getVariableChanges = (variables: (StateVariable | undefined)[]) =>\n  map(\n    variables,\n    (current) =>\n      current && [current, tabVariables[variableKeyToString(current)]]\n  );\n\nexport const updateVariableState = (\n  updates: (StateVariable | undefined)[] | undefined\n) => {\n  const changes = map(\n    updates,\n    (variable) => variable && [variableKeyToString(variable), variable]\n  );\n  if (!changes?.length) return;\n\n  // Collect now before updating the state, but dispatch after the state has changed.\n  const changedEventData = getVariableChanges(updates!);\n\n  assign(tabVariables, changes);\n  const sharedChanges = filter(\n    changes,\n    (variable) => variable[1].scope > LocalVariableScope.Tab\n  );\n\n  if (sharedChanges.length) {\n    assign(state.variables, sharedChanges);\n    post({ type: \"patch\", payload: obj(sharedChanges) });\n  }\n\n  dispatchVariablesChanged(changedEventData, tabVariables, true);\n};\n\naddEncryptionNegotiatedListener((httpEncrypt, httpDecrypt) => {\n  // Keep tab ID and variables between pages in the same tab.\n  addPageLoadedListener((loaded) => {\n    if (loaded) {\n      const localState = httpDecrypt(\n        sessionStorage.getItem(CLIENT_STATE_CHANNEL_ID)\n      ) as [tabId: string, variables: StateVariable[]];\n      sessionStorage.removeItem(CLIENT_STATE_CHANNEL_ID);\n\n      TAB_ID =\n        localState?.[0] ??\n        now(true).toString(36) +\n          Math.trunc(1296 * Math.random())\n            .toString(36)\n            .padStart(2, \"0\");\n\n      tabVariables = obj(\n        concat(\n          // Whatever view variables we already had in case of bf navigation.\n          filter(\n            tabVariables,\n            ([, variable]) => variable.scope === LocalVariableScope.View\n          ),\n          map(localState?.[1], (variable) => [\n            variableKeyToString(variable),\n            variable,\n          ])\n        )\n      )!;\n    } else {\n      sessionStorage.setItem(\n        CLIENT_STATE_CHANNEL_ID,\n        httpEncrypt([\n          TAB_ID,\n          map(tabVariables, ([, variable]) =>\n            variable.scope !== LocalVariableScope.View ? variable : undefined\n          ),\n        ])\n      );\n    }\n  }, true);\n\n  post = (message: StateMessage, target?: string) => {\n    if (!httpEncrypt) return;\n    localStorage.setItem(\n      CLIENT_STATE_CHANNEL_ID,\n      httpEncrypt([TAB_ID, message, target])\n    );\n    localStorage.removeItem(CLIENT_STATE_CHANNEL_ID);\n  };\n\n  listen(window, \"storage\", (ev) => {\n    if (ev.key === CLIENT_STATE_CHANNEL_ID) {\n      const message = httpDecrypt?.(ev.newValue) as [\n        sender: string,\n        message: StateMessage,\n        target?: string\n      ];\n      if (!message || (message[2] && message[2] !== TAB_ID)) return;\n      const [sender, { type, payload }] = message;\n\n      if (type === \"query\") {\n        !initTimeout.active && post({ type: \"set\", payload: state }, sender);\n      } else if (type === \"set\" && initTimeout.active) {\n        assign(state, payload);\n        assign(tabVariables, payload.variables);\n        initTimeout.trigger();\n      } else if (type === \"patch\") {\n        // Collect now before updating the state, but dispatch after the state has changed.\n        const changedEventData = getVariableChanges(map(payload, 1));\n\n        assign(state.variables, payload);\n        assign(tabVariables, payload);\n\n        dispatchVariablesChanged(changedEventData, tabVariables, false);\n      } else if (type === \"tab\") {\n        assign(state.knownTabs, sender, payload);\n        payload && dispatchState(\"tab\", payload, false);\n      }\n    }\n  });\n\n  const initTimeout = clock(() => dispatchState(\"ready\", state, true), -25);\n\n  const heartbeat = clock({\n    callback: () => {\n      const timeout = now() - HEARTBEAT_FREQUENCY * 2;\n      forEach(\n        state?.knownTabs,\n        // Remove tabs that no longer responds (presumably closed but may also have been frozen).\n        ([tabId, tabState]) =>\n          tabState[0] < timeout && clear(state!.knownTabs, tabId)\n      );\n      tabState.heartbeat = now();\n      post({ type: \"tab\", payload: tabState });\n    },\n    frequency: HEARTBEAT_FREQUENCY,\n    paused: true,\n  });\n\n  const toggleTab = (loading: boolean) => {\n    post({ type: \"tab\", payload: loading ? tabState : undefined });\n    if (loading) {\n      initTimeout.restart();\n      post({ type: \"query\" });\n    } else {\n      initTimeout.toggle(false);\n    }\n    heartbeat.toggle(loading);\n  };\n\n  addPageLoadedListener((loaded) => toggleTab(loaded), true);\n}, true);\nexport { addStateListener };\n","import {\n  PrettifyIntersection,\n  createEvent,\n  delay,\n  forEachAsync,\n  isFunction,\n  stop,\n  throwError,\n  undefined,\n} from \"@tailjs/util\";\nimport {\n  REQUEST_LOCK_KEY,\n  USE_ENCRYPTION,\n  httpDecrypt,\n  httpEncrypt,\n  sharedLock,\n} from \".\";\n\nexport type RequestOptions<Beacon extends boolean = false> =\n  PrettifyIntersection<\n    {\n      encrypt?: boolean;\n    } & (Beacon extends true ? { beacon: true } : { beacon?: false })\n  >;\n\nconst [addRequestHandler, dispatchRequest] =\n  createEvent<\n    [url: string, data: any, retry: number, update: (data: any) => void]\n  >();\nconst [addResponseHandler, dispatchResponse] = createEvent<[response: any]>();\nexport { addRequestHandler, addResponseHandler };\n\nconst requestLock = sharedLock(REQUEST_LOCK_KEY);\n\n/**\n * If a function, this is run before a request is made (including retries). It is run within the lock, and allows the requested data to be modified.\n * If it returns false, the request is aborted and if it returns `undefined` or `true` the existing data is used.\n */\ntype RequestData<T> =\n  | T\n  | ((data: T | undefined, retry: number) => T | boolean | undefined);\n\nexport const request: {\n  <Data = any, Response = any>(\n    url: string,\n    data: RequestData<Data>,\n    options?: RequestOptions<false>\n  ): Promise<Response>;\n  <Data = any>(\n    url: string,\n    data: RequestData<Data>,\n    options: RequestOptions<true>\n  ): void;\n} = async (\n  url: string,\n  data: any,\n  { beacon = false, encrypt = true }: RequestOptions<boolean> = {}\n) => {\n  encrypt = encrypt && USE_ENCRYPTION;\n  let cancel = false;\n  let currentData: any;\n  let serialized: any;\n\n  const prepareRequestData = (retry: number) => {\n    const prepareResult = isFunction(data) ? data?.(currentData, retry) : data;\n    if (prepareResult === false) {\n      return false;\n    }\n\n    prepareResult != null &&\n      prepareResult !== true &&\n      (currentData = prepareResult);\n\n    dispatchRequest(\n      url,\n      currentData,\n      retry,\n      (newData) => (\n        (cancel = currentData === undefined), (currentData = newData)\n      )\n    );\n\n    return cancel\n      ? false\n      : (serialized = encrypt\n          ? httpEncrypt(currentData, true)\n          : JSON.stringify(currentData));\n  };\n\n  if (beacon) {\n    if (!prepareRequestData(0)) return;\n\n    !navigator.sendBeacon(\n      url,\n      new Blob(currentData != null ? [serialized] : [], {\n        // This content type avoids the overhead of the \"preflight\" request that is otherwise made by browsers in cross-domain scenarios.\n        // (application/x-www-form-urlencoded could also work).\n        type: \"text/plain; charset=iso-8859-1\",\n      })\n    ) && throwError(\"Beacon send failed.\");\n  } else {\n    let retries = 1;\n    return await requestLock(() =>\n      forEachAsync(1, async (retry) => {\n        if (!prepareRequestData(retry)) return stop();\n\n        const response = await fetch(url, {\n          method: currentData != null ? \"POST\" : \"GET\",\n          cache: \"no-cache\",\n          credentials: \"include\",\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"text/plain; charset=iso-8859-1\",\n          },\n          body: serialized,\n        });\n\n        if (response.status >= 400) {\n          return retry === retries - 1\n            ? stop(throwError(`Invalid response: ${await response.text()}`))\n            : (console.warn(\n                `Request to ${url} failed on attempt ${retry + 1}/${3}.`\n              ),\n              await delay((1 + retry) * 200));\n        }\n\n        const body = encrypt\n          ? new Uint8Array(await response.arrayBuffer())\n          : await response.text();\n\n        const parsed = body?.length\n          ? (encrypt ? httpDecrypt : JSON.parse)?.(body as any)\n          : undefined;\n\n        if (parsed != null) {\n          dispatchResponse(parsed);\n        }\n        return stop(parsed);\n      })\n    );\n  }\n};\n","import {\n  delay,\n  now,\n  promise,\n  race,\n  throwError,\n  tryCatchAsync,\n} from \"@tailjs/util\";\nimport {\n  TAB_ID,\n  httpDecode,\n  httpDecrypt,\n  httpEncode,\n  httpEncrypt,\n  listen,\n} from \".\";\n\n/**\n *  A lock that is shared between all tabs.\n * It would seem tempting to use the browser's native LockManager, yet that disables bf_cache, so we don't.\n */\nexport const sharedLock = (\n  lockId: string,\n  { timeout = 1000, encrypt = true, retries: defaultRetries = 10 } = {}\n): (<R, TO extends number | undefined = undefined>(\n  action: () => PromiseLike<R>,\n  timeout?: TO,\n  retries?: number\n) => Promise<TO extends number ? undefined | R : R>) => {\n  type LockState = [owner: string, expires: number];\n  const get = () =>\n    (encrypt ? httpDecrypt<LockState> : httpDecode<LockState>)(\n      localStorage.getItem(lockId)\n    );\n\n  let intervalId = 0;\n  const renew = () =>\n    localStorage.setItem(\n      lockId,\n      (encrypt ? httpEncrypt : httpEncode)([TAB_ID, now() + timeout])\n    );\n\n  return (async (\n    action: any,\n    localTimeout?: number,\n    retries = localTimeout != null ? 1 : defaultRetries\n  ) => {\n    while (retries--) {\n      let current = get();\n      if (!current || current[1] < now()) {\n        renew();\n        if (get()?.[0] === TAB_ID) {\n          // Keep lock alive while the action executes.\n          timeout > 0 && (intervalId = setInterval(() => renew(), timeout / 2));\n          return await tryCatchAsync(action, true, () => {\n            clearInterval(intervalId);\n            localStorage.removeItem(lockId);\n          });\n        }\n      }\n      let waitHandle = promise();\n      const [unbind] = listen(window, \"storage\", (ev) => {\n        if (ev.key === lockId && !ev.newValue) {\n          waitHandle.resolve();\n        }\n      });\n      await race(delay(localTimeout ?? timeout), waitHandle);\n      unbind();\n    }\n    localTimeout == null && throwError(lockId + \" could not be acquired.\");\n  }) as any;\n};\n","import {\n  DataClassification,\n  DataPurposeFlags,\n  PostRequest,\n  PostResponse,\n  VariableResultPromise,\n  VariableResultStatus,\n  dataPurposes,\n  getResultVariable,\n  toVariableResultPromise,\n} from \"@tailjs/types\";\nimport {\n  If,\n  MaybeArray,\n  Nullish,\n  apply,\n  assign,\n  clock,\n  concat,\n  forEach,\n  get,\n  isBoolean,\n  isPlainObject,\n  isString,\n  map,\n  now,\n  pick,\n  push,\n  remove,\n  required,\n  structuralEquals,\n  throwError,\n} from \"@tailjs/util\";\nimport {\n  StateVariable,\n  TrackerContext,\n  VARIABLE_CACHE_DURATION,\n  VARIABLE_POLL_FREQUENCY,\n  addPageLoadedListener,\n  addResponseHandler,\n  addVariablesChangedListener,\n  request,\n  tryGetVariable,\n  updateVariableState,\n} from \".\";\nimport {\n  ClientVariable,\n  ClientVariableCallback,\n  ClientVariableGetResult,\n  ClientVariableGetter,\n  ClientVariableResults,\n  ClientVariableSetResult,\n  ClientVariableSetter,\n  LocalVariableScopeValue,\n  ReservedVariableKey,\n  ReservedVariableType,\n  isLocalScopeKey,\n  localVariableScope,\n  stringToVariableKey,\n  toNumericVariableEnums,\n  variableKeyToString,\n} from \"..\";\n\nconst KEY_PROPS: any[] = [\"scope\", \"key\", \"targetId\", \"version\"];\nconst VARIABLE_PROPS: any[] = [\n  ...KEY_PROPS,\n  \"created\",\n  \"modified\",\n  \"classification\",\n  \"purposes\",\n  \"tags\",\n  \"readonly\",\n  \"value\",\n];\nconst GETTER_PROPS: any[] = [...KEY_PROPS, \"init\", \"purpose\", \"refresh\"];\nconst SETTER_PROPS: any[] = [...VARIABLE_PROPS, \"value\", \"force\", \"patch\"];\n\nexport interface TrackerVariableStorage {\n  // Omit `init` to allow intellisense to suggest the actual type for reserved keys.\n  get<K extends readonly Omit<ClientVariableGetter, \"init\">[]>(\n    ...getters:\n      | [\n          key: string,\n          ...getters: (K & ValidateParameters<K, true>) | GetterIntellisense\n        ]\n      | (K & ValidateParameters<K, true>)\n      | GetterIntellisense\n  ): VariableResultPromise<ClientVariableResults<K, true>>;\n  // Omit `value` to allow intellisense to suggest the actual type for reserved keys.\n  set<V extends readonly Omit<ClientVariableSetter, \"value\">[]>(\n    ...setters:\n      | [\n          key: string,\n          ...setters: (V & ValidateParameters<V, false>) | SetterIntellisense\n        ]\n      | (V & ValidateParameters<V, false>)\n      | SetterIntellisense\n  ): VariableResultPromise<ClientVariableResults<V, false>>;\n}\nconst activeCallbacks = new Map<string, Set<ClientVariableCallback>>();\n\nexport const createVariableStorage = (\n  endpoint: string,\n  context?: TrackerContext\n): TrackerVariableStorage => {\n  const pollVariables = clock(async () => {\n    const getters: ClientVariableGetter[] = map(\n      activeCallbacks,\n      ([key, callbacks]) => ({\n        ...stringToVariableKey(key),\n        result: [...callbacks],\n      })\n    ) as any;\n\n    getters.length && (await vars.get(...(getters as any)));\n  }, VARIABLE_POLL_FREQUENCY);\n\n  const registerCallbacks = (\n    mappedKey: string,\n    callbacks?: MaybeArray<ClientVariableCallback>\n  ) =>\n    callbacks &&\n    apply(callbacks, (callback) =>\n      get(activeCallbacks, mappedKey, () => new Set()).add(callback)\n    );\n\n  const invokeCallbacks = (\n    variable: ClientVariable | Nullish,\n    previous?: ClientVariable\n  ) => {\n    if (!variable) return;\n\n    const key = variableKeyToString(variable);\n\n    const callbacks = remove(activeCallbacks, key);\n    if (!callbacks?.size) return;\n\n    let poll: boolean;\n\n    if (\n      variable?.purposes === previous?.purposes &&\n      variable?.classification == previous?.classification &&\n      structuralEquals(variable?.value, previous?.value)\n    ) {\n      // No change.\n      return;\n    }\n\n    forEach(callbacks, (callback) => {\n      poll = false;\n      callback?.(variable, previous, (toggle = true) => (poll = toggle));\n      poll && registerCallbacks(key, callback);\n    });\n  };\n\n  addPageLoadedListener(\n    (loaded, stateDuration) =>\n      pollVariables.toggle(\n        loaded,\n        loaded && stateDuration >= VARIABLE_POLL_FREQUENCY\n      ),\n    true\n  );\n\n  addVariablesChangedListener((changes) =>\n    forEach(changes, ([current, previous]) =>\n      invokeCallbacks(current, previous)\n    )\n  );\n\n  const cacheDurations = new Map<string, number>();\n  const updateCacheDuration = (\n    key: string,\n    duration: undefined | number | boolean\n  ) =>\n    assign(\n      cacheDurations,\n      key,\n      isBoolean(duration) ? (duration ? undefined : 0) : duration\n    );\n\n  const vars = {\n    get: (\n      ...getters: ClientVariableGetter[]\n    ): VariableResultPromise<ClientVariableResults<any, true>> =>\n      toVariableResultPromise(async () => {\n        let key: string | Nullish;\n        if (!getters[0] || isString(getters[0])) {\n          key = getters[0];\n          getters = getters.slice(1) as any;\n        }\n        context?.validateKey(key);\n\n        const results: [ClientVariableGetResult, number][] = [];\n\n        let requestGetters = map(getters, (getter, sourceIndex) => [\n          getter,\n          sourceIndex,\n        ]);\n\n        const newLocal: StateVariable[] = [];\n        const response =\n          (\n            await request<PostRequest, PostResponse>(endpoint, () => {\n              requestGetters = map(requestGetters, ([getter, sourceIndex]) => {\n                if (!getter) return undefined;\n\n                const key = variableKeyToString(getter);\n                registerCallbacks(key, getter.result);\n\n                const current = tryGetVariable(key);\n\n                getter.init && updateCacheDuration(key, getter.cache);\n                const purposes = (getter as any).purposes;\n                if (!((purposes ?? ~0) & (current?.purposes ?? ~0))) {\n                  push(results, [\n                    {\n                      ...getter,\n                      status: VariableResultStatus.Denied,\n                      error:\n                        \"No consent for \" + dataPurposes.logFormat(purposes),\n                    } as any,\n                    sourceIndex,\n                  ]);\n                } else if (!getter.refresh && current?.[1]! < now()) {\n                  push(results, [\n                    {\n                      ...current,\n                      status: VariableResultStatus.Success,\n                    } as any,\n                    sourceIndex,\n                  ]);\n                } else if (isLocalScopeKey(getter)) {\n                  if (isPlainObject(getter.init)) {\n                    const local: ClientVariableGetResult<any, any, any, true> =\n                      {\n                        ...toNumericVariableEnums(getter),\n                        status: VariableResultStatus.Created,\n                        ...getter.init,\n                      };\n                    if (local.value != null) {\n                      push(newLocal, setResultExpiration(local));\n                      push(results, [local, sourceIndex]);\n                    }\n                  }\n                } else {\n                  return [pick(getter, GETTER_PROPS), sourceIndex];\n                }\n              });\n\n              return requestGetters.length\n                ? {\n                    variables: { get: map(requestGetters, 0) as any },\n                    deviceSessionId: context?.deviceSessionId,\n                  }\n                : false;\n            })\n          )?.variables?.get ?? [];\n\n        push(\n          results,\n          ...map(\n            response,\n            (response, i) => response && [response, requestGetters[i][1]]\n          )\n        );\n\n        if (newLocal.length) {\n          updateVariableState(newLocal);\n        }\n\n        return results.map(([result]) => result);\n      }, map(getters, (getter) => getter?.error) as any) as any,\n\n    set: (\n      ...setters: ClientVariableSetter[]\n    ): ClientVariableResults<any, false> =>\n      toVariableResultPromise(async () => {\n        let key: string | Nullish;\n        if (!setters[0] || isString(setters[0])) {\n          key = setters[0];\n          setters = setters.slice(1) as any;\n        }\n        context?.validateKey(key);\n\n        const localResults: StateVariable[] = [];\n        const results: ClientVariableSetResult[] = [];\n\n        // Only request non-null setters, and use the most recent version we have already read, if any.\n        const requestVariables = map(setters, (setter, sourceIndex) => {\n          if (!setter) return undefined;\n          const key = variableKeyToString(setter);\n          const current = tryGetVariable(key);\n          updateCacheDuration(key, setter.cache);\n          if (isLocalScopeKey(setter)) {\n            if (setter.patch != null)\n              return throwError(\"Local patching is not supported.\");\n\n            const local: ClientVariable<any, any, true> = {\n              value: setter.value,\n              classification: DataClassification.Anonymous,\n              purposes: DataPurposeFlags.Necessary,\n              scope: localVariableScope(setter.scope),\n              key: setter.key,\n            };\n\n            if (\n              current &&\n              current.value === local.value &&\n              current.classification === local.classification &&\n              current.purposes == local.purposes &&\n              current.scope === local.scope\n            ) {\n              results[sourceIndex] = {\n                status: VariableResultStatus.Unchanged,\n                source: setter as any,\n                current,\n              };\n            } else {\n              results[sourceIndex] = {\n                status: current\n                  ? VariableResultStatus.Success\n                  : VariableResultStatus.Created,\n                source: setter as any,\n                current: local,\n              };\n              push(localResults, setResultExpiration(local));\n            }\n            return undefined;\n          }\n          if (setter.patch == null && setter?.version === undefined) {\n            setter.version = current?.version;\n            // Force the first set, we do not have any cached version to validate against.\n            setter.force ??= !!setter.version;\n          }\n          return [\n            pick(setter, SETTER_PROPS as any) as ClientVariableSetter,\n            sourceIndex,\n          ];\n        });\n\n        const response = !requestVariables.length\n          ? []\n          : required(\n              (\n                await request<PostRequest, PostResponse>(endpoint, {\n                  variables: {\n                    set: requestVariables.map((variable) => variable[0] as any),\n                  },\n                  deviceSessionId: context?.deviceSessionId,\n                })\n              ).variables?.set,\n              \"No result.\"\n            );\n\n        if (localResults.length) {\n          updateVariableState(localResults);\n        }\n\n        forEach(response, (result, index) => {\n          const [setter, sourceIndex] = requestVariables[index];\n          (result as any).source = setter;\n          setter.result?.(result as any);\n          results[sourceIndex] = result as any;\n        });\n\n        return results as any;\n      }, map(setters, (setter) => setter?.error) as any) as any,\n  };\n\n  const setResultExpiration = (\n    variable: ClientVariable,\n    timestamp = now()\n  ): StateVariable => ({\n    ...pick(variable, VARIABLE_PROPS),\n    cache: [\n      timestamp,\n      timestamp +\n        (remove(cacheDurations, variableKeyToString(variable)) ??\n          VARIABLE_CACHE_DURATION),\n    ],\n  });\n  addResponseHandler(({ variables }) => {\n    if (!variables) return;\n    const timestamp = now();\n    const changed = concat(\n      map(variables.get, (result) => getResultVariable(result)),\n      map(variables.set, (result) => getResultVariable(result))\n    );\n\n    changed?.length &&\n      updateVariableState(apply(changed, setResultExpiration, timestamp));\n  });\n\n  return vars as any;\n};\n\n/** Suggests the reserved names and their corresponding values for local variables, and helps autocomplete string enums (purpose etc.). */\nexport type GetterIntellisense<\n  K extends string = ReservedVariableKey | \"(any)\"\n> = readonly (\n  | ClientVariableGetter<any, \"(any)\" | (string & {}), false>\n  | (K extends infer K\n      ? ClientVariableGetter<ReservedVariableType<K>, K & string, true>\n      : // Only suggest reserved local names when local is true. This does that trick.\n\n        never)\n)[];\n\n/** Suggests the reserved names and their corresponding values for local variables, and helps autocomplete string enums (purpose etc.). */\ntype SetterIntellisense<K extends string = ReservedVariableKey | \"(any)\"> =\n  readonly (\n    | ClientVariableSetter<any, \"(any)\" | (string & {}), false>\n    | (K extends infer K\n        ? ClientVariableSetter<ReservedVariableType<K>, K & string, true>\n        : // Only suggest reserved local names when local is true. This does that trick.\n\n          never)\n  )[];\n\ntype ValidateParameter<P, Getters> = P extends {\n  key: infer K & string;\n  scope: LocalVariableScopeValue;\n}\n  ? If<\n      Getters,\n      ClientVariableGetter<ReservedVariableType<K>, K & string, true>,\n      ClientVariableSetter<ReservedVariableType<K>, K & string, true>\n    >\n  : P extends { key: infer K & string }\n  ? If<\n      Getters,\n      ClientVariableGetter<any, K & string, false>,\n      ClientVariableSetter<any, K & string, false>\n    >\n  : never;\n\ntype ValidateParameters<P, Getters> = P extends readonly []\n  ? []\n  : P extends readonly [infer Item, ...infer Rest]\n  ? readonly [\n      ValidateParameter<Item, Getters>,\n      ...ValidateParameters<Rest, Getters>\n    ]\n  : P extends readonly (infer Item)[]\n  ? readonly ValidateParameter<Item, Getters>[]\n  : never;\n","import {\n  ConfiguredComponent,\n  ImpressionEvent,\n  ImpressionRegionStats,\n  ImpressionTextStats,\n} from \"@tailjs/types\";\nimport {\n  F,\n  Intervals,\n  NoOpFunction,\n  T,\n  TextStats,\n  Timer,\n  assign,\n  clock,\n  count,\n  createIntervals,\n  createTimer,\n  filter,\n  forEach,\n  getTextStats,\n  map,\n  nil,\n  push,\n  restrict,\n} from \"@tailjs/util\";\nimport {\n  document,\n  getActiveTime,\n  getScreenPos,\n  getViewport,\n  trackerConfig,\n  trackerFlag,\n} from \".\";\nimport {\n  BoundaryData,\n  Tracker,\n  createViewDurationTimer,\n  getComponentContext,\n  getViewTimeOffset,\n} from \"..\";\n\nconst intersectionHandler = Symbol();\n\nconst INTERSECTION_POLL_INTERVAL = 250;\n\ntype ImpressionThreshold = [ownRatio: number, viewportRatio: number];\n\n/** The amount of the component that must be visible for the impression to count. */\nconst IMPRESSION_START = [0.75, 0.33];\n\n/** The impression stops when only this amount of the component is visible. */\nconst IMPRESSION_STOP = [0.25, 0.33];\n\n/** The percentage of the total number of characters contained in the top region. */\nconst TEXT_REGION_TOP = 0.25;\n\n/* The percentage of the total number of characters before the bottom region. */\nconst TEXT_REGION_BOTTOM = 0.75;\n\nexport const createImpressionObserver = (tracker: Tracker) => {\n  const observer = new IntersectionObserver(\n    (els) => forEach(els, (args) => args.target[intersectionHandler]?.(args))\n    // Low thresholds used to be able to handle components larger than view ports.\n  );\n\n  const currentIntersections = new Set<() => void>();\n\n  const monitor = clock({\n    callback: () => forEach(currentIntersections, (handler) => handler()),\n    frequency: INTERSECTION_POLL_INTERVAL,\n    raf: true,\n  });\n\n  const constrain = (point: number, max: number, min = 0) =>\n    point < min ? min : point > max ? max : point;\n\n  const probeRange = document.createRange();\n\n  return (el: Element, boundaryData: BoundaryData<true> | undefined) => {\n    if (!boundaryData) return;\n\n    let components: ConfiguredComponent[] | undefined;\n    if (\n      (components = filter(\n        boundaryData?.component,\n        (cmp) =>\n          // Impression settings from the DOM/CSS are ignored for secondary and inferred components (performance thing)\n          cmp!.track?.impressions ||\n          (cmp.track?.secondary ?? cmp.inferred) !== T\n      ))\n    ) {\n      if (!count(components)) return;\n\n      let active = F;\n      let pendingActive = F;\n      let impressions = 0;\n      let visiblePercentage = 0;\n      let regions:\n        | [\n            data: ImpressionRegionStats,\n            timer: Timer,\n            pending: boolean,\n            active: boolean,\n            top: number,\n            bottom: number,\n            readTime: number,\n            intervals: Intervals\n          ][]\n        | undefined;\n\n      const updateRegion = (\n        index: number,\n        top: number,\n        bottom: number,\n        readTime: number\n      ) => {\n        const region = ((regions ??= [])[index] ??= [\n          { duration: 0, impressions: 0 },\n          createTimer(false, getActiveTime),\n          false,\n          false,\n          0,\n          0,\n          0,\n          createIntervals(),\n        ]);\n        region[4] = top;\n        region[5] = bottom;\n        region[6] = readTime;\n      };\n\n      const visible = [createIntervals(), createIntervals()];\n\n      const viewDuration = createViewDurationTimer(false);\n      const activeTime = createTimer(false, getActiveTime);\n\n      let impressionEvents: ImpressionEvent[] | undefined;\n      let unbindPassiveEventSources: NoOpFunction[] | undefined;\n      // let overlays = map(2, (i) => {\n      //   const overlay = document.createElement(\"div\");\n      //   overlay.style.cssText = `position:absolute;${i ? \"bottom\" : \"top\"}:0;${\n      //     i ? \"right\" : \"left\"\n      //   }:0;background-color:blue`;\n      //   el.appendChild(overlay);\n      //   return overlay;\n      // });\n\n      // (el as any).style.border = \"1px solid blue\";\n      // (el as any).style.position = \"relative\";\n\n      let prevHeight = -1;\n      let boundaries: TextStats[\"boundaries\"] | undefined;\n      let stats: ImpressionTextStats | undefined;\n\n      const poll = () => {\n        const rect = el.getBoundingClientRect();\n        const viewWidth = window.innerWidth;\n        const viewHeight = window.innerHeight;\n\n        const intersection = [\n          constrain(rect.top, viewHeight),\n          constrain(rect.right, viewWidth),\n          constrain(rect.bottom, viewHeight),\n          constrain(rect.left, viewWidth),\n        ];\n\n        const intersectionHeight = intersection[2] - intersection[0];\n        const intersectionWidth = intersection[1] - intersection[3];\n\n        const verticalIntersection = intersectionHeight / rect.height || 0;\n        const horizontalIntersection = intersectionWidth / rect.width || 0;\n\n        /**\n         * The threshold for when an impression becomes active/inactive.\n         * They depend on whether the impression is currently active.\n         */\n        const thresholds = active ? IMPRESSION_STOP : IMPRESSION_START;\n\n        /**\n         * The smallest of the horizontal and vertical intersection percentage. If this is smaller than the threshold,\n         * the component is intuitively not visible (or \"impressed\", lol).\n         */\n        const qualified =\n          (intersectionHeight > thresholds[0] * viewHeight ||\n            verticalIntersection > thresholds[0]) &&\n          (intersectionWidth > thresholds[0] * viewWidth ||\n            horizontalIntersection > thresholds[0]);\n\n        if (pendingActive !== qualified) {\n          activeTime((pendingActive = qualified), true);\n        }\n        if (\n          active !==\n          (active =\n            pendingActive &&\n            activeTime() >=\n              trackerConfig.impressionThreshold - INTERSECTION_POLL_INTERVAL)\n        ) {\n          ++impressions;\n          viewDuration(active);\n          if (!impressionEvents) {\n            impressionEvents = filter(\n              map(\n                components,\n                (cmp) =>\n                  ((cmp!.track?.impressions ||\n                    trackerFlag(\n                      el,\n                      \"impressions\",\n                      T,\n                      (data) => data.track?.impressions\n                    )) &&\n                    restrict<ImpressionEvent>({\n                      type: \"impression\",\n                      pos: getScreenPos(el),\n                      viewport: getViewport(),\n                      timeOffset: getViewTimeOffset(),\n                      impressions,\n                      ...getComponentContext(el, T),\n                    })) ||\n                  nil\n              )\n            );\n            tracker(impressionEvents);\n          }\n\n          if (impressionEvents?.length) {\n            const duration = viewDuration();\n            unbindPassiveEventSources = map(impressionEvents, (event) =>\n              tracker.events.registerEventPatchSource(event, () => ({\n                relatedEventId: event.clientId!,\n                duration,\n                impressions: impressions,\n                regions: regions && {\n                  top: regions[0][0],\n                  middle: regions[1][0],\n                  bottom: regions[2][0],\n                },\n                seen: visiblePercentage,\n                text: stats,\n                read:\n                  duration.activeTime &&\n                  stats &&\n                  constrain(\n                    duration.activeTime / stats.readTime,\n                    visiblePercentage\n                  ),\n              }))\n            );\n          }\n        }\n\n        if (rect.height !== prevHeight) {\n          prevHeight = rect.height;\n          const text = (el as HTMLElement).textContent;\n          ({ boundaries, ...stats } = getTextStats(\n            text ?? \"\",\n            [0, 0.25, 0.75, 1]\n          ));\n\n          if (regions || rect.height >= 1.25 * viewHeight) {\n            const nodes = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node: Node | null;\n            let length = 0;\n\n            let boundaryIndex = 0;\n            regions ??= [];\n            while (\n              boundaryIndex < boundaries.length &&\n              (node = nodes.nextNode())\n            ) {\n              let nodeLength = node.textContent?.length ?? 0;\n              length += nodeLength;\n              while (length >= boundaries[boundaryIndex]?.offset) {\n                // While loop because two boundaries may have the same offset.\n                probeRange[boundaryIndex % 2 ? \"setEnd\" : \"setStart\"](\n                  node,\n                  boundaries[boundaryIndex].offset - length + nodeLength\n                );\n\n                if (boundaryIndex++ % 2) {\n                  const { top, bottom } = probeRange.getBoundingClientRect();\n                  const offset = rect.top;\n\n                  if (boundaryIndex < 3) {\n                    updateRegion(\n                      0,\n                      top - offset,\n                      bottom - offset,\n                      boundaries[1].readTime\n                    );\n                  } else {\n                    updateRegion(\n                      1,\n                      regions[0][4],\n                      top - offset,\n                      boundaries[2].readTime\n                    );\n                    updateRegion(\n                      2,\n                      top - offset,\n                      bottom - offset,\n                      boundaries[3].readTime\n                    );\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        let horizontalOffset = rect.left < 0 ? -rect.left : 0;\n        let verticalOffset = rect.top < 0 ? -rect.top : 0;\n        const area = rect.width * rect.height;\n\n        if (active) {\n          visiblePercentage =\n            (visible[0].push(\n              verticalOffset,\n              verticalOffset + intersectionHeight\n            ) *\n              visible[1].push(\n                horizontalOffset,\n                horizontalOffset + intersectionWidth\n              )) /\n            area;\n        }\n\n        if (regions) {\n          forEach(regions, (region) => {\n            const intersectionTop = constrain(\n              rect.top < 0 ? -rect.top : 0,\n              region[5],\n              region[4]\n            );\n            const intersectionBottom = constrain(\n              rect.bottom > viewHeight ? viewHeight : rect.bottom,\n              region[5],\n              region[4]\n            );\n\n            // Zero height, nothing to do.\n            let qualified = active && intersectionBottom - intersectionTop > 0;\n\n            const data = region[0];\n            data.duration = region[1](qualified);\n\n            if (qualified) {\n              region[3] !== (region[3] = qualified) && ++region[0].impressions!;\n\n              data.seen =\n                region[7].push(intersectionTop, intersectionBottom) /\n                (region[5] - region[4]);\n              data.read = constrain(data.duration / region[6], data.seen);\n            }\n          });\n        }\n      };\n\n      el[intersectionHandler] = ({\n        isIntersecting,\n      }: IntersectionObserverEntry) => {\n        assign(currentIntersections, poll, isIntersecting);\n        !isIntersecting &&\n          (forEach(unbindPassiveEventSources, (unbind) => unbind()), poll());\n      };\n      observer.observe(el);\n    }\n  };\n};\n","import type { UserAgentEvent } from \"@tailjs/types\";\nimport { window } from \"../lib\";\n\nexport const detectDeviceType = (): Pick<\n  UserAgentEvent,\n  \"deviceType\" | \"screen\"\n> => {\n  // Common thresholds based on https://yesviz.com/viewport/\n  const screen = window?.screen;\n  if (!screen) return {};\n\n  let { width: w, height: h, orientation: o } = screen; // Get's the resolution in logical (CSS) pixels.\n  const landscape = w < h;\n  const angle = o?.angle ?? window[\"orientation\"] ?? 0;\n  (angle === -90 || angle === 90) && ([w, h] = [h, w]);\n\n  return {\n    deviceType: w < 480 ? \"mobile\" : w <= 1024 ? \"tablet\" : \"desktop\",\n    screen: { dpr: window.devicePixelRatio, width: w, height: h, landscape },\n  };\n};\n","import { map, push, restrict } from \"@tailjs/util\";\r\nimport { Tracker, currentViewEvent, detectDeviceType } from \"..\";\r\nimport { UserAgentEvent, UserAgentLanguage } from \"@tailjs/types\";\r\n\r\nexport const postUserAgentEvent = (tracker: Tracker) =>\r\n  tracker(\r\n    restrict<UserAgentEvent>({\r\n      type: \"user_agent\",\r\n      hasTouch: navigator.maxTouchPoints > 0,\r\n      userAgent: navigator.userAgent,\r\n      view: currentViewEvent?.clientId,\r\n      languages: map(navigator.languages, (id, i, parts = id.split(\"-\")) =>\r\n        restrict<UserAgentLanguage>({\r\n          id,\r\n          language: parts[0],\r\n          region: parts[1],\r\n          primary: i === 0,\r\n          preference: i + 1,\r\n        })\r\n      ),\r\n      timezone: {\r\n        iana: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        offset: new Date().getTimezoneOffset(),\r\n      },\r\n      ...detectDeviceType(),\r\n    })\r\n  );\r\n","import { CLIENT_CALLBACK_CHANNEL_ID } from \"@constants\";\n\nimport {\n  AnchorNavigationEvent,\n  CartUpdatedEvent,\n  ComponentClickEvent,\n  ComponentClickIntentEvent,\n  ComponentElementInfo,\n  NavigationEvent,\n  ScreenPosition,\n  UserInteractionEvent,\n} from \"@tailjs/types\";\nimport {\n  F,\n  T,\n  createTimeout,\n  ellipsis,\n  equalsAny,\n  forEach,\n  get,\n  isObject,\n  map,\n  nil,\n  parseUri,\n  push,\n  remove,\n  restrict,\n  some,\n  stop,\n  update,\n  type Nullish,\n} from \"@tailjs/util\";\nimport {\n  TrackerExtensionFactory,\n  getComponentContext,\n  getViewTimeOffset,\n  onFrame,\n  parseActivationTags,\n  pushNavigationSource,\n  tryGetCartEventData,\n} from \"..\";\nimport {\n  MNT_URL,\n  attr,\n  forAncestorsOrSelf,\n  getBoundaryData,\n  getPos,\n  getRect,\n  getScreenPos,\n  getViewport,\n  isInternalUrl,\n  listen,\n  matchExHash,\n  nextId,\n  normalizedAttribute,\n  overlay,\n  tagName,\n  trackerConfig,\n  trackerFlag,\n} from \"../lib\";\n\nconst isLinkElement = (\n  el: Element,\n  href: any = tagName(el) === \"A\" && attr(el, \"href\")\n): el is HTMLAnchorElement =>\n  href && href != \"#\" && !href.startsWith(\"javascript:\");\n\nconst isClickable = (\n  el: Element,\n  t = tagName(el),\n  attr = trackerFlag(el, \"button\")\n): el is HTMLElement =>\n  attr !== F &&\n  (equalsAny(t, \"A\", \"BUTTON\") ||\n    (t === \"INPUT\" &&\n      equalsAny(normalizedAttribute(el, \"type\"), \"button\", \"submit\")) ||\n    attr === T);\n\nconst getElementInfo = (el: Element, includeRect = false) => ({\n  tagName: el.tagName,\n  text: ellipsis(\n    attr(el, \"title\")?.trim() ||\n      attr(el, \"alt\")?.trim() ||\n      (el as HTMLElement).innerText?.trim(),\n    100\n  ),\n  href: (el as any).href?.toString(),\n  rect: includeRect ? getRect(el) : undefined,\n});\nconst getElementLabel = (\n  el: Element | EventTarget | null,\n  container: Element,\n  includeRect = false\n) => {\n  let info: Pick<UserInteractionEvent, \"element\"> | undefined;\n  forAncestorsOrSelf(el ?? container, (el) =>\n    tagName(el) === \"IMG\" || el === container\n      ? ((info = {\n          element: getElementInfo(el, includeRect),\n        }),\n        F)\n      : T\n  );\n  return info;\n};\nexport const userInteraction: TrackerExtensionFactory = {\n  id: \"navigation\",\n\n  setup(tracker) {\n    // The tracked click positions for click events that has already been posted once.\n    const activeEventClicks = new WeakMap<Node, ScreenPosition[]>();\n\n    const stripPositions = <T = any>(el: any, hitTest: boolean): T =>\n      hitTest\n        ? el\n        : (map(el, ([key]) =>\n            key === \"rect\" ||\n            //key === \"pos\"  Changed so pos is always included.\n            key === \"viewport\"\n              ? remove(el, key)\n              : isObject(el[key]) &&\n                map(el[key], (item) => stripPositions(item, hitTest))\n          ),\n          el);\n    const trackDocument = (document: Document) => {\n      listen(\n        document,\n        [\"click\", \"contextmenu\", \"auxclick\"],\n        (ev: MouseEvent) => {\n          let trackClicks: boolean | Nullish;\n          let trackRegion: boolean | Nullish;\n          let clickableElement: HTMLElement | undefined;\n          let containerElement: Element | undefined;\n\n          let nav = F;\n\n          let clickables: ComponentElementInfo[] | undefined;\n\n          forAncestorsOrSelf<boolean>(ev.target, (el) => {\n            isClickable(el) && (clickableElement ??= el);\n            nav = nav || tagName(el) === \"NAV\";\n\n            const boundary = getBoundaryData(el);\n            const components = boundary?.component;\n            if (!ev.button && components?.length && !clickables) {\n              forEach(\n                el.querySelectorAll(\"a,button\"),\n                (clickable) =>\n                  isClickable(clickable) &&\n                  ((clickables ??= []).length > 3\n                    ? stop() // If there are more than two clickables, there is presumably not any missed click intent.\n                    : clickables.push({\n                        ...getElementInfo(clickable, true),\n                        component: forAncestorsOrSelf(\n                          clickable,\n                          (\n                            child,\n                            r,\n                            _,\n                            childComponents = getBoundaryData(child)?.component\n                          ) => childComponents && r(childComponents[0]),\n                          (child) => child === el\n                        ),\n                      }))\n              );\n\n              if (clickables) {\n                containerElement ??= el;\n              }\n            }\n\n            trackClicks ??=\n              trackerFlag(el, \"clicks\", T, (data) => data.track?.clicks) ??\n              (components &&\n                some(components, (cmp) => cmp.track?.clicks !== F));\n            trackRegion ??=\n              trackerFlag(el, \"region\", T, (data) => data.track?.region) ??\n              (components && some(components, (cmp) => cmp.track?.region));\n          });\n\n          if (!(containerElement ??= clickableElement)) {\n            return;\n          }\n          const clickIntent = clickables && !clickableElement && trackClicks;\n\n          const componentContext = getComponentContext(\n            clickableElement ?? containerElement,\n            false,\n            clickIntent\n          );\n          const tags = parseActivationTags(\n            clickableElement ?? containerElement\n          );\n          trackClicks ??= !nav;\n          trackRegion ??= T;\n\n          const sharedEventProperties = {\n            ...(trackRegion\n              ? {\n                  pos: getScreenPos(clickableElement, ev),\n                  viewport: getViewport(),\n                }\n              : nil),\n            ...getElementLabel(ev.target, clickableElement ?? containerElement),\n            ...componentContext,\n            timeOffset: getViewTimeOffset(),\n            ...tags,\n          };\n          if (!clickableElement) {\n            clickIntent &&\n              update(activeEventClicks, containerElement, (current) => {\n                const pos = getPos(containerElement!, ev);\n                if (!current) {\n                  // Reuse the same event and only add the new click coordinates\n                  // if the element is clicked again to reduce data.\n                  const intentEvent = restrict<ComponentClickIntentEvent>({\n                    type: \"component_click_intent\",\n                    ...sharedEventProperties,\n                    clicks: (current = [pos]),\n\n                    clickables,\n                  });\n\n                  tracker.events.registerEventPatchSource(\n                    intentEvent,\n                    () => ({\n                      clicks: get(activeEventClicks, containerElement!),\n                    }),\n                    true,\n                    containerElement\n                  );\n                } else {\n                  push(current, pos);\n                }\n\n                return current;\n              });\n            //  ,              overlay(containerElement, \"Click intent\", true)\n\n            return;\n          }\n\n          if (isLinkElement(clickableElement!)) {\n            const link = clickableElement;\n            const external = link.hostname !== location.hostname;\n\n            const {\n              host,\n              scheme,\n              source: href,\n            } = parseUri(link.href, false, true);\n            if (\n              link.host === location.host &&\n              link.pathname === location.pathname &&\n              link.search === location.search\n            ) {\n              if (link.hash === \"#\") {\n                // Don't care about that one.\n                return;\n              }\n              if (link.hash !== location.hash) {\n                if (ev.button === 0)\n                  tracker(\n                    restrict<AnchorNavigationEvent>({\n                      type: \"anchor_navigation\",\n                      anchor: link.hash,\n                      ...sharedEventProperties,\n                    })\n                  );\n              }\n              return;\n            }\n\n            const navigationEvent: NavigationEvent = restrict<NavigationEvent>({\n              clientId: nextId(),\n              type: \"navigation\",\n              href: external ? link.href : href,\n              external,\n              domain: { host, scheme },\n              self: T,\n              anchor: link.hash,\n              ...sharedEventProperties,\n            });\n\n            // There does not seem to be any way to detect when the user clicks\n            // \"Open link in new tab/window\", so we need to do a little extra gymnastics to capture it.\n            if (ev.type === \"contextmenu\") {\n              const originalUrl = link.href;\n              const internalUrl = isInternalUrl(originalUrl);\n              if (internalUrl) {\n                // Detecting internal navigation is not that hard.\n                // If the page loads in a new tab, it will pick up this value as the referrer,\n                //   and we will know navigation happened.\n                pushNavigationSource(navigationEvent.clientId, () =>\n                  tracker(navigationEvent)\n                );\n                return;\n              }\n\n              // Detecting external navigation is _much_ harder.\n              // Unfortunately we need to rewrite the URL to redirect via the request handler, and poll for a local storage key.\n              // This is only a problem if the user decides to copy the link from the context menu and share it,\n              // since some may argue the link looks \"obscure\".\n              var requestId = (\"\" + Math.random())\n                .replace(\".\", \"\")\n                .substring(1, 8);\n              if (!internalUrl) {\n                if (!trackerConfig.captureContextMenu) return;\n                link.href =\n                  MNT_URL + \"=\" + requestId + encodeURIComponent(originalUrl);\n\n                // Poll for the storage key where the request handler will write the request ID before it redirects\n                // the user if the link is opened.\n                listen(\n                  window,\n                  \"storage\",\n                  (ev, unbind) =>\n                    ev.key === CLIENT_CALLBACK_CHANNEL_ID &&\n                    (ev.newValue &&\n                      JSON.parse(ev.newValue)?.requestId === requestId &&\n                      tracker(navigationEvent),\n                    unbind())\n                );\n\n                createTimeout;\n                // Switch the link back when the context menu closes.\n                listen(\n                  document,\n                  [\"keydown\", \"keyup\", \"visibilitychange\", \"pointermove\"],\n                  (_, unbind) => {\n                    unbind();\n\n                    link.href = originalUrl;\n                  }\n                );\n              }\n              return;\n            }\n\n            if (ev.button <= 1) {\n              if (\n                ev.button === 1 || //Middle-click: new tab.\n                ev.ctrlKey || // New tab\n                ev.shiftKey || // New window\n                ev.altKey || // Download\n                attr(link, \"target\") !== window.name\n              ) {\n                pushNavigationSource(navigationEvent.clientId);\n                navigationEvent.self = F;\n                // Fire immediately, we are staying on the page.\n                tracker(navigationEvent);\n                return;\n              } else if (!matchExHash(location.href, link.href)) {\n                navigationEvent.exit = navigationEvent.external;\n                // No \"real\" navigation will happen if it is only the hash changing.\n                pushNavigationSource(navigationEvent.clientId);\n              }\n\n              // // If it so happened that navigation happened we will send it on VIEW_END.\n              // pendingNavigationEvent = registerViewEndAction(() =>\n              //   tracker(navigationEvent)\n              // );\n            }\n            return;\n          }\n\n          const cart = tryGetCartEventData(ev.target as Element);\n          (cart || trackClicks) &&\n            tracker(\n              cart\n                ? restrict<CartUpdatedEvent>({\n                    type: \"cart_updated\",\n                    ...sharedEventProperties,\n                    ...cart,\n                  })\n                : restrict<ComponentClickEvent>({\n                    type: \"component_click\",\n                    ...sharedEventProperties,\n                  })\n            );\n          return;\n        }\n      );\n    };\n\n    trackDocument(document);\n    onFrame(\n      (frame) => frame.contentDocument && trackDocument(frame.contentDocument)\n    );\n  },\n};\n","import { PATCH_EVENT_POSTFIX } from \"@constants\";\n\nimport {\n  EventPatch,\n  PostRequest,\n  PostResponse,\n  TrackedEvent,\n  clearMetadata,\n  isEventPatch,\n} from \"@tailjs/types\";\nimport {\n  F,\n  Nullish,\n  ToggleArray,\n  array,\n  clock,\n  clone,\n  concat,\n  count,\n  diff,\n  forEach,\n  isString,\n  map,\n  merge,\n  now,\n  pluralize,\n  push,\n  enumerate,\n  structuralEquals,\n  throwError,\n  unshift,\n} from \"@tailjs/util\";\nimport {\n  EVENT_POST_FREQUENCY,\n  TrackerContext,\n  addPageVisibleListener,\n  childGroups,\n  debug,\n  request,\n} from \".\";\nimport { UnlockApiCommand } from \"..\";\n\nexport interface EventQueuePostOptions {\n  flush?: boolean;\n  async?: boolean;\n  variables?: PostRequest[\"variables\"];\n}\n\nexport type ProtectedEvent = TrackedEvent & UnlockApiCommand;\n\nexport interface EventQueue {\n  /**\n   * Posts events to the server. Do not post event patches using this method. Use {@link postPatch} instead.\n   * If flush is not explicitly requested, the event will eventually get posted, either by the configured post frequency, or when the user leaves the tab.\n   */\n  post<\n    T extends ToggleArray<ProtectedEvent[]>,\n    Options extends EventQueuePostOptions | undefined\n  >(\n    events: T,\n    options?: Options\n  ): Promise<Options extends { async: false } ? PostResponse : void>;\n\n  /**\n   *  Posts a patch to an existing event.\n   */\n  postPatch<T extends ProtectedEvent>(\n    target: T,\n    patch: EventPatchData<T>,\n    flush?: boolean\n  ): Promise<void>;\n\n  /**\n   * Registers a passive event.\n   *\n   * The source will get invoked whenever the tab becomes deactivated. If the source returns undefined or false, the source is unregistered.\n   * The return value is a function to manually unregister the source.\n   */\n  registerEventPatchSource<T extends ProtectedEvent>(\n    sourceEvent: T,\n    source: EventPatchSource<T>,\n    initialPost?: boolean,\n    relatedNode?: Node\n  ): () => undefined;\n}\n\nexport type EventPatchData<T extends ProtectedEvent> = Omit<\n  EventPatch<T>,\n  \"patchTargetId\" | \"metadata\" | \"type\"\n> & { type?: undefined };\n\nexport type EventPatchSource<T extends ProtectedEvent = ProtectedEvent> = (\n  current: EventPatchData<T>,\n  unbind: () => undefined\n) => EventPatchData<T> | undefined;\n\nexport const createEventQueue = (\n  url: string,\n  context: TrackerContext,\n  postFrequency = EVENT_POST_FREQUENCY\n): EventQueue => {\n  type Factory = () => [event: EventPatch | undefined, unbinding: boolean];\n  const queue: ProtectedEvent[] = [];\n\n  const snapshots = new WeakMap<ProtectedEvent, any>();\n  const sources = new Map<ProtectedEvent, Factory>();\n\n  const mapPatchTarget = <T extends ProtectedEvent>(\n    sourceEvent: T,\n    patch: EventPatchData<T> | undefined\n  ): EventPatch<T> =>\n    !sourceEvent.metadata?.queued\n      ? throwError(\"Source event not queued.\")\n      : (merge(patch, {\n          type: sourceEvent.type + PATCH_EVENT_POSTFIX,\n          patchTargetId: sourceEvent.clientId,\n        }) as any);\n\n  const registerEventPatchSource = <T extends ProtectedEvent>(\n    sourceEvent: ProtectedEvent,\n    source: EventPatchSource<T>,\n    initialPost = false,\n    relatedNode?: Node\n  ) => {\n    let unbinding = false;\n    const unbind = (): undefined => {\n      unbinding = true;\n    };\n    snapshots.set(sourceEvent, clone(sourceEvent));\n    const factory: Factory = () => {\n      if (relatedNode?.isConnected === false) {\n        unbind();\n      } else {\n        const snapshot = snapshots.get(sourceEvent);\n        let [delta, current] = diff(source(snapshot, unbind), snapshot) ?? [];\n\n        if (delta && !structuralEquals(current, snapshot)) {\n          // The new \"current\" differs from the previous.\n          snapshots.set(sourceEvent, clone(current));\n          // Add patch target ID and the correct event type to the delta data before we return it.\n          return [mapPatchTarget(sourceEvent, delta) as any, unbinding];\n        }\n      }\n\n      return [undefined, unbinding];\n    };\n    sources.set(sourceEvent, factory);\n    if (initialPost) {\n      post(sourceEvent);\n    }\n    return unbind;\n  };\n\n  const postEvents = async <Beacon>(\n    events:\n      | ProtectedEvent[]\n      | [apiKey: string | Nullish, events: ProtectedEvent[]],\n    beacon: Beacon = true as any,\n    variables: any\n  ): Promise<Beacon extends true ? void : PostResponse> => {\n    let key: string | Nullish;\n    if (!events[0] || isString(events[0])) {\n      key = events[0];\n      events = events.slice(1) as any;\n    }\n    events = events.map(\n      (ev: any) => (\n        context?.validateKey(key ?? ev.key),\n        // Update metadata in the source event,\n        // and send a clone of the event without client metadata, and its timestamp in relative time\n        // (the server expects this, and will adjust accordingly to its own time).\n        merge(ev, { metadata: { posted: true } }),\n        merge(clearMetadata(clone(ev), true), {\n          timestamp: ev.timestamp! - now(),\n        })\n      )\n    );\n\n    debug(\n      { [childGroups]: map(events, (ev) => [ev, ev.type, F]) },\n      \"Posting \" +\n        enumerate([\n          pluralize(\"new event\", [\n            count(events, (ev) => !isEventPatch(ev)) || undefined,\n          ]),\n          pluralize(\"event patch\", [\n            count(events, (ev) => isEventPatch(ev)) || undefined,\n          ]),\n        ]) +\n        (beacon ? \" asynchronously\" : \" synchronously\") +\n        \".\"\n    );\n\n    return request<PostRequest>(\n      url,\n      {\n        events,\n        variables,\n        deviceSessionId: context?.deviceSessionId,\n      },\n      { beacon: beacon as any }\n    ) as any;\n  };\n\n  const post = async (\n    events: ToggleArray<ProtectedEvent[]>,\n    { flush = false, async = true, variables }: EventQueuePostOptions = {}\n  ): Promise<any> => {\n    events = map(array(events), (event) =>\n      merge(context.applyEventExtensions(event), { metadata: { queued: true } })\n    );\n\n    if (events.length) {\n      forEach(events, (event) => debug(event, event.type));\n    }\n    if (!async) {\n      return postEvents(events, false, variables);\n    }\n    if (!flush) {\n      events.length && push(queue, ...events);\n      return;\n    }\n\n    if (queue.length) {\n      unshift(events as any, ...queue.splice(0));\n    }\n\n    if (!events.length) return;\n\n    await postEvents(events, true, variables);\n  };\n\n  postFrequency > 0 && clock(() => post([], { flush: true }), postFrequency);\n\n  addPageVisibleListener((visible, unloading, delta) => {\n    // Don't do anything if the tab has only been visible for less than a second and a half.\n    // More than that the user is probably just switching between tabs moving past this one.\n    // NOTE: (This number should preferably be better qualified. We could also look into user activation events).\n    if (!visible && (queue.length || unloading || delta > 1500)) {\n      const updatedEvents = map(sources, ([sourceEvent, source]) => {\n        const [event, unbinding] = source();\n        unbinding &&\n          (sources.delete(sourceEvent), snapshots.delete(sourceEvent));\n        return event;\n      });\n\n      if (queue.length || updatedEvents.length) {\n        post(concat(queue.splice(0), updatedEvents)!, { flush: true });\n      }\n    }\n  });\n\n  return {\n    post,\n    postPatch: (target, patch, flush) =>\n      post(mapPatchTarget(target, patch), { flush: true }),\n    registerEventPatchSource,\n  };\n};\n","import { dataPurposes, sortVariables } from \"@tailjs/types\";\r\nimport { F, T, ansi, concat, count, filter, map } from \"@tailjs/util\";\r\nimport { addVariablesChangedListener, childGroups, debug } from \".\";\r\nimport { __DEBUG__ } from \"@constants\";\r\nimport { formatAnyVariableScope } from \"..\";\r\n\r\nexport const addDebugListeners = __DEBUG__\r\n  ? () => {\r\n      addVariablesChangedListener((changes, all, local) => {\r\n        const variables = concat(\r\n          sortVariables(map(changes, 1))?.map((variable) => [\r\n            variable,\r\n            `${variable.key} (${formatAnyVariableScope(variable.scope)}, ${\r\n              variable.scope < 0\r\n                ? \"client-side memory only\"\r\n                : dataPurposes.format(variable.purposes)\r\n            })`,\r\n            F,\r\n          ]),\r\n          [\r\n            [\r\n              {\r\n                [childGroups]: sortVariables(map(all, 1))?.map((variable) => [\r\n                  variable,\r\n                  `${variable.key} (${formatAnyVariableScope(\r\n                    variable.scope\r\n                  )}, ${\r\n                    variable.scope < 0\r\n                      ? \"client-side memory only\"\r\n                      : dataPurposes.format(variable.purposes)\r\n                  })`,\r\n                  F,\r\n                ]),\r\n              },\r\n              \"All variables\",\r\n              T,\r\n            ],\r\n          ]\r\n        )!;\r\n\r\n        debug(\r\n          { [childGroups]: variables },\r\n          ansi(\r\n            `Variables changed${\r\n              !local ? \" - merging changes from another tab\" : \"\"\r\n            } (${changes.length} changed, ${count(all)} in total).`,\r\n            \"2;3\"\r\n          )\r\n        );\r\n      });\r\n    }\r\n  : () => {};\r\n","import {\n  type CartAction,\n  type CartEventData,\n  type CartUpdatedEvent,\n  type OrderEvent,\n} from \"@tailjs/types\";\nimport {\n  F,\n  T,\n  equalsAny,\n  isObject,\n  isString,\n  last,\n  nil,\n  push,\n  type Nullish,\n} from \"@tailjs/util\";\nimport { TrackerExtensionFactory, isCartCommand, isOrderCommand } from \"..\";\nimport { forAncestorsOrSelf, getBoundaryData, trackerProperty } from \"../lib\";\n\nexport const parseCartEventData = (\n  data: boolean | string | CartEventData | Nullish\n): CartEventData | undefined => (\n  data == nil ? undefined : (data === T || data === \"\") && (data = \"add\"),\n  isString(data) && equalsAny(data, \"add\", \"remove\", \"update\", \"clear\")\n    ? { action: data as CartAction }\n    : isObject(data)\n    ? data\n    : undefined\n);\n\nfunction normalizeCartEventData(data: CartEventData | Nullish) {\n  if (!data) return undefined;\n\n  if (data.units != nil && equalsAny(data.action, nil, \"add\", \"remove\")) {\n    if (data.units === 0) return undefined;\n    data.action = data.units > 0 ? \"add\" : \"remove\";\n  }\n  return data;\n}\n\nexport function tryGetCartEventData(sourceElement: Element) {\n  // Find cart. Look for cart attributes and/or data until the first content is met.\n  let contextCart: CartEventData | Nullish;\n  forAncestorsOrSelf(\n    sourceElement,\n    (el, r) =>\n      !!(contextCart ??= parseCartEventData(\n        getBoundaryData(el)?.cart ?? trackerProperty(el, \"cart\")\n      )) &&\n      !contextCart.item &&\n      (contextCart.item = last(getBoundaryData(el)?.content)) &&\n      r(contextCart)\n  );\n\n  return normalizeCartEventData(contextCart);\n}\n\nexport const commerce: TrackerExtensionFactory = {\n  id: \"cart\",\n  setup(tracker) {\n    return {\n      processCommand(command) {\n        if (isCartCommand(command)) {\n          let cart = command.cart;\n          cart === \"clear\"\n            ? tracker({\n                type: \"cart_updated\",\n                action: \"clear\",\n              } as CartUpdatedEvent)\n            : (cart = normalizeCartEventData(cart)!) &&\n              tracker({\n                ...cart,\n                type: \"cart_updated\",\n              } as CartUpdatedEvent);\n\n          return T;\n        }\n        if (isOrderCommand(command)) {\n          tracker({\n            type: \"order\",\n            ...command.order,\n          } as OrderEvent);\n\n          return T;\n        }\n        return F;\n      },\n    };\n  },\n};\n","import { FormEvent, FormField, Timestamp } from \"@tailjs/types\";\nimport {\n  T,\n  createTimeout,\n  ellipsis,\n  forEach,\n  get,\n  map,\n  nil,\n  now,\n  parseBoolean,\n  replace,\n  type Nullish,\n} from \"@tailjs/util\";\nimport {\n  TrackerExtensionFactory,\n  getComponentContext,\n  getViewTimeOffset,\n  getVisibleDuration,\n  onFrame,\n} from \"..\";\nimport {\n  NodeWithParentElement,\n  attr,\n  getRect,\n  listen,\n  scopeAttribute,\n  trackerFlag,\n  trackerPropertyName,\n  uuidv4,\n} from \"../lib\";\n\ntype FormElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\nconst enum FormFillState {\n  None = 0,\n  Submitted = 1,\n  Pending = 2,\n  Submitting = 3,\n}\n\ntype FormState = [\n  event: FormEvent,\n  fields: WeakMap<Element, FormFieldState>,\n  element: HTMLFormElement,\n  fillState: FormFillState,\n  started: Timestamp,\n  nextFillOrder: number\n];\n\nconst currentValue = Symbol();\ntype FormFieldState = FormField & {\n  [currentValue]: string;\n};\n\nexport const forms: TrackerExtensionFactory = {\n  id: \"forms\",\n  setup(tracker) {\n    const formEvents = new Map<HTMLFormElement, FormState>();\n\n    const getFormFieldValue = (element: any, tracked = false): string => {\n      let include =\n        !tracked || scopeAttribute(element, trackerPropertyName(\"form-value\"));\n\n      tracked &&\n        (include = include\n          ? parseBoolean(include)\n          : element.type === \"checkbox\");\n\n      let value = element.selectedOptions\n        ? [...element.selectedOptions].map((option) => option.value).join(\",\")\n        : element.type === \"checkbox\"\n        ? element.checked\n          ? \"true\"\n          : \"false\"\n        : element.value;\n\n      if (tracked && value) {\n        value = ellipsis(value, 200);\n      }\n      return include ? value : undefined;\n    };\n\n    const getFormState = (\n      el: FormElement\n    ): [input: FormElement, state: FormState] | undefined => {\n      const formElement = el.form;\n      if (!formElement) return; // Don't care if we started with an element that didn't map to a field.\n\n      const refName =\n        scopeAttribute(formElement, trackerPropertyName(\"ref\")) || \"track_ref\";\n\n      const parseElements = () => {\n        map(\n          formElement.querySelectorAll(\n            \"INPUT,SELECT,TEXTAREA\"\n          ) as any as Iterable<FormElement>,\n          (el, i) => {\n            if (!el.name || el.type === \"hidden\") {\n              if (\n                el.type === \"hidden\" &&\n                (el.name === refName || trackerFlag(el, \"ref\"))\n              ) {\n                !el.value && (el.value = uuidv4());\n                state[0].ref = el.value;\n              }\n              return;\n            }\n            const name = el.name;\n            const field = (state[0].fields![name] ??= {\n              id: el.id || name,\n              name,\n              label: replace(\n                el.labels?.[0]?.innerText ?? el.name,\n                /^\\s*(.*?)\\s*\\*?\\s*$/g,\n                \"$1\"\n              ),\n              activeTime: 0,\n              totalTime: 0,\n              type: el.type ?? \"unknown\",\n              [currentValue as any]: getFormFieldValue(el),\n              value: getFormFieldValue(el, true),\n            }) as FormFieldState;\n\n            state[0].fields![field.name] = field;\n            state[1].set(el, field);\n          }\n        );\n      };\n\n      let capturedContext: ReturnType<typeof getComponentContext>;\n\n      const isFormVisible = () =>\n        formElement.isConnected && getRect(formElement).width;\n\n      const state = get(formEvents, formElement, () => {\n        const fieldMap = new Map<Element, FormFieldState>();\n        const ev: FormEvent = {\n          type: \"form\",\n          name:\n            scopeAttribute(formElement, trackerPropertyName(\"form-name\")) ||\n            attr(formElement, \"name\") ||\n            formElement.id ||\n            undefined,\n          activeTime: 0,\n          totalTime: 0,\n          fields: {},\n        };\n\n        tracker.events.post(ev);\n\n        tracker.events.registerEventPatchSource(\n          ev,\n          () => ({ ...ev, timeOffset: getViewTimeOffset() } as any)\n        );\n\n        let state: FormState;\n        const commitEvent = () => {\n          handleLostFocus(); // focusout or change events may not be called when the user leaves the page while a field has focus.\n\n          // If the form has disappeared it is heuristically assumed it was submitted successfully.\n          state[3] >= FormFillState.Pending &&\n            (ev.completed =\n              state[3] === FormFillState.Submitting || !isFormVisible());\n          tracker.events.postPatch(ev, {\n            ...capturedContext,\n            totalTime: now(T) - state[4],\n          });\n\n          state[3] = FormFillState.Submitted;\n        };\n\n        const commitTimeout = createTimeout();\n\n        listen(formElement, \"submit\", () => {\n          capturedContext = getComponentContext(formElement);\n          state[3] = FormFillState.Submitting;\n\n          commitTimeout(() => {\n            // If the form disappears within 750 ms but no navigation happens it is assumed that it was \"submitted\" somehow, e.g. via AJAX.\n            // This heuristic may result in false positives if the user clicks submit, gets validation errors and then leaves the site instantly.\n            //\n            // If the server is aggressively slow to respond to a post and the for goes back into pending state,\n            // it is undefined whether the submit happened or not, if the user leaves the site before the server responds.\n            // In this case it will count as abandonment.\n\n            if (formElement.isConnected && getRect(formElement).width > 0) {\n              state[3] = FormFillState.Pending;\n              commitTimeout();\n            } else {\n              commitEvent();\n            }\n          }, 750);\n        });\n\n        return (state = [\n          ev,\n          fieldMap,\n          formElement,\n          FormFillState.None,\n          now(T),\n          1,\n        ]);\n      });\n      if (!get(state[1], el)) {\n        // This will also be the case if a new field was added to the DOM.\n        parseElements();\n      }\n      return [el!, state];\n    };\n\n    const getFieldInfo = (\n      el: NodeWithParentElement,\n      [formElement, state] = getFormState(el as any) ?? [],\n      field = state?.[1].get(formElement as Element)\n    ) => field && ([state![0], field, formElement!, state!] as const);\n\n    let currentField: ReturnType<typeof getFieldInfo> | null = nil;\n    const handleLostFocus = () => {\n      if (!currentField) return;\n\n      const [form, field, el, state] = currentField;\n      const active = -(tv0 - (tv0 = getVisibleDuration()));\n      const total = -(t0 - (t0 = now(T)));\n\n      const previousValue = field[currentValue];\n      const newValue = (field[currentValue] = getFormFieldValue(el));\n\n      if (newValue !== previousValue) {\n        field.fillOrder ??= state[5]++;\n        if (field.filled) {\n          field.corrections = (field.corrections ?? 0) + 1;\n        }\n        field.filled = T;\n\n        state[3] = FormFillState.Pending;\n        forEach(\n          form.fields!,\n          ([name, value]) => (value.lastField = name === field.name)\n        );\n      }\n      field.value = getFormFieldValue(el, true);\n\n      field.activeTime! += active;\n      field.totalTime! += total;\n      form.activeTime! += active;\n      form.totalTime! += total;\n      currentField = nil;\n    };\n\n    let tv0 = 0;\n    let t0 = 0;\n    const wireFormFields = (document: Document | Nullish) =>\n      document &&\n      listen(\n        document,\n        [\"focusin\", \"focusout\", \"change\"],\n        (ev, _, current = ev.target && getFieldInfo(ev.target)) =>\n          current &&\n          ((currentField = current),\n          ev.type === \"focusin\"\n            ? ((t0 = now(T)), (tv0 = getVisibleDuration()))\n            : handleLostFocus())\n      );\n\n    wireFormFields(document);\n    onFrame(\n      (frame) => frame.contentDocument && wireFormFields(frame.contentDocument),\n      true\n    );\n  },\n};\n","import {\n  TrackerExtensionFactory,\n  commerce,\n  components,\n  context,\n  forms,\n  scroll,\n  userInteraction,\n  consent,\n} from \"..\";\n\nexport const defaultExtensions: TrackerExtensionFactory[] = [\n  context,\n  components,\n  userInteraction,\n  scroll,\n  commerce,\n  forms,\n  consent,\n];\n","import type { Component, ExternalReference } from \"@tailjs/types\";\nimport type { BoundaryCommand } from \"..\";\nimport { T, add, get, map, nil, push, split, toString } from \"@tailjs/util\";\nimport { attr } from \".\";\n\ntype MappedComponent = [\n  command: {\n    component?: Component;\n    content?: ExternalReference;\n    area?: string;\n  },\n  elements: HTMLElement[]\n];\n\nexport function scanAttributes(\n  attributeName: string,\n  references: MappedComponent[0][]\n): BoundaryCommand[] {\n  if (!references) return [];\n  const commands: BoundaryCommand[] = [];\n\n  const seen = new Set<any>();\n  document.querySelectorAll(`[${attributeName}]`).forEach((el) => {\n    if (get(seen, el)) {\n      return;\n    }\n\n    const stack: any[] = [];\n\n    while (attr(el, attributeName) != nil) {\n      add(seen, el);\n      const delta = split(attr(el, attributeName)!, \"|\");\n      attr(el, attributeName, nil);\n      for (let i = 0; i < delta.length; i++) {\n        let item: any = delta[i];\n        if (item === \"\") {\n          continue; // If the attribute starts with \"|\" it means \"keep stack\". Splitting the array on \"|\" will give an empty item.\n        }\n        const number = item === \"-\" ? -1 : parseInt(toString(item) ?? \"\", 36);\n        if (number < 0) {\n          stack.length += number;\n          continue;\n        } else if (i === 0) {\n          stack.length = 0; // The first item has a value to replace the stack since not preceded by neither \"|\" nor a negative number (pop).\n        }\n\n        if (isNaN(number) && /^[\"\\[{]/.test(item)) {\n          // Poor man's parser. If the JSON contains '|'s keep going until it works.\n          let json = \"\";\n          for (; i < delta.length; i++) {\n            try {\n              item = JSON.parse((json += delta[i]));\n              break;\n            } catch (e) {}\n          }\n        }\n\n        if (number >= 0 && references[number]) {\n          item = references[number];\n        }\n        push(stack, item);\n      }\n      push(\n        commands,\n        ...map(stack, (data) => ({ add: T, ...data, boundary: el }))\n      );\n      const next = el.nextElementSibling!; // Ignore TS null error.\n      if (el.tagName === \"WBR\") {\n        el.parentNode?.removeChild(el);\n      }\n      el = next;\n    }\n  });\n\n  return commands;\n}\n","import { ScrollEvent } from \"@tailjs/types\";\nimport { T, defer, map, push, restrict } from \"@tailjs/util\";\nimport { addViewChangedListener, type TrackerExtensionFactory } from \"..\";\nimport { listen, relativeScrollPos, scrollPos } from \"../lib\";\n\nexport const scroll: TrackerExtensionFactory = {\n  id: \"scroll\",\n  setup(tracker) {\n    let emitted: Partial<Record<Required<ScrollEvent>[\"scrollType\"], boolean>> =\n      {};\n    let initialScroll = scrollPos(T);\n\n    addViewChangedListener(() =>\n      defer(() => ((emitted = {}), (initialScroll = scrollPos(T))), 250)\n    );\n\n    listen(window, \"scroll\", () => {\n      const scroll = scrollPos();\n      const offset = relativeScrollPos();\n\n      if (scroll.y >= initialScroll.y) {\n        const types: (keyof typeof emitted)[] = [];\n\n        !emitted[\"fold\"] &&\n          scroll.y >= initialScroll.y + 200 &&\n          ((emitted[\"fold\"] = T), push(types, \"fold\"));\n\n        !emitted[\"page-middle\"] &&\n          offset.y >= 0.5 &&\n          ((emitted[\"page-middle\"] = T), push(types, \"page-middle\"));\n\n        !emitted[\"page-end\"] &&\n          offset.y >= 0.99 &&\n          ((emitted[\"page-end\"] = T), push(types, \"page-end\"));\n\n        const mapped = map(types, (scrollType) =>\n          restrict<ScrollEvent>({\n            type: \"scroll\",\n            scrollType,\n            offset,\n          })\n        );\n\n        mapped.length && tracker(mapped);\n      }\n    });\n  },\n};\n","import { CONSENT_INFO_KEY } from \"@constants\";\r\n\r\nimport {\r\n  ConsentEvent,\r\n  DataUsageAttributes,\r\n  ParsableDataUsageAttributes,\r\n  UserConsent,\r\n  dataClassification,\r\n  dataPurposes,\r\n  dataUsageEquals,\r\n  parseDataUsage,\r\n} from \"@tailjs/types\";\r\nimport { Clock, F, Nullish, T, clock, map, restrict } from \"@tailjs/util\";\r\nimport {\r\n  ConsentCommand,\r\n  TrackerExtensionFactory,\r\n  isUpdateConsentCommand,\r\n} from \"..\";\r\nimport { debug, document, window } from \"../lib\";\r\n\r\nexport const consent: TrackerExtensionFactory = {\r\n  id: \"consent\",\r\n  setup(tracker) {\r\n    const getCurrentConsent = async (result?: any) =>\r\n      (await tracker.variables.get({\r\n        scope: \"session\",\r\n        key: CONSENT_INFO_KEY,\r\n        result,\r\n      }).value) as UserConsent | undefined;\r\n\r\n    const updateConsent = async <\r\n      C extends ParsableDataUsageAttributes | Nullish\r\n    >(\r\n      consent: C\r\n    ): Promise<\r\n      C extends Nullish\r\n        ? undefined\r\n        : [updated: boolean, current: UserConsent | undefined]\r\n    > => {\r\n      if (!consent) return undefined as any;\r\n\r\n      let current = await getCurrentConsent();\r\n      if (\r\n        !current ||\r\n        dataUsageEquals(current, (consent = parseDataUsage(consent) as any))\r\n      ) {\r\n        return [false, current] as any;\r\n      }\r\n\r\n      const userConsent = {\r\n        level: dataClassification.lookup(consent!.classification)!,\r\n        purposes: dataPurposes.lookup(consent!.purposes)!,\r\n      };\r\n      const result = await tracker.events.post(\r\n        restrict<ConsentEvent>({\r\n          type: \"consent\",\r\n          consent: userConsent,\r\n        }),\r\n        {\r\n          async: false,\r\n          variables: {\r\n            get: [{ scope: \"session\", key: CONSENT_INFO_KEY }],\r\n          },\r\n        }\r\n      );\r\n      return [true, userConsent] as any;\r\n    };\r\n\r\n    (() => {\r\n      // TODO: Make injectable to support more than one.\r\n      // Ideally, it could be injected in the init script from the request handler.\r\n      // However, hooking into the main categories of Google's consent mode v2 should cover most cases.\r\n\r\n      // Since the data layer is a capped buffer that may get rotated\r\n      // we detect changes by keeping track of the last element in the array.\r\n      // This also handles the situation where someone replaces the data layer.\r\n\r\n      const GCMv2Mappings = {\r\n        // Performance\r\n        analytics_storage: 4,\r\n        // Functionality\r\n        functionality_storage: 2,\r\n\r\n        // This should be covered with normal \"functionality\".\r\n        // No distinction between functionality and personalization in common cookie CMP, e.g. CookieBot.\r\n        // Not sure why Google thinks this is a different.\r\n        //\r\n        // Tail.js ignores it for now instead of adding even more things to think about when categorizing data.\r\n        personalization_storage: 0,\r\n\r\n        ad_storage: 8, // Targeting\r\n\r\n        security_storage: 16, // Security\r\n      };\r\n\r\n      let dataLayerHead: any;\r\n      tracker({\r\n        consent: {\r\n          externalSource: {\r\n            key: \"Google Consent Mode v2\",\r\n            frequency: 250,\r\n            poll: () => {\r\n              const layer = window[\"dataLayer\"];\r\n              const previousHead = dataLayerHead;\r\n              let n: number = layer?.length;\r\n              if (\r\n                !n ||\r\n                (dataLayerHead === (dataLayerHead = layer[n - 1]) &&\r\n                  dataLayerHead) // Also check that the last item has a value, otherwise an empty element could trick us.\r\n              ) {\r\n                return;\r\n              }\r\n\r\n              let item: any;\r\n              let purposes = 1;\r\n              while (\r\n                n-- &&\r\n                ((item = layer[n]) !== previousHead || !previousHead) // Check all items if we have not captured the previous head.\r\n              ) {\r\n                // Read from the end of the buffer to see if there is any [\"consent\", \"update\", ...] entry\r\n                // since last time we checked.\r\n                if (item?.[0] === \"consent\" && item[1] === \"update\") {\r\n                  map(\r\n                    GCMv2Mappings,\r\n                    ([key, code]) =>\r\n                      item[2][key] === \"granted\" && (purposes |= code)\r\n                  );\r\n\r\n                  return {\r\n                    level:\r\n                      purposes > 1\r\n                        ? 1 // Indirect\r\n                        : 0, // Anonymous (cookie-less)\r\n                    purposes,\r\n                  };\r\n                }\r\n              }\r\n            },\r\n          },\r\n        },\r\n      } as ConsentCommand);\r\n    })();\r\n\r\n    const externalConsentSources: Record<string, Clock> = {};\r\n\r\n    return {\r\n      processCommand(command) {\r\n        if (isUpdateConsentCommand(command)) {\r\n          const getter = command.consent.get;\r\n          if (getter) {\r\n            getCurrentConsent(getter);\r\n          }\r\n\r\n          const setter = parseDataUsage(command.consent.set);\r\n          setter &&\r\n            (async () =>\r\n              (setter.callback ?? (() => {}))(\r\n                ...(await updateConsent(setter))\r\n              ))();\r\n\r\n          const externalSource = command.consent.externalSource;\r\n          if (externalSource) {\r\n            const key = externalSource.key;\r\n            const poller = (externalConsentSources[key] ??= clock({\r\n              frequency: externalSource.frequency ?? 1000,\r\n            }));\r\n            let previousConsent: DataUsageAttributes | undefined;\r\n\r\n            const pollConsent = async () => {\r\n              if (!document.hasFocus()) return;\r\n\r\n              const externalConsent = externalSource.poll();\r\n\r\n              if (!externalConsent) return;\r\n\r\n              const consent = parseDataUsage({\r\n                ...previousConsent,\r\n                ...externalConsent,\r\n              });\r\n              if (consent && !dataUsageEquals(previousConsent, consent)) {\r\n                const [updated, current] = await updateConsent(consent);\r\n                if (updated) {\r\n                  debug(current, \"Consent was updated from \" + key);\r\n                }\r\n                previousConsent = consent;\r\n              }\r\n            };\r\n            poller.restart(externalSource.frequency, pollConsent).trigger();\r\n          }\r\n\r\n          return T;\r\n        }\r\n        return F;\r\n      },\r\n    };\r\n  },\r\n};\r\n","export const commandTest =\n  <T = any>(...name: any[]) =>\n  (command: any): command is T =>\n    command === name[0] ||\n    name.some(\n      (name) => typeof name === \"string\" && command?.[name] !== undefined\n    );\n","import { CartEventData } from \"@tailjs/types\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Triggers events related to a shopping cart.\n */\nexport interface CartCommand {\n  cart: \"clear\" | CartEventData;\n}\n\nexport const isCartCommand = commandTest<CartCommand>(\"cart\");\n","import type { Nullish } from \"@tailjs/util\";\nimport { commandTest } from \"./shared\";\n\nexport interface ChangeUserCommand {\n  username: string | Nullish;\n}\n\nexport const isChangeUserCommand = commandTest<ChangeUserCommand>(\"username\");\n","import type { TagMappings } from \"..\";\nimport { commandTest } from \"./shared\";\n\nexport type TagAttributesCommand = {\n  tagAttributes: TagMappings;\n};\nexport const isTagAttributesCommand =\n  commandTest<TagAttributesCommand>(\"tagAttributes\");\n","import { commandTest } from \"./shared\";\n\n/**\n * Enables or disables tracking.\n */\nexport type ToggleCommand = {\n  disable: boolean;\n};\nexport const isToggleCommand = commandTest<ToggleCommand>(\"disable\");\n","import type {\n  CartAction,\n  CartEventData,\n  ConfiguredComponent,\n  Content,\n  ParsableTags,\n  Tag,\n  TrackingSettings,\n} from \"@tailjs/types\";\n\nimport { commandTest } from \"./shared\";\nimport { MaybeArray, Nullish } from \"@tailjs/util\";\n\nexport interface BoundaryData<RequireArrays = false> {\n  /**\n   * The component definition(s) associated with the boundary element.\n   */\n  component?: MaybeArray<ConfiguredComponent, true, RequireArrays> | null;\n\n  /**\n   * The content definition(s) associated with the boundary element.\n   */\n  content?: MaybeArray<Content, true, RequireArrays> | null;\n\n  /**\n   * The name of the content area associated with the boundary element.\n   *\n   * A content area is used to indicate where activated components are used.\n   */\n  area?: string | null;\n\n  /**\n   *  These tags will be added to the components and content in user activations with the boundary element or any of its descendants.\n   */\n  tags?: RequireArrays extends true ? Tag[] : ParsableTags;\n\n  /**\n   * The element will include cart data when activated.\n   */\n  cart?: CartAction | CartEventData;\n\n  /**\n   * Settings that will apply to components contained by the boundary element including itself, similar to specifying \"track-*\" HMTL attributes on the element.\n   */\n  track?: TrackingSettings;\n}\n\n/**\n * Registers an element as the boundary for a component or similar tracking data. All events triggered from the element or its descendants will have this information attached.\n * In case of nested boundaries the closest one is used.\n */\nexport type BoundaryCommand = {\n  boundary: Element;\n} & (\n  | (BoundaryData & {\n      /**\n       * The content, tags and components will be added to the existing, if any.\n       */\n      add?: boolean;\n    })\n  | { update: (current?: BoundaryData<true>) => BoundaryData | Nullish }\n);\n\n// {\n//   /**\n//    * The component definition(s) associated with the boundary element.\n//    */\n//   component?: ConfiguredComponent | ConfiguredComponent[] | null;\n\n//   /**\n//    * The content definition(s) associated with the boundary element.\n//    */\n//   content?: Content | Content[] | null;\n\n//   /**\n//    * The name of the content area associated with the boundary element.\n//    *\n//    * A content area is used to indicate where activated components are used.\n//    */\n//   area?: string | string[] | null;\n\n//   /**\n//    *  These tags will be added to the components and content in user activations with the boundary element or any of its descendants.\n//    */\n//   tags?: Tag | Tag[] | null;\n\n//   /**\n//    * The element will include cart data when activated.\n//    */\n//   cart?: CartAction | CartEventData;\n\n//   /**\n//    * The element's component will be included in the stack even when the activation tracking level is `direct`.\n//    */\n//   promote?: boolean;\n\n//   /**\n//    * Specifies how the this command modifies the data associated with the boundary element.\n//    *\n//    * Only properties present in this command are affected (e.g. `component` or `content`) unless the action is `clear`.\n//    *\n//    * @default \"add\"\n//    */\n//   action?: \"add\" | \"remove\" | \"clear\";\n\n//   /**\n//    * The DOM element that gets this command's data associated.\n//    */\n//   boundary: Element;\n// }\n\nexport const isDataBoundaryCommand = commandTest<BoundaryCommand>(\"boundary\");\n","import type { TrackerExtensionFactory } from \"..\";\nimport { commandTest } from \"./shared\";\n\nexport interface ExtensionCommand {\n  extension: TrackerExtensionFactory;\n  priority?: number;\n}\nexport const isExtensionCommand = commandTest<ExtensionCommand>(\"extension\");\n","import { T } from \"@tailjs/util\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Causes all queued events to be posted to the server immediately.\n */\nexport type FlushCommand = { flush: boolean; force?: boolean; defer?: boolean };\nexport const isFlushCommand = commandTest<FlushCommand>(T, \"flush\");\n","import { MaybeArray, PickRequired } from \"@tailjs/util\";\nimport { ClientVariableGetter } from \"..\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Used to get variables (data) from the backend.\n */\nexport interface GetCommand {\n  get: MaybeArray<PickRequired<ClientVariableGetter, \"result\">, true>;\n}\n\nexport const isGetCommand = commandTest<GetCommand>(\"get\");\n","import type { Listener } from \"..\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Registers a listener that will be invoked before and after events are flushed.\n * Useful for debugging or client-side integration with other tracker libraries (if one absolutely must).\n */\nexport interface ListenerCommand {\n  listener: Listener;\n}\nexport const isListenerCommand = commandTest<ListenerCommand>(\"listener\");\n","import { Order, OrderEvent } from \"@tailjs/types\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Shorthand command to trigger an {@link OrderEvent} event.\n */\nexport interface OrderCommand {\n  /**\n   * The order that was completed or cancelled.\n   */\n  order: Order;\n}\n\nexport const isOrderCommand = commandTest<OrderCommand>(\"order\");\n","import type { Component, ExternalReference } from \"@tailjs/types\";\nimport { commandTest } from \"./shared\";\n\nexport type ComponentOrContent =\n  | { component: Component }\n  | { content: ExternalReference };\n\n/**\n * Registers an element as the boundary for a component. All events triggered from the element or its descendants will have this information attached.\n * In case of nested boundaries the closest one is used.\n */\nexport interface ScanComponentsCommand {\n  scan: {\n    attribute: string;\n    components: ComponentOrContent[];\n  };\n}\n\nexport const isScanComponentsCommand =\n  commandTest<ScanComponentsCommand>(\"scan\");\n","import { MaybeArray } from \"@tailjs/util\";\nimport { ClientVariableSetter } from \"..\";\nimport { commandTest } from \"./shared\";\n\n/**\n * Used to set variables (data) in the backend.\n */\nexport interface SetCommand {\n  /** An object where the names of the properties correspond to the variables set in the tracker. */\n  set: MaybeArray<ClientVariableSetter<any, string>>;\n}\n\nexport const isSetCommand = commandTest<SetCommand>(\"set\");\n","import type { Tracker, TrackerCommand } from \"..\";\n\nexport type UseTrackerCommand = (tracker: Tracker) => void;\nexport const isTrackerAvailableCommand = (\n  command: TrackerCommand\n): command is (tracker: Tracker) => void => typeof command === \"function\";\n","import { ParsableDataUsageAttributes, UserConsent } from \"@tailjs/types\";\r\nimport { commandTest } from \"./shared\";\r\n\r\nexport type ExternalConsentPoller = () =>\r\n  | ParsableDataUsageAttributes\r\n  | undefined;\r\n\r\n/** Gets or updates the user's consent. */\r\nexport interface ConsentCommand {\r\n  /**\r\n   * If a function, it will be invoked as a callback with the users current consent preferences.\r\n   * Otherwise it will update the user's consent with the values provided.\r\n   */\r\n  consent: {\r\n    get?: (\r\n      value: UserConsent | undefined,\r\n      previous: UserConsent | undefined,\r\n      poll: () => void\r\n    ) => void;\r\n    set?: ParsableDataUsageAttributes & {\r\n      callback?: (updated: boolean, current: UserConsent | undefined) => void;\r\n    };\r\n    /**\r\n     * This can be used to poll the client's browser environment for something that translates into a tail.js consent.\r\n     * The primary use case is to integrate with a CMP (e.g. Cookiebot).\r\n     *\r\n     * Please provide a unique key for the poll function to avoid unintended double polling if for some reason\r\n     * the command is unintentionally submitted more than once.\r\n     */\r\n    externalSource?: {\r\n      key: string;\r\n      poll: ExternalConsentPoller;\r\n      /** @default 1000 */\r\n      frequency?: number;\r\n    };\r\n  };\r\n}\r\n\r\nexport const isUpdateConsentCommand = commandTest<ConsentCommand>(\"consent\");\r\n","import { INITIALIZE_TRACKER_FUNCTION } from \"@constants\";\n\nimport { initializeTracker } from \".\";\nimport { window } from \"./lib\";\n\n// This assumes the script is loaded from the RequestHandler's ?init route.\n\n// To prevent external scripts from eavesdropping by getting a hold of the encryption key, this is how initialization works:\n// 1: The configuration script appends a <script> element with this script, and adds a \"loaded\" handler.\n// 2: This script defines a non-configurable method on the window. This prevents it from being overridden if something intercepts the \"loaded\" handler before the configuration script.\n// 3: The configuration script calls this function with a callback that initializes the tracker with the configuration including the storage key.\n\nObject.defineProperty(window, INITIALIZE_TRACKER_FUNCTION, {\n  writable: false,\n  configurable: false,\n  value: (callback: any) => {\n    callback(initializeTracker);\n  },\n});\n"],"names":["stringRuleCache","input","matchProjection","collected","metadata","key","current","pos","screenPos","x","y","rect","cached","name","cachedMappings","currentBoundaryData","propertyValue","_defaultTransports","tracker","currentViewEvent","pushPopNavigation","entry","content","throwError","error","transform","e","Error","message","isString","unwrap","structuralEquals","value1","value2","depth","isObject","length","n","Object","keys","equalsAny","target","singleValue","otherValues","some","r","value","required","TypeError","text","replace","tryCatch","expression","errorHandler","always","isFunction","isError","isBoolean","console","deferred","result","getter","initialized","then","resolved","resolvedValue","thenMethod","onfullfilled","onrejected","tryCatchAsync","async","await","isArray","restrict","item","undefined","MAX_SAFE_INTEGER","Number","F","T","NOOP","IDENTITY","FILTER_NULLISH","symbolIterator","Symbol","iterator","createTypeConverter","typeTester","parser","parse","ifDefined","resultOrProperty","parseBoolean","isTruish","isTrue","isNotFalse","isInteger","isSafeInteger","isNumber","toString","Array","array","clone","isIterable","objectPrototype","prototype","getPrototypeOf","isPlainObject","hasMethod","isSymbol","acceptStrings","isMap","Map","isSet","Set","round","number","decimals","Math","pow","testFirstLast","s","first","last","isJsonString","stopInvoked","stop","yieldValue","wrapProjection","projection","sliceAction","action","start","end","index","filterArray","filter","createIterator","source","i","createObjectIterator","createNavigatingIterator","step","maxIterations","yield","createRangeIterator","offset","mapToArray","projected","map","project","flatten","expandObjects","flattenInternal","nested","mapped","push","distinct","flatMap","concat","items","merged","forEach","forEachArray","returnValue","forEachIterable","forEachObject","apply","args","forEachInternal","forEachAsync","fromEntries","obj","selector","merge","_","reduce","reducer","seed","seedFactory","_reducer","predicate","count","filterInternal","size","max","values","mapFirst","_ref","_source_some1","_source_some","call","sort","rank","lhs","rhs","setSingle","constructor","delete","set","add","get","init","has","createSetOrUpdateFunction","setter","assign","update","WeakSet","clearSingle","remove","em","splice","pick","t","arg","entries","k","v","unshift","diff","updated","previous","patchedValue","patched","delta","previousValue","now","performance","trunc","timeOrigin","Date","createTimer","started","timeReference","capturedElapsed","t0","elapsed","toggle","reset","clock","callbackOrSettings","frequency","settings","callback","queue","paused","trigger","once","raf","timeoutId","mutex","promise","resolve","timer","outerCallback","skipQueue","pending","instance","busy","updateTimeout","setTimeout","requestAnimationFrame","timeoutCallback","active","resetTimer","clearTimeout","restart","newFrequency","newCallback","ResettablePromise","this","_promise","ifPending","reject","OpenPromise","signal","onfulfilled","_define_property","captured","Promise","inner","delay","ms","isFinite","resettable","createEventBinders","listener","attach","detach","bound","outerListener","unbind","rebind","createEvent","dispatchedArgs","listeners","handler","binders","payload","enumerate","separator","slice","join","pluralize","singular","plural","ansiSupported","ansi","ps","buffer","quote","ellipsis","maxLength","sep","isBit","log2","createEnumAccessor","sourceEnum","flags","enumName","pureFlags","names","carry","carry2","originalValue","toLowerCase","any","flag","nameLookup","none","valueLookup","parseValue","validateNumbers","parseInt","invalid","tryParse","lookup","format","JSON","stringify","pure","defaults","properties","defineProperty","configurable","enumerable","writable","define","logFormat","c","createEnumPropertyParser","props","parsers","sourceItem","prop","parsed","parameterList","parseKeyValue","arrayDelimiters","decode","parts","split","decodeURIComponent","trim","replaceAll","delim","parseUri","uri","query","requireAuthority","match","scheme","slashes","authority","user","password","bracketHost","host","port","path","queryString","fragment","urn","parseQueryString","parseParameters","list","results","part","kv","testRegex","test","matches","regex","collect","escapeRegEx","REGEX_NEVER","unionOrNever","joined","RegExp","isRegEx","parseRegex","separators","replaceValue","createIntervals","cmp","width","interval","ranges","finalize","sum","changed","dataClassification","DataClassification","Anonymous","Indirect","Direct","Sensitive","dataUsageEquals","classification","level","dataPurposes","purposes","parseDataUsage","classificationOrConsent","purpose","DataPurposeFlags","Necessary","None","Functionality","Performance","Targeting","Security","Infrastructure","Any_Anonymous","Any","Server","Server_Write","singleDataPurpose","clearMetadata","event","client","posted","queued","isEventPatch","patchTargetId","variableScope","VariableScope","Global","Entity","Session","Device","User","VariableEnumProperties","scope","sortVariables","variables","localeCompare","toVariableResultPromise","VariablePatchType","VariableResultStatus","getResults","errorHandlers","unwrappedResults","mapResults","property","handleResultErrors","all","status","getResultVariable","getSuccessResults","variable","_result_current","isSuccessResult","requireValue","errorMessage","errors","successResults","_result_source","_result_source1","version","isTrackedEvent","ev","type","isViewEvent","types","maybeDecode","tag","score","collectTags","tagString","prefix","ns","localName","quoted1","quoted2","unquoted","parseFloat","localVariableScope","LocalVariableScope","View","Tab","Shared","anyVariableScope","formatAnyVariableScope","isLocalScopeKey","toNumericVariableEnums","variableKeyToString","targetId","stringToVariableKey","NOT_INITIALIZED","win","window","doc","document","body","matchSelector","node","MAX_ANCESTOR_DISTANCE","chrome","forAncestorsOrSelf","el","stoppingCriterion","distance","nodeType","prev","parentElement","ownerDocument","_prev_ownerDocument_defaultView","defaultView","frameElement","parseAttributeValue","_trim","httpDecode","httpDecrypt","attr","getAttribute","scopeAttribute","normalizedAttribute","attributeNames","getAttributeNames","cssProperty","getComputedStyle","getPropertyValue","tagName","scrollPos","int","scrollX","scrollY","matchExHash","href1","href2","getScreenPos","mouseEvent","includeFold","getPos","xpx","ypx","offsetWidth","offsetHeight","pageFolds","innerHeight","pointerType","pageY","pageX","getRect","getBoundingClientRect","left","top","height","listen","options","capture","passive","addEventListener","removeEventListener","parseDomain","getViewport","innerWidth","totalWidth","totalHeight","boundaryData","WeakMap","getBoundaryData","trackerPropertyName","css","matchAttributeNames","tags","eligible","a","cachedTagMapper","parseTagAttributes","trackerConfig","rule","cache","cssPropertyWithBase","parsedCssRules","parseCssMappingRules","rulesString","rule1","rule2","trackerProperty","inherit","_ref1","trackerFlag","parseTags","sourceEl","elementTagData","src","disabled","postEvents","postFrequency","requestTimeout","encryptionKey","apiKey","json","impressionThreshold","captureContextMenu","default","codes","chars","charCode","charCodeAt","to64u","p","bytes","chunk","base64","String","fromCharCode","from64u","encoded","j","Uint8Array","FNVs","32","64","128","entropy","random","deserialize","msgDeserialize","serialize","msgSerialize","data","multiple","floatBuffer","floatView","append","subarray","isReplacement","appendByte","lo","appendBytes","hi","appendInt64","DataView","ArrayBuffer","setFloat64","str","ascii","ci","c2","sec","getTime","getMilliseconds","appendArray","Uint8ClampedArray","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","appendObject","invalidTypeReplacement","byte","newLength","newArray","abs","read","readMap","readArray","readStr","readBin","readExt","readFloat","readUInt","readInt","debug","view","byteOffset","getFloat32","getFloat64","lengthSize","decodeUtf8","msgpack","encode","exports","REF_PROP","includeValue","includeDefaultValues","defaultValues","prettify","cleaners","refs","refIndex","patchProperty","addCleaner","cleaner","toJSON","matchedRef","ew","createTransport","factory","decodeJson","serializeOptions","encrypt","decrypt","hash","fastStringHash","bitsOrNumeric","ep","jsonDecode","numericOrBits","pad","bits","prime","mixer","mixer255","iw","mixer0","window0","resetMixer","updateMixer","MAX_PADDING","ENTROPY","cipher","BigInt","asUintN","MIN_SAFE_INTEGER","binary","jsonEncode","currentScript","SCRIPT_SRC","TRACKER_DOMAIN","isInternalUrl","url","endsWith","mapUrl","urlParts","VAR_URL","MNT_URL","groupValue","childGroups","group","collapsed","groupCollapsed","children","log","groupEnd","httpEncode","httpEncrypt","USE_ENCRYPTION","addEncryptionNegotiatedListener","dispatchEncryptionNegotiated","logError","shift","id","addPageLoadedListener","dispatchPageLoaded","addPageVisibleListener","dispatchPageVisible","maybeDispatchPageLoaded","loaded","newLoaded","sleepTimer","maybeDispatchPageVisible","visible","visibilityState","visibleTimer","activated","activeTime","dispatchPageActivated","activationTimeout","setActivated","getActiveTime","localId","TAB_ID","nextId","nextLocalId","randomValues","tabVariables","tabState","heartbeat","state","knownTabs","addStateListener","dispatchState","addVariablesChangedListener","dispatchVariablesChanged","post","tryGetVariable","setLocalVariables","updateVariableState","getVariableChanges","changes","updates","changedEventData","sharedChanges","dispatchRequest","localState","sessionStorage","getItem","CLIENT_STORAGE_PREFIX","CLIENT_STATE_CHANNEL_ID","removeItem","padStart","setItem","localStorage","newValue","sender","initTimeout","timeout","HEARTBEAT_FREQUENCY","tabId","removed","clearStep","parent","parentKey","targetKeys","clear","loading","addResponseHandler","dispatchResponse","requestLock","retries","defaultRetries","intervalId","renew","localTimeout","setInterval","clearInterval","waitHandle","race","lockId","request","beacon","currentData","serialized","cancel","prepareRequestData","retry","prepareResult","newData","response","fetch","method","credentials","mode","headers","Content-Type","warn","arrayBuffer","navigator","sendBeacon","Blob","KEY_PROPS","VARIABLE_PROPS","GETTER_PROPS","SETTER_PROPS","activeCallbacks","createVariableStorage","endpoint","context","pollVariables","getters","callbacks","vars","VARIABLE_POLL_FREQUENCY","registerCallbacks","mappedKey","cacheDurations","stateDuration","poll","updateCacheDuration","duration","validateKey","requestGetters","sourceIndex","newLocal","_variables_get","_this","local","refresh","Success","Created","setResultExpiration","Denied","deviceSessionId","_variables","setters","localResults","requestVariables","patch","Unchanged","force","timestamp","intersectionHandler","IMPRESSION_START","IMPRESSION_STOP","detectDeviceType","h","landscape","angle","screen","w","orientation","o","deviceType","dpr","devicePixelRatio","postUserAgentEvent","hasTouch","maxTouchPoints","userAgent","clientId","languages","language","region","primary","preference","timezone","iana","Intl","DateTimeFormat","resolvedOptions","timeZone","getTimezoneOffset","isLinkElement","href","startsWith","isClickable","getElementInfo","includeRect","_el_href","_el_innerText","innerText","initializeTracker","config","clientEncryptionKey","extensions","callListeners","pendingStateCommands","trackerContext","events","mainArgs","currentArg","insertArgs","globalStateResolved","ready","apiProtectionKey","queuedCommands","keep","unsubscribe","applyEventExtensions","skip","extension","decorate","throwIfInvalid","snapshots","sources","mapPatchTarget","sourceEvent","flush","unloading","updatedEvents","unbinding","postPatch","registerEventPatchSource","initialPost","relatedNode","isConnected","snapshot","commands","command","isTagAttributesCommand","tagAttributes","isToggleCommand","disable","isFlushCommand","isTrackerAvailableCommand","g","isListenerCommand","isExtensionCommand","expanded","cmd","isSetCommand","isGetCommand","setup","priority","success","processCommand","freeze","__isTracker","_1","_2","session","hasUserAgent","defaultExtensions","getCurrentViewId","referrerKey","pushNavigationSource","navigationEventId","consumed","totalDuration","visibleDuration","activations","addViewChangedListener","dispatchViewChanged","createViewDurationTimer","totalTime","visibleTime","activationsCounter","getViewTimeOffset","addFrameListenerInternal","callOnFrame","onFrame","triggerCurrent","frames","frame","knownFrames","getElementsByTagName","parseCartEventData","normalizeCartEventData","units","hasComponentOrContent","boundary","component","parseBoundaryTags","ancestor","stripRects","getComponentContext","directOnly","includeRegion","areaPath","components","collectedContent","includeState","area","track","secondary","promote","currentValue","definition","pendingViewDefinition","viewIndex","tabIndex","currentLocation","tabs","postView","qs","referrer","location","tab","pathname","domain","tabNumber","tabViewNumber","viewport","firstTab","landingPage","utm","navigationType","getEntriesByType","redirects","redirectCount","relatedEventId","externalReferrer","history","isChangeUserCommand","username","impressions","observer","IntersectionObserver","els","currentIntersections","constrain","point","min","probeRange","createRange","regions","impressionEvents","unbindPassiveEventSources","boundaries","stats","pendingActive","visiblePercentage","updateRegion","viewDuration","prevHeight","inferred","bottom","readTime","viewWidth","viewHeight","intersection","right","intersectionHeight","intersectionWidth","thresholds","qualified","timeOffset","nil","middle","seen","textContent","prevIndex","charMatcher","words","longWords","sentences","hasWord","exec","limits","wordsBefore","inSentence","wasBoundary","MINUTE","SECOND","characters","lix","nodes","createTreeWalker","NodeFilter","SHOW_TEXT","boundaryIndex","nextNode","nodeLength","horizontalOffset","verticalOffset","intersectionTop","intersectionBottom","isIntersecting","observe","registerComponent","normalizeBoundaryData","cart","eventData","isDataBoundaryCommand","isScanComponentsCommand","scanAttributes","attributeName","references","querySelectorAll","l","stack","isNaN","next","nextElementSibling","parentNode","removeChild","scan","attribute","activeEventClicks","trackDocument","trackClicks","trackRegion","clickableElement","containerElement","clickables","nav","button","clickable","child","childComponents","clicks","contextCart","clickIntent","componentContext","sharedEventProperties","container","info","element","link","external","hostname","search","anchor","originalUrl","requestId","navigationEvent","self","ctrlKey","shiftKey","altKey","exit","internalUrl","substring","encodeURIComponent","intentEvent","contentDocument","emitted","initialScroll","defer","f","scroll","fold","scrollType","isCartCommand","ia","order","getFormState","formEvents","getFormFieldValue","tracked","include","selectedOptions","option","checked","capturedContext","refName","formElement","form","fieldMap","fields","commitTimeout","defaultTimeout","handle","currentCallback","stickyTimeout","handleLostFocus","completed","field","label","labels","crypto","getRandomValues","ref","getFieldInfo","currentField","total","tv0","fillOrder","filled","corrections","lastField","wireFormFields","dataLayerHead","getCurrentConsent","updateConsent","consent","userConsent","GCMv2Mappings","analytics_storage","functionality_storage","personalization_storage","ad_storage","security_storage","externalConsentSources","externalSource","layer","dataLayer","previousHead","code","previousConsent","isUpdateConsentCommand","hasFocus","externalConsent","pollConsent","commandTest","isOrderCommand"],"mappings":"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","x_google_ignoreList":[36]}