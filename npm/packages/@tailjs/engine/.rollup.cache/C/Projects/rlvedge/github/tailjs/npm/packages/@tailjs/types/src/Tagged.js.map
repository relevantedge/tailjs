{"version":3,"file":"Tagged.js","sourceRoot":"","sources":["Tagged.ts"],"names":[],"mappings":"","sourcesContent":["import type { Tag, ExternalReference } from \".\";\n\n/**\n * Types extending this interface allow custom values that are not explicitly defined in their schema.\n *\n * See {@link tags} for details.\n *\n */\nexport interface Tagged {\n  /**\n   * Tags in tailjs are a flexible form of key/value pairs that can be used to categorize events, track component parameters\n   * and add contextual information to content data organized in a taxnonmy specific to your business domain.\n   *\n   * Examples of tags are `promotion, color=black`, `conversion:high-value`, `rendering:component:theme=dark`, `ad-campaign=43899` and `ext1:video:play`\n   *\n   * As in the examples above, tags can optionally have a value indicated by an equals sign (`=`), and the names can be organized in taxonomies with each rank separated by colon (`:`).\n   * If there are more than one tag they are separated by comma (`,`).\n   *\n   * The following rules apply:\n   * - There should not be quotes around tag values. If there are they will get interpreted as part of the value.\n   * - Tag names will get \"cleaned\" while they are tracked, and all letters are converted to lowercase and other characters than numbers,  `.`, `-` and `_` are replaced with `_`.\n   * - Tag values can be mostly anything, but you should keep them short and prefer referencing things by their external ID instead of their names.\n   * - If you need the `,` literal as part of a tag value it can be escaped by adding a backslash in front of it (`\\,`), however using commas or similar characters to store a list of values in the same tag is strongly discouraged as each value should rather have its own tag.\n   *\n   * BAD: `selected=1\\,2\\,3`, `selected=1|2|3`\n   * GOOD: `selected=1, selected=2, selected=3`\n   *\n   * BAD: `event=My social gathering in July,source=eventbrite`\n   * LESS BAD: `event:eventbrite=8487912`\n   * GOOD: Use an {@link ExternalReference}.\n   *\n   * BAD: `campaign:promo=1, campaign:length:4`\n   * GOOD: `campaign:promo, campaign:length=4`\n   *\n   * Tags can be either be added directly to content and component definitions, or added to HTML tags with the `track-tags` attribute or `--track-tags` CSS property.\n   * In the latter case all tags from the HTML elements that contain a component or surround content are added to tracking when the user clicks around.\n   *\n   * This allows some tags to be managed via e.g. CMS and follow thec content around wherever it is used on the website,\n   * and other tags to be included by the logic that puts the bits and pieces together to the final webpage the user sees.\n   *\n   * This unified approach gives a clear way to store all domain-specific data in a way that goes very well with analytics.\n   * If the shape of the data you want to store is too complex to easily fit into tags, you can instead extend the tracker's event schema.\n   *\n   */\n  tags?: Tag[];\n}\n"]}