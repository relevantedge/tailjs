{"version":3,"file":"scanComponents.js","sourceRoot":"","sources":["scanComponents.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Component, ExternalReference } from \"@tailjs/types\";\nimport {\n  F,\n  T,\n  attr,\n  document,\n  get,\n  hashSet,\n  map,\n  nil,\n  parseInt,\n  push,\n  set,\n  split,\n  str,\n} from \".\";\nimport type { BoundaryCommand } from \"..\";\n\ntype MappedComponent = [\n  command: {\n    component?: Component;\n    content?: ExternalReference;\n    area?: string;\n  },\n  elements: HTMLElement[]\n];\nexport function scanAttributes(\n  attributeName: string,\n  references: MappedComponent[0][]\n): BoundaryCommand[] {\n  if (!references) return [];\n  const commands: BoundaryCommand[] = [];\n\n  const seen = hashSet<any>();\n  document.querySelectorAll(`[${attributeName}]`).forEach((el) => {\n    if (get(seen, el)) {\n      return;\n    }\n\n    const stack: any[] = [];\n\n    while (attr(el, attributeName) != nil) {\n      set(seen, el);\n      const delta = split(attr(el, attributeName)!, \"|\");\n      attr(el, attributeName, nil);\n      for (let i = 0; i < delta.length; i++) {\n        let item: any = delta[i];\n        if (item === \"\") {\n          continue; // If the attribute starts with \"|\" it means \"keep stack\". Splitting the array on \"|\" will give an empty item.\n        }\n        const number = item === \"-\" ? -1 : parseInt(str(item, F) ?? \"\", 36);\n        if (number < 0) {\n          stack.length += number;\n          continue;\n        } else if (i === 0) {\n          stack.length = 0; // The first item has an value to replace the stack since not preceded by neither \"|\" nor an negative number (pop).\n        }\n\n        if (isNaN(number) && /^[\"\\[{]/.test(item)) {\n          // Poor man's parser. If the JSON contains '|'s keep going until it works.\n          let json = \"\";\n          for (; i < delta.length; i++) {\n            try {\n              item = JSON.parse((json += delta[i]));\n              break;\n            } catch (e) {}\n          }\n        }\n\n        if (number >= 0 && references[number]) {\n          item = references[number];\n        }\n        stack.push(item);\n      }\n      push(\n        commands,\n        ...map(stack, (data) => ({ add: T, ...data, boundary: el }))\n      );\n      const next = el.nextElementSibling!; // Ignore TS null error.\n      if (el.tagName === \"WBR\") {\n        el.parentNode?.removeChild(el);\n      }\n      el = next;\n    }\n  });\n\n  return commands;\n}\n"]}