{"version":3,"file":"VariableMap.js","sourceRoot":"","sources":["VariableMap.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  VariableKey,\r\n  VariableScope,\r\n  VariableScopeValue,\r\n  variableScope,\r\n} from \"@tailjs/types\";\r\nimport {\r\n  isArray,\r\n  isDefined,\r\n  isFunction,\r\n  isIterable,\r\n  isObject,\r\n  isUndefined,\r\n} from \"@tailjs/util\";\r\n\r\ntype ScopeKey =\r\n  | VariableKey<boolean>\r\n  | readonly [scope: VariableScopeValue, key: string];\r\n\r\nexport const mapKey = (\r\n  scope: VariableScope,\r\n  key: string,\r\n  targetId: string | undefined\r\n) =>\r\n  scope === VariableScope.Global ? { scope, key } : { scope, key, targetId };\r\n\r\nexport class VariableMap<T = any>\r\n  implements Iterable<readonly [readonly [VariableScope, string], T]>\r\n{\r\n  private readonly _values = new Map<VariableScope, Map<string, T>>();\r\n  private readonly _onSizeChanged: ((delta: number) => void) | undefined;\r\n\r\n  constructor(keys?: Iterable<readonly [key: ScopeKey, value: T] | undefined>);\r\n  /** @internal */\r\n  constructor(onSizeChanged?: (delta: number) => void);\r\n  constructor(arg?: Iterable<any> | ((delta: number) => void)) {\r\n    if (isFunction(arg)) {\r\n      this._onSizeChanged = arg;\r\n    } else if (arg) {\r\n      this.set(arg);\r\n    }\r\n  }\r\n\r\n  private _size: number = 0;\r\n  public get size() {\r\n    return this._size;\r\n  }\r\n\r\n  private _updateSize(delta: number) {\r\n    this._size += delta;\r\n    this._onSizeChanged?.(delta);\r\n  }\r\n\r\n  public get<\r\n    K extends VariableKey<boolean> | null | undefined,\r\n    R extends T | undefined = T | undefined\r\n  >(\r\n    key: K,\r\n    initializer?: (scope: VariableScope, key: string) => R\r\n  ): K extends undefined | null ? undefined : R;\r\n  public get<\r\n    S extends VariableScopeValue | undefined | null,\r\n    R extends T | undefined = T | undefined\r\n  >(\r\n    scope: S,\r\n    key: string,\r\n    initializer?: (scope: VariableScope, key: string) => R\r\n  ): S extends undefined | null ? undefined : R;\r\n  public get(\r\n    scope: VariableScopeValue | null | undefined\r\n  ): Iterable<readonly [string, T]> | undefined;\r\n\r\n  public get(\r\n    source: VariableScopeValue | VariableKey<boolean> | null | undefined,\r\n    arg2?: string | ((scope: VariableScope, key: string) => any),\r\n    initializer?: (scope: VariableScope, key: string) => any\r\n  ) {\r\n    if (source == null) return undefined;\r\n    let scope: VariableScope, key: string;\r\n    if (isObject(source, true)) {\r\n      scope = variableScope.parse(source.scope, false);\r\n      key = source.key;\r\n      initializer = arg2 as any;\r\n    } else {\r\n      scope = variableScope.parse(source, false);\r\n      key = arg2 as any;\r\n    }\r\n\r\n    let values = this._values.get(scope);\r\n    if (isDefined(key)) {\r\n      let value = values?.get(key);\r\n      if (initializer && isUndefined(value)) {\r\n        if (!values) {\r\n          this._values.set(scope, (values = new Map()));\r\n        }\r\n\r\n        this._updateSize(1);\r\n        values.set(key, (value = initializer(scope, key)));\r\n      }\r\n      return value;\r\n    }\r\n\r\n    return values as Iterable<readonly [string, T]>;\r\n  }\r\n\r\n  public has(\r\n    scope: VariableScopeValue | null | undefined,\r\n    key?: string\r\n  ): boolean;\r\n  public has(key: VariableKey<boolean> | null | undefined): boolean;\r\n  public has(\r\n    source: VariableKey<boolean> | VariableScopeValue | undefined | null,\r\n    key?: string\r\n  ) {\r\n    if (source == null) return undefined;\r\n\r\n    if (isObject(source, true)) {\r\n      return (\r\n        this._values\r\n          .get(variableScope.parse(source.scope, false))\r\n          ?.has(source.key) ?? false\r\n      );\r\n    }\r\n\r\n    const scope = variableScope.parse(source, false);\r\n    return isDefined(key)\r\n      ? this._values.get(scope)?.has(key) ?? false\r\n      : this._values.has(scope);\r\n  }\r\n\r\n  public clear(): this {\r\n    this._updateSize(-this._size);\r\n    this._values?.clear();\r\n    return this;\r\n  }\r\n\r\n  public delete(scope: VariableScopeValue | null | undefined): boolean;\r\n  public delete(\r\n    scope: VariableScopeValue | null | undefined,\r\n    key: string\r\n  ): boolean;\r\n  public delete(key: VariableKey<boolean> | null | undefined): boolean;\r\n  public delete(values: Iterable<ScopeKey | null | undefined>): boolean;\r\n  public delete(\r\n    arg1:\r\n      | VariableScopeValue\r\n      | VariableKey<boolean>\r\n      | Iterable<any>\r\n      | null\r\n      | undefined,\r\n    arg2?: string\r\n  ) {\r\n    if (arg1 == null) return false;\r\n\r\n    let scope: VariableScope, key: string | undefined;\r\n\r\n    if (isObject(arg1, true)) {\r\n      if (isIterable(arg1)) {\r\n        let deleted = false;\r\n        for (const key of arg1) {\r\n          if (!key) continue;\r\n          deleted =\r\n            (isIterable(key)\r\n              ? this.delete(key[0], key[1])\r\n              : this.delete(key)) || deleted;\r\n        }\r\n        return deleted;\r\n      }\r\n      scope = variableScope.parse(arg1.scope, false);\r\n      key = arg1.key;\r\n    } else {\r\n      scope = variableScope.parse(arg1, false);\r\n      key = arg2;\r\n    }\r\n\r\n    const values = this._values.get(scope);\r\n    if (!values) return false;\r\n\r\n    if (isDefined(key)) {\r\n      if (!values.has(key)) return false;\r\n      this._updateSize(-1);\r\n\r\n      values.delete(key);\r\n      if (values.size) return true;\r\n      // If no more keys, delete the scope.\r\n    }\r\n\r\n    this._updateSize(-values.size);\r\n    this._values.delete(scope);\r\n    return true;\r\n  }\r\n\r\n  public set(\r\n    scope: VariableScopeValue | undefined | null,\r\n    key: string,\r\n    value: T | undefined\r\n  ): this;\r\n  public set(\r\n    key: VariableKey<boolean> | undefined | null,\r\n    value: T | undefined\r\n  ): this;\r\n  public set(\r\n    values: Iterable<readonly [key: ScopeKey, value: T | undefined] | undefined>\r\n  ): this;\r\n  public set(\r\n    arg1:\r\n      | VariableScopeValue\r\n      | VariableKey<boolean>\r\n      | Iterable<any>\r\n      | undefined\r\n      | null,\r\n    arg2?: string | T | undefined,\r\n    arg3?: T | undefined\r\n  ): this {\r\n    if (arg1 == null) return this;\r\n\r\n    let scope: VariableScope, key: string | undefined, value: any;\r\n\r\n    if (isObject(arg1, true)) {\r\n      if (isIterable(arg1)) {\r\n        for (const item of arg1) {\r\n          if (!item) continue;\r\n          const [key, value] = item;\r\n          isIterable(key)\r\n            ? this.set(key[0], key[1], value)\r\n            : this.set(key, value);\r\n        }\r\n        return this;\r\n      }\r\n      scope = variableScope.parse(arg1.scope, true);\r\n      key = arg1.key;\r\n      value = arg2;\r\n    } else {\r\n      scope = variableScope.parse(arg1, true);\r\n      key = arg2 as string;\r\n      value = arg3;\r\n    }\r\n\r\n    if (isUndefined(value)) {\r\n      this.delete(scope, key);\r\n      return this;\r\n    }\r\n\r\n    let values = this._values.get(scope);\r\n    if (!values) {\r\n      this._values.set(scope, (values = new Map()));\r\n    }\r\n    if (!values.has(key)) {\r\n      this._updateSize(1);\r\n    }\r\n    values.set(key, value);\r\n    return this;\r\n  }\r\n\r\n  public update<\r\n    S extends VariableScopeValue | undefined | null,\r\n    R extends T | undefined\r\n  >(\r\n    scope: S,\r\n    key: string,\r\n    update: (current: T | undefined) => R\r\n  ): T extends undefined | null ? undefined : R;\r\n  public update<\r\n    K extends VariableKey<boolean> | undefined,\r\n    R extends T | undefined\r\n  >(\r\n    key: K,\r\n    update: (current: T | undefined) => R\r\n  ): T extends undefined ? undefined : R;\r\n  public update(\r\n    arg1: VariableKey<boolean> | VariableScopeValue | undefined | null,\r\n    arg2: string | ((current: T | undefined) => any),\r\n    update?: (current: T | undefined) => any\r\n  ): T | undefined {\r\n    if (arg1 == null) return undefined;\r\n    let scope: VariableScope, key: string;\r\n    if (isObject(arg1, true)) {\r\n      scope = variableScope.parse(arg1.scope);\r\n      key = arg1.key;\r\n      update = arg2 as any;\r\n    } else {\r\n      scope = variableScope.parse(arg1);\r\n      key = arg2 as any;\r\n    }\r\n\r\n    let newValue = update!(this.get(scope, key));\r\n    this.set(scope, key, newValue);\r\n\r\n    return newValue as any;\r\n  }\r\n\r\n  public scopes<Keys extends boolean = false>(\r\n    keys?: Keys\r\n  ): Iterable<\r\n    Keys extends true\r\n      ? VariableScope[]\r\n      : readonly [scope: VariableScope, values: Map<string, T>]\r\n  > {\r\n    return keys ? this._values.keys() : (this._values.entries() as any);\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    for (const [scope, values] of this._values) {\r\n      for (const [key, value] of values) {\r\n        yield [[scope, key], value] as const;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}