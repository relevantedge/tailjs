{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["export type Expand<T> = T extends (...args: any[]) => any\n  ? T\n  : T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: O[K] }\n    : never\n  : T;\n\nexport type SemiPartial<T, K extends keyof T> = Pick<T, K> &\n  Partial<Omit<T, K>>;\n\nexport type ExpandDeep<T> = T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: ExpandDeep<O[K]> }\n    : never\n  : T;\n\nexport type ReadOnlyRecord<\n  K extends string | number = string | number,\n  V = any\n> = { readonly [P in K]: V };\n\nexport type AllRequired<T> = {\n  [P in keyof T]-?: AllRequired<T[P]>;\n};\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never;\n"]}