{"version":3,"file":"eventSet.js","sourceRoot":"","sources":["eventSet.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,GAAG,CAAC;AAG5D,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,IAAI,GAAG,KAAK,EAIZ,EAAE;IACF,MAAM,QAAQ,GAAG,OAAO,EAAwC,CAAC;IACjE,MAAM,QAAQ,GAAG,CAAC,OAAY,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChE,IAAI,UAAU,GAAgB,IAAI,CAAC;IAEnC,OAAO;QACL,CAAC,OAA6C,EAAgB,EAAE,CAAC;QAC/D,iGAAiG;QACjG,IAAI,IAAI,UAAU;YAChB,CAAC,CAAC,OAAO,CAAC,GAAG,UAAU,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC;YAClC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC;YAC1B,QAAQ,CAAC,OAAO,CAAC,CAClB;QACD,CAAC,GAAG,IAAU,EAAE,EAAE,CAChB,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC;KACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,WAAW,EAAE,CAAC;AAEzC,MAAM,CAAC,MAAM,CAAC,sBAAsB,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AAExE,sBAAsB,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC","sourcesContent":["import { del, forEach, hashSet, openPromise, set } from \".\";\n\ntype HandlerArgs<Args extends any[]> = [...params: Args, unbind: () => void];\nexport const eventSet = <Args extends any[] = []>(\n  once = false\n): [\n  add: (handler: (...args: HandlerArgs<Args>) => void) => () => void,\n  invoke: (...args: Args) => void\n] => {\n  const handlers = hashSet<(...args: HandlerArgs<Args>) => void>();\n  const unbinder = (handler: any) => () => del(handlers, handler);\n  let invokeArgs: Args | null = null;\n\n  return [\n    (handler: (...args: HandlerArgs<Args>) => void): (() => void) => (\n      // If the event has already fired call the handler with whatever args were used when it happened.\n      once && invokeArgs\n        ? handler(...invokeArgs, () => {})\n        : set(handlers, handler),\n      unbinder(handler)\n    ),\n    (...args: Args) =>\n      forEach(handlers, (handler) => {\n        handler(...(invokeArgs = args), unbinder(handler));\n      }),\n  ];\n};\n\nexport const startupLock = openPromise();\n\nexport const [registerStartupHandler, startupComplete] = eventSet(true);\n\nregisterStartupHandler(() => startupLock(true));\n"]}