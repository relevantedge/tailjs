{"version":3,"file":"IdentifierProvider.js","sourceRoot":"","sources":["IdentifierProvider.ts"],"names":[],"mappings":"","sourcesContent":["import { TrackerScope } from \"@tailjs/types\";\n\n/**\n * An IdProvider is used to map client-local IDs to global IDs in the context of a {@link TrackerScope} (session, user or device).\n *\n * It also enables temporary session IDs to be anonymized by removing all traits related to an individual when the temporary session ID\n * is based on client-specific information such as IP address.\n *\n * Mapped IDs will not be exposed to the client in script scope, since a client must never be able to make updates\n * outside its scope (e.g. others' sessions or events).\n *\n * If exposed to the client in HttpOnly cookies, they are encrypted, hence still useless for external parties.\n */\nexport interface IdentifierProvider {\n  /**\n   * Returns the specified number of globally unique identifiers, as defined by the implementation.\n   */\n  nextIds(count: number): Promise<string[]>;\n\n  /**\n   * Maps a client-local identifier to a globally unique ID.\n   *\n   * If a time-to-live is specified the mapped ID will be the same if this method is called\n   * with the same parameters for this amount of time. Each time it is called, the expiry time will be extended.\n   *\n   * A zero (or negative) time-to-live will remove the mapping. This should be called as soon as possible it is known that an ID\n   * mapping will not be needed anymore.\n   *\n   * Otherwise, it is not guaranteed that IDs will be the same.\n   *\n   * TTL should only be used for entities that may be patched since it adds a performance overhead.\n   * Examples are cookie-less session hashes, and page view events where the active duration is continously extended.\n   *\n   */\n  mapId(\n    scope: TrackerScope,\n    scopeId: string,\n    localId?: string,\n    ttl?: number\n  ): Promise<string>;\n}\n"]}