{"version":3,"file":"Listener.js","sourceRoot":"","sources":["Listener.ts"],"names":[],"mappings":"","sourcesContent":["import type { TrackedEvent } from \"@tailjs/types\";\nimport type { Tracker, TrackerCommand } from \"..\";\n\nexport type ListenerArgs<T = {}> = T & {\n  tracker: Tracker;\n  unsubscribe: () => void;\n};\n\nexport interface Listener {\n  set?(key: string, value: any, args: ListenerArgs): void;\n  post?(events: TrackedEvent[], args: ListenerArgs): void;\n  refresh?(args: ListenerArgs): void;\n  /**\n   * Enables the listener to apply custom logic when a command is posted to the tracker.\n   *\n   * If this returns `true` it means the command has been handled. If no listener handles a command that is posted to the tracker, an error occurs.\n   */\n  command?(command: TrackerCommand, args: ListenerArgs): void;\n}\n"]}