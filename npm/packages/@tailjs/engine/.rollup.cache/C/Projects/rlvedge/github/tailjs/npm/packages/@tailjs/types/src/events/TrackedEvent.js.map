{"version":3,"file":"TrackedEvent.js","sourceRoot":"","sources":["TrackedEvent.ts"],"names":[],"mappings":"AA6EA,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,EAAO,EAAsB,EAAE,CAC5D,EAAE,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC","sourcesContent":["import type {\n  CartUpdatedEvent,\n  ComponentClickEvent,\n  Integer,\n  LocalID,\n  Session,\n  Tagged,\n  Timestamp,\n  ViewEvent,\n} from \"..\";\n\n/**\n * The base type for all events that are tracked.\n *\n * The naming convention is:\n * - If the event represents something that can also be considered an entity like \"a page view\", \"a user location\" etc. the name should be a (deverbal) noun.\n * - If the event only indicates something that happend, like \"session started\", \"view ended\" etc. the name should be a verb in the past tense.\n *\n * @censor_ignore\n */\nexport interface TrackedEvent extends Tagged {\n  /**\n   * The type name of the event.\n   *\n   * This MUST be set to a constant value in extending interfaces and implementing classes for the event to be registered.\n   * */\n  type: string;\n\n  /**\n   * The ID of the schema the event comes from. It is suggested that the schema ID ends with a hash followed by a SemVer version number. (e.g. urn:tailjs#0.9.0)\n   */\n  schema?: string;\n\n  /**\n   * This may be assigned or transformed by backends if needed.\n   * It is client-assigned for {@link ViewEvent}s\n   */\n  id?: LocalID;\n\n  /**\n   * This is set by the client and can be used to dedupplicate events sent multiple times if the endpoint timed out.\n   */\n  clientId?: LocalID;\n\n  /**\n   * The number of times the client tried to sent the event if the endpoint timed out\n   *\n   * @default 0\n   */\n  retry?: Integer;\n\n  /**\n   * The event that caused this event to be triggered or got triggered in the same context.\n   * For example a {@link NavigationEvent} may trigger a {@link ViewEvent},\n   * or a {@link CartUpdatedEvent} my be triggered with a {@link ComponentClickEvent}.\n   */\n  related?: LocalID;\n\n  /**\n   * The session associated with the event.\n   */\n  session?: Session;\n\n  /**\n   * When applicable, the view where the event happened (related by {@link ViewEvent}).\n   */\n  view?: LocalID;\n\n  /**\n   * This timestamp will always have a value before it reaches a backend.\n   * If specified, it must be a negative number when sent from the client (difference between when the event was generated and when is was posted in milliseconds).\n   *\n   * @default now\n   */\n  timestamp?: Timestamp;\n}\n\nexport const isTrackedEvent = (ev: any): ev is TrackedEvent =>\n  ev && typeof ev.type === \"string\";\n\nexport type TrackedEventPatch = Partial<TrackedEvent> &\n  Required<Pick<TrackedEvent, \"id\" | \"type\">>;\n"]}