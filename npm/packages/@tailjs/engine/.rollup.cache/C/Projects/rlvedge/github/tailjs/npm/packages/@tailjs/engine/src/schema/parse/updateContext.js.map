{"version":3,"file":"updateContext.js","sourceRoot":"","sources":["updateContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,SAAS,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAChE,OAAO,EAEL,eAAe,EACf,oBAAoB,EACpB,gBAAgB,GACjB,MAAM,GAAG,CAAC;AAEX,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,OAA4C,EAC5C,GAAW,EACM,EAAE;IACnB,MAAM,IAAI,GACR,GAAG,KAAK,GAAG;QACT,CAAC,CAAC,OAAO,CAAC,IAAI;QACd,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,uBAAuB,GAAG,IAAI,CAAC,CAAC;IAC1E,MAAM,YAAY,GAAG;QACnB,GAAG,OAAO;QACV,GAAG;QACH,GAAG,oBAAoB,CAAC,OAAO,CAAC;QAChC,IAAI;KACL,CAAC;IACF,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;IAC/B,CAAC;SAAM,IAAI,GAAG,EAAE,CAAC;QACf,YAAY,CAAC,IAAI;YACf,OAAO,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACzE,CAAC;IAED,YAAY,CAAC,IAAI,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAE3C,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,CAAC,YAAY,CAAC,MAAM,GAAG;YACpC,EAAE,EAAE,IAAI,CAAC,GAAG;YACZ,GAAG,gBAAgB,CAAC,IAAI,CAAC;YACzB,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,IAAI,GAAG,EAAE;SACjB,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAEpD,eAAe,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import { PickPartial, isDefined, required } from \"@tailjs/util\";\r\nimport {\r\n  TraverseContext,\r\n  parseEventTypes,\r\n  parseClassifications,\r\n  parseDescription,\r\n} from \".\";\r\n\r\nexport const updateContext = (\r\n  context: PickPartial<TraverseContext, \"key\">,\r\n  key: string\r\n): TraverseContext => {\r\n  const node =\r\n    key === \"#\"\r\n      ? context.node\r\n      : required(context.node?.[key], () => `Cannot navigate to '${key}'.`);\r\n  const childContext = {\r\n    ...context,\r\n    key,\r\n    ...parseClassifications(context),\r\n    node,\r\n  };\r\n  if (node.$id) {\r\n    childContext.$ref = node.$id;\r\n  } else if (key) {\r\n    childContext.$ref =\r\n      context.$ref + (childContext.$ref?.includes(\"/\") ? \"/\" : \"#/\") + key;\r\n  }\r\n\r\n  childContext.path = [...context.path, key];\r\n\r\n  if (isDefined(node.$schema)) {\r\n    const schema = (childContext.schema = {\r\n      id: node.$id,\r\n      ...parseDescription(node),\r\n      context: childContext,\r\n      types: new Map(),\r\n    });\r\n\r\n    if (context.schema) {\r\n      (context.schema.subSchemas ??= new Map()).set(schema.id, schema);\r\n    }\r\n    context.parseContext.schemas.set(schema.id, schema);\r\n\r\n    parseEventTypes(childContext);\r\n  }\r\n  return childContext;\r\n};\r\n"]}