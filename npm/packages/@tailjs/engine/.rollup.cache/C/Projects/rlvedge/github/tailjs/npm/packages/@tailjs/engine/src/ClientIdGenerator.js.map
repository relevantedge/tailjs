{"version":3,"file":"ClientIdGenerator.js","sourceRoot":"","sources":["ClientIdGenerator.ts"],"names":[],"mappings":"AAYA,MAAM,OAAO,6BAA6B;IACxC,KAAK,CAAC,YAAY,CAAC,OAAgB;QACjC,IAAI,YAAY,GAAW;YACzB,OAAO,CAAC,QAAQ;YAChB,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC,GAAG,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CACpC;SACF,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEX,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { Tracker } from \".\";\r\n\r\n/**\r\n * This is used to generate a unique (or as unique as possible) identifier from a client request without using cookies\r\n * or any other information stored in the device.\r\n * The purpose is to have an identifer that is stable over the duration of a session to track anonymous statistics.\r\n *\r\n */\r\nexport interface SessionReferenceMapper {\r\n  mapSessionId(tracker: Tracker): Promise<string>;\r\n}\r\n\r\nexport class DefaultSessionReferenceMapper implements SessionReferenceMapper {\r\n  async mapSessionId(tracker: Tracker): Promise<string> {\r\n    let clientString: string = [\r\n      tracker.clientIp,\r\n      ...[\"accept-encoding\", \"accept-language\", \"user-agent\"].map(\r\n        (header) => tracker.headers[header]\r\n      ),\r\n    ].join(\"\");\r\n\r\n    return tracker.env.hash(clientString, 128);\r\n  }\r\n}\r\n"]}