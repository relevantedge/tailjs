{"version":3,"file":"VariableQuery.js","sourceRoot":"","sources":["VariableQuery.ts"],"names":[],"mappings":"","sourcesContent":["import {\r\n  DataClassificationValue,\r\n  DataPurposeValue,\r\n  Timestamp,\r\n  Variable,\r\n  VariableKey,\r\n  VariableScopeValue,\r\n  VersionedVariableKey,\r\n} from \"..\";\r\n\r\n/** Defines a filter used to query variables.  */\r\nexport interface VariableFilter<NumericEnums extends boolean = boolean> {\r\n  /** Limits the results to variables for these specific target IDs. */\r\n  targetIds?: readonly string[];\r\n\r\n  /**\r\n   * Limits the results to variables from any of these scopes.\r\n   */\r\n  scopes?: readonly VariableScopeValue<NumericEnums>[];\r\n\r\n  /**\r\n   * Limits the results to variables with one of these keys.\r\n   *\r\n   * Use the wildcard `*` to return all keys. The wildcard may optionally have a prefix, as example,  `crm:*` will limit the query\r\n   * to the storage mapped to the `crm` prefix. To limit the query to the default storage (that does not have a prefix) use `:*`.\r\n   *\r\n   * Wildcards can also be used for prefixes. `*:name` will query all storages for a variable with the name `name`.\r\n   *\r\n   * Using wildcards for partial matching is not supported, so the query `*name` will _not_ return all variables\r\n   * where their name ends with  \"name\". Use tags to group and organize variables instead.\r\n   *\r\n   * If a key starts with `!` it means \"not\", and these kind of filters takes precedence over the others.\r\n   *\r\n   * For example the query [\"*\", \"!test\"] will return all keys in the default storage except \"test\".\r\n   * Conversely, the query [\"test\", \"!*\"] will not return anything since all keys has been excluded.\r\n   *\r\n   */\r\n  keys: readonly string[];\r\n\r\n  /**\r\n   * Limit the results to variables that has any of these tag combinations.\r\n   */\r\n  tags?: readonly (readonly string[])[];\r\n\r\n  /**\r\n   * Limits the results to variables with these classifications.\r\n   */\r\n  classification?: {\r\n    /** The variable must have at least this classification. */\r\n    min?: DataClassificationValue<NumericEnums>;\r\n\r\n    /** The variable must not have a higher classification than this. */\r\n    max?: DataClassificationValue<NumericEnums>;\r\n\r\n    /** The variable must have any of these classifications. */\r\n    levels?: readonly DataClassificationValue<NumericEnums>[];\r\n  };\r\n\r\n  /**\r\n   * Limits the results to variables with any of these purposes.\r\n   */\r\n  purposes?: DataPurposeValue<NumericEnums>;\r\n}\r\n\r\n/** Settings that controls how results are returned when querying variables. */\r\nexport interface VariableQueryOptions<NumericEnums extends boolean = boolean> {\r\n  /**\r\n   * Include the total number of matching of variables in the results (not just the top N first).\r\n   * Default is `false`.\r\n   */\r\n  count?: boolean;\r\n\r\n  /**\r\n   * Hint to indicate that no more results than this are needed.\r\n   * A storage will decide its own default value if not specified, and may choose to return fewer results if more efficient.\r\n   *\r\n   * If a cursor is requested this property changes its meaning slightly to be the prefered page size instead of max results.\r\n   * In this case a storage may also decide to return more results than requested if that is more efficient for paging.\r\n   *\r\n   */\r\n  top?: number;\r\n\r\n  /**\r\n   * Used for paging by specifying the value of {@link VariableQueryResult.cursor} from a previous query result.\r\n   * If a previous cursor is specified, the `include` property is ignored.\r\n   *\r\n   * Please not that the results may not neccessarily contain a cursor. If a cursor was requested and none returned,\r\n   * it means that there are no more data.\r\n   */\r\n  cursor?: {\r\n    include?: boolean;\r\n    previous?: string;\r\n  };\r\n\r\n  /**\r\n   * Limits the results to variables created or updated after this timestamp.\r\n   */\r\n  ifModifiedSince?: Timestamp;\r\n\r\n  /**\r\n   * Limits the results to variables that are not included here or have a different version.\r\n   *\r\n   * Can be used to reduce the data transferred when refreshing the values of variables already loaded.\r\n   */\r\n  ifNoneMatch?: VersionedVariableKey<NumericEnums>[];\r\n}\r\n\r\nexport interface VariableQueryResult<T extends VariableKey = Variable> {\r\n  count?: number;\r\n  results: T[];\r\n  cursor?: string;\r\n}\r\n"]}