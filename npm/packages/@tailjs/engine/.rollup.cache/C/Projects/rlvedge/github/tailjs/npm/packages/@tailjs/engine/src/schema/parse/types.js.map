{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type Ajv from \"ajv\";\r\nimport type {\r\n  SchemaClassification,\r\n  SchemaPrimitiveType,\r\n  SchemaPropertyStructure,\r\n} from \"../..\";\r\nimport type { DataClassification, DataPurposes } from \"@tailjs/types\";\r\n\r\nexport interface ParseContext {\r\n  typeNodes: Map<any, ParsedType>;\r\n  schemas: Map<string, ParsedSchema>;\r\n  types: Map<String, ParsedType>;\r\n}\r\n\r\nexport interface TraverseContext extends Partial<ParsedSchemaClassification> {\r\n  ajv: Ajv;\r\n  id?: string;\r\n  parseContext: ParseContext;\r\n  path: string[];\r\n  key: string;\r\n  $ref?: string;\r\n  schema?: ParsedSchema;\r\n  classification?: DataClassification;\r\n  purposes?: DataPurposes;\r\n  node: any;\r\n}\r\n\r\nexport interface ParsedComposition {\r\n  node: any;\r\n  type: \"allOf\" | \"anyOf\" | \"oneOf\" | \"schema\";\r\n  ref?: { id: string; composition: ParsedComposition };\r\n  compositions?: ParsedComposition[];\r\n  context: TraverseContext | null;\r\n}\r\n\r\nexport interface ParsedSchemaEntity {\r\n  id: string;\r\n  description?: string;\r\n  context: TraverseContext;\r\n  /**\r\n   * Can be used to categorize types in documentation. Are not used for anything else.\r\n   */\r\n  tags?: string[];\r\n}\r\nexport interface ParsedSchema\r\n  extends ParsedSchemaEntity,\r\n    Partial<SchemaClassification<true>> {\r\n  types: Map<string, ParsedType>;\r\n  subSchemas?: Map<string, ParsedSchema>;\r\n}\r\n\r\nexport interface ParsedType\r\n  extends ParsedSchemaEntity,\r\n    Partial<SchemaClassification<true>> {\r\n  schemaId?: string;\r\n  name: string;\r\n  declaringProperty?: ParsedProperty;\r\n  extends?: Set<ParsedType>;\r\n  subtypes?: Set<ParsedType>;\r\n  topLevel?: boolean;\r\n  referencedBy?: Set<ParsedProperty>;\r\n  properties: Map<string, ParsedProperty>;\r\n  abstract?: boolean;\r\n  composition: ParsedComposition;\r\n}\r\n\r\nexport interface ParsedProperty\r\n  extends ParsedSchemaEntity,\r\n    ParsedSchemaClassification {\r\n  name: string;\r\n  declaringType: ParsedType;\r\n  objectType?: ParsedType;\r\n  primitiveType?: SchemaPrimitiveType;\r\n  structure?: SchemaPropertyStructure;\r\n  required: boolean;\r\n\r\n  /**\r\n   * The JSON object in the schema that defines the actual type of the property (takes maps and array definitions into account).\r\n   */\r\n  typeContext?: TraverseContext;\r\n}\r\n\r\nexport interface ParsedSchemaClassification extends SchemaClassification<true> {\r\n  /**\r\n   * Ignore when censoring and calculating type classifictions.\r\n   * If only ignored properties are left after censoring an object, it is not returned.\r\n   *\r\n   * The use case is common event properties such as type or session that will be in all events,\r\n   * but it is not sensible to track an event where all its specific properties are censored.\r\n   */\r\n\r\n  censorIgnore?: boolean;\r\n}\r\n"]}