{"version":3,"file":"debug.js","sourceRoot":"","sources":["debug.ts"],"names":[],"mappings":"AACA,OAAO,EAGL,CAAC,EACD,MAAM,EACN,IAAI,EACJ,aAAa,EACb,GAAG,EACH,GAAG,EACH,SAAS,GACV,MAAM,GAAG,CAAC;AAIX,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAO,EAAE,MAAe,EAAE,EAAE;IAChE,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;IACtE,MAAM,iBAAiB,GAAG,GAAG,MAAM,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC;IACnD,OAAO,GAAG,GAAG,iBAAiB,KAC5B,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CACpD,EAAE,CAAC;IACH,MAAM,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,MAAM,IAAI,IAAI,EAAE,CAAC;QACnD,OAAO,CAAC,GAAG,CACT,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,GACzB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CACpD,EAAE,CACH,CAAC;IACJ,MAAM,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEF,IAAI,IAAmB,CAAC;AACxB,MAAM,CAAC,MAAM,KAAK,GAUd,CAAC,GAAG,IAAW,EAAE,EAAE;IACrB,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,IAAI,GAAG,aAAa,CAAO,MAAM,CAAC,CAAC;QACnC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,8CAA8C;IAC9C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAAE,OAAO,CAAQ,CAAC;IAE9B,MAAM,KAAK,GAIP,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACxB,IAAI,SAAS,GAAG,IAAI,CAAC;IAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAClB,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM;QACR,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvC,OAAO,CAAC,CAAC;AACX,CAAC,CAAC","sourcesContent":["import type { Nullish } from \"@tailjs/util\";\nimport {\n  Channel,\n  Json,\n  T,\n  TAB_ID,\n  bool,\n  createChannel,\n  nil,\n  str,\n  stringify,\n} from \".\";\n\ntype Text = [message: Json, group: string | Nullish, header: string | Nullish];\n\nconst print = ([message, group, header]: Text, source?: string) => {\n  const self = !source ? \"(local)\" : source === TAB_ID ? \" (self)\" : \"\";\n  const sourceDescription = `${source ?? \"\"}${self}`;\n  message = `${sourceDescription}: ${\n    str(message) ? message : stringify(message, nil, 2)\n  }`;\n  header && console.groupCollapsed(`${header} ${self}`),\n    console.log(\n      `${group ? `${group}:` : \"\"}${\n        str(message) ? message : stringify(message, nil, 2)\n      }`\n    );\n  header && console.groupEnd();\n};\n\nlet chat: Channel<Text>;\nexport const debug: {\n  (message: Json | Nullish, broadcast?: boolean): boolean;\n  (message: Json | Nullish, group: string | Nullish, broadcast?: boolean): true;\n  (\n    message: Json | Nullish,\n    group: string | Nullish,\n    header: string | Nullish,\n    broadcast?: boolean\n  ): true;\n  //} = (() => true) as any;\n} = (...args: any[]) => {\n  if (!chat) {\n    chat = createChannel<Text>(\"chat\");\n    chat((payload, source) => print(payload, source), T);\n  }\n  //if (!args[0] || !__DEBUG__) return T as any;\n  if (!args[0]) return T as any;\n\n  const texts: [\n    message: Json,\n    group: string | Nullish,\n    header: string | Nullish\n  ] = [args[0], nil, nil];\n  let broadcast = true;\n\n  for (let i = 1; i < args.length; i++) {\n    if (bool(args[i])) {\n      broadcast = args[i];\n      break;\n    }\n    texts[i] = args[i];\n  }\n  broadcast ? chat(texts) : print(texts);\n  return T;\n};\n"]}