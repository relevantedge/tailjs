{"version":3,"file":"parseSchema.js","sourceRoot":"","sources":["parseSchema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,GAAG,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEjE,OAAO,EAEL,aAAa,EACb,SAAS,EACT,eAAe,EACf,aAAa,GACd,MAAM,GAAG,CAAC;AAEX,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,MAAW,EAAE,GAAQ,EAAE,EAAE;IACnD,MAAM,WAAW,GAAG,aAAa,CAC/B;QACE,GAAG;QACH,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE;YACZ,SAAS,EAAE,IAAI,GAAG,EAAE;YACpB,OAAO,EAAE,IAAI,GAAG,EAAE;YAClB,KAAK,EAAE,IAAI,GAAG,EAAE;SACjB;KACF,EACD,GAAG,CACJ,CAAC;IAEF,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAE/B,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAClD,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CACtC,CAAC;IAEF,eAAe,CAAC,WAAW,CAAC,CAAC;IAE7B,OAAO;QACL,WAAW,CAAC,YAAY,CAAC,OAAO;QAChC,WAAW,CAAC,YAAY,CAAC,KAAK;KACtB,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,OAA6C,EAC7C,KAAsB,EACtB,EAAE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;AAEnD,MAAM,QAAQ,GAAG,CAAC,KAAU,EAAE,IAAY,EAAE,EAAE,CAC5C,IAAI;IACF,EAAE,KAAK,CAAC,GAAG,CAAC;KACX,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC;KACtB,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;AAErD,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,QAAgB,EAChB,MAA6B,EAC7B,WAAiB,EACjB,EAAE,CACF,IAAI,KAAK,CACP,mBAAmB,QAAQ,WACzB,MAAM,EAAE,MAAM;IACZ,CAAC,CAAC,KAAK;QACL,MAAM;aACH,GAAG,CACF,CAAC,KAAK,EAAE,EAAE,CACR,MAAM,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,OAAO,KAAK,GAAG,CAC/C;YACE,KAAK,EAAE,IAAI,CAAC,SAAS,CACnB,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,YAAY,CAAC,CAC1C,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;YACf,GAAG,KAAK,CAAC,MAAM;SAChB,EACD,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CACd,GAAW,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAC3D,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACnB;aACA,IAAI,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,GACN,EAAE,CACH,CAAC","sourcesContent":["import { OmitPartial, Wrapped, map, unwrap } from \"@tailjs/util\";\r\nimport Ajv, { ErrorObject } from \"ajv\";\r\nimport {\r\n  TraverseContext,\r\n  addProperties,\r\n  parseType,\r\n  updateBaseTypes,\r\n  updateContext,\r\n} from \".\";\r\n\r\nexport const parseSchema = (schema: any, ajv: Ajv) => {\r\n  const rootContext = updateContext(\r\n    {\r\n      ajv,\r\n      path: [],\r\n      node: schema,\r\n      parseContext: {\r\n        typeNodes: new Map(),\r\n        schemas: new Map(),\r\n        types: new Map(),\r\n      },\r\n    },\r\n    \"#\"\r\n  );\r\n\r\n  parseType(schema, rootContext);\r\n\r\n  rootContext.parseContext.typeNodes.forEach((type) =>\r\n    addProperties(type, type.composition)\r\n  );\r\n\r\n  updateBaseTypes(rootContext);\r\n\r\n  return [\r\n    rootContext.parseContext.schemas,\r\n    rootContext.parseContext.types,\r\n  ] as const;\r\n};\r\n\r\nexport const parseError = (\r\n  context: OmitPartial<TraverseContext, \"path\">,\r\n  error: Wrapped<string>\r\n) => `${context.path.join(\"/\")}: ${unwrap(error)}`;\r\n\r\nconst navigate = (value: any, path: string) =>\r\n  path\r\n    ?.split(\"/\")\r\n    .filter((item) => item)\r\n    .reduce((current, key) => current?.[key], value);\r\n\r\nexport const validationError = (\r\n  sourceId: string,\r\n  errors?: ErrorObject[] | null,\r\n  sourceValue?: any\r\n) =>\r\n  new Error(\r\n    `Validation for '${sourceId}' failed${\r\n      errors?.length\r\n        ? \":\\n\" +\r\n          errors\r\n            .map(\r\n              (error) =>\r\n                ` - ${error.instancePath} ${error.message} (${map(\r\n                  {\r\n                    value: JSON.stringify(\r\n                      navigate(sourceValue, error.instancePath)\r\n                    ).slice(0, 100),\r\n                    ...error.params,\r\n                  },\r\n                  ([key, value]) =>\r\n                    (key as any) !== \"type\" ? `${key}: ${value}` : undefined\r\n                ).join(\", \")}).`\r\n            )\r\n            .join(\"\\n\")\r\n        : \".\"\r\n    }`\r\n  );\r\n"]}