{"version":3,"file":"eventQueue.js","sourceRoot":"","sources":["eventQueue.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TrackedEvent } from \"@tailjs/types\";\nimport { httpEncode } from \"@tailjs/util/transport\";\nimport {\n  ERR_POST_FAILED,\n  F,\n  TAB_ID,\n  VAR_URL,\n  addResponseListener,\n  clean,\n  completeDependency,\n  debug,\n  err,\n  eventSet,\n  hasDependencies,\n  map,\n  navigator,\n  nil,\n  now,\n  push,\n  registerAction,\n  registerSharedState,\n  shift,\n  size,\n  splice,\n  startupLock,\n  tryAcquireRequestLock,\n} from \".\";\n\nconst [addPostListener, callPostListeners] =\n  eventSet<[events: TrackedEvent[]]>();\n\nconst [addShutdownListener, callShutdownListeners] = eventSet();\n\nexport {\n  addPostListener as addQueuePostListener,\n  addShutdownListener as addTerminationListener,\n};\nexport const enqueueEvent = (event: TrackedEvent) => {\n  const queue = [event];\n  const batch: TrackedEvent[] = [];\n  let ready: TrackedEvent[] | undefined;\n  while (queue.length) {\n    const event = shift(queue)!;\n    if (hasDependencies(event)) {\n      continue;\n    }\n    (ready = completeDependency(event)) && splice(queue, 1, 0, ...ready);\n\n    push(batch, event);\n  }\n  post(...batch);\n};\n\nconst [post, commit] = registerAction<TrackedEvent>(\n  \"events\",\n  async (events, force) => {\n    if (!size(events)) {\n      return F;\n    }\n    await startupLock;\n\n    if (force && !affinity) {\n      debug(\n        \"WARN: Force post downgraded to normal post because affinity has not been set.\"\n      );\n      force = F;\n    }\n    debug(\"Post started\");\n\n    callPostListeners(events);\n\n    return await tryAcquireRequestLock(force, TAB_ID, (discardCookies) => {\n      const t0 = now();\n      const postData = httpEncode([\n        map(\n          events,\n          (\n            ev,\n            _,\n            event = {\n              ...ev,\n              timestamp: Math.min(0, (ev.timestamp ??= t0) - t0),\n            }\n          ) => (clean(event), debug(event, nil, event.type), event)\n        ),\n        [affinity, discardCookies],\n      ]);\n      !navigator.sendBeacon(\n        VAR_URL,\n        new Blob([postData], {\n          // This content type avoids the overhead of the \"preflight\" request that is otherwise made by browsers in cross-domain scenarios.\n          // (application/x-www-form-urlencoded could also work).\n          type: \"text/plain\",\n        })\n      ) && err(ERR_POST_FAILED, events);\n    });\n  },\n  (terminating) => (terminating && callShutdownListeners(), undefined)\n);\n\nexport { commit };\n\n// Force posts will not happen before this is set.\nlet affinity: any | undefined;\nconst broadcastAffinity = registerSharedState(\n  \"affinity\",\n  () => affinity,\n  (value) => (affinity = value)\n);\nconst setAffinity = (value: any) => (\n  (affinity = value), broadcastAffinity(value)\n);\n\naddResponseListener(setAffinity);\n"]}