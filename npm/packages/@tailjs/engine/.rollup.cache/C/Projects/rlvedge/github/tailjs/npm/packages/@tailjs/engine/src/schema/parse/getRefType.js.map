{"version":3,"file":"getRefType.js","sourceRoot":"","sources":["getRefType.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,WAAW,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGrE,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,OAAwB,EACxB,GAAM,EACyB,EAAE;IACjC,IAAI,WAAW,CAAC,GAAG,CAAC;QAAE,OAAO,SAAgB,CAAC;IAE9C,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;QACxB,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAG,GAAG,GAAG,CAAQ,CAAC;IAC3C,CAAC;IACD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAI,CAAC,EAAE,MAAM,CAAC;IAChD,OAAO,QAAQ,CACb,GAAG,IAAI,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAC9C,oBAAoB,GAAG,kBAAkB,CACnC,CAAC;AACX,CAAC,CAAC","sourcesContent":["import { MaybeUndefined, isUndefined, required } from \"@tailjs/util\";\r\nimport { ParsedType, TraverseContext } from \".\";\r\n\r\nexport const getRefType = <T extends string | undefined>(\r\n  context: TraverseContext,\r\n  ref: T\r\n): MaybeUndefined<T, ParsedType> => {\r\n  if (isUndefined(ref)) return undefined as any;\r\n\r\n  if (ref.startsWith(\"#\")) {\r\n    ref = (context.schema?.id! + ref) as any;\r\n  }\r\n  const def = context.ajv.getSchema(ref!)?.schema;\r\n  return required(\r\n    def && context.parseContext.typeNodes.get(def),\r\n    `Referenced type '${ref}' is not defined`\r\n  ) as any;\r\n};\r\n"]}