{"version":3,"file":"parseClassifications.js","sourceRoot":"","sources":["parseClassifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,kBAAkB,EAClB,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAe,SAAS,EAAE,MAAM,cAAc,CAAC;AACtD,OAAO,EAA+C,UAAU,EAAE,MAAM,GAAG,CAAC;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAEpC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,OAGC,EACoC,EAAE;IACvC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAE1B,IAAI,YAAiC,CAAC;IACtC,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;QACxC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC;IACvD,CAAC;IAED,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IACpD,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;QACvE,UAAU,CACR,OAAO,EACP,gFAAgF,CACjF,CAAC;IACJ,CAAC;IACD,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAE9E,IAAI,WAAW,GAAI,IAAI,CAAC,WAAsB;QAC5C,EAAE,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,EAAE,QAAgB,EAAE,EAAE;QACvD,QAAQ;aACL,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;aAChC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC;aACtB,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACnB,IAAI,OAAO,KAAK,eAAe,IAAI,OAAO,KAAK,gBAAgB,EAAE,CAAC;gBAChE,YAAY,KAAK,OAAO,KAAK,eAAe,CAAC;gBAC7C,OAAO;YACT,CAAC;YACD,IAAI,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAuB,CAAC;YAClE,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;gBACtB,eAAe,GAAG,CAAC,eAAe,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC;gBAClD,OAAO;YACT,CAAC;YAED,MAAM,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC9C,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;gBACtB,YAAY,KAAK,MAAM,CAAC;gBACxB,OAAO;YACT,CAAC;YAED,UAAU,CAAC,OAAO,EAAE,4BAA4B,OAAO,IAAI,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEL,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;SACD,IAAI,EAAE,CAAC;IAEV,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,YAAY,KAAK,OAAO,CAAC,YAAY,CAAC;IAEtC,IAAI,YAAY,EAAE,CAAC;QACjB,YAAY,yCAAiC,CAAC;QAC9C,eAAe,8BAAqB,CAAC;IACvC,CAAC;IAED,OAAO;QACL,cAAc,EAAE,kBAAkB,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,cAAc;QAC1E,QAAQ,EAAE,YAAY,CAAC,eAAe,CAAC,IAAI,OAAO,CAAC,QAAQ;QAC3D,YAAY;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\r\n  DataClassification,\r\n  DataPurposes,\r\n  dataClassification,\r\n  dataPurposes,\r\n} from \"@tailjs/types\";\r\nimport { OmitPartial, isDefined } from \"@tailjs/util\";\r\nimport { ParsedSchemaClassification, TraverseContext, parseError } from \".\";\r\nimport { annotations } from \"../..\";\r\n\r\nexport const parseClassifications = (\r\n  context: OmitPartial<\r\n    TraverseContext,\r\n    \"node\" | \"classification\" | \"purposes\" | \"path\"\r\n  >\r\n): Partial<ParsedSchemaClassification> => {\r\n  const node = context.node;\r\n\r\n  let censorIgnore: boolean | undefined;\r\n  if (isDefined(node[annotations.censor])) {\r\n    censorIgnore = node[annotations.censor] === \"ignore\";\r\n  }\r\n\r\n  let privacyClass = node[annotations.classification];\r\n  if (isDefined(node[annotations.purpose] ?? node[annotations.purposes])) {\r\n    parseError(\r\n      context,\r\n      \"x-privacy-purpose and x-privacy-purposes cannot be specified at the same time.\"\r\n    );\r\n  }\r\n  let privacyPurposes = node[annotations.purpose] ?? node[annotations.purposes];\r\n\r\n  let description = (node.description as string)\r\n    ?.replace(/@privacy[: ]?(.+)/gm, (_, keywords: string) => {\r\n      keywords\r\n        .split(\",\")\r\n        .map((keyword) => keyword.trim())\r\n        .filter((item) => item)\r\n        .forEach((keyword) => {\r\n          if (keyword === \"censor_ignore\" || keyword === \"censor_include\") {\r\n            censorIgnore ??= keyword === \"censor_ignore\";\r\n            return;\r\n          }\r\n          let parsed = dataPurposes.tryParse(keyword) as number | undefined;\r\n          if (isDefined(parsed)) {\r\n            privacyPurposes = (privacyPurposes ?? 0) | parsed;\r\n            return;\r\n          }\r\n\r\n          parsed = dataClassification.tryParse(keyword);\r\n          if (isDefined(parsed)) {\r\n            privacyClass ??= parsed;\r\n            return;\r\n          }\r\n\r\n          parseError(context, `Unknown privacy keyword '${keyword}'.`);\r\n        });\r\n\r\n      return \"\";\r\n    })\r\n    .trim();\r\n\r\n  if (!description?.length) {\r\n    delete node.description;\r\n  }\r\n\r\n  censorIgnore ??= context.censorIgnore;\r\n\r\n  if (censorIgnore) {\r\n    privacyClass ??= DataClassification.Anonymous;\r\n    privacyPurposes ??= DataPurposes.Any;\r\n  }\r\n\r\n  return {\r\n    classification: dataClassification(privacyClass) ?? context.classification,\r\n    purposes: dataPurposes(privacyPurposes) ?? context.purposes,\r\n    censorIgnore,\r\n  };\r\n};\r\n"]}