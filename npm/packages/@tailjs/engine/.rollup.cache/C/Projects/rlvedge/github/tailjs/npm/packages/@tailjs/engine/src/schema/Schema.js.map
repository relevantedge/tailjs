{"version":3,"file":"Schema.js","sourceRoot":"","sources":["Schema.ts"],"names":[],"mappings":"AA8DA,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,IAAmB,EACU,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;AAMlD,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAmB,EACa,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC","sourcesContent":["import {\r\n  DataClassificationValue,\r\n  DataPurposeValue,\r\n  UserConsent,\r\n  VariableScope,\r\n} from \"@tailjs/types\";\r\nimport { VariableMap } from \"..\";\r\nimport {\r\n  AllKeys,\r\n  CommonTypeTemplate,\r\n  ExpandTypes,\r\n  PrettifyIntersection,\r\n} from \"@tailjs/util\";\r\n\r\nexport interface SchemaClassification<NumericEnums extends boolean = boolean> {\r\n  classification: DataClassificationValue<NumericEnums>;\r\n  purposes: DataPurposeValue<NumericEnums>;\r\n}\r\n\r\nexport type SchemaPropertyStructure = {\r\n  map?: boolean;\r\n  array?: boolean | SchemaPropertyStructure;\r\n};\r\n\r\nexport interface SchemaEntity extends SchemaClassification<true> {\r\n  id: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface Schema extends SchemaEntity {\r\n  parent?: Schema;\r\n  events?: ReadonlyMap<string, SchemaObjectType>;\r\n  variables?: VariableMap<SchemaVariable>;\r\n\r\n  types: ReadonlyMap<string, SchemaType>;\r\n\r\n  subSchemas?: ReadonlyMap<string, Schema>;\r\n}\r\n\r\nexport interface ValidatableSchemaEntity<T = any> extends SchemaEntity {\r\n  validate(source: T): T;\r\n  tryValidate(source: T | undefined): T | undefined;\r\n  censor: (\r\n    value: T,\r\n    consent: SchemaClassification | UserConsent\r\n  ) => T | undefined;\r\n}\r\n\r\nexport interface SchemaType<T = any> extends ValidatableSchemaEntity<T> {\r\n  name: string;\r\n  schema: Schema;\r\n  primitive: boolean;\r\n}\r\n\r\nexport interface SchemaObjectType<T = any> extends SchemaType<T> {\r\n  primitive: false;\r\n  abstract: boolean;\r\n  properties?: ReadonlyMap<string, SchemaProperty>;\r\n  extends?: ReadonlyMap<string, SchemaType>;\r\n  subtypes?: ReadonlyMap<string, SchemaType>;\r\n  referencedBy?: ReadonlySet<SchemaProperty>;\r\n}\r\nexport const isObjectType = <T>(\r\n  type: SchemaType<T>\r\n): type is SchemaObjectType<T> => !type.primitive;\r\n\r\nexport interface SchemaPrimitiveType<T = any> extends SchemaType<T> {\r\n  primitive: true;\r\n  allowedValues?: any[];\r\n}\r\nexport const isPrimitiveType = <T>(\r\n  type: SchemaType<T>\r\n): type is SchemaPrimitiveType<T> => type.primitive;\r\n\r\nexport type AnySchemaType = ExpandTypes<SchemaObjectType | SchemaPrimitiveType>;\r\n\r\nexport interface SchemaProperty<T = any> extends SchemaEntity {\r\n  name: string;\r\n  declaringType: SchemaType;\r\n  type: SchemaType;\r\n  structure?: SchemaPropertyStructure;\r\n  required: boolean;\r\n}\r\n\r\nexport interface SchemaVariable<T = any>\r\n  extends SchemaProperty<T>,\r\n    ValidatableSchemaEntity<T> {\r\n  scope: VariableScope;\r\n}\r\n"]}