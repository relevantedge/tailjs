{"version":3,"file":"updateTypeClassifications.js","sourceRoot":"","sources":["updateTypeClassifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAChD,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AACzD,OAAO,EAGL,gCAAgC,EAChC,UAAU,EACV,wBAAwB,GACzB,MAAM,GAAG,CAAC;AAGX,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,IAAgB,EAChB,IAAqB,EACrB,EAAE;IACF,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;QAAE,OAAO,IAAI,CAAC;IAClC,uEAAuE;IACvE,uGAAuG;IACvG,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAEvE,MAAM,oBAAoB,GAAqB,EAAE,CAAC;IAElD,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE;QACxC,8HAA8H;QAC9H,gCAAgC;QAChC,gCAAgC,CAC9B,QAAQ,CAAC,aAAa,EACtB,QAAQ,CAAC,IAAI,EACb,QAAQ,CACT,CAAC;QAEF,IACE,QAAQ,CAAC,UAAU;YACnB,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EACxE,CAAC;YACD,qFAAqF;YACrF,yIAAyI;YACzI,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,0HAA0H;YAC1H,QAAQ,CAAC,cAAc,KAAK,QAAQ,CAAC,OAAO,CAAC,cAAe,CAAC;YAC7D,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,OAAO,CAAC,QAAS,CAAC;QACnD,CAAC;QAED,wBAAwB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,oBAAoB,EAAE,CAAC,QAAQ,EAAE,EAAE;QACzC,MAAM,IAAI,GAAG,yBAAyB,CAAC,QAAQ,CAAC,UAAW,EAAE,IAAI,CAAC,CAAC;QACnE,QAAQ,CAAC,cAAc,KAAK,IAAI,CAAC,cAAe,CAAC;QACjD,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAS,CAAC;QACrC,wBAAwB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE;QACxC,IAAI,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC;YACtC,MAAM,UAAU,CACd,QAAQ,CAAC,OAAO,EAChB,6FAA6F,CAC9F,CAAC;QAEJ,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChC,MAAM,UAAU,CACd,QAAQ,CAAC,OAAO,EAChB,wFAAwF,CACzF,CAAC;QAEJ,IACE,QAAQ,CAAC,QAAQ;YACjB,CAAC,eAAe,CAAC,IAA4B,EAAE,QAAQ,CAAC,EACxD,CAAC;YACD,MAAM,UAAU,CACd,QAAQ,CAAC,OAAO,EAChB,2JAA2J,CAC5J,CAAC;QACJ,CAAC;QAED,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAO,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { validateConsent } from \"@tailjs/types\";\r\nimport { add, forEach, isUndefined } from \"@tailjs/util\";\r\nimport {\r\n  ParsedProperty,\r\n  ParsedType,\r\n  mergeBasePropertyClassifications,\r\n  parseError,\r\n  updateMinClassifications,\r\n} from \".\";\r\nimport { SchemaClassification } from \"../..\";\r\n\r\nexport const updateTypeClassifications = (\r\n  type: ParsedType,\r\n  seen: Set<ParsedType>\r\n) => {\r\n  if (!add(seen, type)) return type;\r\n  // Make sure base types have classifications before their implementors.\r\n  // This is needed to infer property classifications from base types, if properties have been overriden.\r\n  type.extends?.forEach((type) => updateTypeClassifications(type, seen));\r\n\r\n  const objectTypeProperties: ParsedProperty[] = [];\r\n\r\n  forEach(type.properties, ([, property]) => {\r\n    // Before looking classifications from the surrounding context, start by seing if a base type has property with the same name.\r\n    // If so inherit those settings.\r\n    mergeBasePropertyClassifications(\r\n      property.declaringType,\r\n      property.name,\r\n      property\r\n    );\r\n\r\n    if (\r\n      property.objectType &&\r\n      (isUndefined(property.classification) || isUndefined(property.purposes))\r\n    ) {\r\n      // We do not resolve this from context, rather we look at the referenced object type.\r\n      // (If classification is not explicitly set, we might as well use the minimum classification from the type that will not censor it away).\r\n      objectTypeProperties.push(property);\r\n    } else {\r\n      // Normal properties without explicit classifications get them from the defaults at the place they are in the schema tree.\r\n      property.classification ??= property.context.classification!;\r\n      property.purposes ??= property.context.purposes!;\r\n    }\r\n\r\n    updateMinClassifications(type, property);\r\n  });\r\n\r\n  forEach(objectTypeProperties, (property) => {\r\n    const type = updateTypeClassifications(property.objectType!, seen);\r\n    property.classification ??= type.classification!;\r\n    property.purposes ??= type.purposes!;\r\n    updateMinClassifications(type, property);\r\n  });\r\n\r\n  forEach(type.properties, ([, property]) => {\r\n    if (isUndefined(property.classification))\r\n      throw parseError(\r\n        property.context,\r\n        \"The property's classification is not explicitly specified and cannot be infered from scope.\"\r\n      );\r\n\r\n    if (isUndefined(property.purposes))\r\n      throw parseError(\r\n        property.context,\r\n        \"The property's purposes are not explicitly specified and cannot be infered from scope.\"\r\n      );\r\n\r\n    if (\r\n      property.required &&\r\n      !validateConsent(type as SchemaClassification, property)\r\n    ) {\r\n      throw parseError(\r\n        property.context,\r\n        \"A required property cannot have a more restrictive classification than any other property in its type since a censored value without it would be invalid.\"\r\n      );\r\n    }\r\n\r\n    updateMinClassifications(type.context.schema!, property);\r\n  });\r\n\r\n  return type;\r\n};\r\n"]}