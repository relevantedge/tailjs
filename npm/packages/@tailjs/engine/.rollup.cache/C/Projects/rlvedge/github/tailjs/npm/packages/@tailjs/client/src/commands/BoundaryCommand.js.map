{"version":3,"file":"BoundaryCommand.js","sourceRoot":"","sources":["BoundaryCommand.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAoDvC,IAAI;AACJ,QAAQ;AACR,yEAAyE;AACzE,QAAQ;AACR,oEAAoE;AAEpE,QAAQ;AACR,uEAAuE;AACvE,QAAQ;AACR,0CAA0C;AAE1C,QAAQ;AACR,0EAA0E;AAC1E,OAAO;AACP,+EAA+E;AAC/E,QAAQ;AACR,qCAAqC;AAErC,QAAQ;AACR,wIAAwI;AACxI,QAAQ;AACR,+BAA+B;AAE/B,QAAQ;AACR,0DAA0D;AAC1D,QAAQ;AACR,uCAAuC;AAEvC,QAAQ;AACR,kHAAkH;AAClH,QAAQ;AACR,uBAAuB;AAEvB,QAAQ;AACR,8FAA8F;AAC9F,OAAO;AACP,0HAA0H;AAC1H,OAAO;AACP,sBAAsB;AACtB,QAAQ;AACR,yCAAyC;AAEzC,QAAQ;AACR,iEAAiE;AACjE,QAAQ;AACR,uBAAuB;AACvB,IAAI;AAEJ,MAAM,CAAC,MAAM,qBAAqB,GAAG,WAAW,CAAkB,UAAU,CAAC,CAAC","sourcesContent":["import type {\n  CartAction,\n  CartEventData,\n  ConfiguredComponent,\n  Content,\n  Tag,\n  TrackingSettings,\n} from \"@tailjs/types\";\n\nimport { commandTest } from \"./shared\";\n\nexport interface BoundaryData {\n  /**\n   * The component definition(s) associated with the boundary element.\n   */\n  component?: ConfiguredComponent | ConfiguredComponent[] | null;\n\n  /**\n   * The content definition(s) associated with the boundary element.\n   */\n  content?: Content | Content[] | null;\n\n  /**\n   * The name of the content area associated with the boundary element.\n   *\n   * A content area is used to indicate where activated components are used.\n   */\n  area?: string | null;\n\n  /**\n   *  These tags will be added to the components and content in user activations with the boundary element or any of its descendants.\n   */\n  tags?: Tag | Tag[] | null;\n\n  /**\n   * The element will include cart data when activated.\n   */\n  cart?: CartAction | CartEventData;\n\n  /**\n   * Settings that will apply to components contained by the boundary element including itself, similar to specifying \"track-*\" HMTL attributes on the element.\n   */\n  track?: TrackingSettings;\n}\n\n/**\n * Registers an element as the boundary for a component or similar tracking data. All events triggered from the element or its descendants will have this information attached.\n * In case of nested boundaries the closest one is used.\n */\nexport type BoundaryCommand = {\n  boundary: Element;\n} & (\n  | (BoundaryData & {\n      /**\n       * The content, tags and components will be added to the existing, if any.\n       */\n      add?: boolean;\n    })\n  | { update: (current?: BoundaryData) => BoundaryData | null }\n);\n\n// {\n//   /**\n//    * The component definition(s) associated with the boundary element.\n//    */\n//   component?: ConfiguredComponent | ConfiguredComponent[] | null;\n\n//   /**\n//    * The content definition(s) associated with the boundary element.\n//    */\n//   content?: Content | Content[] | null;\n\n//   /**\n//    * The name of the content area associated with the boundary element.\n//    *\n//    * A content area is used to indicate where activated components are used.\n//    */\n//   area?: string | string[] | null;\n\n//   /**\n//    *  These tags will be added to the components and content in user activations with the boundary element or any of its descendants.\n//    */\n//   tags?: Tag | Tag[] | null;\n\n//   /**\n//    * The element will include cart data when activated.\n//    */\n//   cart?: CartAction | CartEventData;\n\n//   /**\n//    * The element's component will be included in the stack even when the activation tracking level is `direct`.\n//    */\n//   promote?: boolean;\n\n//   /**\n//    * Specifies how the this command modifies the data associated with the boundary element.\n//    *\n//    * Only properties present in this command are affected (e.g. `component` or `content`) unless the action is `clear`.\n//    *\n//    * @default \"add\"\n//    */\n//   action?: \"add\" | \"remove\" | \"clear\";\n\n//   /**\n//    * The DOM element that gets this command's data associated.\n//    */\n//   boundary: Element;\n// }\n\nexport const isDataBoundaryCommand = commandTest<BoundaryCommand>(\"boundary\");\n"]}