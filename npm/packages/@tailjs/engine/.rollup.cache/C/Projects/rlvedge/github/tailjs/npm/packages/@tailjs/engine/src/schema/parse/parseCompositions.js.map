{"version":3,"file":"parseCompositions.js","sourceRoot":"","sources":["parseCompositions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,EAIL,UAAU,EACV,aAAa,GACd,MAAM,GAAG,CAAC;AAEX,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAS,EACT,OAAwB,EACxB,OAAO,IAAI,GAAG,EAA0B,EACxC,eAAuC,OAAO,EAC3B,EAAE;IACrB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,MAAM,EAAE,CAAC;QACX,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,SAAS,GAAG,CAAC,GAAuB,EAAE,EAAE;QAC5C,IAAI,CAAC,GAAG;YAAE,OAAO,SAAS,CAAC;QAC3B,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACnB,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,GAAG,CAAC;QACjC,CAAC;QACD,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAC7D,UAAU,CAAC,OAAO,EAAE,QAAQ,GAAG,aAAa,CAAC,CAC9C,CAAC;QAEF,OAAO;YACL,EAAE,EAAE,GAAG;YACP,WAAW,EAAE,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;SAC1D,CAAC;IACJ,CAAC,CAAC;IAEF,MAAM,WAAW,GAAsB;QACrC,IAAI;QACJ,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;QACzB,OAAO,EAAE,YAAY;KACtB,CAAC;IAEF,OAAO,CACL,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAU,EACpC,CACE,IAAI,EACJ,CAAC,EACD,kBAAkB,GAAG,YAAY;QAC/B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;QACvB,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,EACnC,EAAE,CACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAC9B,CAAC,WAAW,CAAC,YAAY,KAAK,EAAE,CAAC,CAAC,IAAI,CACpC,iBAAiB,CACf,IAAI,EACJ,OAAO,EACP,IAAI,EACJ,kBAAkB,IAAI,aAAa,CAAC,kBAAkB,EAAE,CAAC,GAAG,EAAE,CAAC,CAChE,CACF,CACF,CACJ,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import { forEach, required } from \"@tailjs/util\";\r\nimport {\r\n  ParsedComposition,\r\n  TraverseContext,\r\n  getRefType,\r\n  parseError,\r\n  updateContext,\r\n} from \".\";\r\n\r\nexport const parseCompositions = (\r\n  node: any,\r\n  context: TraverseContext,\r\n  seen = new Map<any, ParsedComposition>(),\r\n  childContext: TraverseContext | null = context\r\n): ParsedComposition => {\r\n  const cached = seen.get(node);\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n\r\n  const expandRef = (ref: string | undefined) => {\r\n    if (!ref) return undefined;\r\n    if (ref[0] === \"#\") {\r\n      ref = context.schema?.id + ref;\r\n    }\r\n    const node = required(context.ajv.getSchema(ref)?.schema, () =>\r\n      parseError(context, `Ref '${ref}' not found`)\r\n    );\r\n\r\n    return {\r\n      id: ref,\r\n      composition: parseCompositions(node, context, seen, null),\r\n    };\r\n  };\r\n\r\n  const composition: ParsedComposition = {\r\n    node,\r\n    type: \"schema\",\r\n    ref: expandRef(node.$ref),\r\n    context: childContext,\r\n  };\r\n\r\n  forEach(\r\n    [\"allOf\", \"oneOf\", \"anyOf\"] as const,\r\n    (\r\n      type,\r\n      _,\r\n      compositionContext = childContext &&\r\n        childContext.node[type] &&\r\n        updateContext(childContext, type)\r\n    ) =>\r\n      forEach(node[type], (node, i) =>\r\n        (composition.compositions ??= []).push(\r\n          parseCompositions(\r\n            node,\r\n            context,\r\n            seen,\r\n            compositionContext && updateContext(compositionContext, i + \"\")\r\n          )\r\n        )\r\n      )\r\n  );\r\n\r\n  return composition;\r\n};\r\n"]}