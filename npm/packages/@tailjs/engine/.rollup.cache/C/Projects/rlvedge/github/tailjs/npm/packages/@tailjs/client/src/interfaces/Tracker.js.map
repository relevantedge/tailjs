{"version":3,"file":"Tracker.js","sourceRoot":"","sources":["Tracker.ts"],"names":[],"mappings":"","sourcesContent":["import type { TrackerCommand, TrackerConfiguration } from \"..\";\n\nexport type Tracker = {\n  /**\n   * A unique identifier for the tracker instance.\n   */\n  id: string;\n  push: {\n    /** Allows commands to be passed as a HTTP encoded string instead of objects. This is useful for server-side generated data. */\n    (httpEncoded: string): void;\n\n    /**\n     * Allows commands to be passed as a HTTP encoded string instead of objects. This is useful for server-side generated data.\n     *\n     * Use this overload if a {@link TrackerConfiguration.apiKey} has been configured.\n     */\n    (apiKey: string, httpEncoded: string): void;\n\n    /** Executes the specified commands. */\n    (...args: (TrackerCommand | TrackerCommand[])[]): void;\n\n    /**\n     * Executes the specified commands.\n     *\n     * Use this overload if a {@link TrackerConfiguration.apiKey} has been configured.\n     */\n    (apiKey: string, ...args: (TrackerCommand | TrackerCommand[])[]): void;\n  };\n  /**\n   * The tracker was initialized during server-side rendering.\n   */\n  ssr?: boolean;\n\n  /**\n   * Convenience method to reset session and device data, and then prevent the tracker from posting further events.\n   * This method is only available in debug mode to raise the entry barrier for pranksters who can inject scripts.\n   */\n  reset?: (includeDevice?: boolean) => void;\n};\n"]}