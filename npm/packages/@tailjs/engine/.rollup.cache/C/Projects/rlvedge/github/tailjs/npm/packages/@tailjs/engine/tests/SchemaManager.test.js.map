{"version":3,"file":"SchemaManager.test.js","sourceRoot":"","sources":["SchemaManager.test.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAC;AACvC,OAAO,EAUL,SAAS,EACT,iBAAiB,EACjB,wBAAwB,EACxB,iBAAiB,EACjB,YAAY,EACZ,YAAY,GACb,MAAM,gBAAgB,CAAC;AAQxB,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAE/C,MAAM,IAAI,GAAc;YACtB,UAAU,EAAE,EAAE;YACd,WAAW,EAAE,EAAE;YACf,aAAa,EAAE;gBACb,YAAY,EAAE,EAAE;gBAChB,eAAe,EAAE;oBACf,UAAU,EAAE,EAAE;iBACf;aACF;YACD,SAAS,EAAE;gBACT,EAAE,QAAQ,EAAE,sBAAsB,EAAE,eAAe,EAAE,QAAQ,EAAE;aAChE;SACF,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnE,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAa,2BAA2B,EAAE;YACxD,IAAI,EAAE,cAAc;YACpB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SACzB,CAAC,CACH,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAEhB,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAsB,2BAA2B,EAAE;YACjE,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SACzB,CAAC,CACH,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE1B,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAsB,2BAA2B,EAAE;YACjE,IAAI,EAAE,cAAc;YACpB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;SACnC,CAAC,CACH,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QAEpC,MAAM,CACJ,OAAO,CAAC,MAAM,CACZ,2BAA2B,EAC3B;YACE,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,MAAM;SACb,EACD,EAAE,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,CACjD,CACF,CAAC,aAAa,EAAE,CAAC;QAElB,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAa,2BAA2B,EAAE;YACxD,IAAI,EAAE,cAAc;YACpB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SACzB,CAAC,CACH,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEtB,MAAM,CACJ,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,EAAE;YAC5C,cAAc,sCAA8B;YAC5C,QAAQ,2BAAkB;SAC3B,CAAC,CACH,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEhB,MAAM,CACJ,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,EAAE;YAC5C,cAAc,sCAA8B;YAC5C,QAAQ,2BAAkB;SAC3B,CAAC,CACH,CAAC,OAAO,CAAc;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE;gBACT;oBACE,eAAe,EAAE,QAAQ;iBAC1B;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE7D,MAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAE/D,MAAM,CACJ,SAAS,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,cAAc,CACjE,CAAC,IAAI,qCAA6B,CAAC;QAEpC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QAExE,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CACvE,EAAE,CACH,CAAC;QAEF,MAAM,CACJ,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;YACtD,cAAc,EAAE,WAAW;YAC3B,QAAQ,EAAE,KAAK;SAChB,CAAC,CACH,CAAC,aAAa,EAAE,CAAC;QAElB,MAAM,CACJ,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;YACtD,cAAc,EAAE,UAAU;YAC1B,QAAQ,EAAE,KAAK;SAChB,CAAC,CACH,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEX,MAAM,CACJ,SAAS,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,MAAM,CAAC,CACjE,CAAC,aAAa,EAAE,CAAC;QAElB,8DAA8D;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAEvD,MAAM,CACJ,OAAO,CAAC,QAAQ,CAA4B,uBAAuB,EAAE;YACnE,KAAK,EAAE,OAAO;SACf,CAAC,CACH,CAAC,WAAW,EAAE,CAAC;QAEhB,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAA4B,uBAAuB,EAAE;YACnE,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,OAAO;SACf,CAAC,CACH,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,aAAa,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,OAAO,CACjE,cAAc,CACf,CAAC;QACF,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAEvD,MAAM,CACJ,OAAO,CAAC,QAAQ,CAAY,uBAAuB,EAAE;YACnD,SAAS,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAe;SAC1D,CAAC,CACH,CAAC,WAAW,EAAE,CAAC;QAEhB,MAAM,CACJ,OAAO,CAAC,QAAQ,CAAY,uBAAuB,EAAE;YACnD,SAAS,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAe;SACrD,CAAC,CACH,CAAC,WAAW,EAAE,CAAC;QAEhB,MAAM,CACJ,OAAO,CAAC,QAAQ,CAAY,uBAAuB,EAAE;YACnD,SAAS,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAgB;SACzD,CAAC,CACH,CAAC,WAAW,EAAE,CAAC;QAEhB,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAY,uBAAuB,EAAE;YACnD,SAAS,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAc;SACrD,CAAC,CACH,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEpB,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,QAAQ,CAAY,uBAAuB,EAAE;YACnD,SAAS,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAc;SACpD,CAAC,CACH,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,IAAI,MAAM,GAAG,IAAI,aAAa,CAAC;YAC7B;gBACE,GAAG,YAAY;gBACf,KAAK,EAAE;oBACL,GAAG,YAAY;oBACf,MAAM,EAAE;wBACN,KAAK,EAAE;4BACL,UAAU,EAAE;gCACV,IAAI,EAAE,QAAQ;gCACd,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;6BACzC;4BACD,gBAAgB,EAAE;gCAChB,IAAI,EAAE,QAAQ;gCACd,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;6BACzC;yBACF;qBACF;oBACD,gBAAgB,EAAE;wBAChB,OAAO,EAAE,8CAA8C;wBACvD,GAAG,EAAE,gBAAgB;wBACrB,oBAAoB,EAAE,eAAe;wBACrC,KAAK,EAAE;4BACL,MAAM,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,UAAU,EAAE;oCACV,UAAU,EAAE;wCACV,IAAI,EAAE,QAAQ;wCACd,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;qCACzC;iCACF;6BACF;yBACF;qBACF;iBACF;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { DataClassification, DataPurposes } from \"@tailjs/types\";\r\nimport { SchemaManager } from \"../src\";\r\nimport {\r\n  CompositionTest1,\r\n  PolyBase,\r\n  PolyTest1,\r\n  PolyType1,\r\n  PolyType2,\r\n  PolyType31,\r\n  TestEvent3,\r\n  TestEvent4,\r\n  TestType1,\r\n  bigSchema,\r\n  compositionSchema,\r\n  invalidPolymorphicSchema,\r\n  polymorphicSchema,\r\n  schemaHeader,\r\n  systemEvents,\r\n} from \"./test-schemas\";\r\n\r\ntype AtLeast<T> = T extends object | any[]\r\n  ? Record<keyof any, any> & { [P in keyof T]: AtLeast<T[P]> }\r\n  : T;\r\n\r\ntype AtLeastPartial<T> = Partial<AtLeast<T>>;\r\n\r\ndescribe(\"SchemaManager.\", () => {\r\n  it(\"Validates and censors\", () => {\r\n    const manager = new SchemaManager([bigSchema]);\r\n\r\n    const data: TestType1 = {\r\n      testNumber: 20,\r\n      testNumber2: 22,\r\n      testReference: {\r\n        nestedNumber: 11,\r\n        nestedReference: {\r\n          testNumber: 20,\r\n        },\r\n      },\r\n      testArray: [\r\n        { testDate: \"2023-01-01T00:00:00Z\", anonymousString: \"gazonk\" },\r\n      ],\r\n    };\r\n\r\n    expect(manager.validate(\"urn:tailjs:core#Type1\", data)).toBe(data);\r\n\r\n    expect(() =>\r\n      manager.validate<TestEvent3>(\"urn:acme:other#TestEvent3\", {\r\n        type: \"current_name\",\r\n        sharedNumber: 32,\r\n        sharedItems: [{ n: 32 }],\r\n      })\r\n    ).not.toThrow();\r\n\r\n    expect(() =>\r\n      manager.validate<Partial<TestEvent3>>(\"urn:acme:other#TestEvent3\", {\r\n        type: \"current_name\",\r\n        sharedItems: [{ n: 32 }],\r\n      })\r\n    ).toThrow(\"sharedNumber\");\r\n\r\n    expect(() =>\r\n      manager.validate<AtLeast<TestEvent3>>(\"urn:acme:other#TestEvent3\", {\r\n        type: \"current_name\",\r\n        sharedNumber: 10,\r\n        sharedItems: [{ n: 32, z: false }],\r\n      })\r\n    ).toThrow(\"unevaluatedProperty: z\");\r\n\r\n    expect(\r\n      manager.censor<TestEvent4>(\r\n        \"urn:acme:other#TestEvent4\",\r\n        {\r\n          type: \"test_event4\",\r\n          name: \"test\",\r\n        },\r\n        { classification: \"anonymous\", purposes: \"any\" }\r\n      )\r\n    ).toBeUndefined();\r\n\r\n    expect(() =>\r\n      manager.validate<TestEvent3>(\"urn:acme:other#TestEvent2\", {\r\n        type: \"current_name\",\r\n        sharedNumber: 32,\r\n        sharedItems: [{ n: 32 }],\r\n      })\r\n    ).toThrow(\"abstract\");\r\n\r\n    expect(\r\n      manager.censor(\"urn:tailjs:core#Type1\", data, {\r\n        classification: DataClassification.Sensitive,\r\n        purposes: DataPurposes.Any,\r\n      })\r\n    ).toEqual(data);\r\n\r\n    expect(\r\n      manager.censor(\"urn:tailjs:core#Type1\", data, {\r\n        classification: DataClassification.Anonymous,\r\n        purposes: DataPurposes.Any,\r\n      })\r\n    ).toEqual<typeof data>({\r\n      testNumber: data.testNumber,\r\n      testArray: [\r\n        {\r\n          anonymousString: \"gazonk\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    expect(() => manager.createVariableSet()).toThrow(\"already\");\r\n\r\n    const variables = manager.createVariableSet(\"urn:tailjs:core\");\r\n\r\n    expect(\r\n      variables.get({ scope: \"session\", key: \"test\" })?.classification\r\n    ).toBe(DataClassification.Indirect);\r\n\r\n    expect(variables.get({ scope: \"session\", key: \"404\" })).toBeUndefined();\r\n\r\n    expect(variables.tryValidate({ scope: \"session\", key: \"test\" }, 20)).toBe(\r\n      20\r\n    );\r\n\r\n    expect(\r\n      variables.censor({ scope: \"session\", key: \"test\" }, 20, {\r\n        classification: \"anonymous\",\r\n        purposes: \"any\",\r\n      })\r\n    ).toBeUndefined();\r\n\r\n    expect(\r\n      variables.censor({ scope: \"session\", key: \"test\" }, 20, {\r\n        classification: \"indirect\",\r\n        purposes: \"any\",\r\n      })\r\n    ).toBe(20);\r\n\r\n    expect(\r\n      variables.tryValidate({ scope: \"session\", key: \"test\" }, \"test\")\r\n    ).toBeUndefined();\r\n\r\n    //expect(manager.validateVariableUniqueness().length).toBe(2);\r\n  });\r\n\r\n  it(\"Handles composition.\", () => {\r\n    const manager = new SchemaManager([compositionSchema]);\r\n\r\n    expect(\r\n      manager.validate<AtLeast<CompositionTest1>>(\"urn:tailjs:core#Test1\", {\r\n        test2: \"hello\",\r\n      })\r\n    ).toBeDefined();\r\n\r\n    expect(() =>\r\n      manager.validate<AtLeast<CompositionTest1>>(\"urn:tailjs:core#Test1\", {\r\n        test: \"not both\",\r\n        test2: \"hello\",\r\n      })\r\n    ).toThrow(\"exactly one\");\r\n  });\r\n\r\n  it(\"Supports polymorphism.\", () => {\r\n    expect(() => new SchemaManager([invalidPolymorphicSchema])).toThrow(\r\n      \"discriminate\"\r\n    );\r\n    const manager = new SchemaManager([polymorphicSchema]);\r\n\r\n    expect(\r\n      manager.validate<PolyTest1>(\"urn:tailjs:core#Test1\", {\r\n        reference: { $type: \"type1\", sub1: \"Hello\" } as PolyType1,\r\n      })\r\n    ).toBeDefined();\r\n\r\n    expect(\r\n      manager.validate<PolyTest1>(\"urn:tailjs:core#Test1\", {\r\n        reference: { $type: \"type2\", sub2: 32 } as PolyType2,\r\n      })\r\n    ).toBeDefined();\r\n\r\n    expect(\r\n      manager.validate<PolyTest1>(\"urn:tailjs:core#Test1\", {\r\n        reference: { $type: \"type31\", sub2: \"32\" } as PolyType31,\r\n      })\r\n    ).toBeDefined();\r\n\r\n    expect(() =>\r\n      manager.validate<PolyTest1>(\"urn:tailjs:core#Test1\", {\r\n        reference: { $type: \"type31\", sub2: 32 } as PolyBase,\r\n      })\r\n    ).toThrow(\"string\");\r\n\r\n    expect(() =>\r\n      manager.validate<PolyTest1>(\"urn:tailjs:core#Test1\", {\r\n        reference: { $type: \"type1\", sub2: 32 } as PolyBase,\r\n      })\r\n    ).toThrow(\"sub2\");\r\n  });\r\n\r\n  it(\"Supports event definitions from properties and sub schemas.\", () => {\r\n    let schema = new SchemaManager([\r\n      {\r\n        ...schemaHeader,\r\n        $defs: {\r\n          ...systemEvents,\r\n          events: {\r\n            $defs: {\r\n              EventType1: {\r\n                type: \"object\",\r\n                properties: { test: { type: \"string\" } },\r\n              },\r\n              AnotherTestEvent: {\r\n                type: \"object\",\r\n                properties: { test: { type: \"string\" } },\r\n              },\r\n            },\r\n          },\r\n          \"urn:acme:other\": {\r\n            $schema: \"https://json-schema.org/draft/2020-12/schema\",\r\n            $id: \"urn:acme:other\",\r\n            \"x-privacy-purposes\": \"functionality\",\r\n            $defs: {\r\n              Events: {\r\n                type: \"object\",\r\n                properties: {\r\n                  EventType2: {\r\n                    type: \"object\",\r\n                    properties: { test: { type: \"string\" } },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ]);\r\n    expect(schema.getType(\"urn:tailjs:core#EventType1\")).toBeDefined();\r\n    expect(schema.getType(\"urn:tailjs:core#AnotherTestEvent\")).toBeDefined();\r\n    expect(schema.getType(\"urn:acme:other#EventType2\")).toBeDefined();\r\n    expect(schema.getType(\"event_type_1\")).toBeDefined();\r\n    expect(schema.getType(\"event_type_2\")).toBeDefined();\r\n    expect(schema.getType(\"another_test\")).toBeDefined();\r\n  });\r\n});\r\n"]}