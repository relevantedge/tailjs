{"version":3,"file":"TargetedVariableMap.js","sourceRoot":"","sources":["TargetedVariableMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { VariableKey, VariableScopeValue } from \"@tailjs/types\";\r\nimport { isDefined, isIterable, isString, isUndefined } from \"@tailjs/util\";\r\nimport { VariableMap, mapKey } from \"..\";\r\n\r\nexport interface ReadOnlyTargetedVariableMap<T = any>\r\n  extends Iterable<readonly [VariableKey, T]> {\r\n  readonly size: number;\r\n\r\n  get<\r\n    K extends VariableKey<boolean> | undefined,\r\n    R extends T | undefined = T | undefined\r\n  >(\r\n    key: K,\r\n    initializer?: (key: VariableKey<true>) => R\r\n  ): R;\r\n  get(target: string): VariableMap<T>;\r\n\r\n  has(targetId: string, scope?: VariableScopeValue): boolean;\r\n  has(key: VariableKey<boolean> | undefined): boolean;\r\n\r\n  targets<Keys extends boolean = false>(\r\n    keys?: Keys\r\n  ): Iterable<\r\n    Keys extends true\r\n      ? string[]\r\n      : readonly [targetId: string, values: VariableMap]\r\n  >;\r\n}\r\n\r\nexport class TargetedVariableCollection<T = any>\r\n  implements ReadOnlyTargetedVariableMap<T>\r\n{\r\n  private _scopes = new Map<string, VariableMap<T>>();\r\n\r\n  private _size: number = 0;\r\n  public get size() {\r\n    return this._size;\r\n  }\r\n\r\n  private _updateSize = (delta: number) => {\r\n    this._size += delta;\r\n  };\r\n\r\n  constructor(\r\n    values?: Iterable<\r\n      readonly [key: VariableKey<boolean>, value: T] | undefined\r\n    >\r\n  ) {\r\n    if (values) {\r\n      this.set(values);\r\n    }\r\n  }\r\n\r\n  public get<\r\n    K extends VariableKey<boolean> | undefined,\r\n    R extends T | undefined = T | undefined\r\n  >(key: K, initializer?: (key: VariableKey<true>) => R): R;\r\n  public get(target: string): VariableMap<T>;\r\n  public get(\r\n    key: string | VariableKey<boolean> | undefined,\r\n    initializer?: (key: VariableKey<true>) => any\r\n  ) {\r\n    if (isUndefined(key)) return undefined;\r\n\r\n    if (isString(key)) {\r\n      return this._scopes.get(key);\r\n    }\r\n\r\n    let targetId = key.targetId ?? \"\";\r\n    let collection = this._scopes.get(targetId);\r\n    if (initializer && !collection) {\r\n      this._scopes.set(\r\n        targetId,\r\n        (collection = new VariableMap(this._updateSize))\r\n      );\r\n    }\r\n    return collection?.get(\r\n      key,\r\n      initializer && ((scope, key) => initializer(mapKey(scope, key, targetId)))\r\n    );\r\n  }\r\n\r\n  public has(targetId: string, scope?: VariableScopeValue): boolean;\r\n  public has(key: VariableKey<boolean> | undefined): boolean;\r\n  public has(\r\n    source: string | VariableKey<boolean> | undefined,\r\n    scope?: VariableScopeValue\r\n  ) {\r\n    if (isUndefined(source)) return undefined;\r\n    if (isString(source)) {\r\n      return isDefined(scope)\r\n        ? this._scopes.get(source)?.has(scope) ?? false\r\n        : this._scopes.has(source);\r\n    }\r\n\r\n    return this._scopes.get(source.targetId ?? \"\")?.has(source) ?? false;\r\n  }\r\n\r\n  public clear(): this {\r\n    this._updateSize(-this._size);\r\n    this._scopes.clear();\r\n    return this;\r\n  }\r\n\r\n  public delete(targetId: string): boolean;\r\n  public delete(key: VariableKey<boolean> | undefined): boolean;\r\n  public delete(\r\n    keys: Iterable<readonly [VariableKey<boolean>, value: T] | undefined>\r\n  ): boolean;\r\n  public delete(\r\n    key: Iterable<any> | string | VariableKey<boolean> | undefined\r\n  ) {\r\n    if (isUndefined(key)) return false;\r\n    if (isIterable(key)) {\r\n      let deleted = false;\r\n      for (const item of key) {\r\n        isDefined(item) && (deleted = this.delete(item) || deleted);\r\n      }\r\n      return deleted;\r\n    }\r\n\r\n    if (isString(key)) {\r\n      const scopes = this._scopes.get(key);\r\n      if (!scopes) {\r\n        return false;\r\n      }\r\n      this._updateSize(-scopes.size);\r\n      this._scopes.delete(key);\r\n      return true;\r\n    }\r\n    return this._scopes.get(key.targetId ?? \"\")?.delete(key) ?? false;\r\n  }\r\n\r\n  public set(\r\n    values: Iterable<\r\n      readonly [key: VariableKey<boolean>, value: T | undefined] | undefined\r\n    >\r\n  ): this;\r\n  public set(key: VariableKey<boolean> | undefined, value: T | undefined): this;\r\n  public set(\r\n    key: Iterable<any> | VariableKey<boolean> | undefined,\r\n    value?: T | undefined\r\n  ): this {\r\n    if (isUndefined(key)) return this;\r\n    if (isIterable(key)) {\r\n      for (const item of key) {\r\n        item && this.set(item[0], item[1]);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    if (isUndefined(value)) {\r\n      this.delete(key);\r\n      return this;\r\n    }\r\n\r\n    const targetId = key.targetId ?? \"\";\r\n    let scopes = this._scopes.get(targetId);\r\n    if (!this._scopes.has(targetId)) {\r\n      this._scopes.set(targetId, (scopes = new VariableMap(this._updateSize)));\r\n    }\r\n    scopes?.set(key, value);\r\n    return this;\r\n  }\r\n\r\n  public update<R extends T | undefined>(\r\n    key: VariableKey<boolean> | undefined,\r\n    update: (current: T | undefined) => R\r\n  ): R extends undefined ? undefined : T {\r\n    if (!key) return undefined as any;\r\n    let newValue = update(this.get(key));\r\n    this.set(key, newValue);\r\n\r\n    return newValue as any;\r\n  }\r\n\r\n  public targets<Keys extends boolean = false>(\r\n    keys?: Keys\r\n  ): Iterable<\r\n    Keys extends true\r\n      ? string[]\r\n      : readonly [targetId: string, values: VariableMap]\r\n  > {\r\n    return keys ? this._scopes.keys() : (this._scopes.entries() as any);\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    for (const [targetId, scopes] of this._scopes) {\r\n      for (const [[scope, key], value] of scopes) {\r\n        yield [mapKey(scope, key, targetId), value] as const;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}