{"version":3,"file":"priorityQueue.js","sourceRoot":"","sources":["priorityQueue.ts"],"names":[],"mappings":"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","sourcesContent":["const parent = (i: number) => ((i + 1) >>> 1) - 1;\nconst left = (i: number) => (i << 1) + 1;\nconst right = (i: number) => (i + 1) << 1;\n\nexport const priorityQueue = <T>() => {\n  type HeapItem = [value: T, priority: number];\n\n  const heap: HeapItem[] = [];\n  const map = new Map<T, number>();\n\n  const set = (item: HeapItem, index: number) => (\n    map.set(item[0], index), item\n  );\n\n  const swap = (i: number, j: number) =>\n    ([heap[i], heap[j]] = [set(heap[j], i), set(heap[i], j)]);\n\n  const gt = (i: number, j: number) => i < size() && heap[i][1] > heap[j][1];\n\n  const siftUp = (node = size() - 1) => {\n    while (node > 0 && gt(node, parent(node)))\n      swap(node, (node = parent(node)));\n  };\n\n  let selected: number, l: number, r: number;\n  const siftDown = (node = 0) => {\n    while (((l = left(node)), (r = right(node)), gt(l, node) || gt(r, node)))\n      swap(node, (node = gt(r, l) ? r : l));\n    heap[node][1] < 0 && pop();\n  };\n\n  const size = () => heap.length;\n  const peek = () => heap[0];\n  const push = (value: T, priority: number) =>\n    (selected = map.get(value)!) != null\n      ? priority > (heap[selected][1] = priority)\n        ? siftUp(selected)\n        : siftDown(selected && parent(selected))\n      : priority > 0 &&\n        map.set(value, heap.push([value, priority]) - 1) &&\n        siftUp();\n\n  const pop = () => {\n    const poppedValue = peek();\n    const bottom = size() - 1;\n    if (bottom > 0) {\n      swap(0, bottom);\n    }\n    heap.pop();\n    map.delete(poppedValue[0]);\n    siftDown();\n    return poppedValue;\n  };\n\n  return {\n    size,\n    //  peek,\n    push,\n    pop,\n    expand: () => [...heap],\n  };\n};\n"]}