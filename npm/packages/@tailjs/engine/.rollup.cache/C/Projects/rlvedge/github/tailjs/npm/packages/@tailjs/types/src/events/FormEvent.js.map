{"version":3,"file":"FormEvent.js","sourceRoot":"","sources":["FormEvent.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AA0C7C,MAAM,CAAC,MAAM,WAAW,GAAG,QAAQ,CAAY,MAAM,CAAC,CAAC","sourcesContent":["import type { Duration, FormField, Timestamp, UserInteractionEvent } from \"..\";\nimport { typeTest } from \"../util/type-test\";\n\nexport interface FormEvent extends UserInteractionEvent {\n  type: \"FORM\";\n\n  /**\n   * The name of the form that was submitted.\n   */\n  name?: string;\n\n  /**\n   * Indicates whether the form was completed (that is, submitted).\n   * If this is false it means that the form was abandoned.\n   *\n   * @default false\n   */\n  completed?: boolean;\n\n  /**\n   * The duration the user was actively filling the form.\n   */\n  activeTime?: Duration;\n\n  /**\n   * The total duration from the user started filling out the form until completion or abandoment..\n   */\n  totalTime?: Duration;\n\n  /** All fields in the form (as detected). */\n  fields?: Record<string, FormField>;\n\n  /**\n   * A correlation ID.\n   * If a hidden input element has the name \"_tailref\", the HTML attribute \"track-ref\" or css variable \"--track-ref: 1\" its value will be used.\n   * If all of the above is difficult to inject in the way the form is embedded,\n   * the form element or any of its ancestors may alternatively have the HTML attribute \"track-ref\" with the name of the hidden input field that contains the reference.\n   *\n   * If no initial value a unique one will be assigned. Make sure to store the value in receiving end.\n   */\n  ref?: string;\n}\n\nexport const isFormEvent = typeTest<FormEvent>(\"FORM\");\n"]}