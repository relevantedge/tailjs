{"version":3,"file":"compression.js","sourceRoot":"","sources":["compression.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,IAAY,EACZ,EACE,cAAc,EACd,KAAK,EACL,QAAQ,GAKT;IAED,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAClC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAC/B,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC,CACrE,IAAI,EAAE,CACR,CAAC;IAEF,KAAK,MAAM,SAAS,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC;QACvC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;YAAE,SAAS;QAEpC,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;QAClC,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;YACxB,yDAAyD;YACzD,SAAS;QACX,CAAC;aAAM,IAAI,UAAU,EAAE,CAAC;YACtB,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACjC,CAAC;QACD,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAChE,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IACD,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import type { EngineHost } from \"../shared\";\n\nexport async function tryCompress(\n  text: string,\n  {\n    acceptEncoding,\n    cache,\n    compress,\n  }: {\n    acceptEncoding: readonly string[];\n    cache: Record<string, Uint8Array | null>;\n    compress: EngineHost[\"compress\"];\n  }\n): Promise<[string | Uint8Array, string]> {\n  const encodings = Object.fromEntries(\n    acceptEncoding.flatMap((value) =>\n      value.split(/,/g).map((value) => [value.trim().toLowerCase(), true])\n    ) ?? []\n  );\n\n  for (const algorithm of [\"br\", \"gzip\"]) {\n    if (!encodings[algorithm]) continue;\n\n    let compressed = cache[algorithm];\n    if (compressed === null) {\n      // Undefined means not generated, null means unavailable.\n      continue;\n    } else if (compressed) {\n      return [compressed, algorithm];\n    }\n    compressed = cache[algorithm] = await compress(text, algorithm);\n    if (compressed) {\n      return [compressed, algorithm];\n    }\n  }\n  return [text, \"\"];\n}\n"]}