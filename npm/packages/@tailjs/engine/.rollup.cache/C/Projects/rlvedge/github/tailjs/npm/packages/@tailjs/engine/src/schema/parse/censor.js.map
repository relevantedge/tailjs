{"version":3,"file":"censor.js","sourceRoot":"","sources":["censor.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserConsent, validateConsent } from \"@tailjs/types\";\r\nimport { isArray, isObject, isUndefined } from \"@tailjs/util\";\r\nimport { ParsedType } from \".\";\r\nimport { SchemaClassification, SchemaPropertyStructure } from \"../..\";\r\n\r\nconst traverseValue = (\r\n  type: ParsedType,\r\n  structure: SchemaPropertyStructure | undefined,\r\n  value: any,\r\n  action: (type: ParsedType, value: any) => any\r\n) => {\r\n  if (structure?.map) {\r\n    if (!isObject(value)) return undefined;\r\n    return Object.fromEntries(\r\n      Object.entries(value).map(([key, value]) => [\r\n        key,\r\n        traverseValue(\r\n          type,\r\n          {\r\n            array: structure!.array,\r\n          },\r\n          value,\r\n          action\r\n        ),\r\n      ])\r\n    );\r\n  }\r\n  if (structure?.array) {\r\n    if (!isArray(value)) return undefined;\r\n    structure = isObject(structure.array) ? structure.array : undefined;\r\n    value = value\r\n      .map((value) => traverseValue(type, structure, value, action))\r\n      .filter((item) => item);\r\n    return value.length ? value : undefined;\r\n  }\r\n\r\n  return action(type, value);\r\n};\r\n\r\n/**\r\n *  Removes all values beloning to properties that does not match the given consent.\r\n */\r\nexport const censor = (\r\n  type: ParsedType,\r\n  value: any,\r\n  consent: SchemaClassification | UserConsent\r\n) => {\r\n  if (!isObject(value)) return value;\r\n\r\n  if (!validateConsent(type as Required<SchemaClassification>, consent))\r\n    return undefined;\r\n\r\n  let any = false;\r\n  const censored: any = {};\r\n\r\n  for (const key in value) {\r\n    const property = type.properties.get(key);\r\n    if (!property || !validateConsent(property, consent)) {\r\n      continue;\r\n    }\r\n\r\n    const propertyValue = property.objectType\r\n      ? traverseValue(\r\n          property.objectType,\r\n          property.structure,\r\n          value[key],\r\n          (type, value) => censor(type, value, consent)\r\n        )\r\n      : value[key];\r\n\r\n    if (isUndefined(propertyValue)) {\r\n      continue;\r\n    }\r\n\r\n    censored[key] = propertyValue;\r\n    if (!property.censorIgnore) {\r\n      any = true;\r\n    }\r\n  }\r\n\r\n  return any ? censored : undefined;\r\n};\r\n"]}