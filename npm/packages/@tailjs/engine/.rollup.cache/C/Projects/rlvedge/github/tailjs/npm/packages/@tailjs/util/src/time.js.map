{"version":3,"file":"time.js","sourceRoot":"","sources":["time.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  MaybePromise,\n  isDefined,\n  isFunction,\n  isNumber,\n  promise,\n  tryCatchAsync,\n} from \".\";\n\nexport let now = () =>\n  typeof performance !== \"undefined\"\n    ? Math.trunc(performance.timeOrigin + performance.now())\n    : Date.now();\n\nexport type CancellableCallback = (cancel: () => void) => MaybePromise<any>;\n\nexport type Timer = {\n  (toggle?: boolean): number;\n};\n\nexport const timer = (started = true): Timer => {\n  let t0 = started ? now() : undefined;\n  let elapsed = 0;\n  return (toggle) => {\n    isDefined(t0) && (elapsed += now() - t0);\n    isDefined(toggle) && (t0 = toggle ? Date.now() : undefined);\n    return elapsed;\n  };\n};\n\nexport interface Clock {\n  readonly active: boolean;\n  readonly busy: boolean;\n  restart(frequency?: number, callback?: CancellableCallback): Clock;\n  toggle(start: boolean, trigger?: boolean): Clock;\n  trigger(skipQueue?: boolean): Promise<boolean>;\n}\n\nexport interface ClockSettings {\n  frequency?: number;\n  queue?: boolean;\n  paused?: boolean;\n  trigger?: boolean;\n  once?: boolean;\n  callback?: CancellableCallback;\n}\n\nexport const clock: {\n  (callback: CancellableCallback, frequency: number): Clock;\n  (settings: ClockSettings): Clock;\n} = (\n  callbackOrSettings: CancellableCallback | ClockSettings,\n  frequency = 0\n): Clock => {\n  const settings = isFunction(callbackOrSettings)\n    ? {\n        frequency,\n        callback: callbackOrSettings,\n      }\n    : callbackOrSettings;\n\n  let {\n    queue = true,\n    paused = false,\n    trigger = false,\n    once = false,\n    callback = () => {},\n  } = settings;\n  frequency = settings.frequency ?? 0;\n\n  let timeoutId = 0;\n  const mutex = promise(true).resolve();\n\n  const outerCallback = async (skipQueue?: boolean) => {\n    if (!timeoutId || (!queue && mutex.pending && skipQueue !== true)) {\n      return false;\n    }\n    (instance as any).busy = true;\n    if (skipQueue !== true) {\n      await mutex;\n    }\n\n    mutex.reset();\n    let cancelled = frequency < 0 || once;\n    await tryCatchAsync(\n      () => callback!(() => (cancelled = true)),\n      false,\n      () => mutex.resolve()\n    );\n    if (cancelled) {\n      reset(false);\n    }\n\n    (instance as any).busy = false;\n    return true;\n  };\n\n  const reset = (start: boolean) => {\n    clearInterval(timeoutId);\n    (instance as any).active = !!(timeoutId = start\n      ? (setInterval(\n          outerCallback,\n          frequency < 0 ? -frequency : frequency\n        ) as any)\n      : 0);\n    return instance;\n  };\n\n  const instance: Clock = {\n    active: false,\n    busy: false,\n    restart: (newFrequency, newCallback) => {\n      frequency = newFrequency ?? frequency;\n      callback = newCallback ?? callback;\n      return reset(true);\n    },\n    toggle: (start, trigger) =>\n      start !== instance.active\n        ? start\n          ? trigger\n            ? (reset(true), instance.trigger(), instance)\n            : reset(true)\n          : reset(false)\n        : instance,\n    trigger: async (skipQueue) =>\n      (await outerCallback(skipQueue)) && (reset(instance.active), true),\n  };\n\n  return instance.toggle(!paused, trigger);\n};\n"]}