{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["bootstrap.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAGL,WAAW,EACX,cAAc,GAGf,MAAM,UAAU,CAAC;AAGlB,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAoB5B,MAAM,UAAU,SAAS,CAAC,EACxB,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,OAAO,EACP,UAAU,EACV,sBAAsB,EACtB,MAAM,EACN,cAAc,EACd,UAAU,EACV,WAAW,EACX,eAAe,EACf,cAAc,GACI;IAClB,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;IACrE,OAAO,IAAI,cAAc,CAAC;QACxB,IAAI;QACJ,MAAM;QACN,QAAQ;QACR,OAAO;QACP,sBAAsB;QACtB,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,EAAE,CACxC,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,SAAgB,CAC3E;QACD,MAAM;QACN,cAAc;QACd,UAAU;QACV,WAAW;QACX,cAAc;QACd,eAAe;KAChB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import defaultSchema from \"@tailjs/types/schema\";\nimport {\n  CryptoProvider,\n  EngineHost,\n  EventParser,\n  RequestHandler,\n  RequestHandlerConfiguration,\n  TrackerExtension,\n} from \"./shared\";\n\nimport type { TrackerConfiguration } from \"@tailjs/client\";\nimport { map } from \"./lib\";\n\nexport type BootstrapSettings = {\n  host: EngineHost;\n  endpoint: string;\n  schema?: ConstructorParameters<typeof EventParser>[0];\n  cookies?: RequestHandlerConfiguration[\"cookies\"];\n  manageConsents?: boolean;\n  extensions?: Iterable<\n    TrackerExtension | (() => Promise<TrackerExtension> | TrackerExtension)\n  >;\n  allowUnknownEventTypes?: boolean;\n  crypto?: CryptoProvider;\n  encryptionKeys?: string[];\n  useSession?: boolean;\n  debugScript?: boolean | string;\n  environmentTags?: string[];\n  client?: TrackerConfiguration;\n};\n\nexport function bootstrap({\n  host,\n  endpoint,\n  schema,\n  cookies,\n  extensions,\n  allowUnknownEventTypes,\n  crypto,\n  encryptionKeys,\n  useSession,\n  debugScript,\n  environmentTags,\n  manageConsents,\n}: BootstrapSettings): RequestHandler {\n  const parser = new EventParser(schema ?? { default: defaultSchema });\n  return new RequestHandler({\n    host,\n    parser,\n    endpoint,\n    cookies,\n    allowUnknownEventTypes,\n    extensions: map(extensions, (extension) =>\n      typeof extension === \"function\" ? extension : async () => extension as any\n    ),\n    crypto,\n    encryptionKeys,\n    useSession,\n    debugScript,\n    manageConsents,\n    environmentTags,\n  });\n}\n"]}