{"version":3,"file":"VariableStorage.js","sourceRoot":"","sources":["VariableStorage.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EACb,aAAa,GAYd,MAAM,eAAe,CAAC;AAIvB,MAAM,OAAO,gBAAiB,SAAQ,KAAK;IACzC,YAAY,MAAyB;QACnC,KAAK,CACH,iBAAiB,MAAM,CAAC,MAAM,CAAC,GAAG,QAAQ,aAAa,CAAC,MAAM,CAC5D,MAAM,CAAC,MAAM,CAAC,KAAK,CACpB,0BACC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAChD,GAAG,CACJ,CAAC;IACJ,CAAC;CACF;AA2ED,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,OAAgC,EACJ,EAAE,CAAE,OAAe,CAAC,GAAG,CAAC","sourcesContent":["import {\n  isErrorResult,\n  variableScope,\n  type Variable,\n  type VariableFilter,\n  type VariableGetter,\n  type VariableHeader,\n  type VariablePatchResult,\n  type VariableQueryOptions,\n  type VariableQueryResult,\n  type VariableScope,\n  type VariableSetResult,\n  type VariableSetter,\n  VariableScopeValue,\n} from \"@tailjs/types\";\nimport { MaybePromise } from \"@tailjs/util\";\nimport type { Tracker, TrackerEnvironment } from \"..\";\n\nexport class VariableSetError extends Error {\n  constructor(result: VariableSetResult) {\n    super(\n      `The variable '${result.source.key}' in ${variableScope.lookup(\n        result.source.scope\n      )} scope could not be set${\n        isErrorResult(result) ? `: ${result.error}` : \"\"\n      }.`\n    );\n  }\n}\n\nexport type VariableStorageContext = {\n  tracker?: Tracker;\n  // Reserved for future use so one endpoint can be shared between multiple projects (e.g. by an API key - TBD).\n  tenant?: string;\n};\n\nexport interface VariableGetResult<T = any> extends Variable<T> {\n  /**\n   * The initializer was used to create the variable.\n   */\n  initialized?: boolean;\n\n  /**\n   * The variable has not changed since the version requested.\n   */\n  unchanged?: boolean;\n\n  value: T;\n}\n\ntype MapVariableGetResult<Getter> = Getter extends VariableGetter<infer T>\n  ? Getter extends {\n      initializer: () => infer R;\n    }\n    ? Awaited<R> extends VariablePatchResult<infer T>\n      ? VariableGetResult<T>\n      : VariableGetResult<unknown extends T ? any | undefined : T | undefined>\n    : VariableGetResult<unknown extends T ? any | undefined : undefined>\n  : undefined;\n\nexport type VariableGetResults<K extends any[]> = K extends []\n  ? []\n  : K extends [infer Item, ...infer Rest]\n  ? [MapVariableGetResult<Item>, ...VariableGetResults<Rest>]\n  : K extends (infer T)[]\n  ? MapVariableGetResult<T>[]\n  : never;\n\ntype MapVariableSetResult<Source> = Source extends VariableSetter<infer T>\n  ? Source extends { value: undefined }\n    ? undefined\n    : VariableSetResult<T>\n  : never;\n\nexport type VariableSetResults<K extends any[] = any[]> = K extends []\n  ? []\n  : K extends [infer Item, ...infer Rest]\n  ? [MapVariableSetResult<Item>, ...VariableSetResults<Rest>]\n  : K extends (infer T)[]\n  ? MapVariableSetResult<T>[]\n  : never;\n\nexport interface ReadOnlyVariableStorage {\n  initialize?(environment: TrackerEnvironment): MaybePromise<void>;\n\n  get<K extends (VariableGetter<any> | null | undefined)[]>(\n    keys: K & (VariableGetter<any> | null | undefined)[], // K & and the base type to enable intellisense.\n    context?: VariableStorageContext\n  ): MaybePromise<VariableGetResults<K>>;\n\n  head(\n    filters: VariableFilter[],\n    options?: VariableQueryOptions,\n    context?: VariableStorageContext\n  ): MaybePromise<VariableQueryResult<VariableHeader<true>>>;\n\n  query(\n    filters: VariableFilter[],\n    options?: VariableQueryOptions,\n    context?: VariableStorageContext\n  ): MaybePromise<VariableQueryResult<Variable<any>>>;\n}\n\nexport const isWritable = (\n  storage: ReadOnlyVariableStorage\n): storage is VariableStorage => (storage as any).set;\n\nexport interface VariableStorage extends ReadOnlyVariableStorage {\n  configureScopeDurations(\n    durations: Partial<Record<VariableScopeValue<false>, number>>,\n    context?: VariableStorageContext\n  ): void;\n\n  renew(\n    scope: VariableScope,\n    scopeIds: string[],\n    context?: VariableStorageContext\n  ): MaybePromise<void>;\n\n  set<V extends (VariableSetter<any> | null | undefined)[]>(\n    variables: V & (VariableSetter<any> | null | undefined)[], // V & and the base type to enable intellisense.\n    context?: VariableStorageContext\n  ): MaybePromise<VariableSetResults<V>>;\n\n  purge(\n    filters: VariableFilter[],\n    context?: VariableStorageContext\n  ): MaybePromise<void>;\n}\n"]}