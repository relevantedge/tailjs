{"version":3,"file":"lock.js","sourceRoot":"","sources":["lock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC;AAmBtB,MAAM,OAAO,GAAS,CAAC,MAAY,EAAE,OAAa,EAAE,EAAE;IACpD,IAAI,CAAC,MAAM;QAAE,OAAO,CAAC,CAAC;IACtB,IAAI,OAAO,KAAK,CAAC;QAAE,OAAO,MAAM,EAAE,CAAC;IACnC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,MAAM,EAAE,CAAC,EAAE,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,IAAI,GAAiB,CAAC,EAAU,EAAE,GAAG,IAAW,EAAE,EAAE,CAC9D,OAAe,CAAC,GAAG,IAAI,CAAC,CAAC","sourcesContent":["import type { MaybePromise } from \"@tailjs/util\";\nimport { F } from \".\";\n\nexport type Lock = {\n  <T>(action: () => MaybePromise<T>): Promise<T>;\n  <T>(action: () => MaybePromise<T>, timeout: number): Promise<T> | undefined;\n  <T>(action: () => T, timeout: false): T extends Promise<any>\n    ? never\n    : T | undefined;\n  (): boolean;\n};\n\nexport type LockFunction = {\n  (lockId: string): Lock;\n  <T>(lockid: string, action: () => MaybePromise<T>): Promise<T>;\n  <T>(lockId: string, action: () => MaybePromise<T>, timeout: number):\n    | Promise<T>\n    | undefined;\n};\n\nconst ssrLock: Lock = (action?: any, timeout?: any) => {\n  if (!action) return F;\n  if (timeout === F) return action();\n  return (async () => await action())();\n};\n\nexport const lock: LockFunction = (id: string, ...args: any[]) =>\n  (ssrLock as any)(...args);\n"]}