{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":"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","sourcesContent":["// General utility functions.\n\nimport type { ConstToNormal, Nullish } from \"@tailjs/util\";\nimport {\n  F,\n  bool,\n  filter,\n  keys,\n  match,\n  nil,\n  push,\n  size,\n  str,\n  undefined,\n  type Json,\n} from \".\";\n\n/**\n * Raises an error in the UI based on configuration and build settings.\n */\nexport const err = (code: string | Nullish, args?: any, error?: Error): void =>\n  console.error(\n    ...filter([code ?? error?.message ?? error ?? \"error\", args, error])\n  );\n\n/**\n * Applies a function to a value if it is not its types default value.\n * An object without properties and an empty array are considered the \"default\" for those types.\n */\nexport const ifNotDefault = <T, R = T>(\n  value: T,\n  action?: (value: T) => R\n): R | undefined =>\n  (typeof value === \"object\" && size(keys(value as any))) || value\n    ? action\n      ? action(value)\n      : value\n    : (undefined as any);\n\n/**\n * Round a number of to the specified number of decimals.\n */\nexport const round = (x: number, decimals: number | boolean = 0) =>\n  (bool(decimals) ? --(decimals as any) : decimals) < 0\n    ? x\n    : ((decimals = Math.pow(10, decimals as any)),\n      Math.round(x * decimals) / decimals);\n\n/**\n * `decodeURIComponent` for efficient minifying.\n */\nexport const decode = <T extends string | Nullish>(\n  value: T\n): T extends string ? string : null =>\n  value == nil ? nil : (decodeURIComponent(value) as any);\n\n/**\n * `encodeURIComponent` for efficient minifying.\n */\nexport const encode = <T extends string | Nullish>(\n  value: T\n): T extends string ? string : null =>\n  value == nil ? nil : (encodeURIComponent(value) as any);\n\nlet parameters = {};\n/**\n * Parses key/value pairs encoded as a URI query string (blah=foo&bar=gz%25nk).\n *\n * It supports that the same key can be specified multiple times.\n */\nexport const parseParameters = <T extends string | Nullish>(\n  query: T\n): T extends string ? Record<string, string[]> : T =>\n  query == nil\n    ? (query as any)\n    : ((parameters = {}),\n      match(query, /([^&=]+)(?:=([^&]+))?/g, (all, name, value) =>\n        push(\n          (parameters[lowerCase(decode(name))] ??= []),\n          decode(str(value, F))\n        )\n      ),\n      parameters);\n\n/**\n * Convenient way to compare a value against multiple others.\n */\nexport const equals = <T>(value: T, ...values: T[]) =>\n  values.some(value == nil ? (test) => test == nil : (test) => value === test);\n\n/**\n *  Better minifyable version of `String`'s `toLowerCase` method that allows a null'ish parameter.\n */\nexport const lowerCase = <T extends string | Nullish>(s: T): T =>\n  s?.toLowerCase() ?? (s as any);\n\n/**\n * `JSON.stringify` with default settings for pretty-printing any value.\n */\nexport const prettify = (value: any): string => stringify(value, nil, 2) ?? \"\";\n\n/**\n * `JSON.stringify` method for efficient minifying that also ignores null'ish values.\n */\nexport const stringify = <T>(\n  value: T,\n  replacer?: any,\n  space?: string | number\n): T extends Nullish ? null : string =>\n  value == nil ? nil : (JSON.stringify(value, replacer, space) as any);\n\n/**\n * `JSON.parse` method for efficient minifying that also gracefully handles null values.\n */\nexport const parse = <T extends Json = Json>(value: string | null): T =>\n  value == nil ? nil : JSON.parse(value);\n\n/**\n * Fast way to join two optional strings with a space.\n * If they are both nullish, nullish will be returned (unless `defaultValue`).\n */\nexport const concat2 = <\n  T1 extends string | Nullish,\n  T2 extends string | Nullish,\n  Default extends string | Nullish = null\n>(\n  value1: T1,\n  value2: T2,\n  defaultValue: Default = nil as any\n) =>\n  value1 && value2 ? value1 + \" \" + value2 : (value1 || value2) ?? defaultValue;\n"]}