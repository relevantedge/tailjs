{"version":3,"file":"SchemaVariableSet.js","sourceRoot":"","sources":["SchemaVariableSet.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,eAAe,EACf,aAAa,GACd,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC7E,OAAO,EAAgD,WAAW,EAAE,MAAM,IAAI,CAAC;AAG/E,MAAM,OAAO,iBAAiB;IACpB,UAAU,CAA8B;IAEhC,OAAO,CAAoB;IAE3C,gBAAgB;IAChB,YACE,OAAsB,EACtB,OAA8C;QAE9C,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE,CACrC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAC5D,CAAC;QAEF,IAAI,CAAC,UAAU,GAAG,IAAI,WAAW,EAAE,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC9B,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE;gBACrD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,CAC7C,SAAS,CAAC,OAAO,CAAC;oBAChB,CAAC,CAAC,UAAU,CACR,iBAAiB,GAAG,QAAQ,aAAa,CAAC,MAAM,CAC9C,KAAK,CACN,2BACC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAChC,6CACE,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,EAC/B,IAAI,CACL;oBACH,CAAC,CAAC,QAAQ,CACb,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,GAAG,CAAC,GAAmC;QAC5C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,WAAW,CAAI,GAAgB,EAAE,KAAQ;QAC9C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAEM,QAAQ,CAAI,GAAgB,EAAE,KAAQ;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAEM,MAAM,CACX,GAAgB,EAChB,KAAQ,EACR,OAA2C;QAE3C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,CAAC,QAAQ,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC;YACrD,CAAC,CAAC,SAAS;YACX,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;CACF","sourcesContent":["import {\r\n  UserConsent,\r\n  VariableKey,\r\n  validateConsent,\r\n  variableScope,\r\n} from \"@tailjs/types\";\r\nimport { forEach, isDefined, isString, map, throwError } from \"@tailjs/util\";\r\nimport { Schema, SchemaClassification, SchemaVariable, VariableMap } from \"..\";\r\nimport { SchemaManager } from \"./SchemaManager\";\r\n\r\nexport class SchemaVariableSet {\r\n  private _variables: VariableMap<SchemaVariable>;\r\n\r\n  public readonly schemas: readonly Schema[];\r\n\r\n  /** @internal */\r\n  public constructor(\r\n    manager: SchemaManager,\r\n    schemas: Iterable<string | Schema | undefined>\r\n  ) {\r\n    this.schemas = map(schemas, (schema) =>\r\n      isString(schema) ? manager.getSchema(schema, true) : schema\r\n    );\r\n\r\n    this._variables = new VariableMap();\r\n    this.schemas.forEach((schema) => {\r\n      forEach(schema.variables, ([[scope, key], variable]) => {\r\n        this._variables.update(scope, key, (current) =>\r\n          isDefined(current)\r\n            ? throwError(\r\n                `The variable '${key}' in ${variableScope.lookup(\r\n                  scope\r\n                )} scope from the schema '${\r\n                  variable.declaringType.schema.id\r\n                }' is already defined in the other schema '${\r\n                  current.declaringType.schema.id\r\n                }'.`\r\n              )\r\n            : variable\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  public get(key: VariableKey | null | undefined): SchemaVariable | undefined {\r\n    return this._variables.get(key);\r\n  }\r\n\r\n  public tryValidate<T>(key: VariableKey, value: T): T | undefined {\r\n    return this._variables.get(key)?.tryValidate(value);\r\n  }\r\n\r\n  public validate<T>(key: VariableKey, value: T): T | undefined {\r\n    return this._variables.get(key)?.validate(value);\r\n  }\r\n\r\n  public censor<T>(\r\n    key: VariableKey,\r\n    value: T,\r\n    consent: SchemaClassification | UserConsent\r\n  ): T | undefined {\r\n    const variable = this._variables.get(key);\r\n    return !variable || !validateConsent(variable, consent)\r\n      ? undefined\r\n      : variable.censor(value, consent);\r\n  }\r\n}\r\n"]}