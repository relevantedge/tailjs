{"version":3,"file":"PostError.js","sourceRoot":"","sources":["PostError.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B,MAAM,OAAO,SAAU,SAAQ,KAAK;IAEhB;IACA;IAFlB,YACkB,UAA0D,EAC1D,UAAiC;QAEjD,KAAK,CACH;YACE,GAAG,UAAU,CAAC,GAAG,CACf,CAAC,IAAI,EAAE,EAAE,CACP,aAAa,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,KACtC,IAAI,CAAC,WAAW;gBACd,CAAC,CAAC,iBAAiB,IAAI,CAAC,WAAW,EAAE;gBACrC,CAAC,CAAC,iBACN,iBAAiB,IAAI,CAAC,KAAK,EAAE,CAChC;YACD,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;SAChE,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QAfc,eAAU,GAAV,UAAU,CAAgD;QAC1D,eAAU,GAAV,UAAU,CAAuB;IAenD,CAAC;CACF","sourcesContent":["import { ValidationError } from \"./shared\";\nimport { map } from \"./lib\";\n\nexport class PostError extends Error {\n  constructor(\n    public readonly validation: (ValidationError & { sourceIndex?: number })[],\n    public readonly extensions: Record<string, Error>\n  ) {\n    super(\n      [\n        ...validation.map(\n          (item) =>\n            `The event ${JSON.stringify(item.source)} (${\n              item.sourceIndex\n                ? `source index #${item.sourceIndex}`\n                : \"no source index\"\n            }) is invalid: ${item.error}`\n        ),\n        ...map(extensions, (item) => `'${item[0]}' failed: ${item[1]}`),\n      ].join(\"\\n\")\n    );\n  }\n}\n"]}