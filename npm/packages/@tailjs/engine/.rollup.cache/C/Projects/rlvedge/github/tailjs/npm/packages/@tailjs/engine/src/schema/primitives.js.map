{"version":3,"file":"primitives.js","sourceRoot":"","sources":["primitives.ts"],"names":[],"mappings":"AACA,OAAO,EACL,OAAO,EACP,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,GACP,MAAM,cAAc,CAAC;AAGtB,MAAM,eAAe,GAAW;IAC9B,EAAE,EAAE,sBAAsB;IAC1B,cAAc,sCAA8B;IAC5C,QAAQ,2BAAkB;IAC1B,KAAK,EAAE,IAAI,GAAG,EAAE;CACjB,CAAC;AAEF,MAAM,eAAe,GAGjB;IACF,cAAc,sCAA8B;IAC5C,QAAQ,2BAAkB;IAC1B,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,eAAe;IACvB,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;IACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;CAC3B,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG;IACxB,OAAO,EAAE;QACP,EAAE,EAAE,eAAe,GAAG,UAAU;QAChC,IAAI,EAAE,SAAS;QACf,GAAG,eAAe;KACI;IAExB,OAAO,EAAE;QACP,EAAE,EAAE,eAAe,GAAG,UAAU;QAChC,IAAI,EAAE,SAAS;QACf,GAAG,eAAe;KACI;IAExB,KAAK,EAAE;QACL,EAAE,EAAE,eAAe,GAAG,QAAQ;QAC9B,IAAI,EAAE,OAAO;QACb,GAAG,eAAe;KACI;IAExB,MAAM,EAAE;QACN,EAAE,EAAE,eAAe,GAAG,SAAS;QAC/B,IAAI,EAAE,QAAQ;QACd,GAAG,eAAe;KACI;IAExB,IAAI,EAAE;QACJ,EAAE,EAAE,eAAe,GAAG,OAAO;QAC7B,IAAI,EAAE,UAAU;QAEhB,GAAG,eAAe;KACI;IAExB,IAAI,EAAE;QACJ,EAAE,EAAE,eAAe,GAAG,OAAO;QAC7B,IAAI,EAAE,MAAM;QACZ,GAAG,eAAe;KACI;IAExB,QAAQ,EAAE;QACR,EAAE,EAAE,eAAe,GAAG,WAAW;QACjC,IAAI,EAAE,UAAU;QAChB,GAAG,eAAe;KACI;IAExB,QAAQ,EAAE;QACR,EAAE,EAAE,eAAe,GAAG,WAAW;QACjC,IAAI,EAAE,UAAU;QAChB,GAAG,eAAe;KACI;IAExB,IAAI,EAAE;QACJ,EAAE,EAAE,eAAe,GAAG,OAAO;QAC7B,IAAI,EAAE,MAAM;QACZ,GAAG,eAAe;KACI;CAChB,CAAC;AAEX,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAC/B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CACjD,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,KAAU,EAAE,EAAE,CACpD,QAAQ,CAAC,KAAK,CAAC;IACb,CAAC,CAAC,UAAU,CAAC,MAAM;IACnB,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC,UAAU,CAAC,OAAO;QACpB,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC,UAAU,CAAC,KAAK;YAClB,CAAC,CAAC,SAAS,CAAC;AAEhB,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,cAAmB,EAAE,EAAE;IAC3D,QAAQ,cAAc,EAAE,IAAI,EAAE,CAAC;QAC7B,KAAK,SAAS;YACZ,OAAO,UAAU,CAAC,OAAO,CAAC;QAC5B,KAAK,QAAQ;YACX,OAAO,UAAU,CAAC,KAAK,CAAC;QAC1B,KAAK,QAAQ;YACX,QAAQ,cAAc,CAAC,MAAM,EAAE,CAAC;gBAC9B,KAAK,MAAM;oBACT,OAAO,UAAU,CAAC,IAAI,CAAC;gBACzB,KAAK,WAAW;oBACd,OAAO,UAAU,CAAC,QAAQ,CAAC;gBAC7B,KAAK,MAAM;oBACT,OAAO,UAAU,CAAC,IAAI,CAAC;gBACzB,KAAK,UAAU;oBACb,OAAO,UAAU,CAAC,QAAQ,CAAC;gBAC7B,KAAK,MAAM;oBACT,OAAO,UAAU,CAAC,IAAI,CAAC;gBACzB;oBACE,OAAO,UAAU,CAAC,MAAM,CAAC;YAC7B,CAAC;QACH;YACE,MAAM,aAAa,GAAG,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC;gBACnD,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC;gBACxB,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC;YAExB,MAAM,IAAI,GAAG,cAAc,CAAC,KAAK;gBAC/B,CAAC,CAAC,uBAAuB,CAAC,cAAc,CAAC,KAAK,CAAC;gBAC/C,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;YAEzD,OAAO,IAAI,IAAI,EAAE,GAAG,IAAI,EAAE,aAAa,EAAE,CAAC;IAC9C,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { DataClassification, DataPurposes } from \"@tailjs/types\";\r\nimport {\r\n  forEach,\r\n  isDefined,\r\n  isInteger,\r\n  isNumber,\r\n  isString,\r\n  single,\r\n  unlock,\r\n} from \"@tailjs/util\";\r\nimport { Schema, SchemaPrimitiveType } from \"..\";\r\n\r\nconst primitiveSchema: Schema = {\r\n  id: \"urn:tailjs:primitive\",\r\n  classification: DataClassification.Anonymous,\r\n  purposes: DataPurposes.Any,\r\n  types: new Map(),\r\n};\r\n\r\nconst primitiveShared: Pick<\r\n  SchemaPrimitiveType,\r\n  \"classification\" | \"purposes\" | \"primitive\" | \"censor\" | \"validate\" | \"schema\"\r\n> = {\r\n  classification: DataClassification.Anonymous,\r\n  purposes: DataPurposes.Any,\r\n  primitive: true,\r\n  schema: primitiveSchema,\r\n  censor: (value) => value,\r\n  validate: (value) => value,\r\n};\r\n\r\nexport const primitives = {\r\n  boolean: {\r\n    id: primitiveSchema + \"#boolean\",\r\n    name: \"boolean\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  integer: {\r\n    id: primitiveSchema + \"#integer\",\r\n    name: \"integer\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  float: {\r\n    id: primitiveSchema + \"#float\",\r\n    name: \"float\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  string: {\r\n    id: primitiveSchema + \"#string\",\r\n    name: \"string\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  date: {\r\n    id: primitiveSchema + \"#date\",\r\n    name: \"datetime\",\r\n\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  time: {\r\n    id: primitiveSchema + \"#time\",\r\n    name: \"time\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  duration: {\r\n    id: primitiveSchema + \"#duration\",\r\n    name: \"duration\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  datetime: {\r\n    id: primitiveSchema + \"#datetime\",\r\n    name: \"datetime\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n\r\n  uuid: {\r\n    id: primitiveSchema + \"#uuid\",\r\n    name: \"uuid\",\r\n    ...primitiveShared,\r\n  } as SchemaPrimitiveType,\r\n} as const;\r\n\r\nforEach(primitives, ([, type]) =>\r\n  unlock(primitiveSchema.types).set(type.id, type)\r\n);\r\n\r\nexport const inferPrimitiveFromValue = (value: any) =>\r\n  isString(value)\r\n    ? primitives.string\r\n    : isInteger(value)\r\n    ? primitives.integer\r\n    : isNumber(value)\r\n    ? primitives.float\r\n    : undefined;\r\n\r\nexport const tryParsePrimitiveType = (schemaProperty: any) => {\r\n  switch (schemaProperty?.type) {\r\n    case \"integer\":\r\n      return primitives.integer;\r\n    case \"number\":\r\n      return primitives.float;\r\n    case \"string\":\r\n      switch (schemaProperty.format) {\r\n        case \"date\":\r\n          return primitives.date;\r\n        case \"date-time\":\r\n          return primitives.datetime;\r\n        case \"time\":\r\n          return primitives.time;\r\n        case \"duration\":\r\n          return primitives.duration;\r\n        case \"uuid\":\r\n          return primitives.uuid;\r\n        default:\r\n          return primitives.string;\r\n      }\r\n    default:\r\n      const allowedValues = isDefined(schemaProperty.const)\r\n        ? [schemaProperty.const]\r\n        : schemaProperty.enum;\r\n\r\n      const type = schemaProperty.const\r\n        ? inferPrimitiveFromValue(schemaProperty.const)\r\n        : single(schemaProperty.enum, inferPrimitiveFromValue);\r\n\r\n      return type && { ...type, allowedValues };\r\n  }\r\n};\r\n"]}