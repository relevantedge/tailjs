{"version":3,"file":"InMemoryStorage.test.js","sourceRoot":"","sources":["InMemoryStorage.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAKL,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,eAAe,EAAmB,MAAM,QAAQ,CAAC;AAE1D,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,KAAK,GAAG,IAAI,eAAe,EAAqB,CAAC;QAEvD,MAAM,GAAG,GAAgB;YACvB,GAAG,EAAE,MAAM;YACX,KAAK,EAAE,QAAQ;SAChB,CAAC;QAEF,MAAM,CACJ,CACE,MAAM,KAAK,CAAC,GAAG,CAAC;YACd;gBACE,GAAG,GAAG;gBACN,cAAc,EAAE,QAAQ;gBACxB,KAAK,EAAE,MAAM;aACd;SACF,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,MAAM,CACZ,CAAC,IAAI,mCAA2B,CAAC;QAElC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE/D,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,GAAG,CACvC,CAAC,QAAQ,EAAE,EAAE,CACX,CAAC;YACC,GAAG,GAAG;YACN,KAAK,EAAE,SAAS;YAChB,QAAQ;SACO,CAAA,CACpB,CAAC;QAEF,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;YAC3C,SAAS;YACT,SAAS;YACT,SAAS;SACV,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,GAAG,CACjC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC3B,GAAG,GAAG;YACN,cAAc,EAAE,QAAQ;YACxB,KAAK,EAAE,OAAO,CAAC,EAAE;SAClB,CAAC,CAAC,CACJ,CAAC;QACF,MAAM,CACJ,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CACpE,CAAC,OAAO,CAAC;YACR,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC;YAC5B,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC;YAC5B,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,GAAG,GAA0B;YACjC,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,GAAG;YACb,GAAG,EAAE,MAAM;YACX,cAAc,EAAE,QAAQ;SACzB,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,eAAe,EAAqB,CAAC;QACvD,IAAI,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,mCAA2B,CAAC;QAEvD,MAAM,CACJ,CAAC,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CACzE,CAAC,IAAI,oCAA4B,CAAC;QAEnC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC;QAC3C,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;QAC5E,MAAM,CACJ,CAAC,MAAM,GAAG,CACR,MAAM,KAAK,CAAC,GAAG,CAAC;YACd,EAAE,GAAG,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,OAAQ,CAAC,OAAO,EAAE;SAChE,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CACd,CAAC,IAAI,mCAA2B,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEvD,MAAM,CACJ,CAAC,MAAM,GAAG,CACR,MAAM,KAAK,CAAC,GAAG,CAAC;YACd,EAAE,GAAG,GAAG,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,GAAG,IAAI,EAAE,CAAC,EAAE;SACnE,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CACd,CAAC,IAAI,mCAA2B,CAAC;QAElC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEjD,MAAM,CACJ,CAAC,MAAM,GAAG,CACR,MAAM,KAAK,CAAC,GAAG,CAAC;YACd;gBACE,GAAG,GAAG;gBACN,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE;aAChE;SACF,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CACd,CAAC,IAAI,qCAA6B,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEjD,MAAM,CACJ,CAAC,MAAM,GAAG,CACR,MAAM,KAAK,CAAC,GAAG,CAAC;YACd;gBACE,GAAG,GAAG;gBACN,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE;aACnE;SACF,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CACd,CAAC,IAAI,mCAA2B,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/C,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC;QAC/C,MAAM,CACJ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CACtE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,MAAM,CACJ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,OAAO,EAAE,cAAc,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChE,SAAS,CACb,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,MAAM,GAA0B;YACpC,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,GAAG;YACb,cAAc,EAAE,WAAW;YAC3B,GAAG,EAAE,EAAE;SACR,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,eAAe,EAAqB,CAAC;QACvD,MAAM,KAAK,CAAC,GAAG,CAAC;YACd,EAAE,GAAG,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE;YAC3C;gBACE,GAAG,MAAM;gBACT,GAAG,EAAE,MAAM;gBACX,KAAK,EAAE,QAAQ;gBACf,QAAQ,EAAE,CAAC,gBAAgB,CAAC;gBAC5B,IAAI,EAAE,CAAC,MAAM,CAAC;aACf;YACD;gBACE,GAAG,MAAM;gBACT,GAAG,EAAE,MAAM;gBACX,KAAK,EAAE,QAAQ;gBACf,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;aACvB;SACF,CAAC,CAAC;QAEH,IAAI,OAAO,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE9B,OAAO,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CACzE;YACE,CAAC,MAAM,EAAE,QAAQ,CAAC;YAClB,CAAC,MAAM,EAAE,QAAQ,CAAC;YAClB,CAAC,MAAM,EAAE,QAAQ,CAAC;SACnB,CACF,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE9B,MAAM,KAAK,GAAG,KAAK,EAAE,OAAyB,EAAE,EAAE,CAChD,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEnE,MAAM,CACJ,MAAM,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,CACrE,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5B,MAAM,CACJ,MAAM,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CACpE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpB,MAAM,CACJ,MAAM,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAClE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpB,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,cAAc,EAAE,EAAE,MAAM,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE;aACtD;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5B,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,QAAQ,EAAE,gBAAgB;aAC3B;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpB,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aACjB;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5B,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;aACzB;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpB,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;aAC7C;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5B,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aACjB;SACF,CAAC,CACH,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAEd,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aACjB;YACD;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,QAAQ,EAAE,gBAAgB;aAC3B;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5B,MAAM,CACJ,MAAM,KAAK,CAAC;YACV;gBACE,IAAI,EAAE,CAAC,GAAG,CAAC;gBACX,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBAChB,QAAQ,EAAE,gBAAgB;aAC3B;SACF,CAAC,CACH,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpB,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;QAE1E,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  VariableFilter,\n  VariableHeader,\n  VariableKey,\n  VariableSetStatus,\n  setStatus,\n} from \"@tailjs/types\";\nimport { InMemoryStorage, VariableStorage } from \"../src\";\n\ndescribe(\"Variable stores store.\", () => {\n  it(\"InMemoryStore handles get/set.\", async () => {\n    const store = new InMemoryStorage() as VariableStorage;\n\n    const key: VariableKey = {\n      key: \"test\",\n      scope: \"global\",\n    };\n\n    expect(\n      (\n        await store.set([\n          {\n            ...key,\n            classification: \"direct\",\n            value: \"test\",\n          },\n        ])\n      )[0].status\n    ).toBe(VariableSetStatus.Success);\n\n    expect((await store.get([{ ...key }]))[0]?.value).toBe(\"test\");\n\n    const sessionKeys = [\"1\", \"2\", \"123\"].map(\n      (targetId) =>\n        ({\n          ...key,\n          scope: \"session\",\n          targetId,\n        } as VariableKey)\n    );\n\n    expect(await store.get(sessionKeys)).toEqual([\n      undefined,\n      undefined,\n      undefined,\n    ]);\n\n    const setSessions = await store.set(\n      sessionKeys.map((key, i) => ({\n        ...key,\n        classification: \"direct\",\n        value: `test${i}`,\n      }))\n    );\n    expect(\n      setSessions.map((result) => [result.status, result.current?.value])\n    ).toEqual([\n      [setStatus.success, \"test0\"],\n      [setStatus.success, \"test1\"],\n      [setStatus.success, \"test2\"],\n    ]);\n  });\n\n  it(\"InMemoryStore handles version conflicts.\", async () => {\n    const key: VariableHeader<false> = {\n      scope: \"user\",\n      targetId: \"u\",\n      key: \"test\",\n      classification: \"direct\",\n    };\n\n    const store = new InMemoryStorage() as VariableStorage;\n    let result = (await store.set([{ ...key, value: \"version1\" }]))[0];\n    expect(result?.status).toBe(VariableSetStatus.Success);\n\n    expect(\n      (result = (await store.set([{ ...key, value: \"version1\" }]))[0])?.status\n    ).toBe(VariableSetStatus.Conflict);\n\n    let firstVersion = result.current?.version;\n    expect([!!firstVersion, result.current?.value]).toEqual([true, \"version1\"]);\n    expect(\n      (result = (\n        await store.set([\n          { ...key, value: \"version2\", version: result.current!.version },\n        ])\n      )[0])?.status\n    ).toBe(VariableSetStatus.Success);\n    expect(result.current?.version).toBeDefined();\n    expect(result.current?.version).not.toBe(firstVersion);\n\n    expect(\n      (result = (\n        await store.set([\n          { ...key, patch: (current) => ({ value: current?.value + \".1\" }) },\n        ])\n      )[0])?.status\n    ).toBe(VariableSetStatus.Success);\n\n    expect(result.current?.value).toBe(\"version2.1\");\n\n    expect(\n      (result = (\n        await store.set([\n          {\n            ...key,\n            patch: { type: \"ifMatch\", match: undefined, value: \"version3\" },\n          },\n        ])\n      )[0])?.status\n    ).toBe(VariableSetStatus.Unchanged);\n    expect(result.current?.value).toBe(\"version2.1\");\n\n    expect(\n      (result = (\n        await store.set([\n          {\n            ...key,\n            patch: { type: \"ifMatch\", match: \"version2.1\", value: \"version3\" },\n          },\n        ])\n      )[0])?.status\n    ).toBe(VariableSetStatus.Success);\n    expect(result.current?.value).toBe(\"version3\");\n\n    const currentVersion = result.current?.version;\n    expect(\n      (await store.get([{ ...key, version: currentVersion }]))[0].unchanged\n    ).toBe(true);\n    expect(\n      (await store.get([{ ...key, version: currentVersion + \"not\" }]))[0]\n        .unchanged\n    ).not.toBe(true);\n  });\n\n  it(\"InMemoryStore handles queries.\", async () => {\n    const target: VariableHeader<false> = {\n      scope: \"session\",\n      targetId: \"s\",\n      classification: \"anonymous\",\n      key: \"\",\n    };\n    const store = new InMemoryStorage() as VariableStorage;\n    await store.set([\n      { ...target, key: \"key1\", value: \"value1\" },\n      {\n        ...target,\n        key: \"key2\",\n        value: \"value2\",\n        purposes: [\"infrastructure\"],\n        tags: [\"tag1\"],\n      },\n      {\n        ...target,\n        key: \"key3\",\n        value: \"value3\",\n        classification: \"direct\",\n        tags: [\"tag1\", \"tag2\"],\n      },\n    ]);\n\n    let results = await store.query([{ keys: [\"key1\"] }]);\n    expect(results.count).toBeUndefined();\n    expect(results.results[0].value).toBe(\"value1\");\n    results = await store.query([{ keys: [\"key1\"] }], { count: true });\n    expect(results.count).toBe(1);\n\n    results = await store.query([{ keys: [\"*\"] }], { count: true });\n    expect(results.results.map((result) => [result.key, result.value])).toEqual(\n      [\n        [\"key1\", \"value1\"],\n        [\"key2\", \"value2\"],\n        [\"key3\", \"value3\"],\n      ]\n    );\n    expect(results.count).toBe(3);\n\n    const query = async (filters: VariableFilter[]) =>\n      (await store.query(filters)).results.map((result) => result.key);\n\n    expect(\n      await query([{ keys: [\"*\"], classification: { max: \"anonymous\" } }])\n    ).toEqual([\"key1\", \"key2\"]);\n\n    expect(\n      await query([{ keys: [\"*\"], classification: { min: \"indirect\" } }])\n    ).toEqual([\"key3\"]);\n\n    expect(\n      await query([{ keys: [\"*\"], classification: { min: \"direct\" } }])\n    ).toEqual([\"key3\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          classification: { levels: [\"anonymous\", \"indirect\"] },\n        },\n      ])\n    ).toEqual([\"key1\", \"key2\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          purposes: \"infrastructure\",\n        },\n      ])\n    ).toEqual([\"key2\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag1\"]],\n        },\n      ])\n    ).toEqual([\"key2\", \"key3\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag1\", \"tag2\"]],\n        },\n      ])\n    ).toEqual([\"key3\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag1\"], [\"tag1\", \"tag2\"], [\"tag3\"]],\n        },\n      ])\n    ).toEqual([\"key2\", \"key3\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag3\"]],\n        },\n      ])\n    ).toEqual([]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag2\"]],\n        },\n        {\n          keys: [\"*\"],\n          purposes: \"infrastructure\",\n        },\n      ])\n    ).toEqual([\"key3\", \"key2\"]);\n\n    expect(\n      await query([\n        {\n          keys: [\"*\"],\n          tags: [[\"tag1\"]],\n          purposes: \"infrastructure\",\n        },\n      ])\n    ).toEqual([\"key2\"]);\n\n    await store.purge([{ keys: [\"*\"], classification: { min: \"indirect\" } }]);\n\n    expect(await query([{ keys: [\"*\"] }])).toEqual([\"key1\", \"key2\"]);\n  });\n});\n"]}