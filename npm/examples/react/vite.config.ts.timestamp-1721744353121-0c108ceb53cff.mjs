// ../../build/use-dist-packages.ts
import path from "path";
var __vite_injected_original_dirname = "C:\\Projects\\rlvedge\\github\\tailjs\\npm\\build";
var basePath = path.resolve(__vite_injected_original_dirname + "/../packages").replace(/\\/g, "/");
var mapModuleName = (name) => {
  if (name.match(/^@tailjs\//)) {
    const segments = name.split("/");
    name = basePath + "/" + segments.map((segment, i) => i === 1 ? segment + "/dist" : segment).join("/");
  }
  return name;
};

// vite.config.ts
import fs from "fs";
import path2 from "path";
import { defineConfig } from "file:///C:/Projects/rlvedge/github/tailjs/npm/node_modules/.pnpm/vite@5.3.4/node_modules/vite/dist/node/index.js";
import preact from "file:///C:/Projects/rlvedge/github/tailjs/npm/node_modules/.pnpm/@preact+preset-vite@2.9.0_obk4svxmn2v545pzkyui6roggu/node_modules/@preact/preset-vite/dist/esm/index.mjs";
var scanTailModules = (dir, relativePath) => {
  for (const child of fs.readdirSync(dir)) {
    const childPath = path2.join(dir, child);
    relativePath = child === "@tailjs" ? child : relativePath ? relativePath + "/" + child : void 0;
    if (fs.statSync(childPath).isDirectory()) {
      console.log("prutte");
      if (relativePath && fs.existsSync(path2.join(childPath, "package.json"))) {
      }
      scanTailModules(childPath, relativePath);
    }
  }
};
scanTailModules("node_modules");
var tailJsPlugin = {
  name: "tailjs",
  configureServer: (server) => {
    server.watcher.add("./node_modules/@tailjs/react/dist/dist/index.mjs");
    server.middlewares.use((req, res, next) => {
      next();
    });
  },
  resolveId(id, importer) {
    const mapped = mapModuleName(id);
    if (mapped !== id) {
      return this.resolve(mapped, importer);
    }
  }
};
var vite_config_default = defineConfig({
  plugins: [tailJsPlugin, preact()]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYnVpbGQvdXNlLWRpc3QtcGFja2FnZXMudHMiLCAidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxQcm9qZWN0c1xcXFxybHZlZGdlXFxcXGdpdGh1YlxcXFx0YWlsanNcXFxcbnBtXFxcXGJ1aWxkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxQcm9qZWN0c1xcXFxybHZlZGdlXFxcXGdpdGh1YlxcXFx0YWlsanNcXFxcbnBtXFxcXGJ1aWxkXFxcXHVzZS1kaXN0LXBhY2thZ2VzLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Qcm9qZWN0cy9ybHZlZGdlL2dpdGh1Yi90YWlsanMvbnBtL2J1aWxkL3VzZS1kaXN0LXBhY2thZ2VzLnRzXCI7aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuY29uc3QgYmFzZVBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lICsgXCIvLi4vcGFja2FnZXNcIikucmVwbGFjZSgvXFxcXC9nLCBcIi9cIik7XHJcblxyXG5leHBvcnQgY29uc3QgbWFwTW9kdWxlTmFtZSA9IChuYW1lOiBzdHJpbmcpID0+IHtcclxuICBpZiAobmFtZS5tYXRjaCgvXkB0YWlsanNcXC8vKSkge1xyXG4gICAgY29uc3Qgc2VnbWVudHMgPSBuYW1lLnNwbGl0KFwiL1wiKTtcclxuXHJcbiAgICBuYW1lID1cclxuICAgICAgYmFzZVBhdGggK1xyXG4gICAgICBcIi9cIiArXHJcbiAgICAgIHNlZ21lbnRzXHJcbiAgICAgICAgLm1hcCgoc2VnbWVudCwgaSkgPT4gKGkgPT09IDEgPyBzZWdtZW50ICsgXCIvZGlzdFwiIDogc2VnbWVudCkpXHJcbiAgICAgICAgLmpvaW4oXCIvXCIpO1xyXG4gIH1cclxuICByZXR1cm4gbmFtZTtcclxufTtcclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxQcm9qZWN0c1xcXFxybHZlZGdlXFxcXGdpdGh1YlxcXFx0YWlsanNcXFxcbnBtXFxcXGV4YW1wbGVzXFxcXHJlYWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxQcm9qZWN0c1xcXFxybHZlZGdlXFxcXGdpdGh1YlxcXFx0YWlsanNcXFxcbnBtXFxcXGV4YW1wbGVzXFxcXHJlYWN0XFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Qcm9qZWN0cy9ybHZlZGdlL2dpdGh1Yi90YWlsanMvbnBtL2V4YW1wbGVzL3JlYWN0L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgbWFwTW9kdWxlTmFtZSB9IGZyb20gXCIuLi8uLi9idWlsZC91c2UtZGlzdC1wYWNrYWdlc1wiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBQbHVnaW4gfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHByZWFjdCBmcm9tIFwiQHByZWFjdC9wcmVzZXQtdml0ZVwiO1xuXG5jb25zdCBtYXBwZWRNb2R1bGVQYXRoczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG5jb25zdCBzY2FuVGFpbE1vZHVsZXMgPSAoZGlyOiBzdHJpbmcsIHJlbGF0aXZlUGF0aD86IHN0cmluZykgPT4ge1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGZzLnJlYWRkaXJTeW5jKGRpcikpIHtcbiAgICBjb25zdCBjaGlsZFBhdGggPSBwYXRoLmpvaW4oZGlyLCBjaGlsZCk7XG4gICAgcmVsYXRpdmVQYXRoID1cbiAgICAgIGNoaWxkID09PSBcIkB0YWlsanNcIlxuICAgICAgICA/IGNoaWxkXG4gICAgICAgIDogcmVsYXRpdmVQYXRoXG4gICAgICAgID8gcmVsYXRpdmVQYXRoICsgXCIvXCIgKyBjaGlsZFxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZnMuc3RhdFN5bmMoY2hpbGRQYXRoKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInBydXR0ZVwiKTtcbiAgICAgIGlmIChyZWxhdGl2ZVBhdGggJiYgZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4oY2hpbGRQYXRoLCBcInBhY2thZ2UuanNvblwiKSkpIHtcbiAgICAgIH1cbiAgICAgIHNjYW5UYWlsTW9kdWxlcyhjaGlsZFBhdGgsIHJlbGF0aXZlUGF0aCk7XG4gICAgfVxuICB9XG59O1xuXG5zY2FuVGFpbE1vZHVsZXMoXCJub2RlX21vZHVsZXNcIik7XG5cbmNvbnN0IHRhaWxKc1BsdWdpbjogUGx1Z2luID0ge1xuICBuYW1lOiBcInRhaWxqc1wiLFxuICBjb25maWd1cmVTZXJ2ZXI6IChzZXJ2ZXIpID0+IHtcbiAgICBzZXJ2ZXIud2F0Y2hlci5hZGQoXCIuL25vZGVfbW9kdWxlcy9AdGFpbGpzL3JlYWN0L2Rpc3QvZGlzdC9pbmRleC5tanNcIik7XG4gICAgc2VydmVyLm1pZGRsZXdhcmVzLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSxcblxuICByZXNvbHZlSWQoaWQsIGltcG9ydGVyKSB7XG4gICAgLy8gaWYgKGlkID09PSBcInJlYWN0XCIpIHtcbiAgICAvLyAgIHRocm93IFwiRmlzc29cIjtcbiAgICAvLyAgIHJldHVybiB0aGlzLnJlc29sdmUoXCJwcmVhY3QvY29tcGF0XCIsIGltcG9ydGVyKTtcbiAgICAvLyB9XG4gICAgY29uc3QgbWFwcGVkID0gbWFwTW9kdWxlTmFtZShpZCk7XG4gICAgaWYgKG1hcHBlZCAhPT0gaWQpIHtcbiAgICAgIC8vY29uc29sZS5sb2cobWFwcGVkKTtcbiAgICAgIHJldHVybiB0aGlzLnJlc29sdmUobWFwcGVkLCBpbXBvcnRlcik7XG4gICAgfVxuICB9LFxufTtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFt0YWlsSnNQbHVnaW4sIHByZWFjdCgpXSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE2VSxPQUFPLFVBQVU7QUFBOVYsSUFBTSxtQ0FBbUM7QUFDekMsSUFBTSxXQUFXLEtBQUssUUFBUSxtQ0FBWSxjQUFjLEVBQUUsUUFBUSxPQUFPLEdBQUc7QUFFckUsSUFBTSxnQkFBZ0IsQ0FBQyxTQUFpQjtBQUM3QyxNQUFJLEtBQUssTUFBTSxZQUFZLEdBQUc7QUFDNUIsVUFBTSxXQUFXLEtBQUssTUFBTSxHQUFHO0FBRS9CLFdBQ0UsV0FDQSxNQUNBLFNBQ0csSUFBSSxDQUFDLFNBQVMsTUFBTyxNQUFNLElBQUksVUFBVSxVQUFVLE9BQVEsRUFDM0QsS0FBSyxHQUFHO0FBQUEsRUFDZjtBQUNBLFNBQU87QUFDVDs7O0FDZEEsT0FBTyxRQUFRO0FBQ2YsT0FBT0EsV0FBVTtBQUVqQixTQUFTLG9CQUE0QjtBQUNyQyxPQUFPLFlBQVk7QUFJbkIsSUFBTSxrQkFBa0IsQ0FBQyxLQUFhLGlCQUEwQjtBQUM5RCxhQUFXLFNBQVMsR0FBRyxZQUFZLEdBQUcsR0FBRztBQUN2QyxVQUFNLFlBQVlDLE1BQUssS0FBSyxLQUFLLEtBQUs7QUFDdEMsbUJBQ0UsVUFBVSxZQUNOLFFBQ0EsZUFDQSxlQUFlLE1BQU0sUUFDckI7QUFDTixRQUFJLEdBQUcsU0FBUyxTQUFTLEVBQUUsWUFBWSxHQUFHO0FBQ3hDLGNBQVEsSUFBSSxRQUFRO0FBQ3BCLFVBQUksZ0JBQWdCLEdBQUcsV0FBV0EsTUFBSyxLQUFLLFdBQVcsY0FBYyxDQUFDLEdBQUc7QUFBQSxNQUN6RTtBQUNBLHNCQUFnQixXQUFXLFlBQVk7QUFBQSxJQUN6QztBQUFBLEVBQ0Y7QUFDRjtBQUVBLGdCQUFnQixjQUFjO0FBRTlCLElBQU0sZUFBdUI7QUFBQSxFQUMzQixNQUFNO0FBQUEsRUFDTixpQkFBaUIsQ0FBQyxXQUFXO0FBQzNCLFdBQU8sUUFBUSxJQUFJLGtEQUFrRDtBQUNyRSxXQUFPLFlBQVksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTO0FBQ3pDLFdBQUs7QUFBQSxJQUNQLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxVQUFVLElBQUksVUFBVTtBQUt0QixVQUFNLFNBQVMsY0FBYyxFQUFFO0FBQy9CLFFBQUksV0FBVyxJQUFJO0FBRWpCLGFBQU8sS0FBSyxRQUFRLFFBQVEsUUFBUTtBQUFBLElBQ3RDO0FBQUEsRUFDRjtBQUNGO0FBR0EsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUyxDQUFDLGNBQWMsT0FBTyxDQUFDO0FBQ2xDLENBQUM7IiwKICAibmFtZXMiOiBbInBhdGgiLCAicGF0aCJdCn0K
